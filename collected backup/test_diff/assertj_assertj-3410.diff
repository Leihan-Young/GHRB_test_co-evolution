diff --git a/assertj-core/src/test/java/org/assertj/core/internal/StandardComparisonStrategy_areEqual_Test.java b/assertj-core/src/test/java/org/assertj/core/internal/StandardComparisonStrategy_areEqual_Test.java
index 1c9fa170a..ad87bd1c0 100644
--- a/assertj-core/src/test/java/org/assertj/core/internal/StandardComparisonStrategy_areEqual_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/internal/StandardComparisonStrategy_areEqual_Test.java
@@ -16,6 +16,9 @@ import static org.assertj.core.api.Assertions.catchThrowable;
 import static org.assertj.core.api.BDDAssertions.then;
 import static org.junit.jupiter.params.provider.Arguments.arguments;
 
+import java.sql.Timestamp;
+import java.time.Instant;
+import java.util.Date;
 import java.util.stream.Stream;
 
 import org.junit.jupiter.api.Test;
@@ -255,6 +258,29 @@ class StandardComparisonStrategy_areEqual_Test {
     then(result).isFalse();
   }
 
+  @Test
+  void should_return_true_if_date_are_equal() {
+    // GIVEN
+    Instant now = Instant.now();
+    Date actual = Date.from(now);
+    Timestamp other = Timestamp.from(now);
+    // WHEN
+    boolean result = underTest.areEqual(actual, other);
+    // THEN
+    then(result).isTrue();
+  }
+
+  @Test
+  void should_return_false_if_date_are_not_equal() {
+    // GIVEN
+    Date actual = Date.from(Instant.parse("2024-03-30T00:00:00.00Z"));
+    Timestamp other = Timestamp.from(Instant.parse("2024-04-01T00:00:00.00Z"));
+    // WHEN
+    boolean result = underTest.areEqual(actual, other);
+    // THEN
+    then(result).isFalse();
+  }
+
   private static Stream<Object> arrays() {
     return Stream.of(argument(new Object[] { "Luke", "Yoda", "Leia" }),
                      new byte[] { 1, 2, 3 },
