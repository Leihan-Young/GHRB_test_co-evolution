diff --git a/common/src/test/java/org/apache/rocketmq/common/MixAllTest.java b/common/src/test/java/org/apache/rocketmq/common/MixAllTest.java
index efb42085f..5b358ca8e 100644
--- a/common/src/test/java/org/apache/rocketmq/common/MixAllTest.java
+++ b/common/src/test/java/org/apache/rocketmq/common/MixAllTest.java
@@ -74,12 +74,6 @@ public class MixAllTest {
         assertThat(MixAll.file2String(fileName)).isEqualTo("MixAll_testString2File");
     }
 
-    @Test
-    public void testGetLocalhostByNetworkInterface() throws Exception {
-        assertThat(MixAll.LOCALHOST).isNotNull();
-        assertThat(MixAll.getLocalhostByNetworkInterface()).isNotNull();
-    }
-
     @Test
     public void testIsLmq() {
         String testLmq = null;
diff --git a/common/src/test/java/org/apache/rocketmq/common/NetworkUtilTest.java b/common/src/test/java/org/apache/rocketmq/common/NetworkUtilTest.java
index aa4d355f8..a1b225323 100644
--- a/common/src/test/java/org/apache/rocketmq/common/NetworkUtilTest.java
+++ b/common/src/test/java/org/apache/rocketmq/common/NetworkUtilTest.java
@@ -16,7 +16,6 @@
  */
 package org.apache.rocketmq.common;
 
-import java.net.InetAddress;
 import org.apache.rocketmq.common.utils.NetworkUtil;
 import org.junit.Test;
 
@@ -28,7 +27,6 @@ public class NetworkUtilTest {
         String localAddress = NetworkUtil.getLocalAddress();
         assertThat(localAddress).isNotNull();
         assertThat(localAddress.length()).isGreaterThan(0);
-        assertThat(localAddress).isNotEqualTo(InetAddress.getLoopbackAddress().getHostAddress());
     }
 
     @Test
diff --git a/common/src/test/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtilsTest.java b/common/src/test/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtilsTest.java
index fa97ddb1c..778c6f25d 100644
--- a/common/src/test/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtilsTest.java
+++ b/common/src/test/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtilsTest.java
@@ -26,7 +26,6 @@ public class ConcurrentHashMapUtilsTest {
 
     @Test
     public void computeIfAbsent() {
-
         ConcurrentHashMap<String, String> map = new ConcurrentHashMap<>();
         map.put("123", "1111");
         String value = ConcurrentHashMapUtils.computeIfAbsent(map, "123", k -> "234");
@@ -35,7 +34,5 @@ public class ConcurrentHashMapUtilsTest {
         assertEquals("2342", value1);
         String value2 = ConcurrentHashMapUtils.computeIfAbsent(map, "123", k -> "2342");
         assertEquals("1111", value2);
-//        map.computeIfAbsent("AaAa", key->map.computeIfAbsent("BBBB",key2->"42"));
-        ConcurrentHashMapUtils.computeIfAbsent(map, "AaAa", key -> map.computeIfAbsent("BBBB", key2 -> "42"));
     }
 }
\ No newline at end of file
