diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
index 7db2cd577..a992a47da 100644
--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java
@@ -269,6 +269,7 @@ public class PopReviveService extends ServiceThread {
 
     protected void consumeReviveMessage(ConsumeReviveObj consumeReviveObj) {
         HashMap<String, PopCheckPoint> map = consumeReviveObj.map;
+        HashMap<String, PopCheckPoint> mockPointMap = new HashMap<>();
         long startScanTime = System.currentTimeMillis();
         long endTime = 0;
         long oldOffset = this.brokerController.getConsumerOffsetManager().queryOffset(PopAckConstants.REVIVE_GROUP, reviveTopic, queueId);
@@ -338,15 +339,32 @@ public class PopReviveService extends ServiceThread {
                         POP_LOGGER.info("reviveQueueId={},find ack, offset:{}, raw : {}", messageExt.getQueueId(), messageExt.getQueueOffset(), raw);
                     }
                     AckMsg ackMsg = JSON.parseObject(raw, AckMsg.class);
-                    PopCheckPoint point = map.get(ackMsg.getTopic() + ackMsg.getConsumerGroup() + ackMsg.getQueueId() + ackMsg.getStartOffset() + ackMsg.getPopTime());
+                    String mergeKey = ackMsg.getTopic() + ackMsg.getConsumerGroup() + ackMsg.getQueueId() + ackMsg.getStartOffset() + ackMsg.getPopTime();
+                    PopCheckPoint point = map.get(mergeKey);
                     if (point == null) {
-                        continue;
-                    }
-                    int indexOfAck = point.indexOfAck(ackMsg.getAckOffset());
-                    if (indexOfAck > -1) {
-                        point.setBitMap(DataConverter.setBit(point.getBitMap(), indexOfAck, true));
+                        if (!brokerController.getBrokerConfig().isEnableSkipLongAwaitingAck()) {
+                            continue;
+                        }
+                        long ackWaitTime = System.currentTimeMillis() - messageExt.getDeliverTimeMs();
+                        long reviveAckWaitMs = brokerController.getBrokerConfig().getReviveAckWaitMs();
+                        if (ackWaitTime > reviveAckWaitMs) {
+                            // will use the reviveOffset of popCheckPoint to commit offset in mergeAndRevive
+                            PopCheckPoint mockPoint = createMockCkForAck(ackMsg, messageExt.getQueueOffset());
+                            POP_LOGGER.warn(
+                                "ack wait for {}ms cannot find ck, skip this ack. mergeKey:{}, ack:{}, mockCk:{}",
+                                reviveAckWaitMs, mergeKey, ackMsg, mockPoint);
+                            mockPointMap.put(mergeKey, mockPoint);
+                            if (firstRt == 0) {
+                                firstRt = mockPoint.getReviveTime();
+                            }
+                        }
                     } else {
-                        POP_LOGGER.error("invalid ack index, {}, {}", ackMsg, point);
+                        int indexOfAck = point.indexOfAck(ackMsg.getAckOffset());
+                        if (indexOfAck > -1) {
+                            point.setBitMap(DataConverter.setBit(point.getBitMap(), indexOfAck, true));
+                        } else {
+                            POP_LOGGER.error("invalid ack index, {}, {}", ackMsg, point);
+                        }
                     }
                 }
                 long deliverTime = messageExt.getDeliverTimeMs();
@@ -356,9 +374,24 @@ public class PopReviveService extends ServiceThread {
             }
             offset = offset + messageExts.size();
         }
+        consumeReviveObj.map.putAll(mockPointMap);
         consumeReviveObj.endTime = endTime;
     }
 
+    private PopCheckPoint createMockCkForAck(AckMsg ackMsg, long reviveOffset) {
+        PopCheckPoint point = new PopCheckPoint();
+        point.setStartOffset(ackMsg.getStartOffset());
+        point.setPopTime(ackMsg.getPopTime());
+        point.setQueueId((byte) ackMsg.getQueueId());
+        point.setCId(ackMsg.getConsumerGroup());
+        point.setTopic(ackMsg.getTopic());
+        point.setNum((byte) 0);
+        point.setBitMap(0);
+        point.setReviveOffset(reviveOffset);
+        point.setBrokerName(ackMsg.getBrokerName());
+        return point;
+    }
+
     protected void mergeAndRevive(ConsumeReviveObj consumeReviveObj) throws Throwable {
         ArrayList<PopCheckPoint> sortList = consumeReviveObj.genSortList();
         POP_LOGGER.info("reviveQueueId={},ck listSize={}", queueId, sortList.size());
diff --git a/common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java b/common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
index fd4152c79..1a61f11c0 100644
--- a/common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
+++ b/common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.common;
 
+import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.common.annotation.ImportantField;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.common.constant.PermName;
@@ -216,6 +217,8 @@ public class BrokerConfig extends BrokerIdentity {
     private long reviveInterval = 1000;
     private long reviveMaxSlow = 3;
     private long reviveScanTime = 10000;
+    private boolean enableSkipLongAwaitingAck = false;
+    private long reviveAckWaitMs = TimeUnit.MINUTES.toMillis(3);
     private boolean enablePopLog = false;
     private boolean enablePopBufferMerge = false;
     private int popCkStayBufferTime = 10 * 1000;
@@ -482,6 +485,22 @@ public class BrokerConfig extends BrokerIdentity {
         this.popCkOffsetMaxQueueSize = popCkOffsetMaxQueueSize;
     }
 
+    public boolean isEnableSkipLongAwaitingAck() {
+        return enableSkipLongAwaitingAck;
+    }
+
+    public void setEnableSkipLongAwaitingAck(boolean enableSkipLongAwaitingAck) {
+        this.enableSkipLongAwaitingAck = enableSkipLongAwaitingAck;
+    }
+
+    public long getReviveAckWaitMs() {
+        return reviveAckWaitMs;
+    }
+
+    public void setReviveAckWaitMs(long reviveAckWaitMs) {
+        this.reviveAckWaitMs = reviveAckWaitMs;
+    }
+
     public boolean isEnablePopLog() {
         return enablePopLog;
     }
