diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyContext.java b/proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyContext.java
index 77a6791f0..3e602d5ad 100644
--- a/proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyContext.java
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/common/ProxyContext.java
@@ -18,117 +18,118 @@
 package org.apache.rocketmq.proxy.common;
 
 import io.netty.channel.Channel;
-import java.util.HashMap;
-import java.util.Map;
+import org.apache.rocketmq.proxy.common.context.ContextNode;
+import org.apache.rocketmq.proxy.common.context.ContextVariable;
 
 public class ProxyContext {
     public static final String INNER_ACTION_PREFIX = "Inner";
-    private final Map<String, Object> value = new HashMap<>();
+    private final ContextNode contextNode;
+
+    ProxyContext() {
+        this.contextNode = new ContextNode();
+    }
+
+    ProxyContext(ContextNode parent) {
+        this.contextNode = parent;
+    }
+
+    ProxyContext(ProxyContext that) {
+        this.contextNode = that.contextNode;
+    }
 
     public static ProxyContext create() {
         return new ProxyContext();
     }
 
     public static ProxyContext createForInner(String actionName) {
-        return create().setAction(INNER_ACTION_PREFIX + actionName);
+        return create().withAction(INNER_ACTION_PREFIX + actionName);
     }
 
     public static ProxyContext createForInner(Class<?> clazz) {
         return createForInner(clazz.getSimpleName());
     }
 
-    public Map<String, Object> getValue() {
-        return this.value;
+    public ProxyContext withValue(String key, Object val) {
+        return new ProxyContext(contextNode.withValue(key, val));
     }
 
-    public ProxyContext withVal(String key, Object val) {
-        this.value.put(key, val);
-        return this;
+    public <T> T getValue(String key) {
+        return (T) contextNode.getValue(key);
     }
 
-    public <T> T getVal(String key) {
-        return (T) this.value.get(key);
+    public <T> T getValue(String key, Class<T> classType) {
+        return (T) contextNode.getValue(key, classType);
     }
 
-    public ProxyContext setLocalAddress(String localAddress) {
-        this.withVal(ContextVariable.LOCAL_ADDRESS, localAddress);
-        return this;
+    public ProxyContext withLocalAddress(String localAddress) {
+        return this.withValue(ContextVariable.LOCAL_ADDRESS, localAddress);
     }
 
     public String getLocalAddress() {
-        return this.getVal(ContextVariable.LOCAL_ADDRESS);
+        return contextNode.getValue(ContextVariable.LOCAL_ADDRESS, String.class);
     }
 
-    public ProxyContext setRemoteAddress(String remoteAddress) {
-        this.withVal(ContextVariable.REMOTE_ADDRESS, remoteAddress);
-        return this;
+    public ProxyContext withRemoteAddress(String remoteAddress) {
+        return this.withValue(ContextVariable.REMOTE_ADDRESS, remoteAddress);
     }
 
     public String getRemoteAddress() {
-        return this.getVal(ContextVariable.REMOTE_ADDRESS);
+        return contextNode.getValue(ContextVariable.REMOTE_ADDRESS, String.class);
     }
 
-    public ProxyContext setClientID(String clientID) {
-        this.withVal(ContextVariable.CLIENT_ID, clientID);
-        return this;
+    public ProxyContext withClientID(String clientID) {
+        return this.withValue(ContextVariable.CLIENT_ID, clientID);
     }
 
     public String getClientID() {
-        return this.getVal(ContextVariable.CLIENT_ID);
+        return contextNode.getValue(ContextVariable.CLIENT_ID, String.class);
     }
 
-    public ProxyContext setChannel(Channel channel) {
-        this.withVal(ContextVariable.CHANNEL, channel);
-        return this;
+    public ProxyContext withChannel(Channel channel) {
+        return this.withValue(ContextVariable.CHANNEL, channel);
     }
 
     public Channel getChannel() {
-        return this.getVal(ContextVariable.CHANNEL);
+        return contextNode.getValue(ContextVariable.CHANNEL, Channel.class);
     }
 
-    public ProxyContext setLanguage(String language) {
-        this.withVal(ContextVariable.LANGUAGE, language);
-        return this;
+    public ProxyContext withLanguage(String language) {
+        return this.withValue(ContextVariable.LANGUAGE, language);
     }
 
     public String getLanguage() {
-        return this.getVal(ContextVariable.LANGUAGE);
+        return contextNode.getValue(ContextVariable.LANGUAGE, String.class);
     }
 
-    public ProxyContext setClientVersion(String clientVersion) {
-        this.withVal(ContextVariable.CLIENT_VERSION, clientVersion);
-        return this;
+    public ProxyContext withClientVersion(String clientVersion) {
+        return this.withValue(ContextVariable.CLIENT_VERSION, clientVersion);
     }
 
     public String getClientVersion() {
-        return this.getVal(ContextVariable.CLIENT_VERSION);
+        return contextNode.getValue(ContextVariable.CLIENT_VERSION, String.class);
     }
 
-    public ProxyContext setRemainingMs(Long remainingMs) {
-        this.withVal(ContextVariable.REMAINING_MS, remainingMs);
-        return this;
+    public ProxyContext withRemainingMs(Long remainingMs) {
+        return this.withValue(ContextVariable.REMAINING_MS, remainingMs);
     }
 
     public Long getRemainingMs() {
-        return this.getVal(ContextVariable.REMAINING_MS);
+        return contextNode.getValue(ContextVariable.REMAINING_MS, Long.class);
     }
 
-    public ProxyContext setAction(String action) {
-        this.withVal(ContextVariable.ACTION, action);
-        return this;
+    public ProxyContext withAction(String action) {
+        return this.withValue(ContextVariable.ACTION, action);
     }
 
     public String getAction() {
-        return this.getVal(ContextVariable.ACTION);
+        return contextNode.getValue(ContextVariable.ACTION, String.class);
     }
 
-    public ProxyContext setProtocolType(String protocol) {
-        this.withVal(ContextVariable.PROTOCOL_TYPE, protocol);
-        return this;
+    public ProxyContext withProtocolType(String protocol) {
+        return this.withValue(ContextVariable.PROTOCOL_TYPE, protocol);
     }
 
     public String getProtocolType() {
-        return this.getVal(ContextVariable.PROTOCOL_TYPE);
+        return contextNode.getValue(ContextVariable.PROTOCOL_TYPE, String.class);
     }
-
 }
diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/common/context/ContextNode.java b/proxy/src/main/java/org/apache/rocketmq/proxy/common/context/ContextNode.java
new file mode 100644
index 000000000..7b418516b
--- /dev/null
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/common/context/ContextNode.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.rocketmq.proxy.common.context;
+
+public class ContextNode {
+    private final String key;
+    private final Object value;
+    private final ContextNode parent;
+
+    public ContextNode() {
+        this(null, null, null);
+    }
+
+    public ContextNode(ContextNode parent, String key, Object value) {
+        this.parent = parent;
+        this.key = key;
+        this.value = value;
+    }
+
+    public ContextNode withValue(String key, Object value) {
+        return new ContextNode(this, key, value);
+    }
+
+    public Object getValue(String key) {
+        for (ContextNode current = this; current != null; current = current.parent) {
+            if (key.equals(current.key)) {
+                return current.value;
+            }
+        }
+        return null;
+    }
+
+    public <T> T getValue(String key, Class<T> classType) {
+        Object value = getValue(key);
+        if (classType.isInstance(value)) {
+            return classType.cast(value);
+        }
+        return null;
+    }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java b/proxy/src/main/java/org/apache/rocketmq/proxy/common/context/ContextVariable.java
similarity index 96%
rename from proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
rename to proxy/src/main/java/org/apache/rocketmq/proxy/common/context/ContextVariable.java
index 0760826de..727f4c9bb 100644
--- a/proxy/src/main/java/org/apache/rocketmq/proxy/common/ContextVariable.java
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/common/context/ContextVariable.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.proxy.common;
+package org.apache.rocketmq.proxy.common.context;
 
 public class ContextVariable {
     public static final String REMOTE_ADDRESS = "remote-address";
diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java b/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
index 2cb395ad6..3cd664ec5 100644
--- a/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java
@@ -169,15 +169,15 @@ public class GrpcMessagingApplication extends MessagingServiceGrpc.MessagingServ
         Context ctx = Context.current();
         Metadata headers = InterceptorConstants.METADATA.get(ctx);
         ProxyContext context = ProxyContext.create()
-            .setLocalAddress(getDefaultStringMetadataInfo(headers, InterceptorConstants.LOCAL_ADDRESS))
-            .setRemoteAddress(getDefaultStringMetadataInfo(headers, InterceptorConstants.REMOTE_ADDRESS))
-            .setClientID(getDefaultStringMetadataInfo(headers, InterceptorConstants.CLIENT_ID))
-            .setProtocolType(ChannelProtocolType.GRPC_V2.getName())
-            .setLanguage(getDefaultStringMetadataInfo(headers, InterceptorConstants.LANGUAGE))
-            .setClientVersion(getDefaultStringMetadataInfo(headers, InterceptorConstants.CLIENT_VERSION))
-            .setAction(getDefaultStringMetadataInfo(headers, InterceptorConstants.SIMPLE_RPC_NAME));
+            .withLocalAddress(getDefaultStringMetadataInfo(headers, InterceptorConstants.LOCAL_ADDRESS))
+            .withRemoteAddress(getDefaultStringMetadataInfo(headers, InterceptorConstants.REMOTE_ADDRESS))
+            .withClientID(getDefaultStringMetadataInfo(headers, InterceptorConstants.CLIENT_ID))
+            .withProtocolType(ChannelProtocolType.GRPC_V2.getName())
+            .withLanguage(getDefaultStringMetadataInfo(headers, InterceptorConstants.LANGUAGE))
+            .withClientVersion(getDefaultStringMetadataInfo(headers, InterceptorConstants.CLIENT_VERSION))
+            .withAction(getDefaultStringMetadataInfo(headers, InterceptorConstants.SIMPLE_RPC_NAME));
         if (ctx.getDeadline() != null) {
-            context.setRemainingMs(ctx.getDeadline().timeRemaining(TimeUnit.MILLISECONDS));
+            context = context.withRemainingMs(ctx.getDeadline().timeRemaining(TimeUnit.MILLISECONDS));
         }
         return context;
     }
diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java b/proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
index 5e1be9321..71ebfe8af 100644
--- a/proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java
@@ -37,7 +37,7 @@ public class ReceiptHandleProcessor extends AbstractProcessor {
         super(messagingProcessor, serviceManager);
         StateEventListener<RenewEvent> eventListener = event -> {
             ProxyContext context = createContext(event.getEventType().name())
-                .setChannel(event.getKey().getChannel());
+                .withChannel(event.getKey().getChannel());
             MessageReceiptHandle messageReceiptHandle = event.getMessageReceiptHandle();
             ReceiptHandle handle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());
             messagingProcessor.changeInvisibleTime(context, handle, messageReceiptHandle.getMessageId(),
diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/AbstractRemotingActivity.java b/proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/AbstractRemotingActivity.java
index ce4a63397..73779eaaf 100644
--- a/proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/AbstractRemotingActivity.java
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/AbstractRemotingActivity.java
@@ -19,6 +19,8 @@ package org.apache.rocketmq.proxy.remoting.activity;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
+import java.util.HashMap;
+import java.util.Map;
 import org.apache.rocketmq.acl.common.AclException;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
@@ -40,14 +42,11 @@ import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.netty.AttributeKeys;
 import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
+import org.apache.rocketmq.remoting.protocol.LanguageCode;
 import org.apache.rocketmq.remoting.protocol.RemotingCommand;
 import org.apache.rocketmq.remoting.protocol.RequestCode;
 import org.apache.rocketmq.remoting.protocol.ResponseCode;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Optional;
-
 public abstract class AbstractRemotingActivity implements NettyRequestProcessor {
     protected final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
     protected final MessagingProcessor messagingProcessor;
@@ -124,18 +123,23 @@ public abstract class AbstractRemotingActivity implements NettyRequestProcessor
     protected ProxyContext createContext(ChannelHandlerContext ctx, RemotingCommand request) {
         ProxyContext context = ProxyContext.create();
         Channel channel = ctx.channel();
-        context.setAction(RemotingHelper.getRequestCodeDesc(request.getCode()))
-            .setProtocolType(ChannelProtocolType.REMOTING.getName())
-            .setChannel(channel)
-            .setLocalAddress(NetworkUtil.socketAddress2String(ctx.channel().localAddress()))
-            .setRemoteAddress(RemotingHelper.parseChannelRemoteAddr(ctx.channel()));
-
-        Optional.ofNullable(RemotingHelper.getAttributeValue(AttributeKeys.LANGUAGE_CODE_KEY, channel))
-            .ifPresent(language -> context.setLanguage(language.name()));
-        Optional.ofNullable(RemotingHelper.getAttributeValue(AttributeKeys.CLIENT_ID_KEY, channel))
-            .ifPresent(context::setClientID);
-        Optional.ofNullable(RemotingHelper.getAttributeValue(AttributeKeys.VERSION_KEY, channel))
-            .ifPresent(version -> context.setClientVersion(MQVersion.getVersionDesc(version)));
+        LanguageCode languageCode = RemotingHelper.getAttributeValue(AttributeKeys.LANGUAGE_CODE_KEY, channel);
+        String clientId = RemotingHelper.getAttributeValue(AttributeKeys.CLIENT_ID_KEY, channel);
+        Integer version = RemotingHelper.getAttributeValue(AttributeKeys.VERSION_KEY, channel);
+        context = context.withAction(RemotingHelper.getRequestCodeDesc(request.getCode()))
+            .withProtocolType(ChannelProtocolType.REMOTING.getName())
+            .withChannel(channel)
+            .withLocalAddress(NetworkUtil.socketAddress2String(ctx.channel().localAddress()))
+            .withRemoteAddress(RemotingHelper.parseChannelRemoteAddr(ctx.channel()));
+        if (languageCode != null) {
+            context = context.withLanguage(languageCode.name());
+        }
+        if (clientId != null) {
+            context = context.withClientID(clientId);
+        }
+        if (version != null) {
+            context = context.withClientVersion(MQVersion.getVersionDesc(version));
+        }
 
         return context;
     }
diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java b/proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java
index 5a1185a81..277b8f158 100644
--- a/proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java
@@ -77,8 +77,8 @@ public abstract class ProxyChannel extends SimpleChannel {
         try {
             if (msg instanceof RemotingCommand) {
                 ProxyContext context = ProxyContext.createForInner(this.getClass())
-                    .setRemoteAddress(remoteAddress)
-                    .setLocalAddress(localAddress);
+                    .withRemoteAddress(remoteAddress)
+                    .withLocalAddress(localAddress);
                 RemotingCommand command = (RemotingCommand) msg;
                 if (command.getExtFields() == null) {
                     command.setExtFields(new HashMap<>());
