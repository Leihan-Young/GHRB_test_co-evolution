diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java
index 757992cf0..280394b2f 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java
@@ -48,6 +48,17 @@ public class AsDeductionTypeDeserializer extends AsPropertyTypeDeserializer
         subtypeFingerprints = buildFingerprints(config, subtypes);
     }
 
+    /**
+     * @since 2.15
+     */
+    public AsDeductionTypeDeserializer(JavaType bt, TypeIdResolver idRes, JavaType defaultImpl,
+            DeserializationConfig config, Collection<NamedType> subtypes, boolean hasTypeResolver)
+    {
+        super(bt, idRes, null, false, defaultImpl, null, hasTypeResolver);
+        fieldBitIndex = new HashMap<>();
+        subtypeFingerprints = buildFingerprints(config, subtypes);
+    }
+
     public AsDeductionTypeDeserializer(AsDeductionTypeDeserializer src, BeanProperty property) {
         super(src, property);
         fieldBitIndex = src.fieldBitIndex;
diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
index d354c64ff..cb2a46ccc 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
@@ -28,6 +28,13 @@ public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer
 
     protected final As _inclusion;
 
+    /**
+     * Indicates if the current class has a TypeResolver attached or not.
+     *
+     * @since 2.15
+     */
+    private boolean _hasTypeResolver;
+
     // @since 2.12.2 (see [databind#3055]
     protected final String _msgForMissingId = (_property == null)
             ? String.format("missing type id property '%s'", _typePropertyName)
@@ -56,6 +63,19 @@ public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer
     public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property) {
         super(src, property);
         _inclusion = src._inclusion;
+        _hasTypeResolver = src._hasTypeResolver;
+    }
+
+    /**
+     * @since 2.15
+     */
+    public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes,
+                                      String typePropertyName, boolean typeIdVisible, JavaType defaultImpl,
+                                      As inclusion, boolean hasTypeResolver)
+    {
+        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);
+        _inclusion = inclusion;
+        _hasTypeResolver = hasTypeResolver;
     }
 
     @Override
@@ -182,7 +202,9 @@ public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer
         // genuine, or faked for "dont fail on bad type id")
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser == null) {
-            JavaType t = _handleMissingTypeId(ctxt, priorFailureMsg);
+            JavaType t = _hasTypeResolver
+                ? _handleMissingTypeId(ctxt, priorFailureMsg) : _baseType;
+
             if (t == null) {
                 // 09-Mar-2017, tatu: Is this the right thing to do?
                 return null;
diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
index 964e8a5e2..480d91af4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
@@ -5,11 +5,14 @@ import java.util.Collection;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
 import com.fasterxml.jackson.databind.DeserializationConfig;
+import com.fasterxml.jackson.databind.AnnotationIntrospector;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.SerializationConfig;
 import com.fasterxml.jackson.databind.annotation.NoClass;
 import com.fasterxml.jackson.databind.cfg.MapperConfig;
+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
+import com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver;
 import com.fasterxml.jackson.databind.jsontype.*;
 import com.fasterxml.jackson.databind.util.ClassUtil;
 
@@ -162,7 +165,8 @@ public class StdTypeResolverBuilder
 
         if(_idType == JsonTypeInfo.Id.DEDUCTION) {
             // Deduction doesn't require an includeAs property
-            return new AsDeductionTypeDeserializer(baseType, idRes, defaultImpl, config, subtypes);
+            return new AsDeductionTypeDeserializer(baseType, idRes, defaultImpl, config, subtypes,
+                    _hasTypeResolver(config, baseType));
         }
 
         // First, method for converting type info to type id:
@@ -173,7 +177,8 @@ public class StdTypeResolverBuilder
         case PROPERTY:
         case EXISTING_PROPERTY: // as per [#528] same class as PROPERTY
             return new AsPropertyTypeDeserializer(baseType, idRes,
-                    _typeProperty, _typeIdVisible, defaultImpl, _includeAs);
+                    _typeProperty, _typeIdVisible, defaultImpl, _includeAs,
+                    _hasTypeResolver(config, baseType));
         case WRAPPER_OBJECT:
             return new AsWrapperTypeDeserializer(baseType, idRes,
                     _typeProperty, _typeIdVisible, defaultImpl);
@@ -398,4 +403,22 @@ public class StdTypeResolverBuilder
             JavaType baseType) {
         return false;
     }
+
+    /**
+     * Checks whether the given class has annotations indicating some type resolver
+     * is applied, for example {@link com.fasterxml.jackson.annotation.JsonSubTypes}.
+     * Only initializes {@link #_hasTypeResolver} once if its value is null.
+     *
+     * @param config the deserialization configuration to use
+     * @param baseType the base type to check for type resolver annotations
+     *
+     * @return true if the class has type resolver annotations, false otherwise
+     *
+     * @since 2.15
+     */
+    protected boolean _hasTypeResolver(DeserializationConfig config, JavaType baseType) {
+        AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,  baseType.getRawClass());
+        AnnotationIntrospector ai = config.getAnnotationIntrospector();
+        return ai.findTypeResolver(config, ac, baseType) != null;
+    }
 }
