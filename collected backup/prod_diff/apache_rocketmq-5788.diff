diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java b/proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
index 9c833ba8a..ef8d4ad30 100644
--- a/proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
@@ -121,7 +121,8 @@ public class ProxyConfig implements ConfigFile {
     private long grpcClientProducerBackoffInitialMillis = 10;
     private long grpcClientProducerBackoffMaxMillis = 1000;
     private int grpcClientProducerBackoffMultiplier = 2;
-    private long grpcClientConsumerLongPollingTimeoutMillis = Duration.ofSeconds(30).toMillis();
+    private long grpcClientConsumerMinLongPollingTimeoutMillis = Duration.ofSeconds(5).toMillis();
+    private long grpcClientConsumerMaxLongPollingTimeoutMillis = Duration.ofSeconds(20).toMillis();
     private int grpcClientConsumerLongPollingBatchSize = 32;
     private long grpcClientIdleTimeMills = Duration.ofSeconds(120).toMillis();
 
@@ -598,12 +599,20 @@ public class ProxyConfig implements ConfigFile {
         this.grpcClientProducerBackoffMultiplier = grpcClientProducerBackoffMultiplier;
     }
 
-    public long getGrpcClientConsumerLongPollingTimeoutMillis() {
-        return grpcClientConsumerLongPollingTimeoutMillis;
+    public long getGrpcClientConsumerMinLongPollingTimeoutMillis() {
+        return grpcClientConsumerMinLongPollingTimeoutMillis;
     }
 
-    public void setGrpcClientConsumerLongPollingTimeoutMillis(long grpcClientConsumerLongPollingTimeoutMillis) {
-        this.grpcClientConsumerLongPollingTimeoutMillis = grpcClientConsumerLongPollingTimeoutMillis;
+    public void setGrpcClientConsumerMinLongPollingTimeoutMillis(long grpcClientConsumerMinLongPollingTimeoutMillis) {
+        this.grpcClientConsumerMinLongPollingTimeoutMillis = grpcClientConsumerMinLongPollingTimeoutMillis;
+    }
+
+    public long getGrpcClientConsumerMaxLongPollingTimeoutMillis() {
+        return grpcClientConsumerMaxLongPollingTimeoutMillis;
+    }
+
+    public void setGrpcClientConsumerMaxLongPollingTimeoutMillis(long grpcClientConsumerMaxLongPollingTimeoutMillis) {
+        this.grpcClientConsumerMaxLongPollingTimeoutMillis = grpcClientConsumerMaxLongPollingTimeoutMillis;
     }
 
     public int getGrpcClientConsumerLongPollingBatchSize() {
diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java b/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
index b5b82fbdc..dcb619416 100644
--- a/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManager.java
@@ -143,7 +143,7 @@ public class GrpcClientSettingsManager extends ServiceThread implements StartAnd
 
         resultSettingsBuilder.getSubscriptionBuilder()
             .setReceiveBatchSize(config.getGrpcClientConsumerLongPollingBatchSize())
-            .setLongPollingTimeout(Durations.fromMillis(config.getGrpcClientConsumerLongPollingTimeoutMillis()))
+            .setLongPollingTimeout(Durations.fromMillis(config.getGrpcClientConsumerMaxLongPollingTimeoutMillis()))
             .setFifo(groupConfig.isConsumeMessageOrderly());
 
         resultSettingsBuilder.getBackoffPolicyBuilder().setMaxAttempts(groupConfig.getRetryMaxTimes() + 1);
diff --git a/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java b/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
index f653858de..31b841132 100644
--- a/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
+++ b/proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java
@@ -68,12 +68,27 @@ public class ReceiveMessageActivity extends AbstractMessingActivity {
             ProxyConfig config = ConfigurationManager.getProxyConfig();
 
             Long timeRemaining = ctx.getRemainingMs();
-            long pollTime = timeRemaining - Durations.toMillis(settings.getRequestTimeout()) / 2;
-            if (pollTime < 0) {
-                pollTime = 0;
+            long pollingTime;
+            if (request.hasLongPollingTimeout()) {
+                pollingTime = Durations.toMillis(request.getLongPollingTimeout());
+            } else {
+                pollingTime = timeRemaining - Durations.toMillis(settings.getRequestTimeout()) / 2;
+            }
+            if (pollingTime < config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {
+                pollingTime = config.getGrpcClientConsumerMinLongPollingTimeoutMillis();
+            }
+            if (pollingTime > config.getGrpcClientConsumerMaxLongPollingTimeoutMillis()) {
+                pollingTime = config.getGrpcClientConsumerMaxLongPollingTimeoutMillis();
             }
-            if (pollTime > config.getGrpcClientConsumerLongPollingTimeoutMillis()) {
-                pollTime = config.getGrpcClientConsumerLongPollingTimeoutMillis();
+
+            if (pollingTime > timeRemaining) {
+                if (timeRemaining >= config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {
+                    pollingTime = timeRemaining;
+                } else {
+                    writer.writeAndComplete(ctx, Code.ILLEGAL_POLLING_TIME, "The deadline time remaining is not enough" +
+                        " for polling, please check network condition");
+                    return;
+                }
             }
 
             validateTopicAndConsumerGroup(request.getMessageQueue().getTopic(), request.getGroup());
@@ -100,37 +115,37 @@ public class ReceiveMessageActivity extends AbstractMessingActivity {
             }
 
             this.messagingProcessor.popMessage(
-                ctx,
-                new ReceiveMessageQueueSelector(
-                    request.getMessageQueue().getBroker().getName()
-                ),
-                group,
-                topic,
-                request.getBatchSize(),
-                actualInvisibleTime,
-                pollTime,
-                ConsumeInitMode.MAX,
-                subscriptionData,
-                fifo,
-                new PopMessageResultFilterImpl(maxAttempts),
-                timeRemaining
-            ).thenAccept(popResult -> {
-                if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {
-                    if (PopStatus.FOUND.equals(popResult.getPopStatus())) {
-                        List<MessageExt> messageExtList = popResult.getMsgFoundList();
-                        for (MessageExt messageExt : messageExtList) {
-                            String receiptHandle = messageExt.getProperty(MessageConst.PROPERTY_POP_CK);
-                            if (receiptHandle != null) {
-                                MessageReceiptHandle messageReceiptHandle =
-                                    new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),
-                                        messageExt.getQueueOffset(), messageExt.getReconsumeTimes());
-                                receiptHandleProcessor.addReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), receiptHandle, messageReceiptHandle);
+                    ctx,
+                    new ReceiveMessageQueueSelector(
+                        request.getMessageQueue().getBroker().getName()
+                    ),
+                    group,
+                    topic,
+                    request.getBatchSize(),
+                    actualInvisibleTime,
+                    pollingTime,
+                    ConsumeInitMode.MAX,
+                    subscriptionData,
+                    fifo,
+                    new PopMessageResultFilterImpl(maxAttempts),
+                    timeRemaining
+                ).thenAccept(popResult -> {
+                    if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {
+                        if (PopStatus.FOUND.equals(popResult.getPopStatus())) {
+                            List<MessageExt> messageExtList = popResult.getMsgFoundList();
+                            for (MessageExt messageExt : messageExtList) {
+                                String receiptHandle = messageExt.getProperty(MessageConst.PROPERTY_POP_CK);
+                                if (receiptHandle != null) {
+                                    MessageReceiptHandle messageReceiptHandle =
+                                        new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),
+                                            messageExt.getQueueOffset(), messageExt.getReconsumeTimes());
+                                    receiptHandleProcessor.addReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), receiptHandle, messageReceiptHandle);
+                                }
                             }
                         }
                     }
-                }
-                writer.writeAndComplete(ctx, request, popResult);
-            })
+                    writer.writeAndComplete(ctx, request, popResult);
+                })
                 .exceptionally(t -> {
                     writer.writeAndComplete(ctx, request, t);
                     return null;
