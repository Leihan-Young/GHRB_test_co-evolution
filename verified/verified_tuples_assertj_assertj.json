{
  "1": {
    "commit_src": "5fc69d002aac2a97dbfedfdd6085638ff1fca3f5",
    "commit_tgt": "cf63f1d8cf511dc76cd5a80fa06837265b74872e",
    "changed_tests": [
      "src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_containsAnyOf_Test.java",
      "src/test/java/org/assertj/core/error/ShouldContainAnyOf_create_Test.java",
      "src/test/java/org/assertj/core/internal/Arrays_containsAnyOf_Test.java",
      "src/test/java/org/assertj/core/internal/iterables/Iterables_assertContainsAnyOf_Test.java",
      "src/test/java/org/assertj/core/internal/strings/Strings_assertContainsAnyOf_Test.java",
      "src/test/java/org/assertj/core/internal/strings/Strings_assertContains_Test.java"
    ],
    "refer_PR": "assertj_assertj-2309",
    "test_src": ".org.assertj.core.error.ShouldContainAnyOf_create_Test#should_create_error_message",
    "test_tgt": [
      ".org.assertj.core.error.ShouldContainAnyOf_create_Test#should_create_error_message"
    ],
    "test_src_code": "",
    "focal_path": "src/main/java/org/assertj/core/error/ShouldContainAnyOf.java#shouldContainAnyOf",
    "focal_src": "  public static ErrorMessageFactory shouldContainAnyOf(Object actual, Object expected) {\n    return shouldContainAnyOf(actual, expected, StandardComparisonStrategy.instance());\n  }\n",
    "focal_tgt": "  public static ErrorMessageFactory shouldContainAnyOf(Object actual, Object expected) {\n    return new ShouldContainAnyOf(actual, expected);\n  }\n",
    "test_id": 1
  },
  "2": {
    "commit_src": "8a7843e2d8621cae892c938996be6c294c3152ce",
    "commit_tgt": "ceff95a59349ad3d6c3b85844df32d8f93c41c69",
    "changed_tests": [
      "assertj-core/src/test/java/org/assertj/core/api/Assertions_catchThrowableOfType_Test.java",
      "assertj-core/src/test/java/org/assertj/core/api/EntryPointAssertions_catchThrowableOfType_Test.java"
    ],
    "refer_PR": "assertj_assertj-2823",
    "test_src": ".org.assertj.core.api.Assertions_catchThrowableOfType_Test#catchThrowableOfType_should_fail_with_good_message_if_wrong_type",
    "test_tgt": [
      ".org.assertj.core.api.Assertions_catchThrowableOfType_Test#catchThrowableOfType_should_fail_with_good_message_if_wrong_type"
    ],
    "test_src_code": "",
    "focal_path": "assertj-core/src/main/java/org/assertj/core/api/Assertions.java#catchThrowableOfType",
    "focal_src": "  public static <THROWABLE extends Throwable> THROWABLE catchThrowableOfType(ThrowingCallable shouldRaiseThrowable,\n                                                                             Class<THROWABLE> type) {\n    return AssertionsForClassTypes.catchThrowableOfType(shouldRaiseThrowable, type);\n  }\n",
    "focal_tgt": "  @Deprecated\n  public static <THROWABLE extends Throwable> THROWABLE catchThrowableOfType(ThrowingCallable shouldRaiseThrowable,\n                                                                             Class<THROWABLE> type) {\n    return AssertionsForClassTypes.catchThrowableOfType(type, shouldRaiseThrowable);\n  }\n",
    "test_id": 2
  },
  "3": {
    "commit_src": "8a7843e2d8621cae892c938996be6c294c3152ce",
    "commit_tgt": "19dc003d9e836563fff6b29d99707656370339a6",
    "changed_tests": [
      "assertj-core/src/test/java/org/assertj/core/internal/UnambiguousRepresentation_Test.java",
      "assertj-core/src/test/java/org/assertj/core/presentation/CompositeRepresentation_Test.java",
      "assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_unambiguousToStringOf_Test.java",
      "assertj-core/src/test/java/org/assertj/core/util/introspection/ClassUtils_areSameClassInDifferentPackages_Test.java"
    ],
    "refer_PR": "assertj_assertj-3223",
    "test_src": ".org.assertj.core.internal.UnambiguousRepresentation_Test#should_use_unambiguousToStringOf_whe_toStringOf_are_equal",
    "test_tgt": [
      ".org.assertj.core.internal.UnambiguousRepresentation_Test#should_use_unambiguousToStringOf_whe_toStringOf_are_equal"
    ],
    "test_src_code": "",
    "focal_path": "assertj-core/src/main/java/org/assertj/core/internal/UnambiguousRepresentation.java#UnambiguousRepresentation",
    "focal_src": "  public UnambiguousRepresentation(Representation representation, Object actual, Object expected) {\n    String actualRepresentation = representation.toStringOf(actual);\n    String expectedRepresentation = representation.toStringOf(expected);\n\n    boolean sameRepresentation = Objects.equals(actualRepresentation, expectedRepresentation);\n    this.actual = sameRepresentation\n        ? representation.unambiguousToStringOf(actual)\n        : actualRepresentation;\n    this.expected = sameRepresentation\n        ? representation.unambiguousToStringOf(expected)\n        : expectedRepresentation;\n  }\n",
    "focal_tgt": "  public UnambiguousRepresentation(Representation representation, Object actual, Object expected) {\n    String actualRepresentation = representation.toStringOf(actual);\n    String expectedRepresentation = representation.toStringOf(expected);\n\n    boolean sameRepresentation = Objects.equals(actualRepresentation, expectedRepresentation);\n    this.actual = sameRepresentation\n        ? representation.unambiguousToStringOf(actual, false)\n        : actualRepresentation;\n    this.expected = sameRepresentation\n        ? representation.unambiguousToStringOf(expected, false)\n        : expectedRepresentation;\n  }\n",
    "test_id": 3
  },
  "4": {
    "commit_src": "8a7843e2d8621cae892c938996be6c294c3152ce",
    "commit_tgt": "c6686ddde06d8404517793514ddd67e0781512ee",
    "changed_tests": [
      "assertj-core/src/test/java/org/assertj/core/error/ShouldHaveCauseInstance_create_Test.java",
      "assertj-core/src/test/java/org/assertj/core/internal/throwables/Throwables_assertHasCauseInstanceOf_Test.java"
    ],
    "refer_PR": "assertj_assertj-3392",
    "test_src": ".org.assertj.core.error.ShouldHaveCauseInstance_create_Test#should_create_error_message_for_no_cause",
    "test_tgt": [
      ".org.assertj.core.error.ShouldHaveCauseInstance_create_Test#should_create_error_message_for_no_cause"
    ],
    "test_src_code": "",
    "focal_path": "assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseInstance.java#shouldHaveCauseInstance",
    "focal_src": "  /**\n   * Creates a new <code>{@link org.assertj.core.error.BasicErrorMessageFactory}</code>.\n   * \n   * @param actual the actual value in the failed assertion.\n   * @param expectedCauseType the expected cause type.\n   * @return the created {@code ErrorMessageFactory}.\n   */\n  public static ErrorMessageFactory shouldHaveCauseInstance(Throwable actual,\n                                                            Class<? extends Throwable> expectedCauseType) {\n    return actual.getCause() == null\n        ? new ShouldHaveCauseInstance(expectedCauseType)\n        : new ShouldHaveCauseInstance(actual, expectedCauseType);\n  }\n",
    "focal_tgt": "  /**\n   * Creates a new <code>{@link org.assertj.core.error.BasicErrorMessageFactory}</code>.\n   * \n   * @param actual the actual value in the failed assertion.\n   * @param expectedCauseType the expected cause type.\n   * @return the created {@code ErrorMessageFactory}.\n   */\n  public static ErrorMessageFactory shouldHaveCauseInstance(Throwable actual,\n                                                            Class<? extends Throwable> expectedCauseType) {\n    return actual.getCause() == null\n        ? new ShouldHaveCauseInstance(expectedCauseType, actual)\n        : new ShouldHaveCauseInstance(actual, expectedCauseType);\n  }\n",
    "test_id": 4
  }
}