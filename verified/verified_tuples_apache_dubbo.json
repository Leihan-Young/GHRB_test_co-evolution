{
  "1": {
    "commit_src": "d07d89159f80740d5a79fdb6242d978378d78b58",
    "commit_tgt": "850f719927962ad983e93bbbee391471b1bd2cf7",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/LocalHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11051",
    "test_src": ".org.apache.dubbo.qos.server.handler.QosProcessHandlerTest#testDecodeHttp",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.QosProcessHandlerTest#testDecodeHttp"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java#decode",
    "focal_src": "    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new LocalHostPermitHandler(acceptForeignIp));\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler(frameworkModel));\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetIdleEventHandler());\n            p.addLast(new TelnetProcessHandler(frameworkModel));\n            p.remove(this);\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new ForeignHostPermitHandler(acceptForeignIp, acceptForeignIpWhitelist));\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler(frameworkModel));\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetIdleEventHandler());\n            p.addLast(new TelnetProcessHandler(frameworkModel));\n            p.remove(this);\n        }\n    }\n",
    "test_id": 1
  },
  "2": {
    "commit_src": "d07d89159f80740d5a79fdb6242d978378d78b58",
    "commit_tgt": "850f719927962ad983e93bbbee391471b1bd2cf7",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/LocalHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11051",
    "test_src": ".org.apache.dubbo.qos.server.handler.QosProcessHandlerTest#testDecodeTelnet",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.QosProcessHandlerTest#testDecodeTelnet"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java#decode",
    "focal_src": "    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new LocalHostPermitHandler(acceptForeignIp));\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler(frameworkModel));\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetIdleEventHandler());\n            p.addLast(new TelnetProcessHandler(frameworkModel));\n            p.remove(this);\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new ForeignHostPermitHandler(acceptForeignIp, acceptForeignIpWhitelist));\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler(frameworkModel));\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetIdleEventHandler());\n            p.addLast(new TelnetProcessHandler(frameworkModel));\n            p.remove(this);\n        }\n    }\n",
    "test_id": 2
  },
  "3": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.command.DefaultCommandExecutorTest#testExecute2",
    "test_tgt": [
      ".org.apache.dubbo.qos.command.DefaultCommandExecutorTest#testExecute2",
      ".org.apache.dubbo.qos.command.DefaultCommandExecutorTest#shouldNotThrowPermissionDenyException_GivenPermissionConfigAndMatchDefaultPUBLICCmdPermissionLevel",
      ".org.apache.dubbo.qos.command.DefaultCommandExecutorTest#shouldNotThrowPermissionDenyException_GivenPermissionConfigAndNotMatchCmdPermissionLevel"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/DefaultCommandExecutor.java#execute",
    "focal_src": "    @Override\n    public String execute(CommandContext commandContext) throws NoSuchCommandException {\n        BaseCommand command = null;\n        try {\n            command = frameworkModel.getExtensionLoader(BaseCommand.class).getExtension(commandContext.getCommandName());\n        } catch (Throwable throwable) {\n                //can't find command\n        }\n        if (command == null) {\n            throw new NoSuchCommandException(commandContext.getCommandName());\n        }\n        return command.execute(commandContext, commandContext.getArgs());\n    }\n",
    "focal_tgt": "    @Override\n    public String execute(CommandContext commandContext) throws NoSuchCommandException, PermissionDenyException {\n        BaseCommand command = null;\n        try {\n            command = frameworkModel.getExtensionLoader(BaseCommand.class).getExtension(commandContext.getCommandName());\n        } catch (Throwable throwable) {\n                //can't find command\n        }\n        if (command == null) {\n            throw new NoSuchCommandException(commandContext.getCommandName());\n        }\n\n        // check permission when configs allow anonymous access\n        if (commandContext.isAllowAnonymousAccess()) {\n            PermissionChecker permissionChecker = DefaultAnonymousAccessPermissionChecker.INSTANCE;\n            try {\n                permissionChecker = frameworkModel.getExtensionLoader(PermissionChecker.class).getExtension(QosConstants.QOS_PERMISSION_CHECKER);\n            } catch (Throwable throwable) {\n                //can't find valid custom permissionChecker\n            }\n\n            final Cmd cmd = command.getClass().getAnnotation(Cmd.class);\n            final PermissionLevel cmdRequiredPermissionLevel = cmd.requiredPermissionLevel();\n\n            if (!permissionChecker.access(commandContext, cmdRequiredPermissionLevel)) {\n                throw new PermissionDenyException(commandContext.getCommandName());\n            }\n        }\n\n        return command.execute(commandContext, commandContext.getArgs());\n    }\n",
    "test_id": 3
  },
  "4": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java#ForeignHostPermitHandler",
    "focal_src": "    public ForeignHostPermitHandler(boolean acceptForeignIp, String foreignIpWhitelist) {\n        this.acceptForeignIp = acceptForeignIp;\n        this.acceptForeignIpWhitelist = foreignIpWhitelist;\n        if (StringUtils.isNotEmpty(foreignIpWhitelist)) {\n            whitelistPredicate = Arrays.stream(foreignIpWhitelist.split(\",\"))\n                .map(String::trim)\n                .filter(StringUtils::isNotEmpty)\n                .map(foreignIpPattern -> (Predicate<String>) foreignIp -> {\n                    try {\n                        // hard code port to -1\n                        return NetUtils.matchIpExpression(foreignIpPattern, foreignIp, -1);\n                    } catch (UnknownHostException ignore) {\n                        // ignore illegal CIDR specification\n                    }\n                    return false;\n                })\n                .reduce(Predicate::or).orElse(s -> false);\n        }\n    }\n",
    "focal_tgt": "    public ForeignHostPermitHandler(QosConfiguration qosConfiguration) {\n        this.qosConfiguration = qosConfiguration;\n        this.acceptForeignIp = qosConfiguration.isAcceptForeignIp();\n        this.acceptForeignIpWhitelist = qosConfiguration.getAcceptForeignIpWhitelist();\n        if (StringUtils.isNotEmpty(acceptForeignIpWhitelist)) {\n            whitelistPredicate = Arrays.stream(acceptForeignIpWhitelist.split(\",\"))\n                .map(String::trim)\n                .filter(StringUtils::isNotEmpty)\n                .map(foreignIpPattern -> (Predicate<String>) foreignIp -> {\n                    try {\n                        // hard code port to -1\n                        return NetUtils.matchIpExpression(foreignIpPattern, foreignIp, -1);\n                    } catch (UnknownHostException ignore) {\n                        // ignore illegal CIDR specification\n                    }\n                    return false;\n                })\n                .reduce(Predicate::or).orElse(s -> false);\n        }\n    }\n",
    "test_id": 4
  },
  "5": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java#handlerAdded",
    "focal_src": "    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (acceptForeignIp) {\n            return;\n        }\n\n        final InetAddress inetAddress = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress();\n        // loopback address, return\n        if (inetAddress.isLoopbackAddress()) {\n            return;\n        }\n\n        // the ip is in the whitelist, return\n        if (checkForeignIpInWhiteList(inetAddress)) {\n            return;\n        }\n\n        ByteBuf cb = Unpooled.wrappedBuffer((QosConstants.BR_STR + \"Foreign Ip Not Permitted, Consider Config It In Whitelist.\"\n            + QosConstants.BR_STR).getBytes());\n        ctx.writeAndFlush(cb).addListener(ChannelFutureListener.CLOSE);\n    }\n",
    "focal_tgt": "    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (acceptForeignIp) {\n            return;\n        }\n\n        // the anonymous access is enabled by default, permission level is PUBLIC\n        // if allow anonymous access, return\n        if (qosConfiguration.isAllowAnonymousAccess()) {\n            return;\n        }\n\n        final InetAddress inetAddress = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress();\n        // loopback address, return\n        if (inetAddress.isLoopbackAddress()) {\n            return;\n        }\n\n        // the ip is in the whitelist, return\n        if (checkForeignIpInWhiteList(inetAddress)) {\n            return;\n        }\n\n\n        ByteBuf cb = Unpooled.wrappedBuffer((QosConstants.BR_STR + \"Foreign Ip Not Permitted, Consider Config It In Whitelist.\"\n            + QosConstants.BR_STR).getBytes());\n        ctx.writeAndFlush(cb).addListener(ChannelFutureListener.CLOSE);\n    }\n",
    "test_id": 5
  },
  "6": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java#ForeignHostPermitHandler",
    "focal_src": "    public ForeignHostPermitHandler(boolean acceptForeignIp, String foreignIpWhitelist) {\n        this.acceptForeignIp = acceptForeignIp;\n        this.acceptForeignIpWhitelist = foreignIpWhitelist;\n        if (StringUtils.isNotEmpty(foreignIpWhitelist)) {\n            whitelistPredicate = Arrays.stream(foreignIpWhitelist.split(\",\"))\n                .map(String::trim)\n                .filter(StringUtils::isNotEmpty)\n                .map(foreignIpPattern -> (Predicate<String>) foreignIp -> {\n                    try {\n                        // hard code port to -1\n                        return NetUtils.matchIpExpression(foreignIpPattern, foreignIp, -1);\n                    } catch (UnknownHostException ignore) {\n                        // ignore illegal CIDR specification\n                    }\n                    return false;\n                })\n                .reduce(Predicate::or).orElse(s -> false);\n        }\n    }\n",
    "focal_tgt": "    public ForeignHostPermitHandler(QosConfiguration qosConfiguration) {\n        this.qosConfiguration = qosConfiguration;\n        this.acceptForeignIp = qosConfiguration.isAcceptForeignIp();\n        this.acceptForeignIpWhitelist = qosConfiguration.getAcceptForeignIpWhitelist();\n        if (StringUtils.isNotEmpty(acceptForeignIpWhitelist)) {\n            whitelistPredicate = Arrays.stream(acceptForeignIpWhitelist.split(\",\"))\n                .map(String::trim)\n                .filter(StringUtils::isNotEmpty)\n                .map(foreignIpPattern -> (Predicate<String>) foreignIp -> {\n                    try {\n                        // hard code port to -1\n                        return NetUtils.matchIpExpression(foreignIpPattern, foreignIp, -1);\n                    } catch (UnknownHostException ignore) {\n                        // ignore illegal CIDR specification\n                    }\n                    return false;\n                })\n                .reduce(Predicate::or).orElse(s -> false);\n        }\n    }\n",
    "test_id": 6
  },
  "7": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java#handlerAdded",
    "focal_src": "    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (acceptForeignIp) {\n            return;\n        }\n\n        final InetAddress inetAddress = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress();\n        // loopback address, return\n        if (inetAddress.isLoopbackAddress()) {\n            return;\n        }\n\n        // the ip is in the whitelist, return\n        if (checkForeignIpInWhiteList(inetAddress)) {\n            return;\n        }\n\n        ByteBuf cb = Unpooled.wrappedBuffer((QosConstants.BR_STR + \"Foreign Ip Not Permitted, Consider Config It In Whitelist.\"\n            + QosConstants.BR_STR).getBytes());\n        ctx.writeAndFlush(cb).addListener(ChannelFutureListener.CLOSE);\n    }\n",
    "focal_tgt": "    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (acceptForeignIp) {\n            return;\n        }\n\n        // the anonymous access is enabled by default, permission level is PUBLIC\n        // if allow anonymous access, return\n        if (qosConfiguration.isAllowAnonymousAccess()) {\n            return;\n        }\n\n        final InetAddress inetAddress = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress();\n        // loopback address, return\n        if (inetAddress.isLoopbackAddress()) {\n            return;\n        }\n\n        // the ip is in the whitelist, return\n        if (checkForeignIpInWhiteList(inetAddress)) {\n            return;\n        }\n\n\n        ByteBuf cb = Unpooled.wrappedBuffer((QosConstants.BR_STR + \"Foreign Ip Not Permitted, Consider Config It In Whitelist.\"\n            + QosConstants.BR_STR).getBytes());\n        ctx.writeAndFlush(cb).addListener(ChannelFutureListener.CLOSE);\n    }\n",
    "test_id": 7
  },
  "8": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java#ForeignHostPermitHandler",
    "focal_src": "    public ForeignHostPermitHandler(boolean acceptForeignIp, String foreignIpWhitelist) {\n        this.acceptForeignIp = acceptForeignIp;\n        this.acceptForeignIpWhitelist = foreignIpWhitelist;\n        if (StringUtils.isNotEmpty(foreignIpWhitelist)) {\n            whitelistPredicate = Arrays.stream(foreignIpWhitelist.split(\",\"))\n                .map(String::trim)\n                .filter(StringUtils::isNotEmpty)\n                .map(foreignIpPattern -> (Predicate<String>) foreignIp -> {\n                    try {\n                        // hard code port to -1\n                        return NetUtils.matchIpExpression(foreignIpPattern, foreignIp, -1);\n                    } catch (UnknownHostException ignore) {\n                        // ignore illegal CIDR specification\n                    }\n                    return false;\n                })\n                .reduce(Predicate::or).orElse(s -> false);\n        }\n    }\n",
    "focal_tgt": "    public ForeignHostPermitHandler(QosConfiguration qosConfiguration) {\n        this.qosConfiguration = qosConfiguration;\n        this.acceptForeignIp = qosConfiguration.isAcceptForeignIp();\n        this.acceptForeignIpWhitelist = qosConfiguration.getAcceptForeignIpWhitelist();\n        if (StringUtils.isNotEmpty(acceptForeignIpWhitelist)) {\n            whitelistPredicate = Arrays.stream(acceptForeignIpWhitelist.split(\",\"))\n                .map(String::trim)\n                .filter(StringUtils::isNotEmpty)\n                .map(foreignIpPattern -> (Predicate<String>) foreignIp -> {\n                    try {\n                        // hard code port to -1\n                        return NetUtils.matchIpExpression(foreignIpPattern, foreignIp, -1);\n                    } catch (UnknownHostException ignore) {\n                        // ignore illegal CIDR specification\n                    }\n                    return false;\n                })\n                .reduce(Predicate::or).orElse(s -> false);\n        }\n    }\n",
    "test_id": 8
  },
  "9": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java#handlerAdded",
    "focal_src": "    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (acceptForeignIp) {\n            return;\n        }\n\n        final InetAddress inetAddress = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress();\n        // loopback address, return\n        if (inetAddress.isLoopbackAddress()) {\n            return;\n        }\n\n        // the ip is in the whitelist, return\n        if (checkForeignIpInWhiteList(inetAddress)) {\n            return;\n        }\n\n        ByteBuf cb = Unpooled.wrappedBuffer((QosConstants.BR_STR + \"Foreign Ip Not Permitted, Consider Config It In Whitelist.\"\n            + QosConstants.BR_STR).getBytes());\n        ctx.writeAndFlush(cb).addListener(ChannelFutureListener.CLOSE);\n    }\n",
    "focal_tgt": "    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (acceptForeignIp) {\n            return;\n        }\n\n        // the anonymous access is enabled by default, permission level is PUBLIC\n        // if allow anonymous access, return\n        if (qosConfiguration.isAllowAnonymousAccess()) {\n            return;\n        }\n\n        final InetAddress inetAddress = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress();\n        // loopback address, return\n        if (inetAddress.isLoopbackAddress()) {\n            return;\n        }\n\n        // the ip is in the whitelist, return\n        if (checkForeignIpInWhiteList(inetAddress)) {\n            return;\n        }\n\n\n        ByteBuf cb = Unpooled.wrappedBuffer((QosConstants.BR_STR + \"Foreign Ip Not Permitted, Consider Config It In Whitelist.\"\n            + QosConstants.BR_STR).getBytes());\n        ctx.writeAndFlush(cb).addListener(ChannelFutureListener.CLOSE);\n    }\n",
    "test_id": 9
  },
  "10": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java#ForeignHostPermitHandler",
    "focal_src": "    public ForeignHostPermitHandler(boolean acceptForeignIp, String foreignIpWhitelist) {\n        this.acceptForeignIp = acceptForeignIp;\n        this.acceptForeignIpWhitelist = foreignIpWhitelist;\n        if (StringUtils.isNotEmpty(foreignIpWhitelist)) {\n            whitelistPredicate = Arrays.stream(foreignIpWhitelist.split(\",\"))\n                .map(String::trim)\n                .filter(StringUtils::isNotEmpty)\n                .map(foreignIpPattern -> (Predicate<String>) foreignIp -> {\n                    try {\n                        // hard code port to -1\n                        return NetUtils.matchIpExpression(foreignIpPattern, foreignIp, -1);\n                    } catch (UnknownHostException ignore) {\n                        // ignore illegal CIDR specification\n                    }\n                    return false;\n                })\n                .reduce(Predicate::or).orElse(s -> false);\n        }\n    }\n",
    "focal_tgt": "    public ForeignHostPermitHandler(QosConfiguration qosConfiguration) {\n        this.qosConfiguration = qosConfiguration;\n        this.acceptForeignIp = qosConfiguration.isAcceptForeignIp();\n        this.acceptForeignIpWhitelist = qosConfiguration.getAcceptForeignIpWhitelist();\n        if (StringUtils.isNotEmpty(acceptForeignIpWhitelist)) {\n            whitelistPredicate = Arrays.stream(acceptForeignIpWhitelist.split(\",\"))\n                .map(String::trim)\n                .filter(StringUtils::isNotEmpty)\n                .map(foreignIpPattern -> (Predicate<String>) foreignIp -> {\n                    try {\n                        // hard code port to -1\n                        return NetUtils.matchIpExpression(foreignIpPattern, foreignIp, -1);\n                    } catch (UnknownHostException ignore) {\n                        // ignore illegal CIDR specification\n                    }\n                    return false;\n                })\n                .reduce(Predicate::or).orElse(s -> false);\n        }\n    }\n",
    "test_id": 10
  },
  "11": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
      ".org.apache.dubbo.qos.server.handler.ForeignHostPermitHandlerTest#shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandler.java#handlerAdded",
    "focal_src": "    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (acceptForeignIp) {\n            return;\n        }\n\n        final InetAddress inetAddress = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress();\n        // loopback address, return\n        if (inetAddress.isLoopbackAddress()) {\n            return;\n        }\n\n        // the ip is in the whitelist, return\n        if (checkForeignIpInWhiteList(inetAddress)) {\n            return;\n        }\n\n        ByteBuf cb = Unpooled.wrappedBuffer((QosConstants.BR_STR + \"Foreign Ip Not Permitted, Consider Config It In Whitelist.\"\n            + QosConstants.BR_STR).getBytes());\n        ctx.writeAndFlush(cb).addListener(ChannelFutureListener.CLOSE);\n    }\n",
    "focal_tgt": "    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (acceptForeignIp) {\n            return;\n        }\n\n        // the anonymous access is enabled by default, permission level is PUBLIC\n        // if allow anonymous access, return\n        if (qosConfiguration.isAllowAnonymousAccess()) {\n            return;\n        }\n\n        final InetAddress inetAddress = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress();\n        // loopback address, return\n        if (inetAddress.isLoopbackAddress()) {\n            return;\n        }\n\n        // the ip is in the whitelist, return\n        if (checkForeignIpInWhiteList(inetAddress)) {\n            return;\n        }\n\n\n        ByteBuf cb = Unpooled.wrappedBuffer((QosConstants.BR_STR + \"Foreign Ip Not Permitted, Consider Config It In Whitelist.\"\n            + QosConstants.BR_STR).getBytes());\n        ctx.writeAndFlush(cb).addListener(ChannelFutureListener.CLOSE);\n    }\n",
    "test_id": 11
  },
  "12": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test1",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test1"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java#HttpProcessHandler",
    "focal_src": "    public HttpProcessHandler(FrameworkModel frameworkModel) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n    }\n",
    "focal_tgt": "    public HttpProcessHandler(FrameworkModel frameworkModel, QosConfiguration qosConfiguration) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n        this.qosConfiguration = qosConfiguration;\n    }\n",
    "test_id": 12
  },
  "13": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test1",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test1"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java#channelRead0",
    "focal_src": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {\n        CommandContext commandContext = HttpCommandDecoder.decode(msg);\n        // return 404 when fail to construct command context\n        if (commandContext == null) {\n            log.warn(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"can not found commandContext, url: \" + msg.uri());\n            FullHttpResponse response = http404();\n            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        } else {\n            commandContext.setRemote(ctx.channel());\n            try {\n                String result = commandExecutor.execute(commandContext);\n                int httpCode = commandContext.getHttpCode();\n                FullHttpResponse response = http(httpCode, result);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (NoSuchCommandException ex) {\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not find command: \" + commandContext, ex);\n                FullHttpResponse response = http404();\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (Exception qosEx) {\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext: \" + commandContext + \" got exception\", qosEx);\n                FullHttpResponse response = http(500, qosEx.getMessage());\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            }\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {\n        CommandContext commandContext = HttpCommandDecoder.decode(msg);\n        // return 404 when fail to construct command context\n        if (commandContext == null) {\n            log.warn(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"can not found commandContext, url: \" + msg.uri());\n            FullHttpResponse response = http(404);\n            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        } else {\n            commandContext.setRemote(ctx.channel());\n            commandContext.setQosConfiguration(qosConfiguration);\n            try {\n                String result = commandExecutor.execute(commandContext);\n                int httpCode = commandContext.getHttpCode();\n                FullHttpResponse response = http(httpCode, result);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (NoSuchCommandException ex) {\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not find command: \" + commandContext, ex);\n                FullHttpResponse response = http(404);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (PermissionDenyException ex) {\n                log.error(QOS_PERMISSION_DENY_EXCEPTION, \"\", \"\", \"permission deny to access command: \" + commandContext, ex);\n                FullHttpResponse response = http(403);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (Exception qosEx) {\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext: \" + commandContext + \" got exception\", qosEx);\n                FullHttpResponse response = http(500, qosEx.getMessage());\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            }\n        }\n    }\n",
    "test_id": 13
  },
  "14": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test2",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test2"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java#HttpProcessHandler",
    "focal_src": "    public HttpProcessHandler(FrameworkModel frameworkModel) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n    }\n",
    "focal_tgt": "    public HttpProcessHandler(FrameworkModel frameworkModel, QosConfiguration qosConfiguration) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n        this.qosConfiguration = qosConfiguration;\n    }\n",
    "test_id": 14
  },
  "15": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test2",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test2"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java#channelRead0",
    "focal_src": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {\n        CommandContext commandContext = HttpCommandDecoder.decode(msg);\n        // return 404 when fail to construct command context\n        if (commandContext == null) {\n            log.warn(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"can not found commandContext, url: \" + msg.uri());\n            FullHttpResponse response = http404();\n            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        } else {\n            commandContext.setRemote(ctx.channel());\n            try {\n                String result = commandExecutor.execute(commandContext);\n                int httpCode = commandContext.getHttpCode();\n                FullHttpResponse response = http(httpCode, result);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (NoSuchCommandException ex) {\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not find command: \" + commandContext, ex);\n                FullHttpResponse response = http404();\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (Exception qosEx) {\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext: \" + commandContext + \" got exception\", qosEx);\n                FullHttpResponse response = http(500, qosEx.getMessage());\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            }\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {\n        CommandContext commandContext = HttpCommandDecoder.decode(msg);\n        // return 404 when fail to construct command context\n        if (commandContext == null) {\n            log.warn(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"can not found commandContext, url: \" + msg.uri());\n            FullHttpResponse response = http(404);\n            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        } else {\n            commandContext.setRemote(ctx.channel());\n            commandContext.setQosConfiguration(qosConfiguration);\n            try {\n                String result = commandExecutor.execute(commandContext);\n                int httpCode = commandContext.getHttpCode();\n                FullHttpResponse response = http(httpCode, result);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (NoSuchCommandException ex) {\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not find command: \" + commandContext, ex);\n                FullHttpResponse response = http(404);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (PermissionDenyException ex) {\n                log.error(QOS_PERMISSION_DENY_EXCEPTION, \"\", \"\", \"permission deny to access command: \" + commandContext, ex);\n                FullHttpResponse response = http(403);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (Exception qosEx) {\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext: \" + commandContext + \" got exception\", qosEx);\n                FullHttpResponse response = http(500, qosEx.getMessage());\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            }\n        }\n    }\n",
    "test_id": 15
  },
  "16": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test3",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test3"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java#HttpProcessHandler",
    "focal_src": "    public HttpProcessHandler(FrameworkModel frameworkModel) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n    }\n",
    "focal_tgt": "    public HttpProcessHandler(FrameworkModel frameworkModel, QosConfiguration qosConfiguration) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n        this.qosConfiguration = qosConfiguration;\n    }\n",
    "test_id": 16
  },
  "17": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test3",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.HttpProcessHandlerTest#test3"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java#channelRead0",
    "focal_src": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {\n        CommandContext commandContext = HttpCommandDecoder.decode(msg);\n        // return 404 when fail to construct command context\n        if (commandContext == null) {\n            log.warn(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"can not found commandContext, url: \" + msg.uri());\n            FullHttpResponse response = http404();\n            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        } else {\n            commandContext.setRemote(ctx.channel());\n            try {\n                String result = commandExecutor.execute(commandContext);\n                int httpCode = commandContext.getHttpCode();\n                FullHttpResponse response = http(httpCode, result);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (NoSuchCommandException ex) {\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not find command: \" + commandContext, ex);\n                FullHttpResponse response = http404();\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (Exception qosEx) {\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext: \" + commandContext + \" got exception\", qosEx);\n                FullHttpResponse response = http(500, qosEx.getMessage());\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            }\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {\n        CommandContext commandContext = HttpCommandDecoder.decode(msg);\n        // return 404 when fail to construct command context\n        if (commandContext == null) {\n            log.warn(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"can not found commandContext, url: \" + msg.uri());\n            FullHttpResponse response = http(404);\n            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        } else {\n            commandContext.setRemote(ctx.channel());\n            commandContext.setQosConfiguration(qosConfiguration);\n            try {\n                String result = commandExecutor.execute(commandContext);\n                int httpCode = commandContext.getHttpCode();\n                FullHttpResponse response = http(httpCode, result);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (NoSuchCommandException ex) {\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not find command: \" + commandContext, ex);\n                FullHttpResponse response = http(404);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (PermissionDenyException ex) {\n                log.error(QOS_PERMISSION_DENY_EXCEPTION, \"\", \"\", \"permission deny to access command: \" + commandContext, ex);\n                FullHttpResponse response = http(403);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (Exception qosEx) {\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext: \" + commandContext + \" got exception\", qosEx);\n                FullHttpResponse response = http(500, qosEx.getMessage());\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            }\n        }\n    }\n",
    "test_id": 17
  },
  "18": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.QosProcessHandlerTest#testDecodeHttp",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.QosProcessHandlerTest#testDecodeHttp"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java#decode",
    "focal_src": "    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new ForeignHostPermitHandler(acceptForeignIp, acceptForeignIpWhitelist));\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler(frameworkModel));\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetIdleEventHandler());\n            p.addLast(new TelnetProcessHandler(frameworkModel));\n            p.remove(this);\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new ForeignHostPermitHandler(qosConfiguration));\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler(frameworkModel, qosConfiguration));\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetIdleEventHandler());\n            p.addLast(new TelnetProcessHandler(frameworkModel, qosConfiguration));\n            p.remove(this);\n        }\n    }\n",
    "test_id": 18
  },
  "19": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.QosProcessHandlerTest#testDecodeTelnet",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.QosProcessHandlerTest#testDecodeTelnet"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java#decode",
    "focal_src": "    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new ForeignHostPermitHandler(acceptForeignIp, acceptForeignIpWhitelist));\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler(frameworkModel));\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetIdleEventHandler());\n            p.addLast(new TelnetProcessHandler(frameworkModel));\n            p.remove(this);\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new ForeignHostPermitHandler(qosConfiguration));\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler(frameworkModel, qosConfiguration));\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetIdleEventHandler());\n            p.addLast(new TelnetProcessHandler(frameworkModel, qosConfiguration));\n            p.remove(this);\n        }\n    }\n",
    "test_id": 19
  },
  "20": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testPrompt",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testPrompt"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java#TelnetProcessHandler",
    "focal_src": "    public TelnetProcessHandler(FrameworkModel frameworkModel) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n    }\n",
    "focal_tgt": "    public TelnetProcessHandler(FrameworkModel frameworkModel, QosConfiguration qosConfiguration) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n        this.qosConfiguration = qosConfiguration;\n    }\n",
    "test_id": 20
  },
  "21": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testPrompt",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testPrompt"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java#channelRead0",
    "focal_src": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.PROMPT);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.isEquals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not found command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.PROMPT);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setQosConfiguration(qosConfiguration);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.isEquals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not found command \" + commandContext, ex);\n            } catch (PermissionDenyException ex) {\n                ctx.writeAndFlush(msg + \" :permission deny\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_PERMISSION_DENY_EXCEPTION, \"\", \"\", \"permission deny to access command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n",
    "test_id": 21
  },
  "22": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testBye",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testBye"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java#TelnetProcessHandler",
    "focal_src": "    public TelnetProcessHandler(FrameworkModel frameworkModel) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n    }\n",
    "focal_tgt": "    public TelnetProcessHandler(FrameworkModel frameworkModel, QosConfiguration qosConfiguration) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n        this.qosConfiguration = qosConfiguration;\n    }\n",
    "test_id": 22
  },
  "23": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testBye",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testBye"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java#channelRead0",
    "focal_src": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.PROMPT);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.isEquals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not found command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.PROMPT);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setQosConfiguration(qosConfiguration);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.isEquals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not found command \" + commandContext, ex);\n            } catch (PermissionDenyException ex) {\n                ctx.writeAndFlush(msg + \" :permission deny\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_PERMISSION_DENY_EXCEPTION, \"\", \"\", \"permission deny to access command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n",
    "test_id": 23
  },
  "24": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testUnknownCommand",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testUnknownCommand"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java#TelnetProcessHandler",
    "focal_src": "    public TelnetProcessHandler(FrameworkModel frameworkModel) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n    }\n",
    "focal_tgt": "    public TelnetProcessHandler(FrameworkModel frameworkModel, QosConfiguration qosConfiguration) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n        this.qosConfiguration = qosConfiguration;\n    }\n",
    "test_id": 24
  },
  "25": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testUnknownCommand",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testUnknownCommand"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java#channelRead0",
    "focal_src": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.PROMPT);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.isEquals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not found command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.PROMPT);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setQosConfiguration(qosConfiguration);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.isEquals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not found command \" + commandContext, ex);\n            } catch (PermissionDenyException ex) {\n                ctx.writeAndFlush(msg + \" :permission deny\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_PERMISSION_DENY_EXCEPTION, \"\", \"\", \"permission deny to access command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n",
    "test_id": 25
  },
  "26": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testGreeting",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testGreeting"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java#TelnetProcessHandler",
    "focal_src": "    public TelnetProcessHandler(FrameworkModel frameworkModel) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n    }\n",
    "focal_tgt": "    public TelnetProcessHandler(FrameworkModel frameworkModel, QosConfiguration qosConfiguration) {\n        this.commandExecutor = new DefaultCommandExecutor(frameworkModel);\n        this.qosConfiguration = qosConfiguration;\n    }\n",
    "test_id": 26
  },
  "27": {
    "commit_src": "ee9a3d53d4d8dcad17498747e92d15da42357e12",
    "commit_tgt": "ab5d95f46b9bd63ff60d926f031903b3ac171126",
    "changed_tests": [
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/DefaultCommandExecutorTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/pu/QosWireProtocolTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/ForeignHostPermitHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java",
      "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandlerTest.java"
    ],
    "refer_PR": "apache_dubbo-11076",
    "test_src": ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testGreeting",
    "test_tgt": [
      ".org.apache.dubbo.qos.server.handler.TelnetProcessHandlerTest#testGreeting"
    ],
    "focal_path": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/TelnetProcessHandler.java#channelRead0",
    "focal_src": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.PROMPT);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.isEquals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not found command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n",
    "focal_tgt": "    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n\n        if (StringUtils.isBlank(msg)) {\n            ctx.writeAndFlush(QosProcessHandler.PROMPT);\n        } else {\n            CommandContext commandContext = TelnetCommandDecoder.decode(msg);\n            commandContext.setQosConfiguration(qosConfiguration);\n            commandContext.setRemote(ctx.channel());\n\n            try {\n                String result = commandExecutor.execute(commandContext);\n                if (StringUtils.isEquals(QosConstants.CLOSE, result)) {\n                    ctx.writeAndFlush(getByeLabel()).addListener(ChannelFutureListener.CLOSE);\n                } else {\n                    ctx.writeAndFlush(result + QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                }\n            } catch (NoSuchCommandException ex) {\n                ctx.writeAndFlush(msg + \" :no such command\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_COMMAND_NOT_FOUND, \"\", \"\", \"can not found command \" + commandContext, ex);\n            } catch (PermissionDenyException ex) {\n                ctx.writeAndFlush(msg + \" :permission deny\");\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_PERMISSION_DENY_EXCEPTION, \"\", \"\", \"permission deny to access command \" + commandContext, ex);\n            } catch (Exception ex) {\n                ctx.writeAndFlush(msg + \" :fail to execute commandContext by \" + ex.getMessage());\n                ctx.writeAndFlush(QosConstants.BR_STR + QosProcessHandler.PROMPT);\n                log.error(QOS_UNEXPECTED_EXCEPTION, \"\", \"\", \"execute commandContext got exception \" + commandContext, ex);\n            }\n        }\n    }\n",
    "test_id": 27
  },
  "28": {
    "commit_src": "e3ee0cc6894a35d64c24de2ebf98c70f58619d93",
    "commit_tgt": "c768ad8f13186320de71a0df5e78acb08205106c",
    "changed_tests": [
      "dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/TripleCustomerProtocolWapperTest.java",
      "dubbo-rpc/dubbo-rpc-triple/src/test/java/org/apache/dubbo/rpc/protocol/tri/service/TriBuiltinServiceTest.java"
    ],
    "refer_PR": "apache_dubbo-11084",
    "test_src": ".org.apache.dubbo.rpc.protocol.tri.service.TriBuiltinServiceTest#test",
    "test_tgt": [
      ".org.apache.dubbo.rpc.protocol.tri.service.TriBuiltinServiceTest#testDefaultNotEnable",
      ".org.apache.dubbo.rpc.protocol.tri.service.TriBuiltinServiceTest#testForceEnable"
    ],
    "focal_path": "dubbo-rpc/dubbo-rpc-triple/src/main/java/org/apache/dubbo/rpc/protocol/tri/service/TriBuiltinService.java#TriBuiltinService",
    "focal_src": "    public TriBuiltinService(FrameworkModel frameworkModel) {\n        healthStatusManager = new HealthStatusManager(new TriHealthImpl());\n        healthService = healthStatusManager.getHealthService();\n        reflectionServiceV1Alpha = new ReflectionV1AlphaService();\n        proxyFactory = frameworkModel.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();\n        pathResolver = frameworkModel.getExtensionLoader(PathResolver.class).getDefaultExtension();\n        init();\n    }\n",
    "focal_tgt": "    public TriBuiltinService(FrameworkModel frameworkModel) {\n        this.frameworkModel = frameworkModel;\n        if (enable()) {\n            init();\n        }\n    }\n",
    "test_id": 28
  },
  "29": {
    "commit_src": "10870708eb99a10fcfb25f71138e8d43cde566c4",
    "commit_tgt": "0add70e3f5a530766bfacf65392190afe3fd2a85",
    "changed_tests": [
      "dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryMetricsCollectorTest.java",
      "dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryMetricsTest.java",
      "dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryStatCompositeTest.java"
    ],
    "refer_PR": "apache_dubbo-12582",
    "test_src": ".org.apache.dubbo.metrics.registry.metrics.collector.RegistryMetricsCollectorTest#testRegisterMetrics",
    "test_tgt": [
      ".org.apache.dubbo.metrics.registry.metrics.collector.RegistryMetricsCollectorTest#testRegisterMetrics"
    ],
    "focal_path": "dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/RegistryMetricsCollector.java#collect",
    "focal_src": "    @Override\n    public List<MetricSample> collect() {\n        List<MetricSample> list = new ArrayList<>();\n        if (!isCollectEnabled()) {\n            return list;\n        }\n        list.addAll(super.export(MetricsCategory.REGISTRY));\n        return list;\n    }\n",
    "focal_tgt": "    @Override\n    public List<MetricSample> collect() {\n        List<MetricSample> list = new ArrayList<>();\n        if (!isCollectEnabled()) {\n            return list;\n        }\n        list.addAll(super.export(MetricsCategory.REGISTRY));\n        list.addAll(internalStat.export(MetricsCategory.REGISTRY));\n        return list;\n    }\n",
    "test_id": 29
  },
  "30": {
    "commit_src": "10870708eb99a10fcfb25f71138e8d43cde566c4",
    "commit_tgt": "0add70e3f5a530766bfacf65392190afe3fd2a85",
    "changed_tests": [
      "dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryMetricsCollectorTest.java",
      "dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryMetricsTest.java",
      "dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryStatCompositeTest.java"
    ],
    "refer_PR": "apache_dubbo-12582",
    "test_src": ".org.apache.dubbo.metrics.registry.metrics.collector.RegistryMetricsCollectorTest#testServicePushMetrics",
    "test_tgt": [
      ".org.apache.dubbo.metrics.registry.metrics.collector.RegistryMetricsCollectorTest#testServicePushMetrics"
    ],
    "focal_path": "dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/RegistryMetricsCollector.java#collect",
    "focal_src": "    @Override\n    public List<MetricSample> collect() {\n        List<MetricSample> list = new ArrayList<>();\n        if (!isCollectEnabled()) {\n            return list;\n        }\n        list.addAll(super.export(MetricsCategory.REGISTRY));\n        return list;\n    }\n",
    "focal_tgt": "    @Override\n    public List<MetricSample> collect() {\n        List<MetricSample> list = new ArrayList<>();\n        if (!isCollectEnabled()) {\n            return list;\n        }\n        list.addAll(super.export(MetricsCategory.REGISTRY));\n        list.addAll(internalStat.export(MetricsCategory.REGISTRY));\n        return list;\n    }\n",
    "test_id": 30
  },
  "31": {
    "commit_src": "10870708eb99a10fcfb25f71138e8d43cde566c4",
    "commit_tgt": "0add70e3f5a530766bfacf65392190afe3fd2a85",
    "changed_tests": [
      "dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryMetricsCollectorTest.java",
      "dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryMetricsTest.java",
      "dubbo-metrics/dubbo-metrics-registry/src/test/java/org/apache/dubbo/metrics/registry/metrics/collector/RegistryStatCompositeTest.java"
    ],
    "refer_PR": "apache_dubbo-12582",
    "test_src": ".org.apache.dubbo.metrics.registry.metrics.collector.RegistryMetricsCollectorTest#testServiceSubscribeMetrics",
    "test_tgt": [
      ".org.apache.dubbo.metrics.registry.metrics.collector.RegistryMetricsCollectorTest#testServiceSubscribeMetrics"
    ],
    "focal_path": "dubbo-metrics/dubbo-metrics-registry/src/main/java/org/apache/dubbo/metrics/registry/collector/RegistryMetricsCollector.java#collect",
    "focal_src": "    @Override\n    public List<MetricSample> collect() {\n        List<MetricSample> list = new ArrayList<>();\n        if (!isCollectEnabled()) {\n            return list;\n        }\n        list.addAll(super.export(MetricsCategory.REGISTRY));\n        return list;\n    }\n",
    "focal_tgt": "    @Override\n    public List<MetricSample> collect() {\n        List<MetricSample> list = new ArrayList<>();\n        if (!isCollectEnabled()) {\n            return list;\n        }\n        list.addAll(super.export(MetricsCategory.REGISTRY));\n        list.addAll(internalStat.export(MetricsCategory.REGISTRY));\n        return list;\n    }\n",
    "test_id": 31
  },
  "32": {
    "commit_src": "d9db031469c27eb2e1c7438cf92e217b7f6817c4",
    "commit_tgt": "8a509e9601fab4af278859c9d947fca8f5f0fa27",
    "changed_tests": [
      "dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/JValidatorTest.java",
      "dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/mock/JValidatorTestTarget.java"
    ],
    "refer_PR": "apache_dubbo-13029",
    "test_src": ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithCollectionArg",
    "test_tgt": [
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithCollectionArg",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithPrimitiveArg",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithPrimitiveArgWithProvidedMessage",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithPartialParameterValidation",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithNestedParameterValidationWithNullParam",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithNestedParameterValidationWithNullNestedParam",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithNestedParameterValidationWithNullNestedParams"
    ],
    "focal_path": "dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidator.java#JValidator",
    "focal_src": "    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public JValidator(URL url) {\n        this.clazz = ReflectUtils.forName(url.getServiceInterface());\n        String jvalidation = url.getParameter(\"jvalidation\");\n        ValidatorFactory factory;\n        if (jvalidation != null && jvalidation.length() > 0) {\n            factory = Validation.byProvider((Class) ReflectUtils.forName(jvalidation)).configure().buildValidatorFactory();\n        } else {\n            factory = Validation.buildDefaultValidatorFactory();\n        }\n        this.validator = factory.getValidator();\n        this.methodClassMap = new ConcurrentHashMap<>();\n    }\n",
    "focal_tgt": "    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public JValidator(URL url) {\n        this.clazz = ReflectUtils.forName(url.getServiceInterface());\n        String jvalidation = url.getParameter(\"jvalidation\");\n        ValidatorFactory factory;\n        if (StringUtils.isNotEmpty(jvalidation)) {\n            factory = Validation.byProvider((Class) ReflectUtils.forName(jvalidation)).configure().buildValidatorFactory();\n        } else {\n            factory = Validation.buildDefaultValidatorFactory();\n        }\n        this.validator = factory.getValidator();\n        this.methodClassMap = new ConcurrentHashMap<>();\n    }\n",
    "test_id": 32
  },
  "33": {
    "commit_src": "d9db031469c27eb2e1c7438cf92e217b7f6817c4",
    "commit_tgt": "8a509e9601fab4af278859c9d947fca8f5f0fa27",
    "changed_tests": [
      "dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/JValidatorTest.java",
      "dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/mock/JValidatorTestTarget.java"
    ],
    "refer_PR": "apache_dubbo-13029",
    "test_src": ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithCollectionArg",
    "test_tgt": [
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithCollectionArg",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithPrimitiveArg",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithPrimitiveArgWithProvidedMessage",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithPartialParameterValidation",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithNestedParameterValidationWithNullParam",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithNestedParameterValidationWithNullNestedParam",
      ".org.apache.dubbo.validation.support.jvalidation.JValidatorTest#testItWithNestedParameterValidationWithNullNestedParams"
    ],
    "focal_path": "dubbo-filter/dubbo-filter-validation/src/main/java/org/apache/dubbo/validation/support/jvalidation/JValidator.java#validate",
    "focal_src": "    @Override\n    public void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) throws Exception {\n        List<Class<?>> groups = new ArrayList<>();\n        Class<?> methodClass = methodClass(methodName);\n        if (methodClass != null) {\n            groups.add(methodClass);\n        }\n        Set<ConstraintViolation<?>> violations = new HashSet<>();\n        Method method = clazz.getMethod(methodName, parameterTypes);\n        Class<?>[] methodClasses;\n        if (method.isAnnotationPresent(MethodValidated.class)) {\n            methodClasses = method.getAnnotation(MethodValidated.class).value();\n            groups.addAll(Arrays.asList(methodClasses));\n        }\n        // add into default group\n        groups.add(0, Default.class);\n        groups.add(1, clazz);\n\n        // convert list to array\n        Class<?>[] classgroups = groups.toArray(new Class[groups.size()]);\n\n        Object parameterBean = getMethodParameterBean(clazz, method, arguments);\n        if (parameterBean != null) {\n            violations.addAll(validator.validate(parameterBean, classgroups));\n        }\n\n        for (Object arg : arguments) {\n            validate(violations, arg, classgroups);\n        }\n\n        if (!violations.isEmpty()) {\n            logger.info(\"Failed to validate service: \" + clazz.getName() + \", method: \" + methodName + \", cause: \" + violations);\n            throw new ConstraintViolationException(\"Failed to validate service: \" + clazz.getName() + \", method: \" + methodName + \", cause: \" + violations, violations);\n        }\n    }\n",
    "focal_tgt": "    @Override\n    public void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) throws Exception {\n        List<Class<?>> groups = new ArrayList<>();\n        Class<?> methodClass = methodClass(methodName);\n        if (methodClass != null) {\n            groups.add(methodClass);\n        }\n\n        Method method = clazz.getMethod(methodName, parameterTypes);\n        Class<?>[] methodClasses;\n        if (method.isAnnotationPresent(MethodValidated.class)) {\n            methodClasses = method.getAnnotation(MethodValidated.class).value();\n            groups.addAll(Arrays.asList(methodClasses));\n        }\n        // add into default group\n        groups.add(0, Default.class);\n        groups.add(1, clazz);\n\n        // convert list to array\n        Class<?>[] classGroups = groups.toArray(new Class[0]);\n\n        Set<ConstraintViolation<?>> violations = new HashSet<>();\n        Object parameterBean = getMethodParameterBean(clazz, method, arguments);\n        if (parameterBean != null) {\n            violations.addAll(validator.validate(parameterBean, classGroups));\n        }\n\n        for (Object arg : arguments) {\n            validate(violations, arg, classGroups);\n        }\n\n        if (!violations.isEmpty()) {\n            logger.info(\"Failed to validate service: \" + clazz.getName() + \", method: \" + methodName + \", cause: \" + violations);\n            throw new ConstraintViolationException(\"Failed to validate service: \" + clazz.getName() + \", method: \" + methodName + \", cause: \" + violations, violations);\n        }\n    }\n",
    "test_id": 33
  }
}