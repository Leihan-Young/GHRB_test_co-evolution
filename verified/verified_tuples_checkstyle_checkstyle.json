{
  "1": {
    "commit_src": "65655da48ab358df81d37532cca208969a0bbded",
    "commit_tgt": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
    "changed_tests": [
      "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/DefaultLoggerTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/LocalizedMessageTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/api/ViolationTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java"
    ],
    "refer_PR": "checkstyle_checkstyle-12105",
    "test_src": ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testMakeCheckFromName",
    "test_tgt": [
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testMakeCheckFromName",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateModuleWithNonExistName",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithAmbiguousException",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithCantInstantiateException"
    ],
    "focal_path": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#createModule",
    "focal_src": "    @Override\n    public Object createModule(String name) throws CheckstyleException {\n        Object instance = null;\n        // if the name is a simple class name, try to find it in maps at first\n        if (!name.contains(PACKAGE_SEPARATOR)) {\n            instance = createFromStandardCheckSet(name);\n            // find the name in third party map\n            if (instance == null) {\n                if (thirdPartyNameToFullModuleNames == null) {\n                    thirdPartyNameToFullModuleNames =\n                            generateThirdPartyNameToFullModuleName(moduleClassLoader);\n                }\n                instance = createObjectFromMap(name, thirdPartyNameToFullModuleNames);\n            }\n        }\n        if (instance == null) {\n            instance = createObject(name);\n        }\n        if (instance == null\n                && moduleLoadOption == ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES) {\n            instance = createModuleByTryInEachPackage(name);\n        }\n        if (instance == null) {\n            String attemptedNames = null;\n            if (!name.contains(PACKAGE_SEPARATOR)) {\n                final String nameCheck = name + CHECK_SUFFIX;\n                attemptedNames = joinPackageNamesWithClassName(name, packages)\n                        + STRING_SEPARATOR + nameCheck + STRING_SEPARATOR\n                        + joinPackageNamesWithClassName(nameCheck, packages);\n            }\n            final Violation exceptionMessage = new Violation(1,\n                Definitions.CHECKSTYLE_BUNDLE, UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,\n                new String[] {name, attemptedNames}, null, getClass(), null);\n            throw new CheckstyleException(exceptionMessage.getViolation());\n        }\n        return instance;\n    }\n",
    "focal_tgt": "    @Override\n    public Object createModule(String name) throws CheckstyleException {\n        Object instance = null;\n        // if the name is a simple class name, try to find it in maps at first\n        if (!name.contains(PACKAGE_SEPARATOR)) {\n            instance = createFromStandardCheckSet(name);\n            // find the name in third party map\n            if (instance == null) {\n                if (thirdPartyNameToFullModuleNames == null) {\n                    thirdPartyNameToFullModuleNames =\n                            generateThirdPartyNameToFullModuleName(moduleClassLoader);\n                }\n                instance = createObjectFromMap(name, thirdPartyNameToFullModuleNames);\n            }\n        }\n        if (instance == null) {\n            instance = createObject(name);\n        }\n        if (instance == null\n                && moduleLoadOption == ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES) {\n            instance = createModuleByTryInEachPackage(name);\n        }\n        if (instance == null) {\n            String attemptedNames = null;\n            if (!name.contains(PACKAGE_SEPARATOR)) {\n                final String nameCheck = name + CHECK_SUFFIX;\n                attemptedNames = joinPackageNamesWithClassName(name, packages)\n                        + STRING_SEPARATOR + nameCheck + STRING_SEPARATOR\n                        + joinPackageNamesWithClassName(nameCheck, packages);\n            }\n            final LocalizedMessage exceptionMessage = new LocalizedMessage(\n                Definitions.CHECKSTYLE_BUNDLE, getClass(),\n                UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE, name, attemptedNames);\n            throw new CheckstyleException(exceptionMessage.getMessage());\n        }\n        return instance;\n    }\n",
    "test_id": 1
  },
  "2": {
    "commit_src": "65655da48ab358df81d37532cca208969a0bbded",
    "commit_tgt": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
    "changed_tests": [
      "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/DefaultLoggerTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/LocalizedMessageTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/api/ViolationTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java"
    ],
    "refer_PR": "checkstyle_checkstyle-12105",
    "test_src": ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateModuleWithNonExistName",
    "test_tgt": [
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testMakeCheckFromName",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateModuleWithNonExistName",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithAmbiguousException",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithCantInstantiateException"
    ],
    "focal_path": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#createModule",
    "focal_src": "    @Override\n    public Object createModule(String name) throws CheckstyleException {\n        Object instance = null;\n        // if the name is a simple class name, try to find it in maps at first\n        if (!name.contains(PACKAGE_SEPARATOR)) {\n            instance = createFromStandardCheckSet(name);\n            // find the name in third party map\n            if (instance == null) {\n                if (thirdPartyNameToFullModuleNames == null) {\n                    thirdPartyNameToFullModuleNames =\n                            generateThirdPartyNameToFullModuleName(moduleClassLoader);\n                }\n                instance = createObjectFromMap(name, thirdPartyNameToFullModuleNames);\n            }\n        }\n        if (instance == null) {\n            instance = createObject(name);\n        }\n        if (instance == null\n                && moduleLoadOption == ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES) {\n            instance = createModuleByTryInEachPackage(name);\n        }\n        if (instance == null) {\n            String attemptedNames = null;\n            if (!name.contains(PACKAGE_SEPARATOR)) {\n                final String nameCheck = name + CHECK_SUFFIX;\n                attemptedNames = joinPackageNamesWithClassName(name, packages)\n                        + STRING_SEPARATOR + nameCheck + STRING_SEPARATOR\n                        + joinPackageNamesWithClassName(nameCheck, packages);\n            }\n            final Violation exceptionMessage = new Violation(1,\n                Definitions.CHECKSTYLE_BUNDLE, UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE,\n                new String[] {name, attemptedNames}, null, getClass(), null);\n            throw new CheckstyleException(exceptionMessage.getViolation());\n        }\n        return instance;\n    }\n",
    "focal_tgt": "    @Override\n    public Object createModule(String name) throws CheckstyleException {\n        Object instance = null;\n        // if the name is a simple class name, try to find it in maps at first\n        if (!name.contains(PACKAGE_SEPARATOR)) {\n            instance = createFromStandardCheckSet(name);\n            // find the name in third party map\n            if (instance == null) {\n                if (thirdPartyNameToFullModuleNames == null) {\n                    thirdPartyNameToFullModuleNames =\n                            generateThirdPartyNameToFullModuleName(moduleClassLoader);\n                }\n                instance = createObjectFromMap(name, thirdPartyNameToFullModuleNames);\n            }\n        }\n        if (instance == null) {\n            instance = createObject(name);\n        }\n        if (instance == null\n                && moduleLoadOption == ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES) {\n            instance = createModuleByTryInEachPackage(name);\n        }\n        if (instance == null) {\n            String attemptedNames = null;\n            if (!name.contains(PACKAGE_SEPARATOR)) {\n                final String nameCheck = name + CHECK_SUFFIX;\n                attemptedNames = joinPackageNamesWithClassName(name, packages)\n                        + STRING_SEPARATOR + nameCheck + STRING_SEPARATOR\n                        + joinPackageNamesWithClassName(nameCheck, packages);\n            }\n            final LocalizedMessage exceptionMessage = new LocalizedMessage(\n                Definitions.CHECKSTYLE_BUNDLE, getClass(),\n                UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE, name, attemptedNames);\n            throw new CheckstyleException(exceptionMessage.getMessage());\n        }\n        return instance;\n    }\n",
    "test_id": 2
  },
  "3": {
    "commit_src": "65655da48ab358df81d37532cca208969a0bbded",
    "commit_tgt": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
    "changed_tests": [
      "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/DefaultLoggerTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/LocalizedMessageTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/api/ViolationTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java"
    ],
    "refer_PR": "checkstyle_checkstyle-12105",
    "test_src": ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithAmbiguousException",
    "test_tgt": [
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testMakeCheckFromName",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateModuleWithNonExistName",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithAmbiguousException",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithCantInstantiateException"
    ],
    "focal_path": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#createObjectFromFullModuleNames",
    "focal_src": "    private Object createObjectFromFullModuleNames(String name, Set<String> fullModuleNames)\n            throws CheckstyleException {\n        final Object returnValue;\n        if (fullModuleNames.size() == 1) {\n            returnValue = createObject(fullModuleNames.iterator().next());\n        }\n        else {\n            final String optionalNames = fullModuleNames.stream()\n                    .sorted()\n                    .collect(Collectors.joining(STRING_SEPARATOR));\n            final Violation exceptionMessage = new Violation(1,\n                    Definitions.CHECKSTYLE_BUNDLE, AMBIGUOUS_MODULE_NAME_EXCEPTION_MESSAGE,\n                    new String[] {name, optionalNames}, null, getClass(), null);\n            throw new CheckstyleException(exceptionMessage.getViolation());\n        }\n        return returnValue;\n    }\n",
    "focal_tgt": "    private Object createObjectFromFullModuleNames(String name, Set<String> fullModuleNames)\n            throws CheckstyleException {\n        final Object returnValue;\n        if (fullModuleNames.size() == 1) {\n            returnValue = createObject(fullModuleNames.iterator().next());\n        }\n        else {\n            final String optionalNames = fullModuleNames.stream()\n                    .sorted()\n                    .collect(Collectors.joining(STRING_SEPARATOR));\n            final LocalizedMessage exceptionMessage = new LocalizedMessage(\n                    Definitions.CHECKSTYLE_BUNDLE, getClass(),\n                    AMBIGUOUS_MODULE_NAME_EXCEPTION_MESSAGE, name, optionalNames);\n            throw new CheckstyleException(exceptionMessage.getMessage());\n        }\n        return returnValue;\n    }\n",
    "test_id": 3
  },
  "4": {
    "commit_src": "65655da48ab358df81d37532cca208969a0bbded",
    "commit_tgt": "a8f065738de6c4ff917a2ee57521f6cf8718f2ba",
    "changed_tests": [
      "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/DefaultLoggerTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/LocalizedMessageTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/api/ViolationTest.java",
      "src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java"
    ],
    "refer_PR": "checkstyle_checkstyle-12105",
    "test_src": ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithCantInstantiateException",
    "test_tgt": [
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testMakeCheckFromName",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateModuleWithNonExistName",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithAmbiguousException",
      ".com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest#testCreateObjectFromFullModuleNamesWithCantInstantiateException"
    ],
    "focal_path": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#createObjectFromFullModuleNames",
    "focal_src": "    private Object createObjectFromFullModuleNames(String name, Set<String> fullModuleNames)\n            throws CheckstyleException {\n        final Object returnValue;\n        if (fullModuleNames.size() == 1) {\n            returnValue = createObject(fullModuleNames.iterator().next());\n        }\n        else {\n            final String optionalNames = fullModuleNames.stream()\n                    .sorted()\n                    .collect(Collectors.joining(STRING_SEPARATOR));\n            final Violation exceptionMessage = new Violation(1,\n                    Definitions.CHECKSTYLE_BUNDLE, AMBIGUOUS_MODULE_NAME_EXCEPTION_MESSAGE,\n                    new String[] {name, optionalNames}, null, getClass(), null);\n            throw new CheckstyleException(exceptionMessage.getViolation());\n        }\n        return returnValue;\n    }\n",
    "focal_tgt": "    private Object createObjectFromFullModuleNames(String name, Set<String> fullModuleNames)\n            throws CheckstyleException {\n        final Object returnValue;\n        if (fullModuleNames.size() == 1) {\n            returnValue = createObject(fullModuleNames.iterator().next());\n        }\n        else {\n            final String optionalNames = fullModuleNames.stream()\n                    .sorted()\n                    .collect(Collectors.joining(STRING_SEPARATOR));\n            final LocalizedMessage exceptionMessage = new LocalizedMessage(\n                    Definitions.CHECKSTYLE_BUNDLE, getClass(),\n                    AMBIGUOUS_MODULE_NAME_EXCEPTION_MESSAGE, name, optionalNames);\n            throw new CheckstyleException(exceptionMessage.getMessage());\n        }\n        return returnValue;\n    }\n",
    "test_id": 4
  }
}