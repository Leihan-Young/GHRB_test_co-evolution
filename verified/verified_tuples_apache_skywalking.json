{
  "1": {
    "commit_src": "0945b36dd8648623ea3d60fdf5b1bd5462f67815",
    "commit_tgt": "61278ddd0ef22d7aba0e6834d765eb6027c07770",
    "changed_tests": [
      "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java",
      "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/pagerduty/PagerDutyHookCallbackTest.java"
    ],
    "refer_PR": "apache_skywalking-9247",
    "test_src": ".org.apache.skywalking.oap.server.core.alarm.provider.RulesReaderTest#testReadRules",
    "test_tgt": [
      ".org.apache.skywalking.oap.server.core.alarm.provider.RulesReaderTest#testReadRules"
    ],
    "test_src_code": "    @Test\n    public void testReadRules() {\n        RulesReader reader = new RulesReader(this.getClass()\n                .getClassLoader()\n                .getResourceAsStream(\"alarm-settings.yml\"));\n        Rules rules = reader.readRules();\n\n        List<AlarmRule> ruleList = rules.getRules();\n        Assert.assertEquals(3, ruleList.size());\n        Assert.assertEquals(\"85\", ruleList.get(1).getThreshold());\n        Assert.assertEquals(\"endpoint_percent_rule\", ruleList.get(0).getAlarmRuleName());\n        Assert.assertEquals(0, ruleList.get(0).getIncludeNames().size());\n        Assert.assertEquals(0, ruleList.get(0).getExcludeNames().size());\n        Assert.assertEquals(\"Successful rate of endpoint {name} is lower than 75%\", ruleList.get(0).getMessage());\n\n        Assert.assertEquals(\"service_b\", ruleList.get(1).getIncludeNames().get(1));\n        Assert.assertEquals(\"service_c\", ruleList.get(1).getExcludeNames().get(0));\n        Assert.assertEquals(\"Alarm caused by Rule service_percent_rule\", ruleList.get(1).getMessage());\n\n        List<String> rulesWebhooks = rules.getWebhooks();\n        Assert.assertEquals(2, rulesWebhooks.size());\n        Assert.assertEquals(\"http://127.0.0.1/go-wechat/\", rulesWebhooks.get(1));\n\n        GRPCAlarmSetting grpcAlarmSetting = rules.getGrpchookSetting();\n        assertNotNull(grpcAlarmSetting);\n        assertThat(grpcAlarmSetting.getTargetHost(), is(\"127.0.0.1\"));\n        assertThat(grpcAlarmSetting.getTargetPort(), is(9888));\n\n        SlackSettings slackSettings = rules.getSlacks();\n        assertNotNull(slackSettings);\n        assertThat(slackSettings.getWebhooks().size(), is(1));\n        assertThat(slackSettings.getWebhooks().get(0), is(\"https://hooks.slack.com/services/x/y/zssss\"));\n        assertThat(slackSettings.getTextTemplate(), any(String.class));\n\n        WechatSettings wechatSettings = rules.getWecchats();\n        assertNotNull(wechatSettings);\n        assertThat(wechatSettings.getWebhooks().size(), is(1));\n        assertThat(wechatSettings.getWebhooks().get(0), is(\"https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=dummy_key\"));\n        assertThat(slackSettings.getTextTemplate(), any(String.class));\n\n        List<CompositeAlarmRule> compositeRules = rules.getCompositeRules();\n        Assert.assertEquals(1, compositeRules.size());\n        Assert.assertEquals(\"endpoint_percent_more_rule && endpoint_percent_rule\", compositeRules.get(0).getExpression());\n\n        DingtalkSettings dingtalkSettings = rules.getDingtalks();\n        assertThat(dingtalkSettings.getTextTemplate(), any(String.class));\n        List<DingtalkSettings.WebHookUrl> webHookUrls = dingtalkSettings.getWebhooks();\n        assertThat(webHookUrls.size(), is(2));\n        assertThat(webHookUrls.get(0).getUrl(), is(\"https://oapi.dingtalk.com/robot/send?access_token=dummy_token\"));\n        assertThat(webHookUrls.get(0).getSecret(), is(\"dummysecret\"));\n        assertThat(webHookUrls.get(1).getUrl(), is(\"https://oapi.dingtalk.com/robot/send?access_token=dummy_token2\"));\n        assertNull(webHookUrls.get(1).getSecret());\n\n        FeishuSettings feishuSettings = rules.getFeishus();\n        assertThat(feishuSettings.getTextTemplate(), any(String.class));\n        List<FeishuSettings.WebHookUrl> feishuSettingsWebhooks = feishuSettings.getWebhooks();\n        assertThat(feishuSettingsWebhooks.size(), is(2));\n        assertThat(feishuSettingsWebhooks.get(0).getUrl(), is(\"https://open.feishu.cn/open-apis/bot/v2/hook/dummy_token\"));\n        assertThat(feishuSettingsWebhooks.get(0).getSecret(), is(\"dummysecret\"));\n        assertThat(feishuSettingsWebhooks.get(1).getUrl(), is(\"https://open.feishu.cn/open-apis/bot/v2/hook/dummy_token2\"));\n        assertNull(feishuSettingsWebhooks.get(1).getSecret());\n    }\n",
    "focal_path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java#readRules",
    "focal_src": "    /**\n     * Read rule config file to {@link Rules}\n     */\n    public Rules readRules() {\n        Rules rules = new Rules();\n\n        if (Objects.nonNull(yamlData)) {\n            readRulesConfig(rules);\n            readWebHookConfig(rules);\n            readGrpcConfig(rules);\n            readSlackConfig(rules);\n            readWechatConfig(rules);\n            readCompositeRuleConfig(rules);\n            readDingtalkConfig(rules);\n            readFeishuConfig(rules);\n            readWeLinkConfig(rules);\n        }\n        return rules;\n    }\n",
    "focal_tgt": "    /**\n     * Read rule config file to {@link Rules}\n     */\n    public Rules readRules() {\n        Rules rules = new Rules();\n\n        if (Objects.nonNull(yamlData)) {\n            readRulesConfig(rules);\n            readWebHookConfig(rules);\n            readGrpcConfig(rules);\n            readSlackConfig(rules);\n            readWechatConfig(rules);\n            readCompositeRuleConfig(rules);\n            readDingtalkConfig(rules);\n            readFeishuConfig(rules);\n            readWeLinkConfig(rules);\n            readPagerDutyConfig(rules);\n        }\n        return rules;\n    }\n",
    "test_id": 1
  },
  "2": {
    "commit_src": "a471b85ac2648d4a93ec4e853e4ee101324cf1bd",
    "commit_tgt": "a61b3bb1f760c5dc91650a1f4fb3704f527b3e16",
    "changed_tests": [
      "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAOIT.java"
    ],
    "refer_PR": "apache_skywalking-11897",
    "test_src": ".org.apache.skywalking.oap.server.storage.plugin.jdbc.common.dao.JDBCHistoryDeleteDAOIT#test",
    "test_tgt": [
      ".org.apache.skywalking.oap.server.storage.plugin.jdbc.common.dao.JDBCHistoryDeleteDAOIT#test"
    ],
    "test_src_code": "",
    "focal_path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAO.java#deleteHistory",
    "focal_src": "    @Override\n    @SneakyThrows\n    public void deleteHistory(Model model, String timeBucketColumnName, int ttl) {\n        final var endTimeBucket = TimeBucket.getTimeBucket(clock.millis() + TimeUnit.DAYS.toMillis(1), DownSampling.Day);\n        final var startTimeBucket = TimeBucket.getTimeBucket(clock.millis() - TimeUnit.DAYS.toMillis(ttl), DownSampling.Day);\n        log.info(\n            \"Deleting history data, ttl: {}, now: {}. Keep [{}, {}]\",\n            ttl,\n            clock.millis(),\n            startTimeBucket,\n            endTimeBucket\n        );\n\n        final var deadline = Long.parseLong(new DateTime().minusDays(ttl).toString(\"yyyyMMdd\"));\n        final var lastSuccessDeadline = lastDeletedTimeBucket.getOrDefault(model.getName(), 0L);\n        if (deadline <= lastSuccessDeadline) {\n            if (log.isDebugEnabled()) {\n                log.debug(\n                    \"The deadline {} is less than the last success deadline {}, skip deleting history data\",\n                    deadline,\n                    lastSuccessDeadline\n                );\n            }\n            return;\n        }\n\n        final var ttlTables = tableHelper.getTablesInTimeBucketRange(model.getName(), startTimeBucket, endTimeBucket);\n        final var tablesToDrop = new HashSet<String>();\n        final var tableName = TableHelper.getTableName(model);\n\n        try (final var conn = jdbcClient.getConnection();\n             final var result = conn.getMetaData().getTables(conn.getCatalog(), null, tableName + \"%\", new String[]{\"TABLE\"})) {\n            while (result.next()) {\n                tablesToDrop.add(result.getString(\"TABLE_NAME\"));\n            }\n        }\n\n        ttlTables.forEach(tablesToDrop::remove);\n        tablesToDrop.removeIf(it -> !it.matches(tableName + \"_\\\\d{8}$\"));\n        for (final var table : tablesToDrop) {\n            final var dropSql = new SQLBuilder(\"drop table if exists \").append(table);\n            jdbcClient.executeUpdate(dropSql.toString());\n        }\n\n        // Drop additional tables\n        for (final var table : tablesToDrop) {\n            final var timeBucket = TableHelper.getTimeBucket(table);\n            for (final var additionalTable : model.getSqlDBModelExtension().getAdditionalTables().values()) {\n                final var additionalTableToDrop = TableHelper.getTable(additionalTable.getName(), timeBucket);\n                final var dropSql = new SQLBuilder(\"drop table if exists \").append(additionalTableToDrop);\n                jdbcClient.executeUpdate(dropSql.toString());\n            }\n        }\n\n        // Create tables for the next day.\n        final var nextTimeBucket = TimeBucket.getTimeBucket(clock.millis() + TimeUnit.DAYS.toMillis(1), DownSampling.Day);\n        modelInstaller.createTable(model, nextTimeBucket);\n\n        lastDeletedTimeBucket.put(model.getName(), deadline);\n    }\n",
    "focal_tgt": "    @Override\n    @SneakyThrows\n    public void deleteHistory(Model model, String timeBucketColumnName, int ttl) {\n        final var endTimeBucket = TimeBucket.getTimeBucket(clock.millis() + TimeUnit.DAYS.toMillis(1), DownSampling.Day);\n        final var startTimeBucket = TimeBucket.getTimeBucket(clock.millis() - TimeUnit.DAYS.toMillis(ttl), DownSampling.Day);\n        log.info(\n            \"Deleting history data, ttl: {}, now: {}. Keep [{}, {}]\",\n            ttl,\n            clock.millis(),\n            startTimeBucket,\n            endTimeBucket\n        );\n\n        final var deadline = Long.parseLong(new DateTime().minusDays(ttl).toString(\"yyyyMMdd\"));\n        final var lastSuccessDeadline = lastDeletedTimeBucket.getOrDefault(model.getName(), 0L);\n        if (deadline <= lastSuccessDeadline) {\n            if (log.isDebugEnabled()) {\n                log.debug(\n                    \"The deadline {} is less than the last success deadline {}, skip deleting history data\",\n                    deadline,\n                    lastSuccessDeadline\n                );\n            }\n            return;\n        }\n\n        final var ttlTables = tableHelper.getTablesInTimeBucketRange(model.getName(), startTimeBucket, endTimeBucket);\n        final var tablesToDrop = new HashSet<String>();\n        final var tableName = TableHelper.getTableName(model);\n\n        try (final var conn = jdbcClient.getConnection();\n             final var result = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), tableName + \"%\", new String[]{\"TABLE\"})) {\n            while (result.next()) {\n                tablesToDrop.add(result.getString(\"TABLE_NAME\"));\n            }\n        }\n\n        ttlTables.forEach(tablesToDrop::remove);\n        tablesToDrop.removeIf(it -> !it.matches(tableName + \"_\\\\d{8}$\"));\n        for (final var table : tablesToDrop) {\n            final var dropSql = new SQLBuilder(\"drop table if exists \").append(table);\n            jdbcClient.executeUpdate(dropSql.toString());\n        }\n\n        // Drop additional tables\n        for (final var table : tablesToDrop) {\n            final var timeBucket = TableHelper.getTimeBucket(table);\n            for (final var additionalTable : model.getSqlDBModelExtension().getAdditionalTables().values()) {\n                final var additionalTableToDrop = TableHelper.getTable(additionalTable.getName(), timeBucket);\n                final var dropSql = new SQLBuilder(\"drop table if exists \").append(additionalTableToDrop);\n                jdbcClient.executeUpdate(dropSql.toString());\n            }\n        }\n\n        // Create tables for the next day.\n        final var nextTimeBucket = TimeBucket.getTimeBucket(clock.millis() + TimeUnit.DAYS.toMillis(1), DownSampling.Day);\n        modelInstaller.createTable(model, nextTimeBucket);\n\n        lastDeletedTimeBucket.put(model.getName(), deadline);\n    }\n",
    "test_id": 2
  }
}