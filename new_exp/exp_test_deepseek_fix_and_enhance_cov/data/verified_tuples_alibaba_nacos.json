{
  "1": {
    "commit_src": "71389b0f568f9a3da04ef26409f6a45e59dcec07",
    "commit_tgt": "4db3e8c28fa12ab38e18ddd9db5955a6d23396ca",
    "changed_tests": [
      "client/src/test/java/com/alibaba/nacos/client/naming/remote/gprc/NamingGrpcClientProxyTest.java",
      "client/src/test/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoServiceTest.java",
      "client/src/test/java/com/alibaba/nacos/client/naming/remote/gprc/redo/RedoScheduledTaskTest.java",
      "client/src/test/java/com/alibaba/nacos/client/naming/remote/gprc/redo/data/BatchInstanceRedoDataTest.java"
    ],
    "refer_PR": "alibaba_nacos-9893",
    "test_src": ".com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoServiceTest#testInstanceDeregister",
    "test_tgt": [
      ".com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoServiceTest#testInstanceDeregister",
      ".com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoServiceTest#testInstanceDeregistered",
      ".com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoServiceTest#testIsSubscriberRegistered"
    ],
    "test_src_code": "    @Test\n    public void testInstanceDeregister() {\n        ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n        redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n        redoService.instanceDeregister(SERVICE, GROUP);\n        InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n        assertTrue(actual.isUnregistering());\n    }\n",
    "focal_path_src": [
      "client/src/main/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoService.java#instanceDeregister"
    ],
    "focal_path_tgt": [
      "client/src/main/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoService.java#instanceDeregister"
    ],
    "focal_src": [
      "    /**\n     * Instance deregister, mark unregistering status as {@code true}.\n     *\n     * @param serviceName service name\n     * @param groupName   group name\n     */\n    public void instanceDeregister(String serviceName, String groupName) {\n        String key = NamingUtils.getGroupedName(serviceName, groupName);\n        synchronized (registeredInstances) {\n            InstanceRedoData redoData = registeredInstances.get(key);\n            if (null != redoData) {\n                redoData.setUnregistering(true);\n            }\n        }\n    }\n"
    ],
    "focal_tgt": [
      "    /**\n     * Instance deregister, mark unregistering status as {@code true}.\n     *\n     * @param serviceName service name\n     * @param groupName   group name\n     */\n    public void instanceDeregister(String serviceName, String groupName) {\n        String key = NamingUtils.getGroupedName(serviceName, groupName);\n        synchronized (registeredInstances) {\n            InstanceRedoData redoData = registeredInstances.get(key);\n            if (null != redoData) {\n                redoData.setUnregistering(true);\n                redoData.setExpectedRegistered(false);\n            }\n        }\n    }\n"
    ],
    "test_id": 1,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n",
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n",
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n",
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n",
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n",
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n",
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n",
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n",
      "@Test\npublic void testInstanceDeregister() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    redoService.instanceDeregister(SERVICE, GROUP);\n    InstanceRedoData actual = registeredInstances.entrySet().iterator().next().getValue();\n    assertTrue(actual.isUnregistering());\n    assertFalse(actual.isExpectedRegistered());\n}\n"
    ]
  },
  "2": {
    "commit_src": "428e0bc66875465cbc35ce946969dee7afafd9ca",
    "commit_tgt": "30954dc612209e0f77ec68c2061d7154fff60c5a",
    "changed_tests": [
      "client/src/test/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoServiceTest.java"
    ],
    "refer_PR": "alibaba_nacos-9907",
    "test_src": ".com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoServiceTest#testRemoveInstanceForRedo",
    "test_tgt": [
      ".com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoServiceTest#testRemoveInstanceForRedo"
    ],
    "test_src_code": "    @Test\n    public void testRemoveInstanceForRedo() {\n        ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n        assertTrue(registeredInstances.isEmpty());\n        redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n        assertFalse(registeredInstances.isEmpty());\n        redoService.removeInstanceForRedo(SERVICE, GROUP);\n        assertTrue(registeredInstances.isEmpty());\n    }\n",
    "focal_path_src": [
      "client/src/main/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoService.java#removeInstanceForRedo"
    ],
    "focal_path_tgt": [
      "client/src/main/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoService.java#removeInstanceForRedo"
    ],
    "focal_src": [
      "    /**\n     * Remove registered instance for redo.\n     *\n     * @param serviceName service name\n     * @param groupName   group name\n     */\n    public void removeInstanceForRedo(String serviceName, String groupName) {\n        synchronized (registeredInstances) {\n            registeredInstances.remove(NamingUtils.getGroupedName(serviceName, groupName));\n        }\n    }\n"
    ],
    "focal_tgt": [
      "    /**\n     * Remove registered instance for redo.\n     *\n     * @param serviceName service name\n     * @param groupName   group name\n     */\n    public void removeInstanceForRedo(String serviceName, String groupName) {\n        String key = NamingUtils.getGroupedName(serviceName, groupName);\n        synchronized (registeredInstances) {\n            InstanceRedoData redoData = registeredInstances.get(key);\n            if (null != redoData && !redoData.isExpectedRegistered()) {\n                registeredInstances.remove(key);\n            }\n        }\n    }\n"
    ],
    "test_id": 2,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testRemoveInstanceForRedo() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    assertTrue(registeredInstances.isEmpty());\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    assertFalse(registeredInstances.isEmpty());\n    redoService.removeInstanceForRedo(SERVICE, GROUP);\n    assertTrue(registeredInstances.isEmpty());\n}\n",
      "@Test\npublic void testRemoveInstanceForRedo() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    assertTrue(registeredInstances.isEmpty());\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    assertFalse(registeredInstances.isEmpty());\n    redoService.removeInstanceForRedo(SERVICE, GROUP);\n    assertTrue(registeredInstances.isEmpty());\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testRemoveInstanceForRedo() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    assertTrue(registeredInstances.isEmpty());\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    assertFalse(registeredInstances.isEmpty());\n    redoService.removeInstanceForRedo(SERVICE, GROUP);\n    assertTrue(registeredInstances.isEmpty());\n}\n",
      "@Test\npublic void testRemoveInstanceForRedo() {\n    ConcurrentMap<String, InstanceRedoData> registeredInstances = getInstanceRedoDataMap();\n    assertTrue(registeredInstances.isEmpty());\n    redoService.cacheInstanceForRedo(SERVICE, GROUP, new Instance());\n    assertFalse(registeredInstances.isEmpty());\n    redoService.removeInstanceForRedo(SERVICE, GROUP);\n    assertTrue(registeredInstances.isEmpty());\n}\n"
    ]
  },
  "3": {
    "commit_src": "428e0bc66875465cbc35ce946969dee7afafd9ca",
    "commit_tgt": "30954dc612209e0f77ec68c2061d7154fff60c5a",
    "changed_tests": [
      "client/src/test/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoServiceTest.java"
    ],
    "refer_PR": "alibaba_nacos-9907",
    "test_src": ".com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoServiceTest#testRemoveSubscriberForRedo",
    "test_tgt": [
      ".com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoServiceTest#testRemoveSubscriberForRedo"
    ],
    "test_src_code": "    @Test\n    public void testRemoveSubscriberForRedo() {\n        ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n        assertTrue(subscribes.isEmpty());\n        redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertFalse(subscribes.isEmpty());\n        redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertTrue(subscribes.isEmpty());\n    }\n",
    "focal_path_src": [
      "client/src/main/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoService.java#removeSubscriberForRedo"
    ],
    "focal_path_tgt": [
      "client/src/main/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoService.java#removeSubscriberForRedo"
    ],
    "focal_src": [
      "    /**\n     * Remove subscriber for redo.\n     *\n     * @param serviceName service name\n     * @param groupName   group name\n     * @param cluster     cluster\n     */\n    public void removeSubscriberForRedo(String serviceName, String groupName, String cluster) {\n        synchronized (subscribes) {\n            subscribes.remove(ServiceInfo.getKey(NamingUtils.getGroupedName(serviceName, groupName), cluster));\n        }\n    }\n"
    ],
    "focal_tgt": [
      "    /**\n     * Remove subscriber for redo.\n     *\n     * @param serviceName service name\n     * @param groupName   group name\n     * @param cluster     cluster\n     */\n    public void removeSubscriberForRedo(String serviceName, String groupName, String cluster) {\n        String key = ServiceInfo.getKey(NamingUtils.getGroupedName(serviceName, groupName), cluster);\n        synchronized (subscribes) {\n            SubscriberRedoData redoData = subscribes.get(key);\n            if (null != redoData && !redoData.isExpectedRegistered()) {\n                subscribes.remove(key);\n            }\n        }\n    }\n"
    ],
    "test_id": 3,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testRemoveSubscriberForRedo() {\n    ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n    assertTrue(subscribes.isEmpty());\n    redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertFalse(subscribes.isEmpty());\n    redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertTrue(subscribes.isEmpty());\n}\n",
      "@Test\npublic void testRemoveSubscriberForRedo() {\n    ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n    assertTrue(subscribes.isEmpty());\n    redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertFalse(subscribes.isEmpty());\n    redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertTrue(subscribes.isEmpty());\n}\n",
      "@Test\npublic void testRemoveSubscriberForRedo() {\n    ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n    assertTrue(subscribes.isEmpty());\n    redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertFalse(subscribes.isEmpty());\n    redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertTrue(subscribes.isEmpty());\n}\n",
      "@Test\npublic void testRemoveSubscriberForRedo() {\n    ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n    assertTrue(subscribes.isEmpty());\n    redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertFalse(subscribes.isEmpty());\n    redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertTrue(subscribes.isEmpty());\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testRemoveSubscriberForRedo() {\n    ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n    assertTrue(subscribes.isEmpty());\n    redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertFalse(subscribes.isEmpty());\n    redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertTrue(subscribes.isEmpty());\n}\n",
      "@Test\npublic void testRemoveSubscriberForRedo() {\n    ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n    assertTrue(subscribes.isEmpty());\n    redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertFalse(subscribes.isEmpty());\n    redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertTrue(subscribes.isEmpty());\n}\n",
      "@Test\npublic void testRemoveSubscriberForRedo() {\n    ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n    assertTrue(subscribes.isEmpty());\n    redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertFalse(subscribes.isEmpty());\n    redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertTrue(subscribes.isEmpty());\n}\n",
      "@Test\npublic void testRemoveSubscriberForRedo() {\n    ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n    assertTrue(subscribes.isEmpty());\n    redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertFalse(subscribes.isEmpty());\n    redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n    assertTrue(subscribes.isEmpty());\n}\n"
    ]
  },
  "4": {
    "commit_src": "c0dcbde91ead7a8872b865acf11644bd3ca65bec",
    "commit_tgt": "260a3e65164b2077dec25757d55591b8d3e83fad",
    "changed_tests": [
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/derby/HistoryConfigInfoMapperByDerbyTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/derby/TenantCapacityMapperByDerbyTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySqlTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoBetaMapperByMySqlTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySqlTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoTagMapperByMySqlTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigTagsRelationMapperByMySqlTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/GroupCapacityMapperByMysqlTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/HistoryConfigInfoMapperByMySqlTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/TenantCapacityMapperByMySqlTest.java"
    ],
    "refer_PR": "alibaba_nacos-10324",
    "test_src": ".com.alibaba.nacos.plugin.datasource.impl.mysql.ConfigInfoAggrMapperByMySqlTest#testFindConfigInfoAggrByPageFetchRows",
    "test_tgt": [
      ".com.alibaba.nacos.plugin.datasource.impl.mysql.ConfigInfoAggrMapperByMySqlTest#testFindConfigInfoAggrByPageFetchRows"
    ],
    "test_src_code": "    @Test\n    public void testFindConfigInfoAggrByPageFetchRows() {\n        String sql = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(0, 5);\n        Assert.assertEquals(sql,\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                        + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n    }\n",
    "focal_path_src": [
      "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySql.java#findConfigInfoAggrByPageFetchRows"
    ],
    "focal_path_tgt": [
      "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySql.java#findConfigInfoAggrByPageFetchRows"
    ],
    "focal_src": [
      "    @Override\n    public String findConfigInfoAggrByPageFetchRows(int startRow, int pageSize) {\n        return \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public MapperResult findConfigInfoAggrByPageFetchRows(MapperContext context) {\n        Integer startRow =  context.getStartRow();\n        Integer pageSize =  context.getPageSize();\n        String dataId = (String) context.getWhereParameter(FieldConstant.DATA_ID);\n        String groupId = (String) context.getWhereParameter(FieldConstant.GROUP_ID);\n        String tenantId = (String) context.getWhereParameter(FieldConstant.TENANT_ID);\n        \n        String sql =\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                        + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n        List<Object> paramList = CollectionUtils.list(dataId, groupId, tenantId);\n        return new MapperResult(sql, paramList);\n    }\n"
    ],
    "test_id": 4,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testFindConfigInfoAggrByPageFetchRows() {\n    MapperContext context = new MapperContext();\n    context.setStartRow(0);\n    context.setPageSize(5);\n    context.putWhereParameter(FieldConstant.DATA_ID, \"123\");\n    context.putWhereParameter(FieldConstant.GROUP_ID, \"456\");\n    context.putWhereParameter(FieldConstant.TENANT_ID, \"789\");\n\n    MapperResult result = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n    String expectedSql = \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n            + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\";\n    Assert.assertEquals(expectedSql, result.getSql());\n\n    List<Object> expectedParamList = CollectionUtils.list(\"123\", \"456\", \"789\");\n    Assert.assertEquals(expectedParamList, result.getParamList());\n}\n",
      "@Test\npublic void testFindConfigInfoAggrByPageFetchRows() {\n    MapperContext context = new MapperContext();\n    context.setStartRow(0);\n    context.setPageSize(5);\n    context.putWhereParameter(FieldConstant.DATA_ID, \"data_id\");\n    context.putWhereParameter(FieldConstant.GROUP_ID, \"group_id\");\n    context.putWhereParameter(FieldConstant.TENANT_ID, \"tenant_id\");\n\n    MapperResult result = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n    Assert.assertEquals(result.getSql(),\n            \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                    + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n    Assert.assertEquals(result.getParamList(), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testFindConfigInfoAggrByPageFetchRows() {\n    MapperContext context = new MapperContext();\n    context.setStartRow(0);\n    context.setPageSize(5);\n    context.putWhereParameter(FieldConstant.DATA_ID, \"123\");\n    context.putWhereParameter(FieldConstant.GROUP_ID, \"456\");\n    context.putWhereParameter(FieldConstant.TENANT_ID, \"789\");\n\n    MapperResult result = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n    String expectedSql = \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n            + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\";\n    Assert.assertEquals(expectedSql, result.getSql());\n\n    List<Object> expectedParamList = CollectionUtils.list(\"123\", \"456\", \"789\");\n    Assert.assertEquals(expectedParamList, result.getParamList());\n}\n",
      "@Test\npublic void testFindConfigInfoAggrByPageFetchRows() {\n    MapperContext context = new MapperContext();\n    context.setStartRow(0);\n    context.setPageSize(5);\n    context.putWhereParameter(FieldConstant.DATA_ID, \"data_id\");\n    context.putWhereParameter(FieldConstant.GROUP_ID, \"group_id\");\n    context.putWhereParameter(FieldConstant.TENANT_ID, \"tenant_id\");\n\n    MapperResult result = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n    Assert.assertEquals(result.getSql(),\n            \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                    + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n    Assert.assertEquals(result.getParamList(), Arrays.asList(\"data_id\", \"group_id\", \"tenant_id\"));\n}\n"
    ]
  },
  "5": {
    "commit_src": "86cf2082a9eb7ad2f63a339238deff5d1c344369",
    "commit_tgt": "37d45ad8b62eb8733dd18adc4187d2e1bff65220",
    "changed_tests": [
      "common/src/test/java/com/alibaba/nacos/common/remote/client/RpcClientTest.java"
    ],
    "refer_PR": "alibaba_nacos-10958",
    "test_src": ".com.alibaba.nacos.common.remote.client.RpcClientTest#testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer",
    "test_tgt": [
      ".com.alibaba.nacos.common.remote.client.RpcClientTest#testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer"
    ],
    "test_src_code": "    @Test\n    public void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n            throws NacosException, IllegalAccessException {\n        when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n        when(rpcClientConfig.retryTimes()).thenReturn(3);\n        rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n        rpcClient.currentConnection = connection;\n        doThrow(NacosException.class).when(connection).requestFuture(any());\n        Exception exception = null;\n        \n        try {\n            rpcClient.requestFuture(null);\n        } catch (NacosException e) {\n            exception = e;\n        }\n        \n        verify(connection, times(3)).requestFuture(any());\n        verify(rpcClient).switchServerAsyncOnRequestFail();\n        Assert.assertNotNull(exception);\n        assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n    }\n",
    "focal_path_src": [
      "common/src/main/java/com/alibaba/nacos/common/remote/client/RpcClient.java#requestFuture"
    ],
    "focal_path_tgt": [
      "common/src/main/java/com/alibaba/nacos/common/remote/client/RpcClient.java#requestFuture"
    ],
    "focal_src": [
      "    /**\n     * send async request.\n     *\n     * @param request request.\n     * @return request future.\n     */\n    public RequestFuture requestFuture(Request request) throws NacosException {\n        int retryTimes = 0;\n        long start = System.currentTimeMillis();\n        Exception exceptionToThrow = null;\n        while (retryTimes < rpcClientConfig.retryTimes()\n                && System.currentTimeMillis() < start + rpcClientConfig.timeOutMills()) {\n            boolean waitReconnect = false;\n            try {\n                if (this.currentConnection == null || !isRunning()) {\n                    waitReconnect = true;\n                    throw new NacosException(NacosException.CLIENT_DISCONNECT, \"Client not connected.\");\n                }\n                return this.currentConnection.requestFuture(request);\n            } catch (Exception e) {\n                if (waitReconnect) {\n                    try {\n                        // wait client to reconnect.\n                        Thread.sleep(100L);\n                    } catch (Exception exception) {\n                        // Do nothing.\n                    }\n                }\n                LoggerUtils.printIfErrorEnabled(LOGGER,\n                        \"[{}] Send request fail, request = {}, retryTimes = {}, errorMessage = {}\",\n                        rpcClientConfig.name(), request, retryTimes, e.getMessage());\n                exceptionToThrow = e;\n                \n            }\n            retryTimes++;\n        }\n        \n        if (rpcClientStatus.compareAndSet(RpcClientStatus.RUNNING, RpcClientStatus.UNHEALTHY)) {\n            switchServerAsyncOnRequestFail();\n        }\n        \n        if (exceptionToThrow != null) {\n            throw (exceptionToThrow instanceof NacosException) ? (NacosException) exceptionToThrow\n                    : new NacosException(SERVER_ERROR, exceptionToThrow);\n        } else {\n            throw new NacosException(SERVER_ERROR, \"Request future fail, unknown error\");\n        }\n        \n    }\n"
    ],
    "focal_tgt": [
      "    /**\n     * send async request.\n     *\n     * @param request request.\n     * @return request future.\n     */\n    public RequestFuture requestFuture(Request request) throws NacosException {\n        int retryTimes = 0;\n        long start = System.currentTimeMillis();\n        Exception exceptionToThrow = null;\n        while (retryTimes <= rpcClientConfig.retryTimes()\n                && System.currentTimeMillis() < start + rpcClientConfig.timeOutMills()) {\n            boolean waitReconnect = false;\n            try {\n                if (this.currentConnection == null || !isRunning()) {\n                    waitReconnect = true;\n                    throw new NacosException(NacosException.CLIENT_DISCONNECT, \"Client not connected.\");\n                }\n                return this.currentConnection.requestFuture(request);\n            } catch (Exception e) {\n                if (waitReconnect) {\n                    try {\n                        // wait client to reconnect.\n                        Thread.sleep(100L);\n                    } catch (Exception exception) {\n                        // Do nothing.\n                    }\n                }\n                LoggerUtils.printIfErrorEnabled(LOGGER,\n                        \"[{}] Send request fail, request = {}, retryTimes = {}, errorMessage = {}\",\n                        rpcClientConfig.name(), request, retryTimes, e.getMessage());\n                exceptionToThrow = e;\n                \n            }\n            retryTimes++;\n        }\n        \n        if (rpcClientStatus.compareAndSet(RpcClientStatus.RUNNING, RpcClientStatus.UNHEALTHY)) {\n            switchServerAsyncOnRequestFail();\n        }\n        \n        if (exceptionToThrow != null) {\n            throw (exceptionToThrow instanceof NacosException) ? (NacosException) exceptionToThrow\n                    : new NacosException(SERVER_ERROR, exceptionToThrow);\n        } else {\n            throw new NacosException(SERVER_ERROR, \"Request future fail, unknown error\");\n        }\n        \n    }\n"
    ],
    "test_id": 5,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n}\n",
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n}\n",
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n}\n",
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n}\n",
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n    // Test when the client is not connected\n    rpcClient.currentConnection = null;\n    exception = null;\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    Assert.assertNotNull(exception);\n    assertEquals(\"Client not connected.\", exception.getMessage());\n}\n",
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n    // Test when the client is not connected\n    rpcClient.currentConnection = null;\n    exception = null;\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    Assert.assertNotNull(exception);\n    assertEquals(\"Client not connected.\", exception.getMessage());\n}\n",
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n    // Test when the client is not connected\n    rpcClient.currentConnection = null;\n    exception = null;\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    Assert.assertNotNull(exception);\n    assertEquals(\"Client not connected.\", exception.getMessage());\n}\n",
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n    // Test when the client is not connected\n    rpcClient.currentConnection = null;\n    exception = null;\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    Assert.assertNotNull(exception);\n    assertEquals(\"Client not connected.\", exception.getMessage());\n}\n",
      "@Test\npublic void testRequestFutureWhenRetryReachMaxRetryTimesThenSwitchServer()\n        throws NacosException, IllegalAccessException {\n    when(rpcClientConfig.timeOutMills()).thenReturn(5000L);\n    when(rpcClientConfig.retryTimes()).thenReturn(3);\n    rpcClient.rpcClientStatus.set(RpcClientStatus.RUNNING);\n    rpcClient.currentConnection = connection;\n    doThrow(NacosException.class).when(connection).requestFuture(any());\n    Exception exception = null;\n\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    verify(connection, times(3)).requestFuture(any());\n    verify(rpcClient).switchServerAsyncOnRequestFail();\n    Assert.assertNotNull(exception);\n    assertEquals(RpcClientStatus.UNHEALTHY, rpcClient.rpcClientStatus.get());\n    // Test when the client is not connected\n    rpcClient.currentConnection = null;\n    exception = null;\n    try {\n        rpcClient.requestFuture(null);\n    } catch (NacosException e) {\n        exception = e;\n    }\n\n    Assert.assertNotNull(exception);\n    assertEquals(\"Client not connected.\", exception.getMessage());\n}\n"
    ]
  },
  "6": {
    "commit_src": "76861a989ee856478cce651ac0d139c26a9dcdf3",
    "commit_tgt": "1192e4c36e781a51f9c787bb317d6d76cd76dffd",
    "changed_tests": [
      "core/src/test/java/com/alibaba/nacos/core/ability/AbilityControlManagerTest.java",
      "core/src/test/java/com/alibaba/nacos/core/ability/TestServerAbilityControlManager.java",
      "core/src/test/java/com/alibaba/nacos/core/ability/config/AbilityConfigsTest.java",
      "core/src/test/java/com/alibaba/nacos/core/ability/config/TestAbilityConfig.java",
      "core/src/test/java/com/alibaba/nacos/core/cluster/MemberUtilTest.java",
      "test/core-test/src/test/java/com/alibaba/nacos/test/ability/AbilityDiscovery.java",
      "test/core-test/src/test/java/com/alibaba/nacos/test/ability/component/TestServerAbilityControlManager.java"
    ],
    "refer_PR": "alibaba_nacos-11204",
    "test_src": ".com.alibaba.nacos.core.cluster.MemberUtilTest#testIsBasicInfoChangedForChangedAbilities",
    "test_tgt": [
      ".com.alibaba.nacos.core.cluster.MemberUtilTest#testIsBasicInfoChangedForChangedAbilities"
    ],
    "test_src_code": "    @Test\n    public void testIsBasicInfoChangedForChangedAbilities() {\n        Member newMember = buildMember();\n        newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n        assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n    }\n",
    "focal_path_src": [
      "core/src/main/java/com/alibaba/nacos/core/cluster/MemberUtil.java#isBasicInfoChanged"
    ],
    "focal_path_tgt": [
      "core/src/main/java/com/alibaba/nacos/core/cluster/MemberUtil.java#isBasicInfoChanged"
    ],
    "focal_src": [
      "    /**\n     * Judge whether basic info has changed.\n     *\n     * @param actual   actual member\n     * @param expected expected member\n     * @return true if one content is different, otherwise false\n     */\n    public static boolean isBasicInfoChanged(Member actual, Member expected) {\n        if (null == expected) {\n            return null != actual;\n        }\n        if (!expected.getIp().equals(actual.getIp())) {\n            return true;\n        }\n        if (expected.getPort() != actual.getPort()) {\n            return true;\n        }\n        if (!expected.getAddress().equals(actual.getAddress())) {\n            return true;\n        }\n        if (!expected.getState().equals(actual.getState())) {\n            return true;\n        }\n        \n        if (!expected.getAbilities().equals(actual.getAbilities())) {\n            return true;\n        }\n        \n        return isBasicInfoChangedInExtendInfo(expected, actual);\n    }\n"
    ],
    "focal_tgt": [
      "    /**\n     * Judge whether basic info has changed.\n     *\n     * @param actual   actual member\n     * @param expected expected member\n     * @return true if one content is different, otherwise false\n     */\n    public static boolean isBasicInfoChanged(Member actual, Member expected) {\n        if (null == expected) {\n            return null != actual;\n        }\n        if (!expected.getIp().equals(actual.getIp())) {\n            return true;\n        }\n        if (expected.getPort() != actual.getPort()) {\n            return true;\n        }\n        if (!expected.getAddress().equals(actual.getAddress())) {\n            return true;\n        }\n        if (!expected.getState().equals(actual.getState())) {\n            return true;\n        }\n    \n        // if change\n        if (expected.isGrpcReportEnabled() != actual.isGrpcReportEnabled()) {\n            return true;\n        }\n        \n        return isBasicInfoChangedInExtendInfo(expected, actual);\n    }\n"
    ],
    "test_id": 6,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n",
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n",
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n",
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n",
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(false);\n    assertFalse(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n",
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(false);\n    assertFalse(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n",
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(false);\n    assertFalse(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n",
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(false);\n    assertFalse(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n",
      "@Test\npublic void testIsBasicInfoChangedForChangedAbilities() {\n    Member newMember = buildMember();\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);\n    assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n    newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(false);\n    assertFalse(MemberUtil.isBasicInfoChanged(newMember, originalMember));\n}\n"
    ]
  },
  "7": {
    "commit_src": "7911eb03dbe3f2616edf8b4accd9dcb1d6eef3d7",
    "commit_tgt": "d85e3f7f314d532825d0d942d1598d633eddc3e1",
    "changed_tests": [
      "sys/src/test/java/com/alibaba/nacos/sys/utils/PropertiesUtilTest.java"
    ],
    "refer_PR": "alibaba_nacos-11240",
    "test_src": ".com.alibaba.nacos.sys.utils.PropertiesUtilTest#testGetPropertiesWithPrefixForMap",
    "test_tgt": [
      ".com.alibaba.nacos.sys.utils.PropertiesUtilTest#testGetPropertiesWithPrefixForMap",
      ".com.alibaba.nacos.sys.utils.PropertiesUtilTest#testHandleSpringBinder"
    ],
    "test_src_code": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetPropertiesWithPrefixForMap()\n            throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n        Map<String, Object> actual = PropertiesUtil.getPropertiesWithPrefixForMap(environment, \"nacos.prefix\");\n        assertEquals(3, actual.size());\n        for (Map.Entry<String, Object> entry : actual.entrySet()) {\n            String key = entry.getKey();\n            Map<String, Object> subMap = (Map<String, Object>) entry.getValue();\n            switch (key) {\n                case \"one\":\n                    assertEquals(\"1\", subMap.get(\"value\"));\n                    break;\n                case \"two\":\n                    assertEquals(\"2\", subMap.get(\"value\"));\n                    break;\n                case \"three\":\n                    assertEquals(\"3\", subMap.get(\"value\"));\n                    break;\n                default:\n                    throw new RuntimeException();\n            }\n        }\n    }\n",
    "focal_path_src": [
      "sys/src/main/java/com/alibaba/nacos/sys/utils/PropertiesUtil.java#getPropertiesWithPrefixForMap"
    ],
    "focal_path_tgt": [
      "sys/src/main/java/com/alibaba/nacos/sys/utils/PropertiesUtil.java#getPropertiesWithPrefixForMap"
    ],
    "focal_src": [
      "    public static Map<String, Object> getPropertiesWithPrefixForMap(Environment environment, String prefix)\n            throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        return handleSpringBinder(environment, prefix, Map.class);\n    }\n"
    ],
    "focal_tgt": [
      "    public static Map<String, Object> getPropertiesWithPrefixForMap(Environment environment, String prefix) {\n        return handleSpringBinder(environment, prefix, Map.class);\n    }\n"
    ],
    "test_id": 7,
    "identify_result_deepseek-coder": false
  },
  "8": {
    "commit_src": "7911eb03dbe3f2616edf8b4accd9dcb1d6eef3d7",
    "commit_tgt": "d85e3f7f314d532825d0d942d1598d633eddc3e1",
    "changed_tests": [
      "sys/src/test/java/com/alibaba/nacos/sys/utils/PropertiesUtilTest.java"
    ],
    "refer_PR": "alibaba_nacos-11240",
    "test_src": ".com.alibaba.nacos.sys.utils.PropertiesUtilTest#testGetPropertiesWithPrefix",
    "test_tgt": [
      ".com.alibaba.nacos.sys.utils.PropertiesUtilTest#testGetPropertiesWithPrefix",
      ".com.alibaba.nacos.sys.utils.PropertiesUtilTest#testHandleSpringBinder"
    ],
    "test_src_code": "    @Test\n    public void testGetPropertiesWithPrefix()\n            throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n        Properties actual = PropertiesUtil.getPropertiesWithPrefix(environment, \"nacos.prefix\");\n        assertEquals(3, actual.size());\n    }\n",
    "focal_path_src": [
      "sys/src/main/java/com/alibaba/nacos/sys/utils/PropertiesUtil.java#getPropertiesWithPrefix"
    ],
    "focal_path_tgt": [
      "sys/src/main/java/com/alibaba/nacos/sys/utils/PropertiesUtil.java#getPropertiesWithPrefix"
    ],
    "focal_src": [
      "    public static Properties getPropertiesWithPrefix(Environment environment, String prefix)\n            throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        return handleSpringBinder(environment, prefix, Properties.class);\n    }\n"
    ],
    "focal_tgt": [
      "    public static Properties getPropertiesWithPrefix(Environment environment, String prefix) {\n        return handleSpringBinder(environment, prefix, Properties.class);\n    }\n"
    ],
    "test_id": 8,
    "identify_result_deepseek-coder": false
  },
  "9": {
    "commit_src": "753a30b37d21bada8511f8e26a3331bab26f202a",
    "commit_tgt": "5994e3739461db0d6052f6e816f309e59c0d0c4b",
    "changed_tests": [
      "client/src/test/java/com/alibaba/nacos/client/config/filter/impl/ConfigEncryptionFilterTest.java"
    ],
    "refer_PR": "alibaba_nacos-11346",
    "test_src": ".com.alibaba.nacos.client.config.filter.impl.ConfigEncryptionFilterTest#testDoFilter",
    "test_tgt": [
      ".com.alibaba.nacos.client.config.filter.impl.ConfigEncryptionFilterTest#testDoFilter"
    ],
    "test_src_code": "    @Test\n    public void testDoFilter() throws NacosException {\n        configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n        \n        Mockito.verify(configRequest).getDataId();\n        Mockito.verify(configRequest).getContent();\n        \n        configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n        \n        Mockito.verify(configResponse).getDataId();\n        Mockito.verify(configResponse).getContent();\n        Mockito.verify(configResponse).getEncryptedDataKey();\n    }\n",
    "focal_path_src": [
      "client/src/main/java/com/alibaba/nacos/client/config/filter/impl/ConfigEncryptionFilter.java#doFilter"
    ],
    "focal_path_tgt": [
      "client/src/main/java/com/alibaba/nacos/client/config/filter/impl/ConfigEncryptionFilter.java#doFilter"
    ],
    "focal_src": [
      "    @Override\n    public void doFilter(IConfigRequest request, IConfigResponse response, IConfigFilterChain filterChain)\n            throws NacosException {\n        if (Objects.nonNull(request) && request instanceof ConfigRequest && Objects.isNull(response)) {\n            \n            // Publish configuration, encrypt\n            ConfigRequest configRequest = (ConfigRequest) request;\n            String dataId = configRequest.getDataId();\n            String content = configRequest.getContent();\n            \n            Pair<String, String> pair = EncryptionHandler.encryptHandler(dataId, content);\n            String secretKey = pair.getFirst();\n            String encryptContent = pair.getSecond();\n            \n            ((ConfigRequest) request).setContent(encryptContent);\n            ((ConfigRequest) request).setEncryptedDataKey(secretKey);\n        }\n        if (Objects.nonNull(response) && response instanceof ConfigResponse && Objects.isNull(request)) {\n            \n            // Get configuration, decrypt\n            ConfigResponse configResponse = (ConfigResponse) response;\n            \n            String dataId = configResponse.getDataId();\n            String encryptedDataKey = configResponse.getEncryptedDataKey();\n            String content = configResponse.getContent();\n            \n            Pair<String, String> pair = EncryptionHandler.decryptHandler(dataId, encryptedDataKey, content);\n            String decryptContent = pair.getSecond();\n            ((ConfigResponse) response).setContent(decryptContent);\n        }\n        filterChain.doFilter(request, response);\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public void doFilter(IConfigRequest request, IConfigResponse response, IConfigFilterChain filterChain)\n            throws NacosException {\n        if (Objects.nonNull(request) && request instanceof ConfigRequest && Objects.isNull(response)) {\n            \n            // Publish configuration, encrypt\n            ConfigRequest configRequest = (ConfigRequest) request;\n            String dataId = configRequest.getDataId();\n            String content = configRequest.getContent();\n            \n            Pair<String, String> pair = EncryptionHandler.encryptHandler(dataId, content);\n            String secretKey = pair.getFirst();\n            String encryptContent = pair.getSecond();\n            if (!StringUtils.isBlank(encryptContent) && !encryptContent.equals(content)) {\n                ((ConfigRequest) request).setContent(encryptContent);\n            }\n            if (!StringUtils.isBlank(secretKey) && !secretKey.equals(((ConfigRequest) request).getEncryptedDataKey())) {\n                ((ConfigRequest) request).setEncryptedDataKey(secretKey);\n            } else if (StringUtils.isBlank(((ConfigRequest) request).getEncryptedDataKey()) && StringUtils.isBlank(secretKey)) {\n                ((ConfigRequest) request).setEncryptedDataKey(\"\");\n            }\n        }\n        if (Objects.nonNull(response) && response instanceof ConfigResponse && Objects.isNull(request)) {\n            \n            // Get configuration, decrypt\n            ConfigResponse configResponse = (ConfigResponse) response;\n            \n            String dataId = configResponse.getDataId();\n            String encryptedDataKey = configResponse.getEncryptedDataKey();\n            String content = configResponse.getContent();\n            \n            Pair<String, String> pair = EncryptionHandler.decryptHandler(dataId, encryptedDataKey, content);\n            String secretKey = pair.getFirst();\n            String decryptContent = pair.getSecond();\n            if (!StringUtils.isBlank(decryptContent) && !decryptContent.equals(content)) {\n                ((ConfigResponse) response).setContent(decryptContent);\n            }\n            if (!StringUtils.isBlank(secretKey) && !secretKey.equals(((ConfigResponse) response).getEncryptedDataKey())) {\n                ((ConfigResponse) response).setEncryptedDataKey(secretKey);\n            } else if (StringUtils.isBlank(((ConfigResponse) response).getEncryptedDataKey()) && StringUtils.isBlank(secretKey)) {\n                ((ConfigResponse) response).setEncryptedDataKey(\"\");\n            }\n        }\n        filterChain.doFilter(request, response);\n    }\n"
    ],
    "test_id": 9,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testDoFilter() throws NacosException {\n    configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n\n    Mockito.verify(configRequest).getDataId();\n    Mockito.verify(configRequest).getContent();\n    Mockito.verify(configRequest).setContent(Mockito.anyString());\n    Mockito.verify(configRequest).setEncryptedDataKey(Mockito.anyString());\n\n    configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n\n    Mockito.verify(configResponse).getDataId();\n    Mockito.verify(configResponse).getContent();\n    Mockito.verify(configResponse).getEncryptedDataKey();\n    Mockito.verify(configResponse).setContent(Mockito.anyString());\n    Mockito.verify(configResponse).setEncryptedDataKey(Mockito.anyString());\n}\n",
      "@Test\npublic void testDoFilter() throws NacosException {\n    configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n\n    Mockito.verify(configRequest).getDataId();\n    Mockito.verify(configRequest).getContent();\n    Mockito.verify(configRequest).getEncryptedDataKey();\n\n    configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n\n    Mockito.verify(configResponse).getDataId();\n    Mockito.verify(configResponse).getContent();\n    Mockito.verify(configResponse).getEncryptedDataKey();\n}\n",
      "@Test\npublic void testDoFilter() throws NacosException {\n    configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n\n    Mockito.verify(configRequest).getDataId();\n    Mockito.verify(configRequest).getContent();\n    Mockito.verify(configRequest).setContent(Mockito.anyString());\n    Mockito.verify(configRequest).setEncryptedDataKey(Mockito.anyString());\n\n    configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n\n    Mockito.verify(configResponse).getDataId();\n    Mockito.verify(configResponse).getContent();\n    Mockito.verify(configResponse).getEncryptedDataKey();\n    Mockito.verify(configResponse).setContent(Mockito.anyString());\n    Mockito.verify(configResponse).setEncryptedDataKey(Mockito.anyString());\n}\n",
      "@Test\npublic void testDoFilter() throws NacosException {\n    configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n\n    Mockito.verify(configRequest).getDataId();\n    Mockito.verify(configRequest).getContent();\n    Mockito.verify(configRequest).setContent(Mockito.anyString());\n    Mockito.verify(configRequest).setEncryptedDataKey(Mockito.anyString());\n\n    configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n\n    Mockito.verify(configResponse).getDataId();\n    Mockito.verify(configResponse).getContent();\n    Mockito.verify(configResponse).getEncryptedDataKey();\n    Mockito.verify(configResponse).setContent(Mockito.anyString());\n    Mockito.verify(configResponse).setEncryptedDataKey(Mockito.anyString());\n}\n",
      "@Test\npublic void testDoFilter() throws NacosException {\n    // Test for request with null response\n    ConfigRequest configRequest = Mockito.mock(ConfigRequest.class);\n    IConfigFilterChain iConfigFilterChain = Mockito.mock(IConfigFilterChain.class);\n    Mockito.when(configRequest.getDataId()).thenReturn(\"dataId\");\n    Mockito.when(configRequest.getContent()).thenReturn(\"content\");\n    configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n    Mockito.verify(configRequest).getDataId();\n    Mockito.verify(configRequest).getContent();\n    Mockito.verify(configRequest).setContent(Mockito.anyString());\n    Mockito.verify(configRequest).setEncryptedDataKey(Mockito.anyString());\n    Mockito.verify(iConfigFilterChain).doFilter(configRequest, null);\n\n    // Test for response with null request\n    ConfigResponse configResponse = Mockito.mock(ConfigResponse.class);\n    Mockito.when(configResponse.getDataId()).thenReturn(\"dataId\");\n    Mockito.when(configResponse.getEncryptedDataKey()).thenReturn(\"encryptedDataKey\");\n    Mockito.when(configResponse.getContent()).thenReturn(\"content\");\n    configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n    Mockito.verify(configResponse).getDataId();\n    Mockito.verify(configResponse).getContent();\n    Mockito.verify(configResponse).getEncryptedDataKey();\n    Mockito.verify(configResponse).setContent(Mockito.anyString());\n    Mockito.verify(iConfigFilterChain).doFilter(null, configResponse);\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testDoFilter() throws NacosException {\n    configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n\n    Mockito.verify(configRequest).getDataId();\n    Mockito.verify(configRequest).getContent();\n    Mockito.verify(configRequest).getEncryptedDataKey();\n\n    configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n\n    Mockito.verify(configResponse).getDataId();\n    Mockito.verify(configResponse).getContent();\n    Mockito.verify(configResponse).getEncryptedDataKey();\n    // Test the uncovered lines\n    configEncryptionFilter.doFilter(configRequest, configResponse, iConfigFilterChain);\n    Mockito.verify(iConfigFilterChain).doFilter(configRequest, configResponse);\n\n    // Test the uncovered branches\n    ConfigRequest request = Mockito.mock(ConfigRequest.class);\n    Mockito.when(request.getContent()).thenReturn(\"\");\n    Mockito.when(request.getEncryptedDataKey()).thenReturn(\"\");\n    configEncryptionFilter.doFilter(request, null, iConfigFilterChain);\n\n    ConfigResponse response = Mockito.mock(ConfigResponse.class);\n    Mockito.when(response.getContent()).thenReturn(\"\");\n    Mockito.when(response.getEncryptedDataKey()).thenReturn(\"\");\n    configEncryptionFilter.doFilter(null, response, iConfigFilterChain);\n}\n",
      "@Test\npublic void testDoFilter() throws NacosException {\n    // Test for request with null response\n    ConfigRequest configRequest = Mockito.mock(ConfigRequest.class);\n    IConfigFilterChain iConfigFilterChain = Mockito.mock(IConfigFilterChain.class);\n    Mockito.when(configRequest.getDataId()).thenReturn(\"dataId\");\n    Mockito.when(configRequest.getContent()).thenReturn(\"content\");\n    configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n    Mockito.verify(configRequest).getDataId();\n    Mockito.verify(configRequest).getContent();\n    Mockito.verify(configRequest).setContent(Mockito.anyString());\n    Mockito.verify(configRequest).setEncryptedDataKey(Mockito.anyString());\n    Mockito.verify(iConfigFilterChain).doFilter(configRequest, null);\n\n    // Test for response with null request\n    ConfigResponse configResponse = Mockito.mock(ConfigResponse.class);\n    Mockito.when(configResponse.getDataId()).thenReturn(\"dataId\");\n    Mockito.when(configResponse.getEncryptedDataKey()).thenReturn(\"encryptedDataKey\");\n    Mockito.when(configResponse.getContent()).thenReturn(\"content\");\n    configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n    Mockito.verify(configResponse).getDataId();\n    Mockito.verify(configResponse).getContent();\n    Mockito.verify(configResponse).getEncryptedDataKey();\n    Mockito.verify(configResponse).setContent(Mockito.anyString());\n    Mockito.verify(iConfigFilterChain).doFilter(null, configResponse);\n    // Test for request with null request and response\n    configEncryptionFilter.doFilter(null, null, iConfigFilterChain);\n    Mockito.verify(iConfigFilterChain, Mockito.never()).doFilter(Mockito.any(), Mockito.any());\n\n    // Test for response with empty content\n    ConfigResponse configResponseEmptyContent = Mockito.mock(ConfigResponse.class);\n    Mockito.when(configResponseEmptyContent.getDataId()).thenReturn(\"dataId\");\n    Mockito.when(configResponseEmptyContent.getEncryptedDataKey()).thenReturn(\"encryptedDataKey\");\n    Mockito.when(configResponseEmptyContent.getContent()).thenReturn(\"\");\n    configEncryptionFilter.doFilter(null, configResponseEmptyContent, iConfigFilterChain);\n    Mockito.verify(configResponseEmptyContent, Mockito.never()).setContent(Mockito.anyString());\n    Mockito.verify(iConfigFilterChain, Mockito.never()).doFilter(Mockito.any(), Mockito.any());\n\n    // Test for request with empty content\n    ConfigRequest configRequestEmptyContent = Mockito.mock(ConfigRequest.class);\n    Mockito.when(configRequestEmptyContent.getDataId()).thenReturn(\"dataId\");\n    Mockito.when(configRequestEmptyContent.getContent()).thenReturn(\"\");\n    configEncryptionFilter.doFilter(configRequestEmptyContent, null, iConfigFilterChain);\n    Mockito.verify(configRequestEmptyContent, Mockito.never()).setContent(Mockito.anyString());\n    Mockito.verify(configRequestEmptyContent, Mockito.never()).setEncryptedDataKey(Mockito.anyString());\n    Mockito.verify(iConfigFilterChain, Mockito.never()).doFilter(Mockito.any(), Mockito.any());\n}\n"
    ]
  },
  "10": {
    "commit_src": "9722ad8dd53066cb8edca66c9ba51e7e437d0d47",
    "commit_tgt": "849393c4a1eeaeee20dbbd7101cf60b36f91cf08",
    "changed_tests": [
      "config/src/test/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImplTest.java",
      "config/src/test/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalHistoryConfigInfoPersistServiceImplTest.java",
      "config/src/test/java/com/alibaba/nacos/config/server/utils/PropertyUtilTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/derby/ConfigInfoMapperByDerbyTest.java",
      "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySqlTest.java"
    ],
    "refer_PR": "alibaba_nacos-11658",
    "test_src": ".com.alibaba.nacos.config.server.service.repository.extrnal.ExternalHistoryConfigInfoPersistServiceImplTest#testFindDeletedConfig",
    "test_tgt": [
      ".com.alibaba.nacos.config.server.service.repository.extrnal.ExternalHistoryConfigInfoPersistServiceImplTest#testFindDeletedConfig"
    ],
    "test_src_code": "    @Test\n    public void testFindDeletedConfig() {\n        \n        //mock query list return\n        Map<String, Object> mockObj1 = new HashMap<>();\n        mockObj1.put(\"nid\", new BigInteger(\"1234\"));\n        mockObj1.put(\"data_id\", \"data_id1\");\n        mockObj1.put(\"group_id\", \"group_id1\");\n        mockObj1.put(\"tenant_id\", \"tenant_id1\");\n        LocalDateTime now = LocalDateTime.of(LocalDate.now(), LocalTime.now());\n        mockObj1.put(\"gmt_modified\", now);\n        List<Map<String, Object>> list = new ArrayList<>();\n        list.add(mockObj1);\n        Map<String, Object> mockObj2 = new HashMap<>();\n        mockObj2.put(\"nid\", new BigInteger(\"12345\"));\n        mockObj2.put(\"data_id\", \"data_id2\");\n        mockObj2.put(\"group_id\", \"group_id2\");\n        mockObj2.put(\"tenant_id\", \"tenant_id2\");\n        LocalDateTime now2 = LocalDateTime.of(LocalDate.now(), LocalTime.now());\n        mockObj2.put(\"gmt_modified\", now2);\n        list.add(mockObj2);\n        int pageSize = 1233;\n        long startId = 23456;\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis());\n        Mockito.when(jdbcTemplate.queryForList(anyString(), eq(timestamp), eq(startId), eq(pageSize))).thenReturn(list);\n        //execute\n        List<ConfigInfoWrapper> deletedConfig = externalHistoryConfigInfoPersistService.findDeletedConfig(timestamp,\n                startId, pageSize);\n        //expect verify\n        Assert.assertEquals(\"data_id1\", deletedConfig.get(0).getDataId());\n        Assert.assertEquals(\"group_id1\", deletedConfig.get(0).getGroup());\n        Assert.assertEquals(\"tenant_id1\", deletedConfig.get(0).getTenant());\n        Assert.assertEquals(now.toInstant(ZoneOffset.ofHours(8)).toEpochMilli(),\n                deletedConfig.get(0).getLastModified());\n        Assert.assertEquals(\"data_id2\", deletedConfig.get(1).getDataId());\n        Assert.assertEquals(\"group_id2\", deletedConfig.get(1).getGroup());\n        Assert.assertEquals(\"tenant_id2\", deletedConfig.get(1).getTenant());\n        Assert.assertEquals(now2.toInstant(ZoneOffset.ofHours(8)).toEpochMilli(),\n                deletedConfig.get(1).getLastModified());\n        \n        //mock exception\n        Mockito.when(jdbcTemplate.queryForList(anyString(), eq(timestamp), eq(startId), eq(pageSize)))\n                .thenThrow(new CannotGetJdbcConnectionException(\"conn error\"));\n        \n        try {\n            externalHistoryConfigInfoPersistService.findDeletedConfig(timestamp, startId, pageSize);\n            Assert.assertTrue(false);\n        } catch (Exception e) {\n            Assert.assertEquals(\"conn error\", e.getMessage());\n        }\n        \n    }\n",
    "focal_path_src": [
      "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalHistoryConfigInfoPersistServiceImpl.java#findDeletedConfig"
    ],
    "focal_path_tgt": [
      "config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalHistoryConfigInfoPersistServiceImpl.java#findDeletedConfig"
    ],
    "focal_src": [
      "    @Override\n    public List<ConfigInfoWrapper> findDeletedConfig(final Timestamp startTime, long startId, int pageSize) {\n        try {\n            HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n            MapperContext context = new MapperContext();\n            context.putWhereParameter(FieldConstant.START_TIME, startTime);\n            context.putWhereParameter(FieldConstant.PAGE_SIZE, pageSize);\n            context.putWhereParameter(FieldConstant.LAST_MAX_ID, startId);\n            \n            MapperResult mapperResult = historyConfigInfoMapper.findDeletedConfig(context);\n            List<Map<String, Object>> list = jt.queryForList(mapperResult.getSql(),\n                    mapperResult.getParamList().toArray());\n            return convertDeletedConfig(list);\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public List<ConfigInfoStateWrapper> findDeletedConfig(final Timestamp startTime, long startId, int pageSize) {\n        try {\n            HistoryConfigInfoMapper historyConfigInfoMapper = mapperManager.findMapper(\n                    dataSourceService.getDataSourceType(), TableConstant.HIS_CONFIG_INFO);\n            MapperContext context = new MapperContext();\n            context.putWhereParameter(FieldConstant.START_TIME, startTime);\n            context.putWhereParameter(FieldConstant.PAGE_SIZE, pageSize);\n            context.putWhereParameter(FieldConstant.LAST_MAX_ID, startId);\n            \n            MapperResult mapperResult = historyConfigInfoMapper.findDeletedConfig(context);\n            return jt.query(mapperResult.getSql(), mapperResult.getParamList().toArray(),\n                    CONFIG_INFO_STATE_WRAPPER_ROW_MAPPER);\n        } catch (DataAccessException e) {\n            LogUtil.FATAL_LOG.error(\"[db-error] \" + e, e);\n            throw e;\n        }\n    }\n"
    ],
    "test_id": 10,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "// Fail to generate test fix. This is original test code.\n@Test\npublic void testFindDeletedConfig() {\n        \n    //mock query list return\n    Map<String, Object> mockObj1 = new HashMap<>();\n    mockObj1.put(\"nid\", new BigInteger(\"1234\"));\n    mockObj1.put(\"data_id\", \"data_id1\");\n    mockObj1.put(\"group_id\", \"group_id1\");\n    mockObj1.put(\"tenant_id\", \"tenant_id1\");\n    LocalDateTime now = LocalDateTime.of(LocalDate.now(), LocalTime.now());\n    mockObj1.put(\"gmt_modified\", now);\n    List<Map<String, Object>> list = new ArrayList<>();\n    list.add(mockObj1);\n    Map<String, Object> mockObj2 = new HashMap<>();\n    mockObj2.put(\"nid\", new BigInteger(\"12345\"));\n    mockObj2.put(\"data_id\", \"data_id2\");\n    mockObj2.put(\"group_id\", \"group_id2\");\n    mockObj2.put(\"tenant_id\", \"tenant_id2\");\n    LocalDateTime now2 = LocalDateTime.of(LocalDate.now(), LocalTime.now());\n    mockObj2.put(\"gmt_modified\", now2);\n    list.add(mockObj2);\n    int pageSize = 1233;\n    long startId = 23456;\n    Timestamp timestamp = new Timestamp(System.currentTimeMillis());\n    Mockito.when(jdbcTemplate.queryForList(anyString(), eq(timestamp), eq(startId), eq(pageSize))).thenReturn(list);\n    //execute\n    List<ConfigInfoWrapper> deletedConfig = externalHistoryConfigInfoPersistService.findDeletedConfig(timestamp,\n            startId, pageSize);\n    //expect verify\n    Assert.assertEquals(\"data_id1\", deletedConfig.get(0).getDataId());\n    Assert.assertEquals(\"group_id1\", deletedConfig.get(0).getGroup());\n    Assert.assertEquals(\"tenant_id1\", deletedConfig.get(0).getTenant());\n    Assert.assertEquals(now.toInstant(ZoneOffset.ofHours(8)).toEpochMilli(),\n            deletedConfig.get(0).getLastModified());\n    Assert.assertEquals(\"data_id2\", deletedConfig.get(1).getDataId());\n    Assert.assertEquals(\"group_id2\", deletedConfig.get(1).getGroup());\n    Assert.assertEquals(\"tenant_id2\", deletedConfig.get(1).getTenant());\n    Assert.assertEquals(now2.toInstant(ZoneOffset.ofHours(8)).toEpochMilli(),\n            deletedConfig.get(1).getLastModified());\n        \n    //mock exception\n    Mockito.when(jdbcTemplate.queryForList(anyString(), eq(timestamp), eq(startId), eq(pageSize)))\n            .thenThrow(new CannotGetJdbcConnectionException(\"conn error\"));\n        \n    try {\n        externalHistoryConfigInfoPersistService.findDeletedConfig(timestamp, startId, pageSize);\n        Assert.assertTrue(false);\n    } catch (Exception e) {\n        Assert.assertEquals(\"conn error\", e.getMessage());\n    }\n        \n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "// Fail to generate test enhance. This is original test code.\n@Test\npublic void testFindDeletedConfig() {\n        \n    //mock query list return\n    Map<String, Object> mockObj1 = new HashMap<>();\n    mockObj1.put(\"nid\", new BigInteger(\"1234\"));\n    mockObj1.put(\"data_id\", \"data_id1\");\n    mockObj1.put(\"group_id\", \"group_id1\");\n    mockObj1.put(\"tenant_id\", \"tenant_id1\");\n    LocalDateTime now = LocalDateTime.of(LocalDate.now(), LocalTime.now());\n    mockObj1.put(\"gmt_modified\", now);\n    List<Map<String, Object>> list = new ArrayList<>();\n    list.add(mockObj1);\n    Map<String, Object> mockObj2 = new HashMap<>();\n    mockObj2.put(\"nid\", new BigInteger(\"12345\"));\n    mockObj2.put(\"data_id\", \"data_id2\");\n    mockObj2.put(\"group_id\", \"group_id2\");\n    mockObj2.put(\"tenant_id\", \"tenant_id2\");\n    LocalDateTime now2 = LocalDateTime.of(LocalDate.now(), LocalTime.now());\n    mockObj2.put(\"gmt_modified\", now2);\n    list.add(mockObj2);\n    int pageSize = 1233;\n    long startId = 23456;\n    Timestamp timestamp = new Timestamp(System.currentTimeMillis());\n    Mockito.when(jdbcTemplate.queryForList(anyString(), eq(timestamp), eq(startId), eq(pageSize))).thenReturn(list);\n    //execute\n    List<ConfigInfoWrapper> deletedConfig = externalHistoryConfigInfoPersistService.findDeletedConfig(timestamp,\n            startId, pageSize);\n    //expect verify\n    Assert.assertEquals(\"data_id1\", deletedConfig.get(0).getDataId());\n    Assert.assertEquals(\"group_id1\", deletedConfig.get(0).getGroup());\n    Assert.assertEquals(\"tenant_id1\", deletedConfig.get(0).getTenant());\n    Assert.assertEquals(now.toInstant(ZoneOffset.ofHours(8)).toEpochMilli(),\n            deletedConfig.get(0).getLastModified());\n    Assert.assertEquals(\"data_id2\", deletedConfig.get(1).getDataId());\n    Assert.assertEquals(\"group_id2\", deletedConfig.get(1).getGroup());\n    Assert.assertEquals(\"tenant_id2\", deletedConfig.get(1).getTenant());\n    Assert.assertEquals(now2.toInstant(ZoneOffset.ofHours(8)).toEpochMilli(),\n            deletedConfig.get(1).getLastModified());\n        \n    //mock exception\n    Mockito.when(jdbcTemplate.queryForList(anyString(), eq(timestamp), eq(startId), eq(pageSize)))\n            .thenThrow(new CannotGetJdbcConnectionException(\"conn error\"));\n        \n    try {\n        externalHistoryConfigInfoPersistService.findDeletedConfig(timestamp, startId, pageSize);\n        Assert.assertTrue(false);\n    } catch (Exception e) {\n        Assert.assertEquals(\"conn error\", e.getMessage());\n    }\n        \n}\n"
    ]
  },
  "11": {
    "commit_src": "3a1f0c297e37608035514a98ebc51133daad7863",
    "commit_tgt": "6461aeb719ceb4ee0fb3cb7c4fbcff6b56ce539a",
    "changed_tests": [
      "api/src/test/java/com/alibaba/nacos/api/remote/response/ErrorResponseTest.java"
    ],
    "refer_PR": "alibaba_nacos-11893",
    "test_src": ".com.alibaba.nacos.api.remote.response.ErrorResponseTest#testBuildWithErrorCode",
    "test_tgt": [
      ".com.alibaba.nacos.api.remote.response.ErrorResponseTest#testBuildWithErrorCode"
    ],
    "test_src_code": "    @Test\n    public void testBuildWithErrorCode() {\n        int errorCode = 500;\n        String msg = \"err msg\";\n        \n        Response response = ErrorResponse.build(errorCode, msg);\n        \n        Assert.assertEquals(errorCode, response.getErrorCode());\n        Assert.assertEquals(msg, response.getMessage());\n    }\n",
    "focal_path_src": [
      "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build"
    ],
    "focal_path_tgt": [
      "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build"
    ],
    "focal_src": [
      "    /**\n     * build an error response.\n     *\n     * @param exception exception\n     * @return response\n     */\n    public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        return response;\n    }\n"
    ],
    "focal_tgt": [
      "    /**\n     * build an error response.\n     *\n     * @param exception exception\n     * @return response\n     */\n    public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        response.setResultCode(errorCode);\n        return response;\n    }\n"
    ],
    "test_id": 11,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    Throwable exception = new Exception(msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    NacosException exception = new NacosException(errorCode, msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getResultCode());\n    Assert.assertEquals(msg, response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    NacosException exception = new NacosException(errorCode, msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n    Assert.assertEquals(errorCode, response.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    NacosException exception = new NacosException(errorCode, msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getResultCode());\n    Assert.assertEquals(msg, response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    Exception exception = new Exception(msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    Throwable exception = new Exception(msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n    // Test with NacosException\n    NacosException nacosException = new NacosException(errorCode, msg);\n    response = ErrorResponse.build(nacosException);\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n\n    // Test with NacosRuntimeException\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errorCode, msg);\n    response = ErrorResponse.build(nacosRuntimeException);\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    NacosException exception = new NacosException(errorCode, msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getResultCode());\n    Assert.assertEquals(msg, response.getMessage());\n    errorCode = 404;\n    msg = \"Not Found\";\n    NacosRuntimeException runtimeException = new NacosRuntimeException(errorCode, msg);\n\n    response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(errorCode, response.getResultCode());\n    Assert.assertEquals(msg, response.getMessage());\n\n    exception = new NacosException(ResponseCode.FAIL.getCode(), \"fail msg\");\n\n    response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    Assert.assertEquals(\"fail msg\", response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    NacosException exception = new NacosException(errorCode, msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n    Assert.assertEquals(errorCode, response.getResultCode());\n    errorCode = 404;\n    msg = \"not found\";\n    NacosRuntimeException runtimeException = new NacosRuntimeException(errorCode, msg);\n\n    response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n    Assert.assertEquals(errorCode, response.getResultCode());\n\n    exception = new NacosException(ResponseCode.FAIL.getCode(), \"fail\");\n    response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getErrorCode());\n    Assert.assertEquals(\"fail\", response.getMessage());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    NacosException exception = new NacosException(errorCode, msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getResultCode());\n    Assert.assertEquals(msg, response.getMessage());\n    errorCode = 404;\n    msg = \"Not Found\";\n    NacosRuntimeException runtimeException = new NacosRuntimeException(errorCode, msg);\n\n    response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(errorCode, response.getResultCode());\n    Assert.assertEquals(msg, response.getMessage());\n\n    exception = new NacosException(ResponseCode.FAIL.getCode(), \"fail msg\");\n\n    response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    Assert.assertEquals(\"fail msg\", response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithErrorCode() {\n    int errorCode = 500;\n    String msg = \"err msg\";\n    Exception exception = new Exception(msg);\n\n    Response response = ErrorResponse.build(exception);\n\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n    // Test with NacosException\n    NacosException nacosException = new NacosException(errorCode, msg);\n    response = ErrorResponse.build(nacosException);\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n\n    // Test with NacosRuntimeException\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errorCode, msg);\n    response = ErrorResponse.build(nacosRuntimeException);\n    Assert.assertEquals(errorCode, response.getErrorCode());\n    Assert.assertEquals(msg, response.getMessage());\n}\n"
    ]
  },
  "12": {
    "commit_src": "3a1f0c297e37608035514a98ebc51133daad7863",
    "commit_tgt": "6461aeb719ceb4ee0fb3cb7c4fbcff6b56ce539a",
    "changed_tests": [
      "api/src/test/java/com/alibaba/nacos/api/remote/response/ErrorResponseTest.java"
    ],
    "refer_PR": "alibaba_nacos-11893",
    "test_src": ".com.alibaba.nacos.api.remote.response.ErrorResponseTest#testBuildWithThrowable",
    "test_tgt": [
      ".com.alibaba.nacos.api.remote.response.ErrorResponseTest#testBuildWithThrowable"
    ],
    "test_src_code": "    @Test\n    public void testBuildWithThrowable() {\n        String errMsg = \"exception msg\";\n        RuntimeException runtimeException = new RuntimeException(errMsg);\n        \n        Response response = ErrorResponse.build(runtimeException);\n        \n        Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getErrorCode());\n        Assert.assertEquals(errMsg, response.getMessage());\n    }\n",
    "focal_path_src": [
      "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build"
    ],
    "focal_path_tgt": [
      "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build"
    ],
    "focal_src": [
      "    /**\n     * build an error response.\n     *\n     * @param exception exception\n     * @return response\n     */\n    public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        return response;\n    }\n"
    ],
    "focal_tgt": [
      "    /**\n     * build an error response.\n     *\n     * @param exception exception\n     * @return response\n     */\n    public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        response.setResultCode(errorCode);\n        return response;\n    }\n"
    ],
    "test_id": 12,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    // Test with NacosException\n    NacosException nacosException = new NacosException(500, \"Nacos exception\");\n    Response response1 = ErrorResponse.build(nacosException);\n    Assert.assertEquals(500, response1.getErrorCode());\n    Assert.assertEquals(\"Nacos exception\", response1.getMessage());\n    Assert.assertEquals(500, response1.getResultCode());\n\n    // Test with NacosRuntimeException\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(500, \"Nacos runtime exception\");\n    Response response2 = ErrorResponse.build(nacosRuntimeException);\n    Assert.assertEquals(500, response2.getErrorCode());\n    Assert.assertEquals(\"Nacos runtime exception\", response2.getMessage());\n    Assert.assertEquals(500, response2.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    // Test with NacosException\n    NacosException nacosException = new NacosException(500, \"Nacos exception\");\n    Response response1 = ErrorResponse.build(nacosException);\n    Assert.assertEquals(500, response1.getErrorCode());\n    Assert.assertEquals(\"Nacos exception\", response1.getMessage());\n    Assert.assertEquals(500, response1.getResultCode());\n\n    // Test with NacosRuntimeException\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(500, \"Nacos runtime exception\");\n    Response response2 = ErrorResponse.build(nacosRuntimeException);\n    Assert.assertEquals(500, response2.getErrorCode());\n    Assert.assertEquals(\"Nacos runtime exception\", response2.getMessage());\n    Assert.assertEquals(500, response2.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    // Test with NacosException\n    NacosException nacosException = new NacosException(500, \"Nacos exception\");\n    Response response1 = ErrorResponse.build(nacosException);\n    Assert.assertEquals(500, response1.getResultCode());\n    Assert.assertEquals(\"Nacos exception\", response1.getMessage());\n\n    // Test with NacosRuntimeException\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(500, \"Nacos runtime exception\");\n    Response response2 = ErrorResponse.build(nacosRuntimeException);\n    Assert.assertEquals(500, response2.getResultCode());\n    Assert.assertEquals(\"Nacos runtime exception\", response2.getMessage());\n}\n",
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    // Test with NacosException\n    NacosException nacosException = new NacosException(500, \"Nacos exception\");\n    Response response1 = ErrorResponse.build(nacosException);\n    Assert.assertEquals(500, response1.getErrorCode());\n    Assert.assertEquals(\"Nacos exception\", response1.getMessage());\n    Assert.assertEquals(500, response1.getResultCode());\n\n    // Test with NacosRuntimeException\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(500, \"Nacos runtime exception\");\n    Response response2 = ErrorResponse.build(nacosRuntimeException);\n    Assert.assertEquals(500, response2.getErrorCode());\n    Assert.assertEquals(\"Nacos runtime exception\", response2.getMessage());\n    Assert.assertEquals(500, response2.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithThrowable() {\n    String errMsg = \"exception msg\";\n    RuntimeException runtimeException = new RuntimeException(errMsg);\n\n    Response response = ErrorResponse.build(runtimeException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    // Test with NacosException\n    NacosException nacosException = new NacosException(500, \"Nacos exception\");\n    Response response1 = ErrorResponse.build(nacosException);\n    Assert.assertEquals(500, response1.getResultCode());\n    Assert.assertEquals(\"Nacos exception\", response1.getMessage());\n\n    // Test with NacosRuntimeException\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(500, \"Nacos runtime exception\");\n    Response response2 = ErrorResponse.build(nacosRuntimeException);\n    Assert.assertEquals(500, response2.getResultCode());\n    Assert.assertEquals(\"Nacos runtime exception\", response2.getMessage());\n}\n"
    ]
  },
  "13": {
    "commit_src": "3a1f0c297e37608035514a98ebc51133daad7863",
    "commit_tgt": "6461aeb719ceb4ee0fb3cb7c4fbcff6b56ce539a",
    "changed_tests": [
      "api/src/test/java/com/alibaba/nacos/api/remote/response/ErrorResponseTest.java"
    ],
    "refer_PR": "alibaba_nacos-11893",
    "test_src": ".com.alibaba.nacos.api.remote.response.ErrorResponseTest#testBuildWithNacosException",
    "test_tgt": [
      ".com.alibaba.nacos.api.remote.response.ErrorResponseTest#testBuildWithNacosException"
    ],
    "test_src_code": "    @Test\n    public void testBuildWithNacosException() {\n        int errCode = 500;\n        String errMsg = \"nacos exception msg\";\n        NacosException nacosException = new NacosException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(errMsg, response.getMessage());\n    }\n",
    "focal_path_src": [
      "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build"
    ],
    "focal_path_tgt": [
      "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build"
    ],
    "focal_src": [
      "    /**\n     * build an error response.\n     *\n     * @param exception exception\n     * @return response\n     */\n    public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        return response;\n    }\n"
    ],
    "focal_tgt": [
      "    /**\n     * build an error response.\n     *\n     * @param exception exception\n     * @return response\n     */\n    public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        response.setResultCode(errorCode);\n        return response;\n    }\n"
    ],
    "test_id": 13,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(errCode, response.getResultCode()); // new assertion\n}\n",
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(errCode, response.getResultCode()); // new assertion\n}\n",
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(errCode, response.getResultCode());\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(errCode, response.getResultCode()); // new assertion\n    // Testing the else branch\n    Response response2 = ErrorResponse.build(new Exception(\"General Exception\"));\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response2.getErrorCode());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response2.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(errCode, response.getResultCode()); // new assertion\n    // Testing the else branch\n    Response response2 = ErrorResponse.build(new Exception(\"General Exception\"));\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response2.getErrorCode());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response2.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    // Testing the else branch\n    Response response2 = ErrorResponse.build(new Exception(\"General Exception\"));\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response2.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    // Testing the else branch\n    Response response2 = ErrorResponse.build(new Exception(\"General Exception\"));\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response2.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithNacosException() {\n    int errCode = 500;\n    String errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getErrorCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    Assert.assertEquals(errCode, response.getResultCode());\n    // Testing the else branch\n    String genericErrMsg = \"generic exception msg\";\n    Exception genericException = new Exception(genericErrMsg);\n    Response genericResponse = ErrorResponse.build(genericException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), genericResponse.getErrorCode());\n    Assert.assertEquals(genericErrMsg, genericResponse.getMessage());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), genericResponse.getResultCode());\n}\n"
    ]
  },
  "14": {
    "commit_src": "3a1f0c297e37608035514a98ebc51133daad7863",
    "commit_tgt": "6461aeb719ceb4ee0fb3cb7c4fbcff6b56ce539a",
    "changed_tests": [
      "api/src/test/java/com/alibaba/nacos/api/remote/response/ErrorResponseTest.java"
    ],
    "refer_PR": "alibaba_nacos-11893",
    "test_src": ".com.alibaba.nacos.api.remote.response.ErrorResponseTest#testBuildWithNacosRuntimeException",
    "test_tgt": [
      ".com.alibaba.nacos.api.remote.response.ErrorResponseTest#testBuildWithNacosRuntimeException"
    ],
    "test_src_code": "    @Test\n    public void testBuildWithNacosRuntimeException() {\n        int errCode = 500;\n        String errMsg = \"nacos runtime exception msg\";\n        NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosRuntimeException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(\"errCode: \" + errCode + \", errMsg: \" + errMsg + \" \", response.getMessage());\n    }\n",
    "focal_path_src": [
      "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build"
    ],
    "focal_path_tgt": [
      "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build"
    ],
    "focal_src": [
      "    /**\n     * build an error response.\n     *\n     * @param exception exception\n     * @return response\n     */\n    public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        return response;\n    }\n"
    ],
    "focal_tgt": [
      "    /**\n     * build an error response.\n     *\n     * @param exception exception\n     * @return response\n     */\n    public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        response.setResultCode(errorCode);\n        return response;\n    }\n"
    ],
    "test_id": 14,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getResultCode()); // assert that the result code is the same as the error code\n    Assert.assertEquals(errMsg, response.getMessage()); // assert that the message is the same as the error message\n}\n",
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getErrorCode());\n    Assert.assertEquals(\"errCode: \" + errCode + \", errMsg: \" + errMsg + \" \", response.getMessage());\n    Assert.assertEquals(errCode, response.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getResultCode()); // changed from getErrorCode to getResultCode\n    Assert.assertEquals(errMsg, response.getMessage());\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getResultCode()); // assert that the result code is the same as the error code\n    Assert.assertEquals(errMsg, response.getMessage()); // assert that the message is the same as the error message\n    // Test for NacosException\n    errCode = 400;\n    errMsg = \"nacos exception msg\";\n    NacosException nacosException = new NacosException(errCode, errMsg);\n\n    response = ErrorResponse.build(nacosException);\n\n    Assert.assertEquals(errCode, response.getResultCode()); // assert that the result code is the same as the error code\n    Assert.assertEquals(errMsg, response.getMessage()); // assert that the message is the same as the error message\n}\n",
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getErrorCode());\n    Assert.assertEquals(\"errCode: \" + errCode + \", errMsg: \" + errMsg + \" \", response.getMessage());\n    Assert.assertEquals(errCode, response.getResultCode());\n    // Testing the else branch\n    Throwable genericException = new Exception(\"generic exception msg\");\n    response = ErrorResponse.build(genericException);\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getErrorCode());\n    Assert.assertEquals(\"generic exception msg\", response.getMessage());\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n}\n",
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    // Testing the else branch\n    Throwable genericException = new Exception(\"generic exception msg\");\n    response = ErrorResponse.build(genericException);\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    Assert.assertEquals(genericException.getMessage(), response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n    // Testing the else branch\n    Throwable genericException = new Exception(\"generic exception msg\");\n    response = ErrorResponse.build(genericException);\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    Assert.assertEquals(genericException.getMessage(), response.getMessage());\n}\n",
      "@Test\npublic void testBuildWithNacosRuntimeException() {\n    int errCode = 500;\n    String errMsg = \"nacos runtime exception msg\";\n    NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n\n    Response response = ErrorResponse.build(nacosRuntimeException);\n\n    Assert.assertEquals(errCode, response.getResultCode()); // changed from getErrorCode to getResultCode\n    Assert.assertEquals(errMsg, response.getMessage());\n    // Adding test for when exception is not NacosRuntimeException\n    errCode = 400;\n    errMsg = \"some other exception msg\";\n    Exception otherException = new Exception(errMsg);\n\n    response = ErrorResponse.build(otherException);\n\n    Assert.assertEquals(ResponseCode.FAIL.getCode(), response.getResultCode());\n    Assert.assertEquals(errMsg, response.getMessage());\n}\n"
    ]
  }
}