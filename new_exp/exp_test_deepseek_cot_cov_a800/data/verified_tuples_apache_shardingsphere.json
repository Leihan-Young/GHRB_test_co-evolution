{
  "1": {
    "commit_src": "c865d0329230e55777da8ae0262b0515a1ed750b",
    "commit_tgt": "871cedbd12c4639a845929b37bf64c9195187fd1",
    "changed_tests": [
      "proxy/bootstrap/src/test/java/org/apache/shardingsphere/proxy/database/DatabaseServerInfoTest.java"
    ],
    "refer_PR": "apache_shardingsphere-28428",
    "test_src": ".org.apache.shardingsphere.proxy.database.DatabaseServerInfoTest#assertToString",
    "test_tgt": [
      ".org.apache.shardingsphere.proxy.database.DatabaseServerInfoTest#assertToString"
    ],
    "test_src_code": "    @Test\n    void assertToString() throws SQLException {\n        DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n        when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n        when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n        when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n        assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database name is `fixtureDB`, version is `1.0.0`\"));\n    }\n",
    "test_tgt_code": "    @Test\n    void assertToString() throws SQLException {\n        DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n        when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n        when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n        when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n        assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n    }\n",
    "focal_path_src": [
      "proxy/bootstrap/src/main/java/org/apache/shardingsphere/proxy/database/DatabaseServerInfo.java#DatabaseServerInfo",
      "proxy/bootstrap/src/main/java/org/apache/shardingsphere/proxy/database/DatabaseServerInfo.java#toString"
    ],
    "focal_path_tgt": [
      "proxy/bootstrap/src/main/java/org/apache/shardingsphere/proxy/database/DatabaseServerInfo.java#DatabaseServerInfo",
      "proxy/bootstrap/src/main/java/org/apache/shardingsphere/proxy/database/DatabaseServerInfo.java#toString"
    ],
    "focal_src": [
      "    public DatabaseServerInfo(final DataSource dataSource) {\n        try (Connection connection = dataSource.getConnection()) {\n            DatabaseMetaData databaseMetaData = connection.getMetaData();\n            databaseName = databaseMetaData.getDatabaseProductName();\n            databaseVersion = databaseMetaData.getDatabaseProductVersion();\n        } catch (final SQLException ex) {\n            throw new DatabaseServerLoadingServerException(ex);\n        }\n    }\n",
      "    @Override\n    public String toString() {\n        return String.format(\"Database name is `%s`, version is `%s`\", databaseName, databaseVersion);\n    }\n"
    ],
    "focal_tgt": [
      "    public DatabaseServerInfo(final DataSource dataSource) {\n        try (Connection connection = dataSource.getConnection()) {\n            DatabaseMetaData databaseMetaData = connection.getMetaData();\n            databaseType = databaseMetaData.getDatabaseProductName();\n            databaseVersion = databaseMetaData.getDatabaseProductVersion();\n        } catch (final SQLException ex) {\n            throw new DatabaseServerLoadingServerException(ex);\n        }\n    }\n",
      "    @Override\n    public String toString() {\n        return String.format(\"Database type is `%s`, version is `%s`\", databaseType, databaseVersion);\n    }\n"
    ],
    "test_id": 1,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n",
      "@Test\nvoid assertToString() throws SQLException {\n    DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n    when(databaseMetaData.getDatabaseProductName()).thenReturn(\"fixtureDB\");\n    when(databaseMetaData.getDatabaseProductVersion()).thenReturn(\"1.0.0\");\n    when(dataSource.getConnection().getMetaData()).thenReturn(databaseMetaData);\n    assertThat(new DatabaseServerInfo(dataSource).toString(), is(\"Database type is `fixtureDB`, version is `1.0.0`\"));\n}\n"
    ]
  },
  "2": {
    "commit_src": "83eb124abcda2772433134f0258df7615577d1d6",
    "commit_tgt": "97825a1b5f3d7a36836c0b3a2e5a02238fa85a36",
    "changed_tests": [
      "infra/util/src/test/java/org/apache/shardingsphere/infra/util/yaml/YamlEngineTest.java",
      "infra/util/src/test/java/org/apache/shardingsphere/infra/util/yaml/constructor/ShardingSphereYamlConstructorTest.java",
      "infra/util/src/test/java/org/apache/shardingsphere/infra/util/yaml/representer/ShardingSphereYamlRepresenterTest.java"
    ],
    "refer_PR": "apache_shardingsphere-28805",
    "test_src": ".org.apache.shardingsphere.infra.util.yaml.representer.ShardingSphereYamlRepresenterTest#assertToYamlWithoutContent",
    "test_tgt": [
      ".org.apache.shardingsphere.infra.util.yaml.representer.ShardingSphereYamlRepresenterTest#assertToYamlWithoutContent"
    ],
    "test_src_code": "    @Test\n    void assertToYamlWithoutContent() {\n        YamlConfigurationFixture actual = new YamlConfigurationFixture();\n        assertThat(new Yaml(new ShardingSphereYamlRepresenter(), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n    }\n",
    "test_tgt_code": "    @Test\n    void assertToYamlWithoutContent() {\n        YamlConfigurationFixture actual = new YamlConfigurationFixture();\n        assertThat(new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions())).dumpAsMap(actual), is(\"{}\\n\"));\n    }\n",
    "focal_path_src": [
      "infra/util/src/main/java/org/apache/shardingsphere/infra/util/yaml/representer/ShardingSphereYamlRepresenter.java#ShardingSphereYamlRepresenter"
    ],
    "focal_path_tgt": [
      "infra/util/src/main/java/org/apache/shardingsphere/infra/util/yaml/representer/ShardingSphereYamlRepresenter.java#ShardingSphereYamlRepresenter"
    ],
    "focal_src": [
      "    public ShardingSphereYamlRepresenter() {\n        Map<String, Class<?>> yamlShortcuts = new HashMap<>();\n        ShardingSphereServiceLoader.getServiceInstances(ShardingSphereYamlShortcuts.class).stream().map(ShardingSphereYamlShortcuts::getYamlShortcuts).forEach(yamlShortcuts::putAll);\n        yamlShortcuts.forEach((key, value) -> addClassTag(value, new Tag(key)));\n    }\n"
    ],
    "focal_tgt": [
      "    public ShardingSphereYamlRepresenter(final DumperOptions dumperOptions) {\n        super(dumperOptions);\n        Map<String, Class<?>> yamlShortcuts = new HashMap<>();\n        ShardingSphereServiceLoader.getServiceInstances(ShardingSphereYamlShortcuts.class).stream().map(ShardingSphereYamlShortcuts::getYamlShortcuts).forEach(yamlShortcuts::putAll);\n        yamlShortcuts.forEach((key, value) -> addClassTag(value, new Tag(key)));\n    }\n"
    ],
    "test_id": 2,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(options), options).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), dumperOptions).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(options), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(options), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), dumperOptions).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    DumperOptions dumperOptions = new DumperOptions();\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    Yaml yaml = new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), dumperOptions);\n    assertThat(yaml.dumpAsMap(actual), is(\"{}\\n\"));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(options), options).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), dumperOptions).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(options), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(options), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), dumperOptions).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    assertThat(new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual), is(\"{}\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithoutContent() {\n    DumperOptions dumperOptions = new DumperOptions();\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    Yaml yaml = new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), dumperOptions);\n    assertThat(yaml.dumpAsMap(actual), is(\"{}\\n\"));\n}\n"
    ]
  },
  "3": {
    "commit_src": "83eb124abcda2772433134f0258df7615577d1d6",
    "commit_tgt": "97825a1b5f3d7a36836c0b3a2e5a02238fa85a36",
    "changed_tests": [
      "infra/util/src/test/java/org/apache/shardingsphere/infra/util/yaml/YamlEngineTest.java",
      "infra/util/src/test/java/org/apache/shardingsphere/infra/util/yaml/constructor/ShardingSphereYamlConstructorTest.java",
      "infra/util/src/test/java/org/apache/shardingsphere/infra/util/yaml/representer/ShardingSphereYamlRepresenterTest.java"
    ],
    "refer_PR": "apache_shardingsphere-28805",
    "test_src": ".org.apache.shardingsphere.infra.util.yaml.representer.ShardingSphereYamlRepresenterTest#assertToYamlWithAllContents",
    "test_tgt": [
      ".org.apache.shardingsphere.infra.util.yaml.representer.ShardingSphereYamlRepresenterTest#assertToYamlWithAllContents"
    ],
    "test_src_code": "    @Test\n    void assertToYamlWithAllContents() {\n        YamlConfigurationFixture actual = new YamlConfigurationFixture();\n        actual.setValue(\"value\");\n        actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n        Map<String, String> map = new LinkedHashMap<>(2, 1F);\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        actual.setMap(map);\n        actual.setEmbeddedMap(new LinkedHashMap<>());\n        actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n        actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n        actual.setCustomizedTag(\"customized_tag\");\n        String expected = new Yaml(new ShardingSphereYamlRepresenter(), new DumperOptions()).dumpAsMap(actual);\n        assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n        assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n        assertThat(expected, not(containsString(\"embedded_map_1\")));\n        assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n        assertThat(expected, containsString(\"value: value\\n\"));\n        assertThat(expected, containsString(\"customizedTag: converted_customized_tag\\n\"));\n    }\n",
    "test_tgt_code": "    @Test\n    void assertToYamlWithAllContents() {\n        YamlConfigurationFixture actual = new YamlConfigurationFixture();\n        actual.setValue(\"value\");\n        actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n        Map<String, String> map = new LinkedHashMap<>(2, 1F);\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        actual.setMap(map);\n        actual.setEmbeddedMap(new LinkedHashMap<>());\n        actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n        actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n        actual.setCustomizedTag(\"customized_tag\");\n        String expected = new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions())).dumpAsMap(actual);\n        assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n        assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n        assertThat(expected, not(containsString(\"embedded_map_1\")));\n        assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n        assertThat(expected, containsString(\"value: value\\n\"));\n        assertThat(expected, containsString(\"customizedTag: converted_customized_tag\\n\"));\n    }\n",
    "focal_path_src": [
      "infra/util/src/main/java/org/apache/shardingsphere/infra/util/yaml/representer/ShardingSphereYamlRepresenter.java#ShardingSphereYamlRepresenter"
    ],
    "focal_path_tgt": [
      "infra/util/src/main/java/org/apache/shardingsphere/infra/util/yaml/representer/ShardingSphereYamlRepresenter.java#ShardingSphereYamlRepresenter"
    ],
    "focal_src": [
      "    public ShardingSphereYamlRepresenter() {\n        Map<String, Class<?>> yamlShortcuts = new HashMap<>();\n        ShardingSphereServiceLoader.getServiceInstances(ShardingSphereYamlShortcuts.class).stream().map(ShardingSphereYamlShortcuts::getYamlShortcuts).forEach(yamlShortcuts::putAll);\n        yamlShortcuts.forEach((key, value) -> addClassTag(value, new Tag(key)));\n    }\n"
    ],
    "focal_tgt": [
      "    public ShardingSphereYamlRepresenter(final DumperOptions dumperOptions) {\n        super(dumperOptions);\n        Map<String, Class<?>> yamlShortcuts = new HashMap<>();\n        ShardingSphereServiceLoader.getServiceInstances(ShardingSphereYamlShortcuts.class).stream().map(ShardingSphereYamlShortcuts::getYamlShortcuts).forEach(yamlShortcuts::putAll);\n        yamlShortcuts.forEach((key, value) -> addClassTag(value, new Tag(key)));\n    }\n"
    ],
    "test_id": 3,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(options), options).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    options.setPrettyFlow(true);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(options), options).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: converted_customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(options), options).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    // Create new instance of DumperOptions and ShardingSphereYamlRepresenter to cover the constructor change\n    DumperOptions dumperOptions = new DumperOptions();\n    ShardingSphereYamlRepresenter representer = new ShardingSphereYamlRepresenter(dumperOptions);\n    String expected = new Yaml(representer, dumperOptions).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: converted_customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), new DumperOptions()).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    dumperOptions.setPrettyFlow(true);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), dumperOptions).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: converted_customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(options), options).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    options.setPrettyFlow(true);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(options), options).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: converted_customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    DumperOptions options = new DumperOptions();\n    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(options), options).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    // Create new instance of DumperOptions and ShardingSphereYamlRepresenter to cover the constructor change\n    DumperOptions dumperOptions = new DumperOptions();\n    ShardingSphereYamlRepresenter representer = new ShardingSphereYamlRepresenter(dumperOptions);\n    String expected = new Yaml(representer, dumperOptions).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: converted_customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), new DumperOptions()).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n\n    DumperOptions dumperOptions = new DumperOptions();\n    dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n    dumperOptions.setPrettyFlow(true);\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(dumperOptions), dumperOptions).dumpAsMap(actual);\n\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: converted_customized_tag\\n\"));\n}\n",
      "@Test\nvoid assertToYamlWithAllContents() {\n    YamlConfigurationFixture actual = new YamlConfigurationFixture();\n    actual.setValue(\"value\");\n    actual.setCollection(Arrays.asList(\"value1\", \"value2\"));\n    Map<String, String> map = new LinkedHashMap<>(2, 1F);\n    map.put(\"key1\", \"value1\");\n    map.put(\"key2\", \"value2\");\n    actual.setMap(map);\n    actual.setEmbeddedMap(new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_1\", new LinkedHashMap<>());\n    actual.getEmbeddedMap().put(\"embedded_map_2\", Collections.singletonMap(\"embedded_map_foo\", \"embedded_map_foo_value\"));\n    actual.setCustomizedTag(\"customized_tag\");\n    String expected = new Yaml(new ShardingSphereYamlRepresenter(new DumperOptions()), new DumperOptions()).dumpAsMap(actual);\n    assertThat(expected, containsString(\"collection:\\n- value1\\n- value2\\n\"));\n    assertThat(expected, containsString(\"map:\\n  key1: value1\\n  key2: value2\\n\"));\n    assertThat(expected, not(containsString(\"embedded_map_1\")));\n    assertThat(expected, containsString(\"embeddedMap:\\n  embedded_map_2:\\n    embedded_map_foo: embedded_map_foo_value\\n\"));\n    assertThat(expected, containsString(\"value: value\\n\"));\n    assertThat(expected, containsString(\"customizedTag: customized_tag\\n\"));\n}\n"
    ]
  },
  "4": {
    "commit_src": "f9c5dd6c100c64e92c654e40bc89fbe8cd849669",
    "commit_tgt": "d49bc1499e3fc836ceb6088a66e8a4e2ab856e17",
    "changed_tests": [
      "proxy/backend/core/src/test/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowDistVariableExecutorTest.java",
      "proxy/backend/core/src/test/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowDistVariablesExecutorTest.java"
    ],
    "refer_PR": "apache_shardingsphere-28970",
    "test_src": ".org.apache.shardingsphere.proxy.backend.handler.distsql.ral.queryable.ShowDistVariablesExecutorTest#assertExecute",
    "test_tgt": [
      ".org.apache.shardingsphere.proxy.backend.handler.distsql.ral.queryable.ShowDistVariablesExecutorTest#assertExecute"
    ],
    "test_src_code": "    @Test\n    void assertExecute() {\n        when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n        when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n        when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n        ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n        Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, mock(ShowDistVariablesStatement.class));\n        assertThat(actual.size(), is(20));\n        LocalDataQueryResultRow row = actual.iterator().next();\n        assertThat(row.getCell(1), is(\"agent_plugins_enabled\"));\n        assertThat(row.getCell(2), is(\"true\"));\n    }\n",
    "test_tgt_code": "    @Test\n    void assertExecute() {\n        when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system-log-level\", \"INFO\"))));\n        when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n        ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n        Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, mock(ShowDistVariablesStatement.class));\n        assertThat(actual.size(), is(21));\n        LocalDataQueryResultRow row = actual.iterator().next();\n        assertThat(row.getCell(1), is(\"agent_plugins_enabled\"));\n        assertThat(row.getCell(2), is(\"true\"));\n    }\n",
    "focal_path_src": [
      "proxy/backend/core/src/main/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowDistVariablesExecutor.java#getRows"
    ],
    "focal_path_tgt": [
      "proxy/backend/core/src/main/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowDistVariablesExecutor.java#getRows"
    ],
    "focal_src": [
      "    @Override\n    public Collection<LocalDataQueryResultRow> getRows(final ShardingSphereMetaData metaData, final ConnectionSession connectionSession, final ShowDistVariablesStatement sqlStatement) {\n        Collection<LocalDataQueryResultRow> result = ConfigurationPropertyKey.getKeyNames().stream().filter(each -> !\"sql_show\".equalsIgnoreCase(each) && !\"sql_simple\".equalsIgnoreCase(each)\n                && null != metaData.getProps().getValue(ConfigurationPropertyKey.valueOf(each)))\n                .map(each -> new LocalDataQueryResultRow(each.toLowerCase(), metaData.getProps().getValue(ConfigurationPropertyKey.valueOf(each)).toString())).collect(Collectors.toList());\n        result.addAll(TemporaryConfigurationPropertyKey.getKeyNames().stream()\n                .map(each -> new LocalDataQueryResultRow(each.toLowerCase(), metaData.getTemporaryProps().getValue(TemporaryConfigurationPropertyKey.valueOf(each)).toString()))\n                .collect(Collectors.toList()));\n        result.add(new LocalDataQueryResultRow(VariableEnum.CACHED_CONNECTIONS.name().toLowerCase(), connectionSession.getDatabaseConnectionManager().getConnectionSize()));\n        addLoggingPropsRows(metaData, result);\n        if (sqlStatement.getLikePattern().isPresent()) {\n            String pattern = SQLUtils.convertLikePatternToRegex(sqlStatement.getLikePattern().get());\n            result = result.stream().filter(each -> Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).matcher((String) each.getCell(1)).matches()).collect(Collectors.toList());\n        }\n        return result.stream().sorted(Comparator.comparing(each -> each.getCell(1).toString())).collect(Collectors.toList());\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public Collection<LocalDataQueryResultRow> getRows(final ShardingSphereMetaData metaData, final ConnectionSession connectionSession, final ShowDistVariablesStatement sqlStatement) {\n        Collection<LocalDataQueryResultRow> result = ConfigurationPropertyKey.getKeyNames().stream()\n                .filter(each -> !ConfigurationPropertyKey.SQL_SHOW.name().equals(each) && !ConfigurationPropertyKey.SQL_SIMPLE.name().equals(each))\n                .map(each -> new LocalDataQueryResultRow(each.toLowerCase(), getStringResult(metaData.getProps().getValue(ConfigurationPropertyKey.valueOf(each))))).collect(Collectors.toList());\n        result.addAll(TemporaryConfigurationPropertyKey.getKeyNames().stream()\n                .map(each -> new LocalDataQueryResultRow(each.toLowerCase(), getStringResult(metaData.getTemporaryProps().getValue(TemporaryConfigurationPropertyKey.valueOf(each)))))\n                .collect(Collectors.toList()));\n        result.add(new LocalDataQueryResultRow(VariableEnum.CACHED_CONNECTIONS.name().toLowerCase(), connectionSession.getDatabaseConnectionManager().getConnectionSize()));\n        addLoggingPropsRows(metaData, result);\n        if (sqlStatement.getLikePattern().isPresent()) {\n            String pattern = SQLUtils.convertLikePatternToRegex(sqlStatement.getLikePattern().get());\n            result = result.stream().filter(each -> Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).matcher((String) each.getCell(1)).matches()).collect(Collectors.toList());\n        }\n        return result.stream().sorted(Comparator.comparing(each -> each.getCell(1).toString())).collect(Collectors.toList());\n    }\n"
    ],
    "test_id": 4,
    "identify_result_deepseek-coder": false
  },
  "5": {
    "commit_src": "f9c5dd6c100c64e92c654e40bc89fbe8cd849669",
    "commit_tgt": "d49bc1499e3fc836ceb6088a66e8a4e2ab856e17",
    "changed_tests": [
      "proxy/backend/core/src/test/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowDistVariableExecutorTest.java",
      "proxy/backend/core/src/test/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowDistVariablesExecutorTest.java"
    ],
    "refer_PR": "apache_shardingsphere-28970",
    "test_src": ".org.apache.shardingsphere.proxy.backend.handler.distsql.ral.queryable.ShowDistVariablesExecutorTest#assertExecuteWithLike",
    "test_tgt": [
      ".org.apache.shardingsphere.proxy.backend.handler.distsql.ral.queryable.ShowDistVariablesExecutorTest#assertExecuteWithLike"
    ],
    "test_src_code": "    @Test\n    void assertExecuteWithLike() {\n        when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n        when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n        when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n        ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n        Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n        assertThat(actual.size(), is(2));\n        Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n        assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n        assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n    }\n",
    "test_tgt_code": "    @Test\n    void assertExecuteWithLike() {\n        when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system-log-level\", \"INFO\"))));\n        when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n        when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n        ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n        Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n        assertThat(actual.size(), is(2));\n        Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n        assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n        assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n    }\n",
    "focal_path_src": [
      "proxy/backend/core/src/main/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowDistVariablesExecutor.java#getRows"
    ],
    "focal_path_tgt": [
      "proxy/backend/core/src/main/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowDistVariablesExecutor.java#getRows"
    ],
    "focal_src": [
      "    @Override\n    public Collection<LocalDataQueryResultRow> getRows(final ShardingSphereMetaData metaData, final ConnectionSession connectionSession, final ShowDistVariablesStatement sqlStatement) {\n        Collection<LocalDataQueryResultRow> result = ConfigurationPropertyKey.getKeyNames().stream().filter(each -> !\"sql_show\".equalsIgnoreCase(each) && !\"sql_simple\".equalsIgnoreCase(each)\n                && null != metaData.getProps().getValue(ConfigurationPropertyKey.valueOf(each)))\n                .map(each -> new LocalDataQueryResultRow(each.toLowerCase(), metaData.getProps().getValue(ConfigurationPropertyKey.valueOf(each)).toString())).collect(Collectors.toList());\n        result.addAll(TemporaryConfigurationPropertyKey.getKeyNames().stream()\n                .map(each -> new LocalDataQueryResultRow(each.toLowerCase(), metaData.getTemporaryProps().getValue(TemporaryConfigurationPropertyKey.valueOf(each)).toString()))\n                .collect(Collectors.toList()));\n        result.add(new LocalDataQueryResultRow(VariableEnum.CACHED_CONNECTIONS.name().toLowerCase(), connectionSession.getDatabaseConnectionManager().getConnectionSize()));\n        addLoggingPropsRows(metaData, result);\n        if (sqlStatement.getLikePattern().isPresent()) {\n            String pattern = SQLUtils.convertLikePatternToRegex(sqlStatement.getLikePattern().get());\n            result = result.stream().filter(each -> Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).matcher((String) each.getCell(1)).matches()).collect(Collectors.toList());\n        }\n        return result.stream().sorted(Comparator.comparing(each -> each.getCell(1).toString())).collect(Collectors.toList());\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public Collection<LocalDataQueryResultRow> getRows(final ShardingSphereMetaData metaData, final ConnectionSession connectionSession, final ShowDistVariablesStatement sqlStatement) {\n        Collection<LocalDataQueryResultRow> result = ConfigurationPropertyKey.getKeyNames().stream()\n                .filter(each -> !ConfigurationPropertyKey.SQL_SHOW.name().equals(each) && !ConfigurationPropertyKey.SQL_SIMPLE.name().equals(each))\n                .map(each -> new LocalDataQueryResultRow(each.toLowerCase(), getStringResult(metaData.getProps().getValue(ConfigurationPropertyKey.valueOf(each))))).collect(Collectors.toList());\n        result.addAll(TemporaryConfigurationPropertyKey.getKeyNames().stream()\n                .map(each -> new LocalDataQueryResultRow(each.toLowerCase(), getStringResult(metaData.getTemporaryProps().getValue(TemporaryConfigurationPropertyKey.valueOf(each)))))\n                .collect(Collectors.toList()));\n        result.add(new LocalDataQueryResultRow(VariableEnum.CACHED_CONNECTIONS.name().toLowerCase(), connectionSession.getDatabaseConnectionManager().getConnectionSize()));\n        addLoggingPropsRows(metaData, result);\n        if (sqlStatement.getLikePattern().isPresent()) {\n            String pattern = SQLUtils.convertLikePatternToRegex(sqlStatement.getLikePattern().get());\n            result = result.stream().filter(each -> Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).matcher((String) each.getCell(1)).matches()).collect(Collectors.toList());\n        }\n        return result.stream().sorted(Comparator.comparing(each -> each.getCell(1).toString())).collect(Collectors.toList());\n    }\n"
    ],
    "test_id": 5,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n",
      "@Test\nvoid assertExecuteWithLike() {\n    when(metaData.getProps()).thenReturn(new ConfigurationProperties(PropertiesBuilder.build(new Property(\"system_log_level\", \"INFO\"))));\n    when(metaData.getTemporaryProps()).thenReturn(new TemporaryConfigurationProperties(PropertiesBuilder.build(new Property(\"proxy-meta-data-collector-enabled\", Boolean.FALSE.toString()))));\n    when(metaData.getGlobalRuleMetaData()).thenReturn(new RuleMetaData(Collections.singleton(new LoggingRule(new DefaultLoggingRuleConfigurationBuilder().build()))));\n    ShowDistVariablesExecutor executor = new ShowDistVariablesExecutor();\n    Collection<LocalDataQueryResultRow> actual = executor.getRows(metaData, connectionSession, new ShowDistVariablesStatement(\"sql_%\"));\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    assertThat(iterator.next().getCell(1), is(\"sql_show\"));\n    assertThat(iterator.next().getCell(1), is(\"sql_simple\"));\n}\n"
    ]
  },
  "6": {
    "commit_src": "e9aa53dc4d4eac56bdf758faa8178a920858a62f",
    "commit_tgt": "29bffb50de1692f81414441e85081a08f54262d7",
    "changed_tests": [
      "features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastDatabaseBroadcastRoutingEngineTest.java",
      "features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastInstanceBroadcastRoutingEngineTest.java",
      "features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastTableBroadcastRoutingEngineTest.java",
      "features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/unicast/BroadcastUnicastRoutingEngineTest.java"
    ],
    "refer_PR": "apache_shardingsphere-29025",
    "test_src": ".org.apache.shardingsphere.broadcast.route.engine.type.broadcast.BroadcastDatabaseBroadcastRoutingEngineTest#assertRoute",
    "test_tgt": [
      ".org.apache.shardingsphere.broadcast.route.engine.type.broadcast.BroadcastDatabaseBroadcastRoutingEngineTest#assertRoute"
    ],
    "test_src_code": "    @Test\n    void assertRoute() {\n        BroadcastRule broadcastRule = mock(BroadcastRule.class);\n        when(broadcastRule.getAvailableDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n        BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n        assertThat(routeContext.getRouteUnits().size(), is(2));\n        Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n        assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n        assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n    }\n",
    "test_tgt_code": "    @Test\n    void assertRoute() {\n        BroadcastRule broadcastRule = mock(BroadcastRule.class);\n        when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n        BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n        assertThat(routeContext.getRouteUnits().size(), is(2));\n        Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n        assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n        assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n    }\n",
    "focal_path_src": [
      "features/broadcast/core/src/main/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastDatabaseBroadcastRoutingEngine.java#route"
    ],
    "focal_path_tgt": [
      "features/broadcast/core/src/main/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastDatabaseBroadcastRoutingEngine.java#route"
    ],
    "focal_src": [
      "    @Override\n    public RouteContext route(final RouteContext routeContext, final BroadcastRule broadcastRule) {\n        for (String each : broadcastRule.getAvailableDataSourceNames()) {\n            routeContext.getRouteUnits().add(new RouteUnit(new RouteMapper(each, each), Collections.emptyList()));\n        }\n        return routeContext;\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public RouteContext route(final RouteContext routeContext, final BroadcastRule broadcastRule) {\n        for (String each : broadcastRule.getDataSourceNames()) {\n            routeContext.getRouteUnits().add(new RouteUnit(new RouteMapper(each, each), Collections.emptyList()));\n        }\n        return routeContext;\n    }\n"
    ],
    "test_id": 6,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n",
      "@Test\nvoid assertRoute() {\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(2));\n    Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();\n    assertDataSourceRouteMapper(iterator.next(), \"ds_0\");\n    assertDataSourceRouteMapper(iterator.next(), \"ds_1\");\n}\n"
    ]
  },
  "7": {
    "commit_src": "e9aa53dc4d4eac56bdf758faa8178a920858a62f",
    "commit_tgt": "29bffb50de1692f81414441e85081a08f54262d7",
    "changed_tests": [
      "features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastDatabaseBroadcastRoutingEngineTest.java",
      "features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastInstanceBroadcastRoutingEngineTest.java",
      "features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastTableBroadcastRoutingEngineTest.java",
      "features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/unicast/BroadcastUnicastRoutingEngineTest.java"
    ],
    "refer_PR": "apache_shardingsphere-29025",
    "test_src": ".org.apache.shardingsphere.broadcast.route.engine.type.broadcast.BroadcastInstanceBroadcastRoutingEngineTest#assertRoute",
    "test_tgt": [
      ".org.apache.shardingsphere.broadcast.route.engine.type.broadcast.BroadcastInstanceBroadcastRoutingEngineTest#assertRoute"
    ],
    "test_src_code": "    @Test\n    void assertRoute() {\n        ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n        when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n        BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n        BroadcastRule broadcastRule = mock(BroadcastRule.class);\n        when(broadcastRule.getAvailableDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n        assertThat(routeContext.getRouteUnits().size(), is(1));\n        assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n    }\n",
    "test_tgt_code": "    @Test\n    void assertRoute() {\n        ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n        when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n        BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n        BroadcastRule broadcastRule = mock(BroadcastRule.class);\n        when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n        assertThat(routeContext.getRouteUnits().size(), is(1));\n        assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n    }\n",
    "focal_path_src": [
      "features/broadcast/core/src/main/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastInstanceBroadcastRoutingEngine.java#route"
    ],
    "focal_path_tgt": [
      "features/broadcast/core/src/main/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastInstanceBroadcastRoutingEngine.java#route"
    ],
    "focal_src": [
      "    @Override\n    public RouteContext route(final RouteContext routeContext, final BroadcastRule broadcastRule) {\n        RouteContext result = new RouteContext();\n        for (String each : broadcastRule.getAvailableDataSourceNames()) {\n            if (resourceMetaData.getAllInstanceDataSourceNames().contains(each)) {\n                result.getRouteUnits().add(new RouteUnit(new RouteMapper(each, each), Collections.emptyList()));\n            }\n        }\n        return result;\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public RouteContext route(final RouteContext routeContext, final BroadcastRule broadcastRule) {\n        RouteContext result = new RouteContext();\n        for (String each : broadcastRule.getDataSourceNames()) {\n            if (resourceMetaData.getAllInstanceDataSourceNames().contains(each)) {\n                result.getRouteUnits().add(new RouteUnit(new RouteMapper(each, each), Collections.emptyList()));\n            }\n        }\n        return result;\n    }\n"
    ],
    "test_id": 7,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n",
      "@Test\nvoid assertRoute() {\n    ResourceMetaData resourceMetaData = mock(ResourceMetaData.class);\n    when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton(\"ds_0\"));\n    BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);\n    BroadcastRule broadcastRule = mock(BroadcastRule.class);\n    when(broadcastRule.getDataSourceNames()).thenReturn(Arrays.asList(\"ds_0\", \"ds_1\"));\n    RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);\n    assertThat(routeContext.getRouteUnits().size(), is(1));\n    assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), \"ds_0\");\n}\n"
    ]
  },
  "8": {
    "commit_src": "7bfc3d49bb718fd014e6fc187243fe52ef7393b7",
    "commit_tgt": "da95e15bf00aa078c1b23382a4a7faba8dae6199",
    "changed_tests": [
      "proxy/backend/core/src/test/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowTableMetaDataExecutorTest.java"
    ],
    "refer_PR": "apache_shardingsphere-29228",
    "test_src": ".org.apache.shardingsphere.proxy.backend.handler.distsql.ral.queryable.ShowTableMetaDataExecutorTest#assertGetColumnNames",
    "test_tgt": [
      ".org.apache.shardingsphere.proxy.backend.handler.distsql.ral.queryable.ShowTableMetaDataExecutorTest#assertGetColumnNames"
    ],
    "test_src_code": "    @Test\n    void assertGetColumnNames() {\n        ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n        Collection<String> columns = executor.getColumnNames();\n        assertThat(columns.size(), is(4));\n        Iterator<String> iterator = columns.iterator();\n        assertThat(iterator.next(), is(\"database_name\"));\n        assertThat(iterator.next(), is(\"table_name\"));\n        assertThat(iterator.next(), is(\"type\"));\n        assertThat(iterator.next(), is(\"name\"));\n    }\n",
    "test_tgt_code": "    @Test\n    void assertGetColumnNames() {\n        ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n        Collection<String> columns = executor.getColumnNames();\n        assertThat(columns.size(), is(5));\n        Iterator<String> iterator = columns.iterator();\n        assertThat(iterator.next(), is(\"database_name\"));\n        assertThat(iterator.next(), is(\"table_name\"));\n        assertThat(iterator.next(), is(\"type\"));\n        assertThat(iterator.next(), is(\"name\"));\n        assertThat(iterator.next(), is(\"value\"));\n    }\n",
    "focal_path_src": [
      "proxy/backend/core/src/main/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowTableMetaDataExecutor.java#getColumnNames"
    ],
    "focal_path_tgt": [
      "proxy/backend/core/src/main/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowTableMetaDataExecutor.java#getColumnNames"
    ],
    "focal_src": [
      "    @Override\n    public Collection<String> getColumnNames() {\n        return Arrays.asList(\"database_name\", \"table_name\", \"type\", \"name\");\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public Collection<String> getColumnNames() {\n        return Arrays.asList(\"database_name\", \"table_name\", \"type\", \"name\", \"value\");\n    }\n"
    ],
    "test_id": 8,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5)); // The size is updated to 5\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\")); // A new column name \"value\" is added\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\")); //new column added\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5)); // updated size to 5\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\")); // new column name\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5)); // The size is updated to 5\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\")); // A new column name \"value\" is added\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\"));\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5));\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\")); //new column added\n}\n",
      "@Test\nvoid assertGetColumnNames() {\n    ShowTableMetaDataExecutor executor = new ShowTableMetaDataExecutor();\n    Collection<String> columns = executor.getColumnNames();\n    assertThat(columns.size(), is(5)); // updated size to 5\n    Iterator<String> iterator = columns.iterator();\n    assertThat(iterator.next(), is(\"database_name\"));\n    assertThat(iterator.next(), is(\"table_name\"));\n    assertThat(iterator.next(), is(\"type\"));\n    assertThat(iterator.next(), is(\"name\"));\n    assertThat(iterator.next(), is(\"value\")); // new column name\n}\n"
    ]
  },
  "9": {
    "commit_src": "7bfc3d49bb718fd014e6fc187243fe52ef7393b7",
    "commit_tgt": "da95e15bf00aa078c1b23382a4a7faba8dae6199",
    "changed_tests": [
      "proxy/backend/core/src/test/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowTableMetaDataExecutorTest.java"
    ],
    "refer_PR": "apache_shardingsphere-29228",
    "test_src": ".org.apache.shardingsphere.proxy.backend.handler.distsql.ral.queryable.ShowTableMetaDataExecutorTest#assertExecute",
    "test_tgt": [
      ".org.apache.shardingsphere.proxy.backend.handler.distsql.ral.queryable.ShowTableMetaDataExecutorTest#assertExecute"
    ],
    "test_src_code": "    @Test\n    void assertExecute() {\n        ShardingSphereDatabase database = mockDatabase();\n        Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n        assertThat(actual.size(), is(2));\n        Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n        LocalDataQueryResultRow row = iterator.next();\n        assertThat(row.getCell(1), is(\"foo_db\"));\n        assertThat(row.getCell(2), is(\"t_order\"));\n        assertThat(row.getCell(3), is(\"COLUMN\"));\n        assertThat(row.getCell(4), is(\"order_id\"));\n        row = iterator.next();\n        assertThat(row.getCell(1), is(\"foo_db\"));\n        assertThat(row.getCell(2), is(\"t_order\"));\n        assertThat(row.getCell(3), is(\"INDEX\"));\n        assertThat(row.getCell(4), is(\"primary\"));\n    }\n",
    "test_tgt_code": "    @Test\n    void assertExecute() {\n        ShardingSphereDatabase database = mockDatabase();\n        Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n        assertThat(actual.size(), is(2));\n        Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n        LocalDataQueryResultRow row = iterator.next();\n        assertThat(row.getCell(1), is(\"foo_db\"));\n        assertThat(row.getCell(2), is(\"t_order\"));\n        assertThat(row.getCell(3), is(\"COLUMN\"));\n        assertThat(row.getCell(4), is(\"order_id\"));\n        assertThat(row.getCell(5),\n                is(\"{\\\"name\\\":\\\"order_id\\\",\\\"dataType\\\":0,\\\"primaryKey\\\":false,\\\"generated\\\":false,\\\"caseSensitive\\\":false,\\\"visible\\\":true,\\\"unsigned\\\":false,\\\"nullable\\\":false}\"));\n        row = iterator.next();\n        assertThat(row.getCell(1), is(\"foo_db\"));\n        assertThat(row.getCell(2), is(\"t_order\"));\n        assertThat(row.getCell(3), is(\"INDEX\"));\n        assertThat(row.getCell(4), is(\"primary\"));\n        assertThat(row.getCell(5), is(\"{\\\"name\\\":\\\"primary\\\",\\\"columns\\\":[],\\\"unique\\\":false}\"));\n    }\n",
    "focal_path_src": [
      "proxy/backend/core/src/main/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowTableMetaDataExecutor.java#getRows"
    ],
    "focal_path_tgt": [
      "proxy/backend/core/src/main/java/org/apache/shardingsphere/proxy/backend/handler/distsql/ral/queryable/ShowTableMetaDataExecutor.java#getRows"
    ],
    "focal_src": [
      "    @Override\n    public Collection<LocalDataQueryResultRow> getRows(final ShardingSphereDatabase database, final ShowTableMetaDataStatement sqlStatement) {\n        String defaultSchema = new DatabaseTypeRegistry(database.getProtocolType()).getDefaultSchemaName(database.getName());\n        ShardingSphereSchema schema = database.getSchema(defaultSchema);\n        return schema.getAllTableNames().stream().filter(each -> sqlStatement.getTableNames().contains(each))\n                .map(each -> buildTableRows(database.getName(), schema, each)).flatMap(Collection::stream).collect(Collectors.toList());\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public Collection<LocalDataQueryResultRow> getRows(final ShardingSphereDatabase database, final ShowTableMetaDataStatement sqlStatement) {\n        String defaultSchema = new DatabaseTypeRegistry(database.getProtocolType()).getDefaultSchemaName(database.getName());\n        ShardingSphereSchema schema = database.getSchema(defaultSchema);\n        return sqlStatement.getTableNames().stream().filter(each -> schema.getAllTableNames().contains(each.toLowerCase()))\n                .map(each -> buildTableRows(database.getName(), schema, each.toLowerCase())).flatMap(Collection::stream).collect(Collectors.toList());\n    }\n"
    ],
    "test_id": 9,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n",
      "@Test\nvoid assertExecute() {\n    ShardingSphereDatabase database = mockDatabase();\n    Collection<LocalDataQueryResultRow> actual = new ShowTableMetaDataExecutor().getRows(database, createSqlStatement());\n    assertThat(actual.size(), is(2));\n    Iterator<LocalDataQueryResultRow> iterator = actual.iterator();\n    LocalDataQueryResultRow row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"COLUMN\"));\n    assertThat(row.getCell(4), is(\"order_id\"));\n    row = iterator.next();\n    assertThat(row.getCell(1), is(\"foo_db\"));\n    assertThat(row.getCell(2), is(\"t_order\"));\n    assertThat(row.getCell(3), is(\"INDEX\"));\n    assertThat(row.getCell(4), is(\"primary\"));\n}\n"
    ]
  },
  "10": {
    "commit_src": "a0519cfb74da00fa876b9a2502e0e3faaa7065b9",
    "commit_tgt": "1ca8a9d8c1efa743574fbbe009fdc6445ff780f5",
    "changed_tests": [
      "infra/database/type/mariadb/src/test/java/org/apache/shardingsphere/infra/database/mariadb/type/MariaDBDatabaseTypeTest.java",
      "infra/database/type/mysql/src/test/java/org/apache/shardingsphere/infra/database/mysql/type/MySQLDatabaseTypeTest.java",
      "infra/database/type/oracle/src/test/java/org/apache/shardingsphere/infra/database/oracle/type/OracleDatabaseTypeTest.java",
      "infra/database/type/postgresql/src/test/java/org/apache/shardingsphere/infra/database/postgresql/type/PostgreSQLDatabaseTypeTest.java",
      "infra/database/type/sqlserver/src/test/java/org/apache/shardingsphere/infra/database/sqlserver/type/SQLServerDatabaseTypeTest.java"
    ],
    "refer_PR": "apache_shardingsphere-29297",
    "test_src": ".org.apache.shardingsphere.infra.database.mariadb.type.MariaDBDatabaseTypeTest#assertGetJdbcUrlPrefixes",
    "test_tgt": [
      ".org.apache.shardingsphere.infra.database.mariadb.type.MariaDBDatabaseTypeTest#assertGetJdbcUrlPrefixes"
    ],
    "test_src_code": "    @Test\n    void assertGetJdbcUrlPrefixes() {\n        assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Collections.singleton(\"jdbc:mariadb:\")));\n    }\n",
    "test_tgt_code": "    @Test\n    void assertGetJdbcUrlPrefixes() {\n        assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n    }\n",
    "focal_path_src": [
      "infra/database/type/mariadb/src/main/java/org/apache/shardingsphere/infra/database/mariadb/type/MariaDBDatabaseType.java#getJdbcUrlPrefixes"
    ],
    "focal_path_tgt": [
      "infra/database/type/mariadb/src/main/java/org/apache/shardingsphere/infra/database/mariadb/type/MariaDBDatabaseType.java#getJdbcUrlPrefixes"
    ],
    "focal_src": [
      "    @Override\n    public Collection<String> getJdbcUrlPrefixes() {\n        return Collections.singleton(String.format(\"jdbc:%s:\", getType().toLowerCase()));\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public Collection<String> getJdbcUrlPrefixes() {\n        return Arrays.asList(String.format(\"jdbc:%s:\", getType().toLowerCase()), \"jdbc:tc:mariadb:\");\n    }\n"
    ],
    "test_id": 10,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(),\n               is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(),\n               is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n",
      "@Test\nvoid assertGetJdbcUrlPrefixes() {\n    assertThat(TypedSPILoader.getService(DatabaseType.class, \"MariaDB\").getJdbcUrlPrefixes(), is(Arrays.asList(\"jdbc:mariadb:\", \"jdbc:tc:mariadb:\")));\n}\n"
    ]
  },
  "11": {
    "commit_src": "f3094a149be90be02904eab41b48facb44336684",
    "commit_tgt": "1e7e681c6f49517724a8e88b7e4b7e580177cc10",
    "changed_tests": [
      "proxy/backend/type/mysql/src/test/java/org/apache/shardingsphere/proxy/backend/mysql/handler/admin/executor/ShowDatabasesExecutorTest.java"
    ],
    "refer_PR": "apache_shardingsphere-29759",
    "test_src": ".org.apache.shardingsphere.proxy.backend.mysql.handler.admin.executor.ShowDatabasesExecutorTest#assertExecute",
    "test_tgt": [
      ".org.apache.shardingsphere.proxy.backend.mysql.handler.admin.executor.ShowDatabasesExecutorTest#assertExecute"
    ],
    "test_src_code": "    @Test\n    void assertExecute() throws SQLException {\n        ContextManager contextManager = mockContextManager();\n        when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n        when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n        ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n        executor.execute(mockConnectionSession());\n        assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n        assertThat(getActual(executor), is(getExpected()));\n    }\n",
    "test_tgt_code": "    @Test\n    void assertExecute() throws SQLException {\n        ContextManager contextManager = mockContextManager();\n        when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n        when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n        ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n        executor.execute(mockConnectionSession());\n        QueryResultMetaData queryResultMetaData = executor.getQueryResultMetaData();\n        assertThat(queryResultMetaData.getColumnCount(), is(1));\n        assertThat(queryResultMetaData.getTableName(1), is(\"SCHEMATA\"));\n        assertThat(queryResultMetaData.getColumnLabel(1), is(\"Database\"));\n        assertThat(queryResultMetaData.getColumnName(1), is(\"SCHEMA_NAME\"));\n        assertThat(getActual(executor), is(getExpected()));\n    }\n",
    "focal_path_src": [
      "proxy/backend/type/mysql/src/main/java/org/apache/shardingsphere/proxy/backend/mysql/handler/admin/executor/ShowDatabasesExecutor.java#getQueryResultMetaData"
    ],
    "focal_path_tgt": [
      "proxy/backend/type/mysql/src/main/java/org/apache/shardingsphere/proxy/backend/mysql/handler/admin/executor/ShowDatabasesExecutor.java#getQueryResultMetaData"
    ],
    "focal_src": [
      "    @Override\n    public QueryResultMetaData getQueryResultMetaData() {\n        return new RawQueryResultMetaData(Collections.singletonList(new RawQueryResultColumnMetaData(\"SCHEMATA\", \"Database\", \"schema_name\", Types.VARCHAR, \"VARCHAR\", 255, 0)));\n    }\n"
    ],
    "focal_tgt": [
      "    @Override\n    public QueryResultMetaData getQueryResultMetaData() {\n        return new RawQueryResultMetaData(Collections.singletonList(new RawQueryResultColumnMetaData(\"SCHEMATA\", \"SCHEMA_NAME\", \"Database\", Types.VARCHAR, \"VARCHAR\", 255, 0)));\n    }\n"
    ],
    "test_id": 11,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    // Assuming that getActual and getExpected methods have not changed, we can use the same ones\n    assertThat(getActual(executor), is(getExpected()));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    assertThat(getActual(executor), is(getExpected()));\n}\n",
      "@Test\nvoid assertExecute() throws SQLException {\n    ContextManager contextManager = mockContextManager();\n    when(ProxyContext.getInstance().getContextManager()).thenReturn(contextManager);\n    when(ProxyContext.getInstance().getAllDatabaseNames()).thenReturn(IntStream.range(0, 10).mapToObj(each -> String.format(\"database_%s\", each)).collect(Collectors.toList()));\n    ShowDatabasesExecutor executor = new ShowDatabasesExecutor(new MySQLShowDatabasesStatement());\n    executor.execute(mockConnectionSession());\n    assertThat(executor.getQueryResultMetaData().getColumnCount(), is(1));\n    // Assuming that getActual and getExpected methods have not changed, we can use the same ones\n    assertThat(getActual(executor), is(getExpected()));\n}\n"
    ]
  },
  "12": {
    "commit_src": "e9c1603236c66247abe6b794e31483db36650dd1",
    "commit_tgt": "5789fc2c7d609f99789cf8b2de76e6b55232ef81",
    "changed_tests": [
      "infra/util/src/test/java/org/apache/shardingsphere/infra/util/directory/ClasspathResourceDirectoryReaderTest.java"
    ],
    "refer_PR": "apache_shardingsphere-30361",
    "test_src": ".org.apache.shardingsphere.infra.util.directory.ClasspathResourceDirectoryReaderTest#read",
    "test_tgt": [
      ".org.apache.shardingsphere.infra.util.directory.ClasspathResourceDirectoryReaderTest#assertIsDirectoryTest",
      ".org.apache.shardingsphere.infra.util.directory.ClasspathResourceDirectoryReaderTest#assertReadTest",
      ".org.apache.shardingsphere.infra.util.directory.ClasspathResourceDirectoryReaderTest#assertReadNestedTest"
    ],
    "test_src_code": "    @Test\n    void read() {\n        List<String> resourceNameList = ClasspathResourceDirectoryReader.read(\"yaml\").collect(Collectors.toList());\n        assertThat(resourceNameList.size(), is(4));\n        final String separator = File.separator;\n        assertThat(resourceNameList, hasItems(\"yaml\" + separator + \"accepted-class.yaml\", \"yaml\" + separator + \"customized-obj.yaml\", \"yaml\" + separator + \"empty-config.yaml\",\n                \"yaml\" + separator + \"shortcuts-fixture.yaml\"));\n    }\n",
    "test_tgt_code": "",
    "focal_path_src": [
      "infra/util/src/main/java/org/apache/shardingsphere/infra/util/directory/ClasspathResourceDirectoryReader.java#read"
    ],
    "focal_path_tgt": [
      "infra/util/src/main/java/org/apache/shardingsphere/infra/util/directory/ClasspathResourceDirectoryReader.java#read"
    ],
    "focal_src": [
      "    @SneakyThrows(IOException.class)\n    public static Stream<String> read(final ClassLoader classLoader, final String directory) {\n        Enumeration<URL> directoryUrlEnumeration = classLoader.getResources(directory);\n        if (null == directoryUrlEnumeration) {\n            return Stream.empty();\n        }\n        return Collections.list(directoryUrlEnumeration).stream().flatMap(directoryUrl -> {\n            if (JAR_URL_PROTOCOLS.contains(directoryUrl.getProtocol())) {\n                return readDirectoryInJar(directory, directoryUrl);\n            } else {\n                return readDirectoryInFileSystem(directoryUrl);\n            }\n        });\n    }\n"
    ],
    "focal_tgt": [
      "    @SneakyThrows(IOException.class)\n    public static Stream<String> read(final ClassLoader classLoader, final String directory) {\n        Enumeration<URL> directoryUrlEnumeration = classLoader.getResources(directory);\n        if (null == directoryUrlEnumeration) {\n            return Stream.empty();\n        }\n        return Collections.list(directoryUrlEnumeration).stream().flatMap(directoryUrl -> {\n            if (JAR_URL_PROTOCOLS.contains(directoryUrl.getProtocol())) {\n                return readDirectoryInJar(directory, directoryUrl);\n            } else {\n                return readDirectoryInFileSystem(directory, directoryUrl);\n            }\n        });\n    }\n"
    ],
    "test_id": 12,
    "identify_result_deepseek-coder": true,
    "test_fix_deepseek-coder": [
      "@Test\nvoid read() {\n    List<String> resourceNameList = ClasspathResourceDirectoryReader.read(ClasspathResourceDirectoryReader.class.getClassLoader(), \"yaml\").collect(Collectors.toList());\n    assertThat(resourceNameList.size(), is(4));\n    final String separator = File.separator;\n    assertThat(resourceNameList, hasItems(\"yaml\" + separator + \"accepted-class.yaml\", \"yaml\" + separator + \"customized-obj.yaml\", \"yaml\" + separator + \"empty-config.yaml\",\n            \"yaml\" + separator + \"shortcuts-fixture.yaml\"));\n}\n"
    ],
    "test_enhance_deepseek-coder": [
      "@Test\nvoid read() {\n    List<String> resourceNameList = ClasspathResourceDirectoryReader.read(ClasspathResourceDirectoryReader.class.getClassLoader(), \"yaml\").collect(Collectors.toList());\n    assertThat(resourceNameList.size(), is(4));\n    final String separator = File.separator;\n    assertThat(resourceNameList, hasItems(\"yaml\" + separator + \"accepted-class.yaml\", \"yaml\" + separator + \"customized-obj.yaml\", \"yaml\" + separator + \"empty-config.yaml\",\n            \"yaml\" + separator + \"shortcuts-fixture.yaml\"));\n}\n"
    ]
  }
}