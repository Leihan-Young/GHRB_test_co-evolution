{
  "issue_id": 4441,
  "issue_url": "https://github.com/FasterXML/jackson-databind/issues/4441",
  "title": "@JsonSetter(nulls = Nulls.SKIP) doesn't work in some situations",
  "description": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\">We're using <code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code> quite heavily in our code base to avoid dealing with <code class=\"notranslate\">null</code> values, but yesterday I noticed that some fields contain <code class=\"notranslate\">null</code> despite being annotated with <code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code></p>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.15.3, 2.15.4, 2.16.0, 2.16.1, 2.16.2, 2.17.0</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public class Main {\n    static class Outer {\n        @JsonSetter(nulls = Nulls.SKIP)\n        private final List<Middle> list1 = new ArrayList<>();\n\n        public Outer() {\n        }\n\n        public List<Middle> getList1() {\n            return list1;\n        }\n    }\n\n    static class Middle {\n        @JsonSetter(nulls = Nulls.SKIP)\n        private final List<Inner> list1 = new ArrayList<>();\n        private final String field1;\n\n        @ConstructorProperties({\"field1\"})\n        public Middle(String field1) {\n            this.field1 = field1;\n        }\n\n        public List<Inner> getList1() {\n            return list1;\n        }\n\n        public String getField1() {\n            return field1;\n        }\n    }\n\n    static class Inner {\n        private final String field1;\n\n        @ConstructorProperties({\"field1\"})\n        public Inner(String field1) {\n            this.field1 = field1;\n        }\n\n        public String getField1() {\n            return field1;\n        }\n    }\n\n    public static void main(String[] args) {\n        String json = \"\"\"\n                {\n                    \"list1\": [\n                        {\n                            \"list1\": null,\n                            \"field1\": \"data\"\n                        }\n                    ]\n                }\n                \"\"\";\n        ObjectMapper objectMapper = new ObjectMapper();\n        Outer outer;\n        try {\n            outer = objectMapper.readValue(json, Outer.class);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n        validateNotNull(outer);\n        validateNotNull(outer.getList1());\n        for (Middle middle : outer.getList1()) {\n            validateNotNull(middle);\n            validateNotNull(middle.getField1());\n            validateNotNull(middle.getList1());\n        }\n    }\n\n    private static void validateNotNull(Object o) {\n        if (o == null) {\n            throw new IllegalStateException(\"Shouldn't be null\");\n        }\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Main</span> {\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Outer</span> {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonSetter</span>(<span class=\"pl-s1\">nulls</span> = <span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">SKIP</span>)\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Middle</span>> <span class=\"pl-s1\">list1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span><>();\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Outer</span>() {\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Middle</span>> <span class=\"pl-en\">getList1</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">list1</span>;\n        }\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Middle</span> {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonSetter</span>(<span class=\"pl-s1\">nulls</span> = <span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">SKIP</span>)\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Inner</span>> <span class=\"pl-s1\">list1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span><>();\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field1</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">ConstructorProperties</span>({<span class=\"pl-s\">\"field1\"</span>})\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Middle</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field1</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">field1</span> = <span class=\"pl-s1\">field1</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Inner</span>> <span class=\"pl-en\">getList1</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">list1</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getField1</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">field1</span>;\n        }\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Inner</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field1</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">ConstructorProperties</span>({<span class=\"pl-s\">\"field1\"</span>})\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Inner</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field1</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">field1</span> = <span class=\"pl-s1\">field1</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getField1</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">field1</span>;\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"\"\"</span>\n<span class=\"pl-s\">                {</span>\n<span class=\"pl-s\">                    \"list1\": [</span>\n<span class=\"pl-s\">                        {</span>\n<span class=\"pl-s\">                            \"list1\": null,</span>\n<span class=\"pl-s\">                            \"field1\": \"data\"</span>\n<span class=\"pl-s\">                        }</span>\n<span class=\"pl-s\">                    ]</span>\n<span class=\"pl-s\">                }</span>\n<span class=\"pl-s\">                \"\"\"</span>;\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">Outer</span> <span class=\"pl-s1\">outer</span>;\n        <span class=\"pl-k\">try</span> {\n            <span class=\"pl-s1\">outer</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Outer</span>.<span class=\"pl-k\">class</span>);\n        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">JsonProcessingException</span> <span class=\"pl-s1\">e</span>) {\n            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s1\">e</span>);\n        }\n        <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">outer</span>);\n        <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">outer</span>.<span class=\"pl-en\">getList1</span>());\n        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Middle</span> <span class=\"pl-s1\">middle</span> : <span class=\"pl-s1\">outer</span>.<span class=\"pl-en\">getList1</span>()) {\n            <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">middle</span>);\n            <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">middle</span>.<span class=\"pl-en\">getField1</span>());\n            <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">middle</span>.<span class=\"pl-en\">getList1</span>());\n        }\n    }\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">o</span>) {\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o</span> == <span class=\"pl-c1\">null</span>) {\n            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalStateException</span>(<span class=\"pl-s\">\"Shouldn't be null\"</span>);\n        }\n    }\n}</pre></div>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\"><code class=\"notranslate\">middle.getList1()</code> shouldn't be <code class=\"notranslate\">null</code> since it's annotated with <code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code></p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\">Any of the following seems to fix the issue, but is not really feasible to do:</p>\n<ul dir=\"auto\">\n<li>Change the order of fields in the JSON:</li>\n</ul>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n    \"list1\": [\n        {\n            \"field1\": \"data\",\n            \"list1\": null\n        }\n    ]\n}\"><pre class=\"notranslate\">{\n    <span class=\"pl-ent\">\"list1\"</span>: [\n        {\n            <span class=\"pl-ent\">\"field1\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-ent\">\"list1\"</span>: <span class=\"pl-c1\">null</span>\n        }\n    ]\n}</pre></div>\n<ul dir=\"auto\">\n<li>Remove <code class=\"notranslate\">final</code> from <code class=\"notranslate\">Middle#field1</code> and remove this field from constructor parameters</li>\n</ul>",
  "description_text": "Search before asking\n\n I searched in the issues and found nothing similar.\n\nDescribe the bug\nWe're using @JsonSetter(nulls = Nulls.SKIP) quite heavily in our code base to avoid dealing with null values, but yesterday I noticed that some fields contain null despite being annotated with @JsonSetter(nulls = Nulls.SKIP)\nVersion Information\n2.15.3, 2.15.4, 2.16.0, 2.16.1, 2.16.2, 2.17.0\nReproduction\n getList1() {\n            return list1;\n        }\n\n        public String getField1() {\n            return field1;\n        }\n    }\n\n    static class Inner {\n        private final String field1;\n\n        @ConstructorProperties({\"field1\"})\n        public Inner(String field1) {\n            this.field1 = field1;\n        }\n\n        public String getField1() {\n            return field1;\n        }\n    }\n\n    public static void main(String[] args) {\n        String json = \"\"\"\n                {\n                    \"list1\": [\n                        {\n                            \"list1\": null,\n                            \"field1\": \"data\"\n                        }\n                    ]\n                }\n                \"\"\";\n        ObjectMapper objectMapper = new ObjectMapper();\n        Outer outer;\n        try {\n            outer = objectMapper.readValue(json, Outer.class);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n        validateNotNull(outer);\n        validateNotNull(outer.getList1());\n        for (Middle middle : outer.getList1()) {\n            validateNotNull(middle);\n            validateNotNull(middle.getField1());\n            validateNotNull(middle.getList1());\n        }\n    }\n\n    private static void validateNotNull(Object o) {\n        if (o == null) {\n            throw new IllegalStateException(\"Shouldn't be null\");\n        }\n    }\n}\">public class Main {\n    static class Outer {\n        @JsonSetter(nulls = Nulls.SKIP)\n        private final List<Middle> list1 = new ArrayList<>();\n\n        public Outer() {\n        }\n\n        public List<Middle> getList1() {\n            return list1;\n        }\n    }\n\n    static class Middle {\n        @JsonSetter(nulls = Nulls.SKIP)\n        private final List<Inner> list1 = new ArrayList<>();\n        private final String field1;\n\n        @ConstructorProperties({\"field1\"})\n        public Middle(String field1) {\n            this.field1 = field1;\n        }\n\n        public List<Inner> getList1() {\n            return list1;\n        }\n\n        public String getField1() {\n            return field1;\n        }\n    }\n\n    static class Inner {\n        private final String field1;\n\n        @ConstructorProperties({\"field1\"})\n        public Inner(String field1) {\n            this.field1 = field1;\n        }\n\n        public String getField1() {\n            return field1;\n        }\n    }\n\n    public static void main(String[] args) {\n        String json = \"\"\"\n                {\n                    \"list1\": [\n                        {\n                            \"list1\": null,\n                            \"field1\": \"data\"\n                        }\n                    ]\n                }\n                \"\"\";\n        ObjectMapper objectMapper = new ObjectMapper();\n        Outer outer;\n        try {\n            outer = objectMapper.readValue(json, Outer.class);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n        validateNotNull(outer);\n        validateNotNull(outer.getList1());\n        for (Middle middle : outer.getList1()) {\n            validateNotNull(middle);\n            validateNotNull(middle.getField1());\n            validateNotNull(middle.getList1());\n        }\n    }\n\n    private static void validateNotNull(Object o) {\n        if (o == null) {\n            throw new IllegalStateException(\"Shouldn't be null\");\n        }\n    }\n}\nExpected behavior\nmiddle.getList1() shouldn't be null since it's annotated with @JsonSetter(nulls = Nulls.SKIP)\nAdditional context\nAny of the following seems to fix the issue, but is not really feasible to do:\n\nChange the order of fields in the JSON:\n\n{\n    \"list1\": [\n        {\n            \"field1\": \"data\",\n            \"list1\": null\n        }\n    ]\n}\n\nRemove final from Middle#field1 and remove this field from constructor parameters\n"
}