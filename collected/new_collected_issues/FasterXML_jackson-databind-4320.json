{
  "issue_id": 4309,
  "issue_url": "https://github.com/FasterXML/jackson-databind/issues/4309",
  "title": "`@JsonSetter(nulls=...)` handling of `Collection` `null` values during deserialization with `READ_UNKNOWN_ENUM_VALUES_AS_NULL` and `FAIL_ON_INVALID_SUBTYPE` wrong",
  "description": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\">Issue comes from 2018, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"181225699\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/1402\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/1402/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/1402\">#1402</a> (two last comments).</p>\n<p dir=\"auto\">Unknown enum values and subtypes are added as null into result collection instead of being skipped.</p>\n<p dir=\"auto\"><code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code> and <code class=\"notranslate\">.defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))</code> have no effect on nulls with:</p>\n<ul dir=\"auto\">\n<li>READ_UNKNOWN_ENUM_VALUES_AS_NULL (is used for enums to consider unknown as null)</li>\n<li>FAIL_ON_INVALID_SUBTYPE (is used for subtypes to consider unknown as null)</li>\n</ul>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.15.3</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<p dir=\"auto\">READ_UNKNOWN_ENUM_VALUES_AS_NULL:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.fasterxml.jackson.annotation.JsonSetter;\nimport com.fasterxml.jackson.annotation.Nulls;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\n\nclass TestCase {\n\n    ObjectMapper objectMapper = JsonMapper.builder()\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\n            .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)\n            .build();\n\n    static class Data {\n\n        private List<Type> types;\n\n        public List<Type> getTypes() {\n            return types;\n        }\n\n        public void setTypes(List<Type> types) {\n            this.types = types;\n        }\n\n    }\n\n    static enum Type {\n        ONE, TWO\n    }\n\n    @Test\n    void shouldSkipUnknownEnumDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\n        String json = \"{ \\\"types\\\" : [\\\"TWO\\\", \\\"THREE\\\"] }\";\n\n        Data data = objectMapper.readValue(json, Data.class); // will be [TWO, null]\n\n        assertThat(data.getTypes()).isEqualTo(List.of(Type.TWO));\n    }\n\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-s1\">assertThat</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonSetter</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">Nulls</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">json</span>.<span class=\"pl-s1\">JsonMapper</span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestCase</span> {\n\n    <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-smi\">JsonMapper</span>.<span class=\"pl-en\">builder</span>()\n            .<span class=\"pl-en\">defaultSetterInfo</span>(<span class=\"pl-smi\">JsonSetter</span>.<span class=\"pl-s1\">Value</span>.<span class=\"pl-en\">forContentNulls</span>(<span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">SKIP</span>))\n            .<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">READ_UNKNOWN_ENUM_VALUES_AS_NULL</span>)\n            .<span class=\"pl-en\">build</span>();\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Data</span> {\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Type</span>> <span class=\"pl-s1\">types</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Type</span>> <span class=\"pl-en\">getTypes</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">types</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setTypes</span>(<span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Type</span>> <span class=\"pl-s1\">types</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">types</span> = <span class=\"pl-s1\">types</span>;\n        }\n\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">Type</span> {\n        <span class=\"pl-c1\">ONE</span>, <span class=\"pl-c1\">TWO</span>\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">shouldSkipUnknownEnumDeserializationWithSetter</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonMappingException</span>, <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"{ <span class=\"pl-cce\">\\\"</span>types<span class=\"pl-cce\">\\\"</span> : [<span class=\"pl-cce\">\\\"</span>TWO<span class=\"pl-cce\">\\\"</span>, <span class=\"pl-cce\">\\\"</span>THREE<span class=\"pl-cce\">\\\"</span>] }\"</span>;\n\n        <span class=\"pl-smi\">Data</span> <span class=\"pl-s1\">data</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Data</span>.<span class=\"pl-k\">class</span>); <span class=\"pl-c\">// will be [TWO, null]</span>\n\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">data</span>.<span class=\"pl-en\">getTypes</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-smi\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-smi\">Type</span>.<span class=\"pl-c1\">TWO</span>));\n    }\n\n}</pre></div>\n<p dir=\"auto\">FAIL_ON_INVALID_SUBTYPE:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.List;\nimport java.util.Objects;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.fasterxml.jackson.annotation.JsonSetter;\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.As;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\nimport com.fasterxml.jackson.annotation.Nulls;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\n\nclass TestCase {\n\n    ObjectMapper objectMapper = JsonMapper.builder()\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\n            .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)\n            .build();\n\n    @JsonTypeInfo(use = Id.NAME, property = \"type\", include = As.EXISTING_PROPERTY, visible = true)\n    @JsonSubTypes(value = { @JsonSubTypes.Type(value = DataType1.class, names = { \"TYPE1\" }) })\n    static abstract class Data {\n\n        private String type;\n\n        public String getType() {\n            return type;\n        }\n\n        public void setType(String type) {\n            this.type = type;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(type);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null || getClass() != obj.getClass()) {\n                return false;\n            }\n            Data other = (Data) obj;\n            return Objects.equals(type, other.type);\n        }\n\n    }\n\n    static class DataType1 extends Data {\n\n    }\n\n    @Test\n    void shouldSkipUnknownSubTypeDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\n        String json = \"[ { \\\"type\\\" : \\\"TYPE1\\\"  }, { \\\"type\\\" : \\\"TYPE2\\\"  } ]\";\n\n        List<Data> actual = objectMapper.readValue(json, new TypeReference<List<Data>>() {});\n\n        DataType1 data = new DataType1();\n        data.setType(\"TYPE1\");\n        List<Data> expected = List.of(data); // will be [{type: TYPE1}, null]\n\n        assertEquals(expected, actual);\n    }\n\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-s1\">assertEquals</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Objects</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonSetter</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonSubTypes</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>.<span class=\"pl-s1\">As</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>.<span class=\"pl-s1\">Id</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">Nulls</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">type</span>.<span class=\"pl-s1\">TypeReference</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">json</span>.<span class=\"pl-s1\">JsonMapper</span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestCase</span> {\n\n    <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-smi\">JsonMapper</span>.<span class=\"pl-en\">builder</span>()\n            .<span class=\"pl-en\">defaultSetterInfo</span>(<span class=\"pl-smi\">JsonSetter</span>.<span class=\"pl-s1\">Value</span>.<span class=\"pl-en\">forContentNulls</span>(<span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">SKIP</span>))\n            .<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">FAIL_ON_INVALID_SUBTYPE</span>)\n            .<span class=\"pl-en\">build</span>();\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeInfo</span>(<span class=\"pl-s1\">use</span> = <span class=\"pl-smi\">Id</span>.<span class=\"pl-c1\">NAME</span>, <span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"type\"</span>, <span class=\"pl-s1\">include</span> = <span class=\"pl-smi\">As</span>.<span class=\"pl-c1\">EXISTING_PROPERTY</span>, <span class=\"pl-s1\">visible</span> = <span class=\"pl-c1\">true</span>)\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonSubTypes</span>(<span class=\"pl-s1\">value</span> = { <span class=\"pl-c1\">@</span><span class=\"pl-smi\">JsonSubTypes</span>.<span class=\"pl-s1\">Type</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-smi\">DataType1</span>.<span class=\"pl-k\">class</span>, <span class=\"pl-s1\">names</span> = { <span class=\"pl-s\">\"TYPE1\"</span> }) })\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Data</span> {\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getType</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">type</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setType</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">type</span> = <span class=\"pl-s1\">type</span>;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">hashCode</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span>.<span class=\"pl-en\">hash</span>(<span class=\"pl-s1\">type</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">obj</span>) {\n            <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">this</span> == <span class=\"pl-s1\">obj</span>) {\n                <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n            }\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">obj</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-en\">getClass</span>() != <span class=\"pl-s1\">obj</span>.<span class=\"pl-en\">getClass</span>()) {\n                <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n            }\n            <span class=\"pl-smi\">Data</span> <span class=\"pl-s1\">other</span> = (<span class=\"pl-smi\">Data</span>) <span class=\"pl-s1\">obj</span>;\n            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">type</span>, <span class=\"pl-s1\">other</span>.<span class=\"pl-s1\">type</span>);\n        }\n\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">DataType1</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Data</span> {\n\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">shouldSkipUnknownSubTypeDeserializationWithSetter</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonMappingException</span>, <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"[ { <span class=\"pl-cce\">\\\"</span>type<span class=\"pl-cce\">\\\"</span> : <span class=\"pl-cce\">\\\"</span>TYPE1<span class=\"pl-cce\">\\\"</span>  }, { <span class=\"pl-cce\">\\\"</span>type<span class=\"pl-cce\">\\\"</span> : <span class=\"pl-cce\">\\\"</span>TYPE2<span class=\"pl-cce\">\\\"</span>  } ]\"</span>;\n\n        <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Data</span>> <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeReference</span><<span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Data</span>>>() {});\n\n        <span class=\"pl-smi\">DataType1</span> <span class=\"pl-s1\">data</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DataType1</span>();\n        <span class=\"pl-s1\">data</span>.<span class=\"pl-en\">setType</span>(<span class=\"pl-s\">\"TYPE1\"</span>);\n        <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Data</span>> <span class=\"pl-s1\">expected</span> = <span class=\"pl-smi\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s1\">data</span>); <span class=\"pl-c\">// will be [{type: TYPE1}, null]</span>\n\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">expected</span>, <span class=\"pl-s1\">actual</span>);\n    }\n\n}</pre></div>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\">When <code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code> or <code class=\"notranslate\">.defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))</code> is used, null should be skipped.</p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\"><em>No response</em></p>",
  "description_text": "Search before asking\n\n I searched in the issues and found nothing similar.\n\nDescribe the bug\nIssue comes from 2018, #1402 (two last comments).\nUnknown enum values and subtypes are added as null into result collection instead of being skipped.\n@JsonSetter(nulls = Nulls.SKIP) and .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP)) have no effect on nulls with:\n\nREAD_UNKNOWN_ENUM_VALUES_AS_NULL (is used for enums to consider unknown as null)\nFAIL_ON_INVALID_SUBTYPE (is used for subtypes to consider unknown as null)\n\nVersion Information\n2.15.3\nReproduction\nREAD_UNKNOWN_ENUM_VALUES_AS_NULL:\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.fasterxml.jackson.annotation.JsonSetter;\nimport com.fasterxml.jackson.annotation.Nulls;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\n\nclass TestCase {\n\n    ObjectMapper objectMapper = JsonMapper.builder()\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\n            .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)\n            .build();\n\n    static class Data {\n\n        private List<Type> types;\n\n        public List<Type> getTypes() {\n            return types;\n        }\n\n        public void setTypes(List<Type> types) {\n            this.types = types;\n        }\n\n    }\n\n    static enum Type {\n        ONE, TWO\n    }\n\n    @Test\n    void shouldSkipUnknownEnumDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\n        String json = \"{ \\\"types\\\" : [\\\"TWO\\\", \\\"THREE\\\"] }\";\n\n        Data data = objectMapper.readValue(json, Data.class); // will be [TWO, null]\n\n        assertThat(data.getTypes()).isEqualTo(List.of(Type.TWO));\n    }\n\n}\nFAIL_ON_INVALID_SUBTYPE:\n actual = objectMapper.readValue(json, new TypeReference>() {});\n\n        DataType1 data = new DataType1();\n        data.setType(\"TYPE1\");\n        List expected = List.of(data); // will be [{type: TYPE1}, null]\n\n        assertEquals(expected, actual);\n    }\n\n}\">import static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.List;\nimport java.util.Objects;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.fasterxml.jackson.annotation.JsonSetter;\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.As;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\nimport com.fasterxml.jackson.annotation.Nulls;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\n\nclass TestCase {\n\n    ObjectMapper objectMapper = JsonMapper.builder()\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\n            .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)\n            .build();\n\n    @JsonTypeInfo(use = Id.NAME, property = \"type\", include = As.EXISTING_PROPERTY, visible = true)\n    @JsonSubTypes(value = { @JsonSubTypes.Type(value = DataType1.class, names = { \"TYPE1\" }) })\n    static abstract class Data {\n\n        private String type;\n\n        public String getType() {\n            return type;\n        }\n\n        public void setType(String type) {\n            this.type = type;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(type);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null || getClass() != obj.getClass()) {\n                return false;\n            }\n            Data other = (Data) obj;\n            return Objects.equals(type, other.type);\n        }\n\n    }\n\n    static class DataType1 extends Data {\n\n    }\n\n    @Test\n    void shouldSkipUnknownSubTypeDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\n        String json = \"[ { \\\"type\\\" : \\\"TYPE1\\\"  }, { \\\"type\\\" : \\\"TYPE2\\\"  } ]\";\n\n        List<Data> actual = objectMapper.readValue(json, new TypeReference<List<Data>>() {});\n\n        DataType1 data = new DataType1();\n        data.setType(\"TYPE1\");\n        List<Data> expected = List.of(data); // will be [{type: TYPE1}, null]\n\n        assertEquals(expected, actual);\n    }\n\n}\nExpected behavior\nWhen @JsonSetter(nulls = Nulls.SKIP) or .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP)) is used, null should be skipped.\nAdditional context\nNo response"
}