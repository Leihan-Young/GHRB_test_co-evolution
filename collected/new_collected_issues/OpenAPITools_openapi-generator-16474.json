{
  "issue_id": 5582,
  "issue_url": "https://github.com/OpenAPITools/openapi-generator/issues/5582",
  "title": "[BUG] Regular expressions which have forward slash generate invalid ruby code.",
  "description": "<h4 dir=\"auto\">Bug Report Checklist</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\">\n<p dir=\"auto\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Have you provided a full/minimal spec to reproduce the issue?</p>\n</li>\n<li class=\"task-list-item\">\n<p dir=\"auto\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Have you validated the input using an OpenAPI validator ([example]</p>\n</li>\n<li class=\"task-list-item\">\n<p dir=\"auto\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> What's the version of OpenAPI Generator used?</p>\n</li>\n<li>\n<p dir=\"auto\">[X ] Have you search for related issues/PRs?</p>\n</li>\n<li class=\"task-list-item\">\n<p dir=\"auto\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> What's the actual output vs expected output?</p>\n</li>\n<li class=\"task-list-item\">\n<p dir=\"auto\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> [Optional] Bounty to sponsor the fix (<a href=\"https://www.bountysource.com/issues/66123212-javascript-client-produces-a-wrong-object-for-a-string-enum-type-that-is-used-with-ref\" rel=\"nofollow\">example</a>)</p>\n</li>\n</ul>\n\n<h5 dir=\"auto\">Description</h5>\n<p dir=\"auto\">In Regular expression the forward slash only needs to be escaped if its inside the /pattern/ format, if the pattern is a string and fed into Regexp.new it doesn't need to be escaped with a backslash.<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/OpenAPITools/openapi-generator/blob/de2753dfc7d17a8afcc14fdd705ade3f6cca3cb2/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java#L4825\">openapi-generator/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 4825\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/OpenAPITools/openapi-generator/commit/de2753dfc7d17a8afcc14fdd705ade3f6cca3cb2\">de2753d</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L4825\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"4825\"></td>\n          <td id=\"LC4825\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">pattern</span>.<span class=\"pl-en\">matches</span>(<span class=\"pl-s\">\"^/.*\"</span>)) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nThis code only checks if the string starts with a leading slash and assumes it's the /pattern/ format. The pattern can be a string and it could include both the leading and trailing slash e.g /root/.<br>\nSince Openapi regex pattern supports both the string pattern and the /pattern/ format its ambiguous what the code should generate.<br>\nFor the pattern  '/ax$|/bx$' the ruby code generated is Regexp.new(/ax$|/bx$) which fails with a syntax error<br>\nSyntaxError ((irb):20: unknown regexp option - b)<br>\n(irb):20: `$)' is not allowed as a global variable name<br>\n(irb):20: syntax error, unexpected end-of-input, expecting ')'<br>\nRegexp.new(/ax$|/bx$)<p></p>\n<p dir=\"auto\">Can you please clarify if this a bug or that openapi regexes need to be always in the /pattern/ format.</p>\n<h5 dir=\"auto\">openapi-generator version</h5>\n<p dir=\"auto\">4.2.2 also tried with master</p>\n<h5 dir=\"auto\">OpenAPI declaration file content or url</h5>\n<p dir=\"auto\"><a href=\"https://gist.github.com/mkanoor/802eb64217e04e4e7b5fc12ac4ebf8c5\">https://gist.github.com/mkanoor/802eb64217e04e4e7b5fc12ac4ebf8c5</a></p>\n<h5 dir=\"auto\">Command line used for generation</h5>\n<p dir=\"auto\">openapi-generator generate -i /tmp/test_regex.yaml -g ruby -o /tmp</p>\n<p dir=\"auto\">Ruby</p>\n<h5 dir=\"auto\">Steps to reproduce</h5>\n<p dir=\"auto\">openapi-generator generate -i /tmp/test_regex.yaml -g ruby -o /tmp</p>\n<h5 dir=\"auto\">Related issues/PRs</h5>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"378033057\" data-permission-text=\"Title is private\" data-url=\"https://github.com/OpenAPITools/openapi-generator/issues/1392\" data-hovercard-type=\"issue\" data-hovercard-url=\"/OpenAPITools/openapi-generator/issues/1392/hovercard\" href=\"https://github.com/OpenAPITools/openapi-generator/issues/1392\">#1392</a></p>\n<h5 dir=\"auto\">Suggest a fix</h5>\n<p dir=\"auto\">Checking if there is a leading slash and a trailing slash before deciding if this is a /pattern/ format versus a string. That works as long as the regexp is not looking for a leading and trailing slash.</p>",
  "description_text": "Bug Report Checklist\n\n\n Have you provided a full/minimal spec to reproduce the issue?\n\n\n Have you validated the input using an OpenAPI validator ([example]\n\n\n What's the version of OpenAPI Generator used?\n\n\n[X ] Have you search for related issues/PRs?\n\n\n What's the actual output vs expected output?\n\n\n [Optional] Bounty to sponsor the fix (example)\n\n\nDescription\nIn Regular expression the forward slash only needs to be escaped if its inside the /pattern/ format, if the pattern is a string and fed into Regexp.new it doesn't need to be escaped with a backslash.\n\n\n\nopenapi-generator/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java\n\n\n         Line 4825\n      in\n      de2753d\n\n\n\n\n\n\n if (!pattern.matches(\"^/.*\")) { \n\n\n\n\n\nThis code only checks if the string starts with a leading slash and assumes it's the /pattern/ format. The pattern can be a string and it could include both the leading and trailing slash e.g /root/.\nSince Openapi regex pattern supports both the string pattern and the /pattern/ format its ambiguous what the code should generate.\nFor the pattern  '/ax$|/bx$' the ruby code generated is Regexp.new(/ax$|/bx$) which fails with a syntax error\nSyntaxError ((irb):20: unknown regexp option - b)\n(irb):20: `$)' is not allowed as a global variable name\n(irb):20: syntax error, unexpected end-of-input, expecting ')'\nRegexp.new(/ax$|/bx$)\nCan you please clarify if this a bug or that openapi regexes need to be always in the /pattern/ format.\nopenapi-generator version\n4.2.2 also tried with master\nOpenAPI declaration file content or url\nhttps://gist.github.com/mkanoor/802eb64217e04e4e7b5fc12ac4ebf8c5\nCommand line used for generation\nopenapi-generator generate -i /tmp/test_regex.yaml -g ruby -o /tmp\nRuby\nSteps to reproduce\nopenapi-generator generate -i /tmp/test_regex.yaml -g ruby -o /tmp\nRelated issues/PRs\n#1392\nSuggest a fix\nChecking if there is a leading slash and a trailing slash before deciding if this is a /pattern/ format versus a string. That works as long as the regexp is not looking for a leading and trailing slash."
}