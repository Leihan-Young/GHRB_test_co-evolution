{
  "issue_id": 12356,
  "issue_url": "https://github.com/apache/dubbo/issues/12356",
  "title": "Improve the flexibility and readability of Dubbo logging",
  "description": "<h2 dir=\"auto\">Abstract:</h2>\n<p dir=\"auto\">As a mature micro-service framework, Dubbo has made great achievements in logging. However, the logger implemented by Dubbo only supports the configuration-based method at present, which can't make full use of the placeholder value assignment function provided by the underlying logger. As a result, developers can only use logger.debug(String message) for logging, instead of using more elegant placeholder log printing methods like Spring, Netty, Kubernetes and other projects. In order to improve the flexibility and readability of Dubbo logging, it is suggested to add a conversion layer in the middle of the logger to support placeholder logging.</p>\n<h2 dir=\"auto\">Suggestion:</h2>\n<p dir=\"auto\">1.Add a conversion layer in the middle of Dubbo's loggers to convert placeholder loggers into formats acceptable to the underlying loggers.<br>\n2.Provide an API or configuration item that allows developers to log by using placeholders and parameters, such as logger. debug (string message, object ... params).<br>\n3.The logic of formatting and replacing parameter values is realized in the conversion layer to ensure the correctness and readability of log records.</p>\n<h2 dir=\"auto\">Example:</h2>\n<p dir=\"auto\">The following code snippets demonstrate the difference between the current logging approach and the proposed placeholder-based logging approach after incorporating the conversion layer:</p>\n<h3 dir=\"auto\">Current approach:</h3>\n<p dir=\"auto\"><code class=\"notranslate\">logger.debug(\"Processing request: \" + request.getPath() + \" from IP: \" + request.getRemoteIP());</code></p>\n<h3 dir=\"auto\">Placeholder-based approach (with conversion layer):</h3>\n<p dir=\"auto\"><code class=\"notranslate\">logger.debug(\"Processing request: {} from IP: {}\", request.getPath(), request.getRemoteIP());</code></p>\n<p dir=\"auto\">The placeholder-based logging approach improves code readability and offers greater flexibility for log output. It allows developers to separate the log message template from the parameter values, resulting in more concise and maintainable code.</p>\n<h2 dir=\"auto\">Expected Benefits:</h2>\n<p dir=\"auto\">Developers can log messages using placeholders and parameters, enabling more flexible and maintainable logging.<br>\nThrough the conversion layer, Dubbo can adapt to various underlying logging frameworks, providing a consistent logging experience.<br>\nEnhance Dubbo's competitiveness in logging capabilities, attracting more developers and organizations to choose Dubbo as a distributed service framework.<br>\nThis proposal aims to improve the logging functionality of Dubbo, enhancing development experience and code quality. I look forward to discussing and implementing this improvement together with the community.</p>",
  "description_text": "Abstract:\nAs a mature micro-service framework, Dubbo has made great achievements in logging. However, the logger implemented by Dubbo only supports the configuration-based method at present, which can't make full use of the placeholder value assignment function provided by the underlying logger. As a result, developers can only use logger.debug(String message) for logging, instead of using more elegant placeholder log printing methods like Spring, Netty, Kubernetes and other projects. In order to improve the flexibility and readability of Dubbo logging, it is suggested to add a conversion layer in the middle of the logger to support placeholder logging.\nSuggestion:\n1.Add a conversion layer in the middle of Dubbo's loggers to convert placeholder loggers into formats acceptable to the underlying loggers.\n2.Provide an API or configuration item that allows developers to log by using placeholders and parameters, such as logger. debug (string message, object ... params).\n3.The logic of formatting and replacing parameter values is realized in the conversion layer to ensure the correctness and readability of log records.\nExample:\nThe following code snippets demonstrate the difference between the current logging approach and the proposed placeholder-based logging approach after incorporating the conversion layer:\nCurrent approach:\nlogger.debug(\"Processing request: \" + request.getPath() + \" from IP: \" + request.getRemoteIP());\nPlaceholder-based approach (with conversion layer):\nlogger.debug(\"Processing request: {} from IP: {}\", request.getPath(), request.getRemoteIP());\nThe placeholder-based logging approach improves code readability and offers greater flexibility for log output. It allows developers to separate the log message template from the parameter values, resulting in more concise and maintainable code.\nExpected Benefits:\nDevelopers can log messages using placeholders and parameters, enabling more flexible and maintainable logging.\nThrough the conversion layer, Dubbo can adapt to various underlying logging frameworks, providing a consistent logging experience.\nEnhance Dubbo's competitiveness in logging capabilities, attracting more developers and organizations to choose Dubbo as a distributed service framework.\nThis proposal aims to improve the logging functionality of Dubbo, enhancing development experience and code quality. I look forward to discussing and implementing this improvement together with the community."
}