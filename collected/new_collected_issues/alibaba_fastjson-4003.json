{
  "issue_id": 4002,
  "issue_url": "https://github.com/alibaba/fastjson/issues/4002",
  "title": "LocalDateTime can't serialize to timestamp",
  "description": "<p dir=\"auto\">here's <code class=\"notranslate\">Jdk8DateCodec</code> serialize part</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public class Jdk8DateCodec extends ContextObjectDeserializer implements ObjectSerializer, ContextObjectSerializer, ObjectDeserializer {\n    \n    // ...\n\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n\n        // ...\n\n        if (fieldType == LocalDateTime.class) {\n            final int mask = SerializerFeature.UseISO8601DateFormat.getMask();\n            LocalDateTime dateTime = (LocalDateTime) object;\n            String format = serializer.getDateFormatPattern();\n\n            if (format == null) {\n                if ((features & mask) != 0 || serializer.isEnabled(SerializerFeature.UseISO8601DateFormat)) {\n                    format = formatter_iso8601_pattern;\n                } else if (serializer.isEnabled(SerializerFeature.WriteDateUseDateFormat)) {\n                    if (serializer.getFastJsonConfigDateFormatPattern() != null &&\n                            serializer.getFastJsonConfigDateFormatPattern().length() > 0) {\n                        format = serializer.getFastJsonConfigDateFormatPattern();\n                    } else {\n                        format = JSON.DEFFAULT_DATE_FORMAT;\n                    }\n                } else {\n                    int nano = dateTime.getNano();\n                    if (nano == 0) {\n                        format = formatter_iso8601_pattern;\n                    } else if (nano % 1000000 == 0) {\n                        format = formatter_iso8601_pattern_23;\n                    } else {\n                        format = formatter_iso8601_pattern_29;\n                    }\n                }\n            }\n\n            if (format != null) {\n                write(out, dateTime, format);\n            } else {\n                // can't reach here\n                out.writeLong(dateTime.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli());\n            }\n        } else {\n            out.writeString(object.toString());\n        }\n\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Jdk8DateCodec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">ContextObjectDeserializer</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">ObjectSerializer</span>, <span class=\"pl-smi\">ContextObjectSerializer</span>, <span class=\"pl-smi\">ObjectDeserializer</span> {\n    \n    <span class=\"pl-c\">// ...</span>\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">write</span>(<span class=\"pl-smi\">JSONSerializer</span> <span class=\"pl-s1\">serializer</span>, <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">object</span>, <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">fieldName</span>, <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">fieldType</span>, <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">features</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n\n        <span class=\"pl-c\">// ...</span>\n\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">fieldType</span> == <span class=\"pl-smi\">LocalDateTime</span>.<span class=\"pl-k\">class</span>) {\n            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">mask</span> = <span class=\"pl-smi\">SerializerFeature</span>.<span class=\"pl-s1\">UseISO8601DateFormat</span>.<span class=\"pl-en\">getMask</span>();\n            <span class=\"pl-smi\">LocalDateTime</span> <span class=\"pl-s1\">dateTime</span> = (<span class=\"pl-smi\">LocalDateTime</span>) <span class=\"pl-s1\">object</span>;\n            <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">format</span> = <span class=\"pl-s1\">serializer</span>.<span class=\"pl-en\">getDateFormatPattern</span>();\n\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">format</span> == <span class=\"pl-c1\">null</span>) {\n                <span class=\"pl-k\">if</span> ((<span class=\"pl-s1\">features</span> & <span class=\"pl-s1\">mask</span>) != <span class=\"pl-c1\">0</span> || <span class=\"pl-s1\">serializer</span>.<span class=\"pl-en\">isEnabled</span>(<span class=\"pl-smi\">SerializerFeature</span>.<span class=\"pl-s1\">UseISO8601DateFormat</span>)) {\n                    <span class=\"pl-s1\">format</span> = <span class=\"pl-s1\">formatter_iso8601_pattern</span>;\n                } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">serializer</span>.<span class=\"pl-en\">isEnabled</span>(<span class=\"pl-smi\">SerializerFeature</span>.<span class=\"pl-s1\">WriteDateUseDateFormat</span>)) {\n                    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">serializer</span>.<span class=\"pl-en\">getFastJsonConfigDateFormatPattern</span>() != <span class=\"pl-c1\">null</span> &&\n                            <span class=\"pl-s1\">serializer</span>.<span class=\"pl-en\">getFastJsonConfigDateFormatPattern</span>().<span class=\"pl-en\">length</span>() > <span class=\"pl-c1\">0</span>) {\n                        <span class=\"pl-s1\">format</span> = <span class=\"pl-s1\">serializer</span>.<span class=\"pl-en\">getFastJsonConfigDateFormatPattern</span>();\n                    } <span class=\"pl-k\">else</span> {\n                        <span class=\"pl-s1\">format</span> = <span class=\"pl-smi\">JSON</span>.<span class=\"pl-c1\">DEFFAULT_DATE_FORMAT</span>;\n                    }\n                } <span class=\"pl-k\">else</span> {\n                    <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">nano</span> = <span class=\"pl-s1\">dateTime</span>.<span class=\"pl-en\">getNano</span>();\n                    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">nano</span> == <span class=\"pl-c1\">0</span>) {\n                        <span class=\"pl-s1\">format</span> = <span class=\"pl-s1\">formatter_iso8601_pattern</span>;\n                    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">nano</span> % <span class=\"pl-c1\">1000000</span> == <span class=\"pl-c1\">0</span>) {\n                        <span class=\"pl-s1\">format</span> = <span class=\"pl-s1\">formatter_iso8601_pattern_23</span>;\n                    } <span class=\"pl-k\">else</span> {\n                        <span class=\"pl-s1\">format</span> = <span class=\"pl-s1\">formatter_iso8601_pattern_29</span>;\n                    }\n                }\n            }\n\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">format</span> != <span class=\"pl-c1\">null</span>) {\n                <span class=\"pl-en\">write</span>(<span class=\"pl-s1\">out</span>, <span class=\"pl-s1\">dateTime</span>, <span class=\"pl-s1\">format</span>);\n            } <span class=\"pl-k\">else</span> {\n                <span class=\"pl-c\">// can't reach here</span>\n                <span class=\"pl-s1\">out</span>.<span class=\"pl-en\">writeLong</span>(<span class=\"pl-s1\">dateTime</span>.<span class=\"pl-en\">atZone</span>(<span class=\"pl-smi\">JSON</span>.<span class=\"pl-s1\">defaultTimeZone</span>.<span class=\"pl-en\">toZoneId</span>()).<span class=\"pl-en\">toInstant</span>().<span class=\"pl-en\">toEpochMilli</span>());\n            }\n        } <span class=\"pl-k\">else</span> {\n            <span class=\"pl-s1\">out</span>.<span class=\"pl-en\">writeString</span>(<span class=\"pl-s1\">object</span>.<span class=\"pl-en\">toString</span>());\n        }\n\n    }\n}</pre></div>\n<p dir=\"auto\">Should add additional <code class=\"notranslate\">SerializerFeature</code> (like<code class=\"notranslate\">WriteDateUseTimestamp</code>) to support this feature ?</p>",
  "description_text": "here's Jdk8DateCodec serialize part\npublic class Jdk8DateCodec extends ContextObjectDeserializer implements ObjectSerializer, ContextObjectSerializer, ObjectDeserializer {\n    \n    // ...\n\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n\n        // ...\n\n        if (fieldType == LocalDateTime.class) {\n            final int mask = SerializerFeature.UseISO8601DateFormat.getMask();\n            LocalDateTime dateTime = (LocalDateTime) object;\n            String format = serializer.getDateFormatPattern();\n\n            if (format == null) {\n                if ((features & mask) != 0 || serializer.isEnabled(SerializerFeature.UseISO8601DateFormat)) {\n                    format = formatter_iso8601_pattern;\n                } else if (serializer.isEnabled(SerializerFeature.WriteDateUseDateFormat)) {\n                    if (serializer.getFastJsonConfigDateFormatPattern() != null &&\n                            serializer.getFastJsonConfigDateFormatPattern().length() > 0) {\n                        format = serializer.getFastJsonConfigDateFormatPattern();\n                    } else {\n                        format = JSON.DEFFAULT_DATE_FORMAT;\n                    }\n                } else {\n                    int nano = dateTime.getNano();\n                    if (nano == 0) {\n                        format = formatter_iso8601_pattern;\n                    } else if (nano % 1000000 == 0) {\n                        format = formatter_iso8601_pattern_23;\n                    } else {\n                        format = formatter_iso8601_pattern_29;\n                    }\n                }\n            }\n\n            if (format != null) {\n                write(out, dateTime, format);\n            } else {\n                // can't reach here\n                out.writeLong(dateTime.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli());\n            }\n        } else {\n            out.writeString(object.toString());\n        }\n\n    }\n}\nShould add additional SerializerFeature (likeWriteDateUseTimestamp) to support this feature ?"
}