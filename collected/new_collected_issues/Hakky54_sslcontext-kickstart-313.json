{
  "issue_id": 309,
  "issue_url": "https://github.com/Hakky54/sslcontext-kickstart/issues/309",
  "title": "Method names withDefaultTrustMaterial vs withSystemTrustMaterial",
  "description": "<p dir=\"auto\">Currently (at least for me suprisingly) those methods mean this semantically (under linux at least)</p>\n<p dir=\"auto\"><code class=\"notranslate\">withDefaultTrustMaterial</code> adds the default for the system ca store, under linux e.g. <code class=\"notranslate\">ca-certificates</code> which lets you validate officially signed certificates</p>\n<p dir=\"auto\"><code class=\"notranslate\">withSystemTrustMaterial</code> adds the support for OS bases keystores of the user to expand the validation with custom imported certificates. For linux, there is no standard keystore (unless you use android).</p>\n<p dir=\"auto\">Iam not sure what <code class=\"notranslate\">withDefaultTrustMaterial</code> does under macos/windows, i assume that <code class=\"notranslate\">withSystemTrustMaterial</code> under macos actually adds the ability to validate official certificates AND custom certificates.</p>\n<p dir=\"auto\">My suggestion would be to fill up what we know about those methods for each os and then reconsider, if the naming still fits or even if it is very much OS specific.</p>\n<ul dir=\"auto\">\n<li>MacOS: IMHO <code class=\"notranslate\">withDefaultTrustMaterial</code> does nothing under macos, <code class=\"notranslate\">withSystemTrustMaterial</code> adds support for official and custom cert validation</li>\n<li>Linux: <code class=\"notranslate\">withDefaultTrustMaterial</code> adds support for official certificates, while <code class=\"notranslate\">withSystemTrustMaterial</code> does nothing</li>\n<li>Android: IMHO <code class=\"notranslate\">withDefaultTrustMaterial</code> adds support for official certificates, while <code class=\"notranslate\">withSystemTrustMaterial</code> does add special android certificates (not sure about both).</li>\n<li>Windows: TBA</li>\n</ul>\n<p dir=\"auto\">The inverse behavior for Linux/MacOS is what concerns me. It's a tripwire i would say</p>",
  "description_text": "Currently (at least for me suprisingly) those methods mean this semantically (under linux at least)\nwithDefaultTrustMaterial adds the default for the system ca store, under linux e.g. ca-certificates which lets you validate officially signed certificates\nwithSystemTrustMaterial adds the support for OS bases keystores of the user to expand the validation with custom imported certificates. For linux, there is no standard keystore (unless you use android).\nIam not sure what withDefaultTrustMaterial does under macos/windows, i assume that withSystemTrustMaterial under macos actually adds the ability to validate official certificates AND custom certificates.\nMy suggestion would be to fill up what we know about those methods for each os and then reconsider, if the naming still fits or even if it is very much OS specific.\n\nMacOS: IMHO withDefaultTrustMaterial does nothing under macos, withSystemTrustMaterial adds support for official and custom cert validation\nLinux: withDefaultTrustMaterial adds support for official certificates, while withSystemTrustMaterial does nothing\nAndroid: IMHO withDefaultTrustMaterial adds support for official certificates, while withSystemTrustMaterial does add special android certificates (not sure about both).\nWindows: TBA\n\nThe inverse behavior for Linux/MacOS is what concerns me. It's a tripwire i would say"
}