{
  "issue_id": 10734,
  "issue_url": "https://github.com/alibaba/nacos/issues/10734",
  "title": "The validation logic for request parameters is disorganized and fragmented",
  "description": "\n<p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong><br>\nThe current implementation of parameter validation logic for gRPC and HTTP requests is fragmented, with each request processing method implementing its own logic. This approach lacks unity and is difficult to manage. Additionally, modifying the code to reflect changes in parameter validation standards can prove challenging.</p>\n<p dir=\"auto\"><strong>Describe the solution you'd like</strong><br>\nTo simplify parameter validation logic, a request parameter validation layer can be added. This layer can intercept requests using interceptors or filters, extract relevant parameters based on request type, and then use a unified parameter validation method to validate parameters.Different extract methods can be added by spi.<br>\n<strong>Describe alternatives you've considered</strong><br>\nTo simplify parameter validation logic, a request parameter validation layer can be added. This layer can intercept requests using interceptors or filters, extract relevant parameters based on request type, and then use a unified parameter validation method to validate parameters.Different extract methods can be added by spi.Users can choose to enable or disable parameter validation through VM parameters.</p>\n<p dir=\"auto\">TODO List</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Refactor and abstract config request basic info into <code class=\"notranslate\">AbstractConfigRequest</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Implement the parameter validation utility class</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Implement grpc server interceptor and gprc param extractors</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Implement http filters and http param extractors</li>\n</ul>",
  "description_text": "\nIs your feature request related to a problem? Please describe.\nThe current implementation of parameter validation logic for gRPC and HTTP requests is fragmented, with each request processing method implementing its own logic. This approach lacks unity and is difficult to manage. Additionally, modifying the code to reflect changes in parameter validation standards can prove challenging.\nDescribe the solution you'd like\nTo simplify parameter validation logic, a request parameter validation layer can be added. This layer can intercept requests using interceptors or filters, extract relevant parameters based on request type, and then use a unified parameter validation method to validate parameters.Different extract methods can be added by spi.\nDescribe alternatives you've considered\nTo simplify parameter validation logic, a request parameter validation layer can be added. This layer can intercept requests using interceptors or filters, extract relevant parameters based on request type, and then use a unified parameter validation method to validate parameters.Different extract methods can be added by spi.Users can choose to enable or disable parameter validation through VM parameters.\nTODO List\n\n Refactor and abstract config request basic info into AbstractConfigRequest\n Implement the parameter validation utility class\n Implement grpc server interceptor and gprc param extractors\n Implement http filters and http param extractors\n"
}