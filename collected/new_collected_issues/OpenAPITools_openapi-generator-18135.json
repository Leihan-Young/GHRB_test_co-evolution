{
  "issue_id": 18095,
  "issue_url": "https://github.com/OpenAPITools/openapi-generator/issues/18095",
  "title": "[REQ][JAVA] - [QA] How not to generate @Pattern and @Size for UUID",
  "description": "<h3 dir=\"auto\">Is your feature request related to a problem? Please describe.</h3>\n<p dir=\"auto\">This is more of a question, than a possible feature. So in our project we use 42Crunch to test our APIs, which requires us to define pattern (and maxLength) in our contract for a schema like this:</p>\n<div class=\"highlight highlight-source-yaml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"components:\n  schemas:\n    uuid:\n      type: string\n      format: uuid\"><pre class=\"notranslate\"><span class=\"pl-ent\">components</span>:\n  <span class=\"pl-ent\">schemas</span>:\n    <span class=\"pl-ent\">uuid</span>:\n      <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>\n      <span class=\"pl-ent\">format</span>: <span class=\"pl-s\">uuid</span></pre></div>\n<p dir=\"auto\">For a single UUID object (as a member of a class), using vendorExtensions and with some mustache template magic I can make the generator not to annotate UUID members.<br>\nBut if our class has a list of UUIDs, than the type of elements in our List will look something like this:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"List<@Pattern(regexp = \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\") @Size(max = 36) UUID>\"><pre class=\"notranslate\"><span class=\"pl-smi\">List</span><<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Pattern</span>(<span class=\"pl-s1\">regexp</span> = <span class=\"pl-s\">\"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\"</span>) <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Size</span>(<span class=\"pl-s1\">max</span> = <span class=\"pl-c1\">36</span>) <span class=\"pl-smi\">UUID</span>></pre></div>\n<p dir=\"auto\">Thanks to 7.4.0, many of our issues with list element type annotations have been resolved. Unfortunately the current case is different because of the 'format: uuid'. In Java, UUID cannot be validated with these annotations.</p>\n<p dir=\"auto\">Please prove me wrong, but as I remember, the annotations for list element types are injected directly into the 'dataType' using AbstractJavaCodegen, and not based on mustache templates.<br>\n<a href=\"https://github.com/OpenAPITools/openapi-generator/blob/v7.4.0/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#L963\">https://github.com/OpenAPITools/openapi-generator/blob/v7.4.0/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#L963</a><br>\n<a href=\"https://github.com/OpenAPITools/openapi-generator/blob/v7.4.0/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#L1039\">https://github.com/OpenAPITools/openapi-generator/blob/v7.4.0/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#L1039</a></p>\n<h2 dir=\"auto\">Describe the solution you'd like</h2>\n<p dir=\"auto\">Is there any workaround to solve this? Our project is huge as hell, so getting rid of 'format: uuid' is not possible.</p>\n<p dir=\"auto\">EDIT: After doing some research I found a possible solution. In the code (link below) we can simply exclude each format, which is not allowed to have any validation in the generated code (eg. UUID).<br>\n<a href=\"https://github.com/OpenAPITools/openapi-generator/blob/v7.4.0/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#L1041\">https://github.com/OpenAPITools/openapi-generator/blob/v7.4.0/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#L1041</a></p>",
  "description_text": "Is your feature request related to a problem? Please describe.\nThis is more of a question, than a possible feature. So in our project we use 42Crunch to test our APIs, which requires us to define pattern (and maxLength) in our contract for a schema like this:\ncomponents:\n  schemas:\n    uuid:\n      type: string\n      format: uuid\nFor a single UUID object (as a member of a class), using vendorExtensions and with some mustache template magic I can make the generator not to annotate UUID members.\nBut if our class has a list of UUIDs, than the type of elements in our List will look something like this:\n\">List<@Pattern(regexp = \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\") @Size(max = 36) UUID>\nThanks to 7.4.0, many of our issues with list element type annotations have been resolved. Unfortunately the current case is different because of the 'format: uuid'. In Java, UUID cannot be validated with these annotations.\nPlease prove me wrong, but as I remember, the annotations for list element types are injected directly into the 'dataType' using AbstractJavaCodegen, and not based on mustache templates.\nhttps://github.com/OpenAPITools/openapi-generator/blob/v7.4.0/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#L963\nhttps://github.com/OpenAPITools/openapi-generator/blob/v7.4.0/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#L1039\nDescribe the solution you'd like\nIs there any workaround to solve this? Our project is huge as hell, so getting rid of 'format: uuid' is not possible.\nEDIT: After doing some research I found a possible solution. In the code (link below) we can simply exclude each format, which is not allowed to have any validation in the generated code (eg. UUID).\nhttps://github.com/OpenAPITools/openapi-generator/blob/v7.4.0/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#L1041"
}