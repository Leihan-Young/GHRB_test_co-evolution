{
  "issue_id": 17071,
  "issue_url": "https://github.com/OpenAPITools/openapi-generator/issues/17071",
  "title": "[REQ] Wrap method parameters into object for Java-Microprofile rest client generation",
  "description": "<h3 dir=\"auto\">Is your feature request related to a problem? Please describe.</h3>\n<p dir=\"auto\">I have endpoints which has multiple mandatory and non mandatory parameters and it's always difficult to pass all the params while calling the method. I see <code class=\"notranslate\">useSingleRequestParameter</code> feature is implemented already for some java client code generation like jersey2, jersey3 etc but it's not implemented for microprofile client generation.</p>\n<h2 dir=\"auto\">Describe the solution you'd like</h2>\n<p dir=\"auto\">We could make use of <code class=\"notranslate\">useSingleRequestParameter</code> feature and wrap all the @XXXParams into @BeanParam and call the operations in a simple manner. Like,<br>\n<code class=\"notranslate\">List<PetStore> listPetStores(@HeaderParam String apiKey, @HeaderParam String sessionId, @PathParam String param1, @QueryParam param2, String requestBody);</code> this could be transformed to <code class=\"notranslate\">List<PetStore> listPetStores(@BeanParam ListPetStoreRequest listPetStoreRequest, String requestBody);</code></p>\n<p dir=\"auto\">It's complex to pass header params all the time, instead this could be done at one place like a <code class=\"notranslate\">ClientRequestFilter</code>.</p>\n<p dir=\"auto\">Now if this method is changed as,</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">List<PetStore> listPetStores(@BeanParam ListPetStoreRequest listPetStoreRequest, String requestBody);</code></li>\n<li><code class=\"notranslate\">public class ListPetStoreRequest { private @HeaderParam String apiKey; private @HeaderParam String sessionId; private @PathParam String param1; private @QueryParam String param2; }</code></li>\n<li><code class=\"notranslate\">ListPetStoreRequest request = ListPetStoreRequest.newInstance().param1(\"test1\").param2(\"test2\");</code></li>\n<li>Method call will be simplified as, <code class=\"notranslate\">listPetStores(request, body);</code></li>\n</ol>\n<h2 dir=\"auto\">Describe alternatives you've considered</h2>\n<p dir=\"auto\">One alternative is to override the api mustache template and provide a custom implementation, as and when needed.<br>\nBut this template has to maintained and shared to every service which wants to use it.</p>",
  "description_text": "Is your feature request related to a problem? Please describe.\nI have endpoints which has multiple mandatory and non mandatory parameters and it's always difficult to pass all the params while calling the method. I see useSingleRequestParameter feature is implemented already for some java client code generation like jersey2, jersey3 etc but it's not implemented for microprofile client generation.\nDescribe the solution you'd like\nWe could make use of useSingleRequestParameter feature and wrap all the @XXXParams into @BeanParam and call the operations in a simple manner. Like,\nList listPetStores(@HeaderParam String apiKey, @HeaderParam String sessionId, @PathParam String param1, @QueryParam param2, String requestBody); this could be transformed to List listPetStores(@BeanParam ListPetStoreRequest listPetStoreRequest, String requestBody);\nIt's complex to pass header params all the time, instead this could be done at one place like a ClientRequestFilter.\nNow if this method is changed as,\n\nList listPetStores(@BeanParam ListPetStoreRequest listPetStoreRequest, String requestBody);\npublic class ListPetStoreRequest { private @HeaderParam String apiKey; private @HeaderParam String sessionId; private @PathParam String param1; private @QueryParam String param2; }\nListPetStoreRequest request = ListPetStoreRequest.newInstance().param1(\"test1\").param2(\"test2\");\nMethod call will be simplified as, listPetStores(request, body);\n\nDescribe alternatives you've considered\nOne alternative is to override the api mustache template and provide a custom implementation, as and when needed.\nBut this template has to maintained and shared to every service which wants to use it."
}