{
  "issue_id": 13222,
  "issue_url": "https://github.com/apache/dubbo/issues/13222",
  "title": "PackableMethod share while services cause serialization error",
  "description": "\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> I have searched the <a href=\"https://github.com/apache/dubbo/issues\">issues</a> of this repository and believe that this is not a duplicate.</li>\n</ul>\n<h3 dir=\"auto\">Steps to reproduce this issue</h3>\n<p dir=\"auto\">In <code class=\"notranslate\">org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod#init</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"    public static ReflectionPackableMethod init(MethodDescriptor methodDescriptor, URL url) {\n        Object stored = methodDescriptor.getAttribute(METHOD_ATTR_PACK);\n        if (stored != null) {\n            return (ReflectionPackableMethod) stored;\n        }\n        final String serializeName = UrlUtils.serializationOrDefault(url);\n        final Collection<String> allSerialize = UrlUtils.allSerializations(url);\n        ReflectionPackableMethod reflectionPackableMethod = new ReflectionPackableMethod(\n            methodDescriptor, url, serializeName, allSerialize);\n        methodDescriptor.addAttribute(METHOD_ATTR_PACK, reflectionPackableMethod);\n        return reflectionPackableMethod;\n    }\"><pre class=\"notranslate\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">ReflectionPackableMethod</span> <span class=\"pl-s1\">init</span>(<span class=\"pl-smi\">MethodDescriptor</span> <span class=\"pl-s1\">methodDescriptor</span>, <span class=\"pl-smi\">URL</span> <span class=\"pl-s1\">url</span>) {\n        <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">stored</span> = <span class=\"pl-s1\">methodDescriptor</span>.<span class=\"pl-en\">getAttribute</span>(<span class=\"pl-c1\">METHOD_ATTR_PACK</span>);\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">stored</span> != <span class=\"pl-c1\">null</span>) {\n            <span class=\"pl-k\">return</span> (<span class=\"pl-smi\">ReflectionPackableMethod</span>) <span class=\"pl-s1\">stored</span>;\n        }\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">serializeName</span> = <span class=\"pl-smi\">UrlUtils</span>.<span class=\"pl-en\">serializationOrDefault</span>(<span class=\"pl-s1\">url</span>);\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Collection</span><<span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">allSerialize</span> = <span class=\"pl-smi\">UrlUtils</span>.<span class=\"pl-en\">allSerializations</span>(<span class=\"pl-s1\">url</span>);\n        <span class=\"pl-smi\">ReflectionPackableMethod</span> <span class=\"pl-s1\">reflectionPackableMethod</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ReflectionPackableMethod</span>(\n            <span class=\"pl-s1\">methodDescriptor</span>, <span class=\"pl-s1\">url</span>, <span class=\"pl-s1\">serializeName</span>, <span class=\"pl-s1\">allSerialize</span>);\n        <span class=\"pl-s1\">methodDescriptor</span>.<span class=\"pl-en\">addAttribute</span>(<span class=\"pl-c1\">METHOD_ATTR_PACK</span>, <span class=\"pl-s1\">reflectionPackableMethod</span>);\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">reflectionPackableMethod</span>;\n    }</pre></div>\n<p dir=\"auto\">Triple will cache <code class=\"notranslate\">ReflectionPackableMethod</code> in <code class=\"notranslate\">MethodDescriptor</code>.</p>\n<p dir=\"auto\">But <code class=\"notranslate\">MethodDescriptor</code> is shared while different services.</p>\n<p dir=\"auto\">Thus will cause:</p>\n<ol dir=\"auto\">\n<li>A consumer expect to use X serialization and B consumer expect to use Y serialization</li>\n<li>A consumer init first, and write A serialziation into <code class=\"notranslate\">MethodDescriptor</code></li>\n<li>B consumer will directly use A serialziation dur to cache</li>\n</ol>\n<h3 dir=\"auto\">Proper solution</h3>\n<p dir=\"auto\">Cache <code class=\"notranslate\">ReflectionPackableMethod</code> in <code class=\"notranslate\">TripleInvoker</code> instead of <code class=\"notranslate\">MethodDescriptor</code>.</p>\n<h3 dir=\"auto\">Note</h3>\n<p dir=\"auto\">It is very easy to occur in the scenario of generic invoke.</p>",
  "description_text": "\n\n I have searched the issues of this repository and believe that this is not a duplicate.\n\nSteps to reproduce this issue\nIn org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod#init:\n    public static ReflectionPackableMethod init(MethodDescriptor methodDescriptor, URL url) {\n        Object stored = methodDescriptor.getAttribute(METHOD_ATTR_PACK);\n        if (stored != null) {\n            return (ReflectionPackableMethod) stored;\n        }\n        final String serializeName = UrlUtils.serializationOrDefault(url);\n        final Collection<String> allSerialize = UrlUtils.allSerializations(url);\n        ReflectionPackableMethod reflectionPackableMethod = new ReflectionPackableMethod(\n            methodDescriptor, url, serializeName, allSerialize);\n        methodDescriptor.addAttribute(METHOD_ATTR_PACK, reflectionPackableMethod);\n        return reflectionPackableMethod;\n    }\nTriple will cache ReflectionPackableMethod in MethodDescriptor.\nBut MethodDescriptor is shared while different services.\nThus will cause:\n\nA consumer expect to use X serialization and B consumer expect to use Y serialization\nA consumer init first, and write A serialziation into MethodDescriptor\nB consumer will directly use A serialziation dur to cache\n\nProper solution\nCache ReflectionPackableMethod in TripleInvoker instead of MethodDescriptor.\nNote\nIt is very easy to occur in the scenario of generic invoke."
}