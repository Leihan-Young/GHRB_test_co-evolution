{
  "issue_id": 3968,
  "issue_url": "https://github.com/FasterXML/jackson-databind/issues/3968",
  "title": "Records with additional constructors failed to deserialize",
  "description": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nRecords are not deserialized as before due to error:</p>\n<blockquote>\n<p dir=\"auto\">com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Conflicting property-based creators: already had implicitly discovered creator [constructor for <code class=\"notranslate\">RecordsDeserializationTest$TestRecord</code> (1 arg), annotations: [null], encountered another: [constructor for <code class=\"notranslate\">RecordsDeserializationTest$TestRecord</code> (2 args), annotations: [null]<br>\nat [Source: (String)\"{\"a\":\"a\", \"b\":\"b\"}\"; line: 1, column: 1]</p>\n</blockquote>\n<p dir=\"auto\">See the test below for the exact setup.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\nWhich Jackson version(s) was this for?<br>\n2.15.0</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.cfg.ConstructorDetector;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass RecordsDeserializationTest {\n\n    private final ObjectMapper objectMapper = JsonMapper.builder()\n            // commenting only this fixes the problem\n            .addModules(new ParameterNamesModule())\n            // commenting only this fixes the problem\n            .constructorDetector(ConstructorDetector.USE_PROPERTIES_BASED)\n            .build();\n\n    record TestRecord(String a, String b) {\n\n        // uncommenting only this fixes the problem\n        // @JsonIgnore\n        TestRecord(String c) {\n            this(c, c);\n        }\n    }\n\n    @Test\n    void testDeserialization() throws JsonProcessingException {\n        assertEquals(\n                new TestRecord(\"a\", \"b\"),\n                objectMapper.readValue(\"{\\\"a\\\":\\\"a\\\", \\\"b\\\":\\\"b\\\"}\", TestRecord.class));\n    }\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.cfg.ConstructorDetector;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass RecordsDeserializationTest {\n\n    private final ObjectMapper objectMapper = JsonMapper.builder()\n            // commenting only this fixes the problem\n            .addModules(new ParameterNamesModule())\n            // commenting only this fixes the problem\n            .constructorDetector(ConstructorDetector.USE_PROPERTIES_BASED)\n            .build();\n\n    record TestRecord(String a, String b) {\n\n        // uncommenting only this fixes the problem\n        // @JsonIgnore\n        TestRecord(String c) {\n            this(c, c);\n        }\n    }\n\n    @Test\n    void testDeserialization() throws JsonProcessingException {\n        assertEquals(\n                new TestRecord(\"a\", \"b\"),\n                objectMapper.readValue(\"{\\\"a\\\":\\\"a\\\", \\\"b\\\":\\\"b\\\"}\", TestRecord.class));\n    }\n}\n</code></pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nThe exact combination of configuration is not working in version 2.15.0.<br>\nThere are 4 ways to fix it:</p>\n<ul dir=\"auto\">\n<li>remove module <code class=\"notranslate\">ParameterNamesModule</code></li>\n<li>don't use <code class=\"notranslate\">USE_PROPERTIES_BASED</code> constructor detection</li>\n<li>add <code class=\"notranslate\">@JsonIgnore</code> annotation to the extra constructor</li>\n<li>use version 2.13.4 on which this works</li>\n</ul>\n<p dir=\"auto\"><strong>Additional context</strong><br>\nThe caveat here is that I can't use explicit <code class=\"notranslate\">@JsonCreator</code> annotation on the primary constructor on a <code class=\"notranslate\">record</code> (or I have to implement it just to add the annotation). Ideally, you should restore the old behavior. The <code class=\"notranslate\">@JsonIgnore</code> approach seems like a hack to me.</p>",
  "description_text": "Describe the bug\nRecords are not deserialized as before due to error:\n\ncom.fasterxml.jackson.databind.exc.InvalidDefinitionException: Conflicting property-based creators: already had implicitly discovered creator [constructor for RecordsDeserializationTest$TestRecord (1 arg), annotations: [null], encountered another: [constructor for RecordsDeserializationTest$TestRecord (2 args), annotations: [null]\nat [Source: (String)\"{\"a\":\"a\", \"b\":\"b\"}\"; line: 1, column: 1]\n\nSee the test below for the exact setup.\nVersion information\nWhich Jackson version(s) was this for?\n2.15.0\nTo Reproduce\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.cfg.ConstructorDetector;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass RecordsDeserializationTest {\n\n    private final ObjectMapper objectMapper = JsonMapper.builder()\n            // commenting only this fixes the problem\n            .addModules(new ParameterNamesModule())\n            // commenting only this fixes the problem\n            .constructorDetector(ConstructorDetector.USE_PROPERTIES_BASED)\n            .build();\n\n    record TestRecord(String a, String b) {\n\n        // uncommenting only this fixes the problem\n        // @JsonIgnore\n        TestRecord(String c) {\n            this(c, c);\n        }\n    }\n\n    @Test\n    void testDeserialization() throws JsonProcessingException {\n        assertEquals(\n                new TestRecord(\"a\", \"b\"),\n                objectMapper.readValue(\"{\\\"a\\\":\\\"a\\\", \\\"b\\\":\\\"b\\\"}\", TestRecord.class));\n    }\n}\n\nExpected behavior\nThe exact combination of configuration is not working in version 2.15.0.\nThere are 4 ways to fix it:\n\nremove module ParameterNamesModule\ndon't use USE_PROPERTIES_BASED constructor detection\nadd @JsonIgnore annotation to the extra constructor\nuse version 2.13.4 on which this works\n\nAdditional context\nThe caveat here is that I can't use explicit @JsonCreator annotation on the primary constructor on a record (or I have to implement it just to add the annotation). Ideally, you should restore the old behavior. The @JsonIgnore approach seems like a hack to me."
}