{
  "issue_id": 14129,
  "issue_url": "https://github.com/checkstyle/checkstyle/issues/14129",
  "title": "File name too long error",
  "description": "<p dir=\"auto\">I use Linux Ubuntu 20.04.1 on my machine and my file system is encrypted with eCryptfs. As a result, there is a maximum allowed filename size for folders and files. For context, see <a href=\"https://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\" rel=\"nofollow\">this StackOverflow question</a>.</p>\n<p dir=\"auto\">If I do a <code class=\"notranslate\">mvn clean install</code> on Checkstyle <code class=\"notranslate\">master</code>, I end up with the following error:</p>\n<blockquote>\n<p dir=\"auto\">[ERROR] COMPILATION ERROR :<br>\n[INFO] -------------------------------------------------------------<br>\n[ERROR] /home/rick/repos/oss/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java:[14,13] error while writing com.puppycrawl.tools.checkstyle.checks.modifier.redundantmodifier.InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.PublicInnerInterface.PublicInnerInnerInterface.PublicInnerClassInNestedPublicInterfaces: /home/rick/repos/oss/checkstyle/target/test-classes/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers$PublicInnerInterface$PublicInnerInnerInterface$PublicInnerClassInNestedPublicInterfaces.class: File name too long</p>\n</blockquote>\n<p dir=\"auto\">The problem is that the names of all the inner classes and interfaces are chained together with a <code class=\"notranslate\">$</code> in between for the file names. This results in fairly long file names as can be seen in the example.</p>\n<p dir=\"auto\">I realize this is quite an uncommon case and asking the following feels like a long shot, but here is my question.<br>\nWould you be open to fixing this problem? If yes, I'm open to creating a PR for it based on your decision on how to best fix this. The simple way would of course be renaming some of the classes and interfaces, to prevent this problem from happening. However, I can see how this is not an ideal way of fixing this.</p>\n<details>\n<summary>To give you a potential solution, see this diff.</summary>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java\nindex af4601e7f..c7a01f7c6 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java\n@@ -135,7 +135,7 @@ public class RedundantModifierCheckTest\n        };\n\n        verifyWithInlineConfigParser(\n-            getPath(\"InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java\"),\n+            getPath(\"InputRedundantModifierNestedClassInInt.java\"),\n            expected);\n    }\ndiff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInInt.java\nsimilarity index 60%\nrename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java\nrename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInInt.java\nindex 03a0cb906..bafe3ca16 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInInt.java\n@@ -8,7 +8,7 @@ tokens = (default)METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF,\n\npackage com.puppycrawl.tools.checkstyle.checks.modifier.redundantmodifier;\n\n-public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers {\n+public interface InputRedundantModifierNestedClassInInt {\n    interface PublicInnerInterface {\n        interface PublicInnerInnerInterface {\n            class PublicInnerClassInNestedPublicInterfaces {\n@@ -16,14 +16,14 @@ public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModi\n            }\n        }\n    }\n-    class PublicClassInsideInterface {\n-        private interface PrivateNestedInterface {\n-            class ClassInPrivateNestedInterface {\n-                public ClassInPrivateNestedInterface() { } // violation\n+    class PublicClassInsideInt {\n+        private interface PrivateNestedInt {\n+            class ClassInPrivateNestedInt {\n+                public ClassInPrivateNestedInt() { } // violation\n            }\n-            public interface PrivateNestedInterfaceWithPublicModifier { // violation\n-                class ClassInPrivateNestedInterface {\n-                    public ClassInPrivateNestedInterface() { } // violation\n+            public interface PrivateNestedIntWithPublicModifier { // violation\n+                class ClassInPrivateNestedInt {\n+                    public ClassInPrivateNestedInt() { } // violation\n                }\n            }\n        }\n@@ -33,13 +33,13 @@ public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModi\n            }\n        }\n        protected interface PublicInnerInnerProtectedInterface {\n-          class PublicInnerClassInNestedProtectedInterfaces {\n-           public PublicInnerClassInNestedProtectedInterfaces() { } // violation\n+          class PublicInnerClassInNestedProtectedInt {\n+           public PublicInnerClassInNestedProtectedInt() { } // violation\n          }\n        }\n    }\n-    class PublicNestedClassInInterfaceWithPublicConstructor {\n-        public PublicNestedClassInInterfaceWithPublicConstructor() { } // OK in public class\n+    class PublicNestedClassInInterfaceWithPublicConst {\n+        public PublicNestedClassInInterfaceWithPublicConst() { } // OK in public class\n        private class PrivateClassInPublicNestedClass {\n            public class PublicInPrivateClass {\n                public PublicInPrivateClass() { } // violation\n\"><pre class=\"notranslate\"><span class=\"pl-c1\">diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java</span>\nindex af4601e7f..c7a01f7c6 100644\n<span class=\"pl-md\">--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java</span>\n<span class=\"pl-mi1\">+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java</span>\n<span class=\"pl-mdr\">@@ -135,7 +135,7 @@</span> public class RedundantModifierCheckTest\n        };\n\n        verifyWithInlineConfigParser(\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>            getPath(\"InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java\"),</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>            getPath(\"InputRedundantModifierNestedClassInInt.java\"),</span>\n            expected);\n    }\n<span class=\"pl-c1\">diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInInt.java</span>\nsimilarity index 60%\nrename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java\nrename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInInt.java\nindex 03a0cb906..bafe3ca16 100644\n<span class=\"pl-md\">--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java</span>\n<span class=\"pl-mi1\">+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInInt.java</span>\n<span class=\"pl-mdr\">@@ -8,7 +8,7 @@</span> tokens = (default)METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF,\n\npackage com.puppycrawl.tools.checkstyle.checks.modifier.redundantmodifier;\n\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>public interface InputRedundantModifierNestedClassInInt {</span>\n    interface PublicInnerInterface {\n        interface PublicInnerInnerInterface {\n            class PublicInnerClassInNestedPublicInterfaces {\n<span class=\"pl-mdr\">@@ -16,14 +16,14 @@</span> public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModi\n            }\n        }\n    }\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    class PublicClassInsideInterface {</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>        private interface PrivateNestedInterface {</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>            class ClassInPrivateNestedInterface {</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>                public ClassInPrivateNestedInterface() { } // violation</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    class PublicClassInsideInt {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        private interface PrivateNestedInt {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>            class ClassInPrivateNestedInt {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>                public ClassInPrivateNestedInt() { } // violation</span>\n            }\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>            public interface PrivateNestedInterfaceWithPublicModifier { // violation</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>                class ClassInPrivateNestedInterface {</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>                    public ClassInPrivateNestedInterface() { } // violation</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>            public interface PrivateNestedIntWithPublicModifier { // violation</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>                class ClassInPrivateNestedInt {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>                    public ClassInPrivateNestedInt() { } // violation</span>\n                }\n            }\n        }\n<span class=\"pl-mdr\">@@ -33,13 +33,13 @@</span> public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModi\n            }\n        }\n        protected interface PublicInnerInnerProtectedInterface {\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>          class PublicInnerClassInNestedProtectedInterfaces {</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>           public PublicInnerClassInNestedProtectedInterfaces() { } // violation</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>          class PublicInnerClassInNestedProtectedInt {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>           public PublicInnerClassInNestedProtectedInt() { } // violation</span>\n          }\n        }\n    }\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    class PublicNestedClassInInterfaceWithPublicConstructor {</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>        public PublicNestedClassInInterfaceWithPublicConstructor() { } // OK in public class</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    class PublicNestedClassInInterfaceWithPublicConst {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        public PublicNestedClassInInterfaceWithPublicConst() { } // OK in public class</span>\n        private class PrivateClassInPublicNestedClass {\n            public class PublicInPrivateClass {\n                public PublicInPrivateClass() { } // violation\n</pre></div>\n</details>\n<p dir=\"auto\">This was identified by working with our integration-test framework from <a href=\"https://github.com/PicnicSupermarket/error-prone-support/\">Error Prone Support</a>, which also identified this issue: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2000459270\" data-permission-text=\"Title is private\" data-url=\"https://github.com/checkstyle/checkstyle/issues/14042\" data-hovercard-type=\"issue\" data-hovercard-url=\"/checkstyle/checkstyle/issues/14042/hovercard\" href=\"https://github.com/checkstyle/checkstyle/issues/14042\">#14042</a>.</p>\n<p dir=\"auto\">Let me know if I need to clarify something or elaborate.</p>",
  "description_text": "I use Linux Ubuntu 20.04.1 on my machine and my file system is encrypted with eCryptfs. As a result, there is a maximum allowed filename size for folders and files. For context, see this StackOverflow question.\nIf I do a mvn clean install on Checkstyle master, I end up with the following error:\n\n[ERROR] COMPILATION ERROR :\n[INFO] -------------------------------------------------------------\n[ERROR] /home/rick/repos/oss/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java:[14,13] error while writing com.puppycrawl.tools.checkstyle.checks.modifier.redundantmodifier.InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.PublicInnerInterface.PublicInnerInnerInterface.PublicInnerClassInNestedPublicInterfaces: /home/rick/repos/oss/checkstyle/target/test-classes/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers$PublicInnerInterface$PublicInnerInnerInterface$PublicInnerClassInNestedPublicInterfaces.class: File name too long\n\nThe problem is that the names of all the inner classes and interfaces are chained together with a $ in between for the file names. This results in fairly long file names as can be seen in the example.\nI realize this is quite an uncommon case and asking the following feels like a long shot, but here is my question.\nWould you be open to fixing this problem? If yes, I'm open to creating a PR for it based on your decision on how to best fix this. The simple way would of course be renaming some of the classes and interfaces, to prevent this problem from happening. However, I can see how this is not an ideal way of fixing this.\n\nTo give you a potential solution, see this diff.\ndiff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java\nindex af4601e7f..c7a01f7c6 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java\n@@ -135,7 +135,7 @@ public class RedundantModifierCheckTest\n        };\n\n        verifyWithInlineConfigParser(\n-            getPath(\"InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java\"),\n+            getPath(\"InputRedundantModifierNestedClassInInt.java\"),\n            expected);\n    }\ndiff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInInt.java\nsimilarity index 60%\nrename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java\nrename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInInt.java\nindex 03a0cb906..bafe3ca16 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInInt.java\n@@ -8,7 +8,7 @@ tokens = (default)METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF,\n\npackage com.puppycrawl.tools.checkstyle.checks.modifier.redundantmodifier;\n\n-public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers {\n+public interface InputRedundantModifierNestedClassInInt {\n    interface PublicInnerInterface {\n        interface PublicInnerInnerInterface {\n            class PublicInnerClassInNestedPublicInterfaces {\n@@ -16,14 +16,14 @@ public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModi\n            }\n        }\n    }\n-    class PublicClassInsideInterface {\n-        private interface PrivateNestedInterface {\n-            class ClassInPrivateNestedInterface {\n-                public ClassInPrivateNestedInterface() { } // violation\n+    class PublicClassInsideInt {\n+        private interface PrivateNestedInt {\n+            class ClassInPrivateNestedInt {\n+                public ClassInPrivateNestedInt() { } // violation\n            }\n-            public interface PrivateNestedInterfaceWithPublicModifier { // violation\n-                class ClassInPrivateNestedInterface {\n-                    public ClassInPrivateNestedInterface() { } // violation\n+            public interface PrivateNestedIntWithPublicModifier { // violation\n+                class ClassInPrivateNestedInt {\n+                    public ClassInPrivateNestedInt() { } // violation\n                }\n            }\n        }\n@@ -33,13 +33,13 @@ public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModi\n            }\n        }\n        protected interface PublicInnerInnerProtectedInterface {\n-          class PublicInnerClassInNestedProtectedInterfaces {\n-           public PublicInnerClassInNestedProtectedInterfaces() { } // violation\n+          class PublicInnerClassInNestedProtectedInt {\n+           public PublicInnerClassInNestedProtectedInt() { } // violation\n          }\n        }\n    }\n-    class PublicNestedClassInInterfaceWithPublicConstructor {\n-        public PublicNestedClassInInterfaceWithPublicConstructor() { } // OK in public class\n+    class PublicNestedClassInInterfaceWithPublicConst {\n+        public PublicNestedClassInInterfaceWithPublicConst() { } // OK in public class\n        private class PrivateClassInPublicNestedClass {\n            public class PublicInPrivateClass {\n                public PublicInPrivateClass() { } // violation\n\n\nThis was identified by working with our integration-test framework from Error Prone Support, which also identified this issue: #14042.\nLet me know if I need to clarify something or elaborate."
}