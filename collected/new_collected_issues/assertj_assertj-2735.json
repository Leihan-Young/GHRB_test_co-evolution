{
  "issue_id": 2734,
  "issue_url": "https://github.com/assertj/assertj/issues/2734",
  "title": "Support for GString in `Assertions.registerFormatterForType`",
  "description": "<p dir=\"auto\">When registering custom formatter in Groovy and using the interpolated string we are getting <code class=\"notranslate\">ClassCastException</code> on <a href=\"https://github.com/assertj/assertj/blob/main/assertj-core/src/main/java/org/assertj/core/presentation/StandardRepresentation.java#L311\">StandarardRepresentation:311</a> because we are trying to cast <code class=\"notranslate\">GStringImpl</code> to <code class=\"notranslate\">String</code>.</p>\n<p dir=\"auto\">Here is the simple Spock spec to demonstrate this:</p>\n<div class=\"highlight highlight-source-groovy notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import org.assertj.core.api.Assertions\nimport spock.lang.Specification\n\nclass SomeSpec extends Specification {\n    def setupSpec() {\n        Assertions.registerFormatterForType(Long) { \"\\$$it\\$\" }\n    }\n\n    def \"should fail\"() {\n        expect:\n        Assertions.assertThat(1L).isEqualTo(2L)\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.assertj.core.api.Assertions</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">spock.lang.Specification</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SomeSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Specification</span> {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">setupSpec</span>() {\n        <span class=\"pl-k\">Assertions</span><span class=\"pl-k\">.</span>registerFormatterForType(<span class=\"pl-k\">Long</span>) { <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\$</span><span class=\"pl-smi\">$i<span class=\"pl-smi\">t</span></span><span class=\"pl-cce\">\\$</span><span class=\"pl-pds\">\"</span></span> }\n    }\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>should fail<span class=\"pl-pds\">\"</span></span>() {\n        <span class=\"pl-c1\">expect</span>:\n        <span class=\"pl-k\">Assertions</span><span class=\"pl-k\">.</span><span class=\"pl-c1\">assertThat</span>(<span class=\"pl-c1\">1L</span>)<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-c1\">2L</span>)\n    }\n}</pre></div>\n<p dir=\"auto\">There are two straightforward workarounds for this issue:</p>\n<ul dir=\"auto\">\n<li>Explicitly invoking <code class=\"notranslate\">toString</code> on interpolated string like: <code class=\"notranslate\">{ \"\\$$it\\$\".toString() }</code></li>\n<li>Using plain concatenation: <code class=\"notranslate\">{'$' + it + '$'}</code></li>\n</ul>\n<p dir=\"auto\">If you interested in this change, I would like to contribute the patch.</p>",
  "description_text": "When registering custom formatter in Groovy and using the interpolated string we are getting ClassCastException on StandarardRepresentation:311 because we are trying to cast GStringImpl to String.\nHere is the simple Spock spec to demonstrate this:\nimport org.assertj.core.api.Assertions\nimport spock.lang.Specification\n\nclass SomeSpec extends Specification {\n    def setupSpec() {\n        Assertions.registerFormatterForType(Long) { \"\\$$it\\$\" }\n    }\n\n    def \"should fail\"() {\n        expect:\n        Assertions.assertThat(1L).isEqualTo(2L)\n    }\n}\nThere are two straightforward workarounds for this issue:\n\nExplicitly invoking toString on interpolated string like: { \"\\$$it\\$\".toString() }\nUsing plain concatenation: {'$' + it + '$'}\n\nIf you interested in this change, I would like to contribute the patch."
}