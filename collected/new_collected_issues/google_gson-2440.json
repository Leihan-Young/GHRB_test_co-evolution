{
  "issue_id": 2438,
  "issue_url": "https://github.com/google/gson/issues/2438",
  "title": "JsonSerializers are constructed multiple times when associated with SerializedName with alternate names but only one is used",
  "description": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.10.1</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">Java 17</p>\n<h1 dir=\"auto\">Used tools</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Maven; version: 3.8.1</li>\n</ul>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">When a class has a field with :</p>\n<ul dir=\"auto\">\n<li>@SerializedName annotation with alternate names</li>\n<li>and with @JsonAdapter indicating a JsonSerializer class to use</li>\n</ul>\n<p dir=\"auto\">Then a new JsonSerializer will instanciate for each alternate names, even if they will never be used (<a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L167\">serialize</a> is always false because of <a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L301\">this</a>)</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">Instanciante a new JsonSerializer only for the main name, because created one can be an heavy operation.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">A new JsonSerializer will instanciate for each alternate names</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<p dir=\"auto\">Run the following code</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public static class Pojo {\n\n        @SerializedName(value = \"field1\", alternate = {\"field2\", \"field3\"})\n        @JsonAdapter(StringSerializer.class)\n        public final String str;\n\n        public Pojo(String str) {\n            this.str = str;\n        }\n\n}\n\npublic static class StringSerializer implements JsonSerializer<String> {\n\n        private static int count = 0;\n\n        private final int c;\n\n        public StringSerializer() {\n            this.c = count;\n            System.out.println(\"new StringSerializer \" + this.c);\n            count++;\n        }\n\n        @Override\n        public JsonElement serialize(String value, Type type, JsonSerializationContext context) {\n            System.out.println(\"serialize \" + this.c);\n            return new JsonPrimitive(value);\n        }\n\n}\n\npublic static void main(String[] args) {\n        TypeAdapter<Pojo> adapter = new Gson().getAdapter(Pojo.class);\n        Pojo pojo1 = new Pojo(\"my value 1\");\n        Pojo pojo2 = new Pojo(\"my value 2\");\n        adapter.toJson(pojo1);\n        adapter.toJson(pojo2);\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Pojo</span> {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">SerializedName</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-s\">\"field1\"</span>, <span class=\"pl-s1\">alternate</span> = {<span class=\"pl-s\">\"field2\"</span>, <span class=\"pl-s\">\"field3\"</span>})\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonAdapter</span>(<span class=\"pl-smi\">StringSerializer</span>.<span class=\"pl-k\">class</span>)\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">str</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Pojo</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">str</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">str</span> = <span class=\"pl-s1\">str</span>;\n        }\n\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">StringSerializer</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">JsonSerializer</span><<span class=\"pl-smi\">String</span>> {\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">count</span> = <span class=\"pl-c1\">0</span>;\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">c</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">StringSerializer</span>() {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">c</span> = <span class=\"pl-s1\">count</span>;\n            <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"new StringSerializer \"</span> + <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">c</span>);\n            <span class=\"pl-s1\">count</span>++;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonElement</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>, <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span>, <span class=\"pl-smi\">JsonSerializationContext</span> <span class=\"pl-s1\">context</span>) {\n            <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"serialize \"</span> + <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">c</span>);\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonPrimitive</span>(<span class=\"pl-s1\">value</span>);\n        }\n\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) {\n        <span class=\"pl-smi\">TypeAdapter</span><<span class=\"pl-smi\">Pojo</span>> <span class=\"pl-s1\">adapter</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">getAdapter</span>(<span class=\"pl-smi\">Pojo</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-smi\">Pojo</span> <span class=\"pl-s1\">pojo1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Pojo</span>(<span class=\"pl-s\">\"my value 1\"</span>);\n        <span class=\"pl-smi\">Pojo</span> <span class=\"pl-s1\">pojo2</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Pojo</span>(<span class=\"pl-s\">\"my value 2\"</span>);\n        <span class=\"pl-s1\">adapter</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">pojo1</span>);\n        <span class=\"pl-s1\">adapter</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">pojo2</span>);\n}</pre></div>\n<h1 dir=\"auto\">Dev hint</h1>\n<p dir=\"auto\">Maybe we can give <code class=\"notranslate\">serialize</code> value to <a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L158\">this</a> method call and used it in some way ?</p>\n<p dir=\"auto\">OR</p>\n<p dir=\"auto\">Create <a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L158\">this</a> type adapter before <a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L299\">here</a></p>",
  "description_text": "Gson version\n2.10.1\nJava / Android version\nJava 17\nUsed tools\n\n Maven; version: 3.8.1\n\nDescription\nWhen a class has a field with :\n\n@SerializedName annotation with alternate names\nand with @JsonAdapter indicating a JsonSerializer class to use\n\nThen a new JsonSerializer will instanciate for each alternate names, even if they will never be used (serialize is always false because of this)\nExpected behavior\nInstanciante a new JsonSerializer only for the main name, because created one can be an heavy operation.\nActual behavior\nA new JsonSerializer will instanciate for each alternate names\nReproduction steps\nRun the following code\n {\n\n        private static int count = 0;\n\n        private final int c;\n\n        public StringSerializer() {\n            this.c = count;\n            System.out.println(\"new StringSerializer \" + this.c);\n            count++;\n        }\n\n        @Override\n        public JsonElement serialize(String value, Type type, JsonSerializationContext context) {\n            System.out.println(\"serialize \" + this.c);\n            return new JsonPrimitive(value);\n        }\n\n}\n\npublic static void main(String[] args) {\n        TypeAdapter adapter = new Gson().getAdapter(Pojo.class);\n        Pojo pojo1 = new Pojo(\"my value 1\");\n        Pojo pojo2 = new Pojo(\"my value 2\");\n        adapter.toJson(pojo1);\n        adapter.toJson(pojo2);\n}\">public static class Pojo {\n\n        @SerializedName(value = \"field1\", alternate = {\"field2\", \"field3\"})\n        @JsonAdapter(StringSerializer.class)\n        public final String str;\n\n        public Pojo(String str) {\n            this.str = str;\n        }\n\n}\n\npublic static class StringSerializer implements JsonSerializer<String> {\n\n        private static int count = 0;\n\n        private final int c;\n\n        public StringSerializer() {\n            this.c = count;\n            System.out.println(\"new StringSerializer \" + this.c);\n            count++;\n        }\n\n        @Override\n        public JsonElement serialize(String value, Type type, JsonSerializationContext context) {\n            System.out.println(\"serialize \" + this.c);\n            return new JsonPrimitive(value);\n        }\n\n}\n\npublic static void main(String[] args) {\n        TypeAdapter<Pojo> adapter = new Gson().getAdapter(Pojo.class);\n        Pojo pojo1 = new Pojo(\"my value 1\");\n        Pojo pojo2 = new Pojo(\"my value 2\");\n        adapter.toJson(pojo1);\n        adapter.toJson(pojo2);\n}\nDev hint\nMaybe we can give serialize value to this method call and used it in some way ?\nOR\nCreate this type adapter before here"
}