{
  "issue_id": 3084,
  "issue_url": "https://github.com/assertj/assertj/issues/3084",
  "title": "`UnambiguousRepresentation` computes same output when types have same name but different packages",
  "description": "<p dir=\"auto\">The error message produced by <code class=\"notranslate\">isEqualTo</code> prints out the class name when the values have the same representation. While this helps disambiguate types with different class names, it doesn't help when the two types have the same name but different packages.</p>\n<p dir=\"auto\">For example, assuming two enum types, both having a <code class=\"notranslate\">VALUE</code> constant:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">org.example.pkg1.Enum1</code></li>\n<li><code class=\"notranslate\">org.example.pkg2.Enum1</code></li>\n</ul>\n<p dir=\"auto\">the following:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"assertThat(org.example.pkg1.Enum1.VALUE).isEqualTo(org.example.pkg2.Enum1.VALUE);\"><pre class=\"notranslate\"><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">example</span>.<span class=\"pl-s1\">pkg1</span>.<span class=\"pl-s1\">Enum1</span>.<span class=\"pl-c1\">VALUE</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">example</span>.<span class=\"pl-s1\">pkg2</span>.<span class=\"pl-s1\">Enum1</span>.<span class=\"pl-c1\">VALUE</span>);</pre></div>\n<p dir=\"auto\">yields:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.opentest4j.AssertionFailedError: \nexpected: \"VALUE (Enum1@d6da883)\"\n but was: \"VALUE (Enum1@5cdd8682)\"\"><pre class=\"notranslate\"><code class=\"notranslate\">org.opentest4j.AssertionFailedError: \nexpected: \"VALUE (Enum1@d6da883)\"\n but was: \"VALUE (Enum1@5cdd8682)\"\n</code></pre></div>\n<p dir=\"auto\">In such cases, printing the fully qualified class name would make the message clearer:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.opentest4j.AssertionFailedError: \nexpected: \"VALUE (org.example.pkg1.Enum1@d6da883)\"\n but was: \"VALUE (org.example.pkg2.Enum1@5cdd8682)\"\"><pre class=\"notranslate\"><code class=\"notranslate\">org.opentest4j.AssertionFailedError: \nexpected: \"VALUE (org.example.pkg1.Enum1@d6da883)\"\n but was: \"VALUE (org.example.pkg2.Enum1@5cdd8682)\"\n</code></pre></div>\n<p dir=\"auto\">Any assertion that uses <code class=\"notranslate\">UnambiguousRepresentation</code> which relies on <code class=\"notranslate\">Representation::unambiguousToStringOf</code> could benefit from this improvement, including the recursive comparison.</p>",
  "description_text": "The error message produced by isEqualTo prints out the class name when the values have the same representation. While this helps disambiguate types with different class names, it doesn't help when the two types have the same name but different packages.\nFor example, assuming two enum types, both having a VALUE constant:\n\norg.example.pkg1.Enum1\norg.example.pkg2.Enum1\n\nthe following:\nassertThat(org.example.pkg1.Enum1.VALUE).isEqualTo(org.example.pkg2.Enum1.VALUE);\nyields:\norg.opentest4j.AssertionFailedError: \nexpected: \"VALUE (Enum1@d6da883)\"\n but was: \"VALUE (Enum1@5cdd8682)\"\n\nIn such cases, printing the fully qualified class name would make the message clearer:\norg.opentest4j.AssertionFailedError: \nexpected: \"VALUE (org.example.pkg1.Enum1@d6da883)\"\n but was: \"VALUE (org.example.pkg2.Enum1@5cdd8682)\"\n\nAny assertion that uses UnambiguousRepresentation which relies on Representation::unambiguousToStringOf could benefit from this improvement, including the recursive comparison."
}