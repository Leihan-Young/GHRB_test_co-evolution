{
  "issue_id": 16965,
  "issue_url": "https://github.com/OpenAPITools/openapi-generator/issues/16965",
  "title": "[BUG] Responses using references are not properly expanded",
  "description": "<h4 dir=\"auto\">Bug Report Checklist</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Have you provided a full/minimal spec to reproduce the issue?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Have you validated the input using an OpenAPI validator (<a href=\"https://apidevtools.org/swagger-parser/online/\" rel=\"nofollow\">example</a>)?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Have you <a href=\"https://github.com/OpenAPITools/openapi-generator/wiki/FAQ#how-to-test-with-the-latest-master-of-openapi-generator\">tested with the latest master</a> to confirm the issue still exists?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Have you searched for related issues/PRs?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> What's the actual output vs expected output?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> [Optional] Sponsorship to speed up the bug fix or feature request (<a href=\"https://github.com/OpenAPITools/openapi-generator/issues/6178\" data-hovercard-type=\"issue\" data-hovercard-url=\"/OpenAPITools/openapi-generator/issues/6178/hovercard\">example</a>)</li>\n</ul>\n<h5 dir=\"auto\">Description</h5>\n<p dir=\"auto\">I've got an API that uses the same response format repeatedly, so I opted for using a <code class=\"notranslate\">$ref</code> to avoid the repetition in my spec.</p>\n<p dir=\"auto\">It appears that when you do this, the generator does not seem to correctly pick up the response schema, resulting in it being left out. I've tested this in the <code class=\"notranslate\">go</code> and <code class=\"notranslate\">javascript</code> generators, so I have a suspicion it's a more widespread issue.</p>\n<p dir=\"auto\">The workaround here is to just avoid <code class=\"notranslate\">$ref</code> and repeat the response config each time it is needed.</p>\n<h5 dir=\"auto\">openapi-generator version</h5>\n<p dir=\"auto\">7.1.0-SNAPSHOT (latest docker image as of today)</p>\n<h5 dir=\"auto\">OpenAPI declaration file content or url</h5>\n<div class=\"highlight highlight-source-yaml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"openapi: 3.1.0\n\ninfo:\n  title: required to pass validation\n  version: 0.0.0\n\npaths:\n  /no_ref:\n    get:\n      responses:\n        '200':\n          description: required to pass validation\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /ref/no_ref:\n    get:\n      responses:\n        '200':\n          $ref: '#/components/responses/no_ref'\n\n  /ref/ref:\n    get:\n      responses:\n        '200':\n          $ref: '#/components/responses/ref'\n\ncomponents:\n  responses:\n    no_ref:\n      description: required to pass validation\n      content:\n        text/plain:\n          schema:\n            type: string\n\n    ref:\n      description: required to pass validation\n      content:\n        text/plain:\n          schema:\n            $ref: '#/components/schemas/simple_text'\n\n  schemas:\n    simple_text:\n      type: string\"><pre class=\"notranslate\"><span class=\"pl-ent\">openapi</span>: <span class=\"pl-s\">3.1.0</span>\n\n<span class=\"pl-ent\">info</span>:\n  <span class=\"pl-ent\">title</span>: <span class=\"pl-s\">required to pass validation</span>\n  <span class=\"pl-ent\">version</span>: <span class=\"pl-s\">0.0.0</span>\n\n<span class=\"pl-ent\">paths</span>:\n  <span class=\"pl-ent\">/no_ref</span>:\n    <span class=\"pl-ent\">get</span>:\n      <span class=\"pl-ent\">responses</span>:\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-ent\">200</span><span class=\"pl-pds\">'</span></span>:\n          <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">required to pass validation</span>\n          <span class=\"pl-ent\">content</span>:\n            <span class=\"pl-ent\">text/plain</span>:\n              <span class=\"pl-ent\">schema</span>:\n                <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>\n\n  <span class=\"pl-ent\">/ref/no_ref</span>:\n    <span class=\"pl-ent\">get</span>:\n      <span class=\"pl-ent\">responses</span>:\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-ent\">200</span><span class=\"pl-pds\">'</span></span>:\n          <span class=\"pl-ent\">$ref</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>#/components/responses/no_ref<span class=\"pl-pds\">'</span></span>\n\n  <span class=\"pl-ent\">/ref/ref</span>:\n    <span class=\"pl-ent\">get</span>:\n      <span class=\"pl-ent\">responses</span>:\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-ent\">200</span><span class=\"pl-pds\">'</span></span>:\n          <span class=\"pl-ent\">$ref</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>#/components/responses/ref<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-ent\">components</span>:\n  <span class=\"pl-ent\">responses</span>:\n    <span class=\"pl-ent\">no_ref</span>:\n      <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">required to pass validation</span>\n      <span class=\"pl-ent\">content</span>:\n        <span class=\"pl-ent\">text/plain</span>:\n          <span class=\"pl-ent\">schema</span>:\n            <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span>\n\n    <span class=\"pl-ent\">ref</span>:\n      <span class=\"pl-ent\">description</span>: <span class=\"pl-s\">required to pass validation</span>\n      <span class=\"pl-ent\">content</span>:\n        <span class=\"pl-ent\">text/plain</span>:\n          <span class=\"pl-ent\">schema</span>:\n            <span class=\"pl-ent\">$ref</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>#/components/schemas/simple_text<span class=\"pl-pds\">'</span></span>\n\n  <span class=\"pl-ent\">schemas</span>:\n    <span class=\"pl-ent\">simple_text</span>:\n      <span class=\"pl-ent\">type</span>: <span class=\"pl-s\">string</span></pre></div>\n<h5 dir=\"auto\">Generation Details</h5>\n<p dir=\"auto\">I am doing this on macOS, so I've needed to use docker to work, but I suspect the equivalent CLI instructions should suffice. (there's no extra config to worry about)</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"docker run --rm -v \"$PWD:/local\" openapitools/openapi-generator-cli:latest generate \\\n\t-g go \\\n\t-i /local/spec.yaml \\\n \t-o /local/client/go\n\ndocker run --rm -v \"$PWD:/local\" openapitools/openapi-generator-cli:latest generate \\\n\t-g javascript \\\n\t-i /local/spec.yaml \\\n \t-o /local/client/javascript\"><pre class=\"notranslate\">docker run --rm -v <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$PWD</span>:/local<span class=\"pl-pds\">\"</span></span> openapitools/openapi-generator-cli:latest generate \\\n\t-g go \\\n\t-i /local/spec.yaml \\\n \t-o /local/client/go\n\ndocker run --rm -v <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$PWD</span>:/local<span class=\"pl-pds\">\"</span></span> openapitools/openapi-generator-cli:latest generate \\\n\t-g javascript \\\n\t-i /local/spec.yaml \\\n \t-o /local/client/javascript</pre></div>\n<h5 dir=\"auto\">Steps to reproduce</h5>\n<p dir=\"auto\">Once you have the generated code, here's what I've noticed:</p>\n<h6 dir=\"auto\">go</h6>\n<p dir=\"auto\">The <code class=\"notranslate\">Execute()</code> methods typically return <code class=\"notranslate\">(Model, *http.Response, error)</code>, which is found in <code class=\"notranslate\">api_default.go</code>:</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// no $ref: works as expected\nfunc (r ApiNoRefGetRequest) Execute() (string, *http.Response, error) {\n\n// uses $ref for response, but no $ref for content: missing model\nfunc (r ApiRefNoRefGetRequest) Execute() (*http.Response, error) {\n\n// uses $ref for response and content: missing model\nfunc (r ApiRefRefGetRequest) Execute() (*http.Response, error) {\"><pre class=\"notranslate\"><span class=\"pl-c\">// no $ref: works as expected</span>\n<span class=\"pl-k\">func</span> (<span class=\"pl-s1\">r</span> <span class=\"pl-smi\">ApiNoRefGetRequest</span>) <span class=\"pl-en\">Execute</span>() (<span class=\"pl-smi\">string</span>, <span class=\"pl-c1\">*</span>http.<span class=\"pl-smi\">Response</span>, <span class=\"pl-smi\">error</span>) {\n\n<span class=\"pl-c\">// uses $ref for response, but no $ref for content: missing model</span>\n<span class=\"pl-k\">func</span> (<span class=\"pl-s1\">r</span> <span class=\"pl-smi\">ApiRefNoRefGetRequest</span>) <span class=\"pl-smi\">Execute</span>(<span class=\"pl-s1\"></span>) (<span class=\"pl-c1\">*</span><span class=\"pl-s1\">http</span>.<span class=\"pl-c1\">Response</span>, <span class=\"pl-s1\">error</span>) {\n\n<span class=\"pl-c\">// uses $ref for response and content: missing model</span>\n<span class=\"pl-k\">func</span> (<span class=\"pl-s1\">r</span> <span class=\"pl-smi\">ApiRefRefGetRequest</span>) <span class=\"pl-smi\">Execute</span>(<span class=\"pl-s1\"></span>) (<span class=\"pl-c1\">*</span><span class=\"pl-s1\">http</span>.<span class=\"pl-c1\">Response</span>, <span class=\"pl-s1\">error</span>) {</pre></div>\n<h6 dir=\"auto\">javascript</h6>\n<p dir=\"auto\">The <code class=\"notranslate\">returnType</code> variables generated typically use the model model or <code class=\"notranslate\">null</code> when the response content has no detected schema/model, which is found in <code class=\"notranslate\">src/api/DefaultApi.js</code></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// no $ref: works as expected\nlet returnType = 'String';\n\n// uses $ref for response, but no $ref for content: missing model\nlet returnType = null;\n\n// uses $ref for response and content: missing model\nlet returnType = null;\"><pre class=\"notranslate\"><span class=\"pl-c\">// no $ref: works as expected</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">returnType</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'String'</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// uses $ref for response, but no $ref for content: missing model</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">returnType</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// uses $ref for response and content: missing model</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">returnType</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span></pre></div>\n<h5 dir=\"auto\">Related issues/PRs</h5>\n<p dir=\"auto\">I have not yet found a ticket that seems to reference this issue as well, as most of my search criteria result in hundreds of issues as they are unfortunately rather common terms.</p>\n<h5 dir=\"auto\">Suggest a fix</h5>\n<p dir=\"auto\">n/a</p>",
  "description_text": "Bug Report Checklist\n\n Have you provided a full/minimal spec to reproduce the issue?\n Have you validated the input using an OpenAPI validator (example)?\n Have you tested with the latest master to confirm the issue still exists?\n Have you searched for related issues/PRs?\n What's the actual output vs expected output?\n [Optional] Sponsorship to speed up the bug fix or feature request (example)\n\nDescription\nI've got an API that uses the same response format repeatedly, so I opted for using a $ref to avoid the repetition in my spec.\nIt appears that when you do this, the generator does not seem to correctly pick up the response schema, resulting in it being left out. I've tested this in the go and javascript generators, so I have a suspicion it's a more widespread issue.\nThe workaround here is to just avoid $ref and repeat the response config each time it is needed.\nopenapi-generator version\n7.1.0-SNAPSHOT (latest docker image as of today)\nOpenAPI declaration file content or url\nopenapi: 3.1.0\n\ninfo:\n  title: required to pass validation\n  version: 0.0.0\n\npaths:\n  /no_ref:\n    get:\n      responses:\n        '200':\n          description: required to pass validation\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /ref/no_ref:\n    get:\n      responses:\n        '200':\n          $ref: '#/components/responses/no_ref'\n\n  /ref/ref:\n    get:\n      responses:\n        '200':\n          $ref: '#/components/responses/ref'\n\ncomponents:\n  responses:\n    no_ref:\n      description: required to pass validation\n      content:\n        text/plain:\n          schema:\n            type: string\n\n    ref:\n      description: required to pass validation\n      content:\n        text/plain:\n          schema:\n            $ref: '#/components/schemas/simple_text'\n\n  schemas:\n    simple_text:\n      type: string\nGeneration Details\nI am doing this on macOS, so I've needed to use docker to work, but I suspect the equivalent CLI instructions should suffice. (there's no extra config to worry about)\ndocker run --rm -v \"$PWD:/local\" openapitools/openapi-generator-cli:latest generate \\\n\t-g go \\\n\t-i /local/spec.yaml \\\n \t-o /local/client/go\n\ndocker run --rm -v \"$PWD:/local\" openapitools/openapi-generator-cli:latest generate \\\n\t-g javascript \\\n\t-i /local/spec.yaml \\\n \t-o /local/client/javascript\nSteps to reproduce\nOnce you have the generated code, here's what I've noticed:\ngo\nThe Execute() methods typically return (Model, *http.Response, error), which is found in api_default.go:\n// no $ref: works as expected\nfunc (r ApiNoRefGetRequest) Execute() (string, *http.Response, error) {\n\n// uses $ref for response, but no $ref for content: missing model\nfunc (r ApiRefNoRefGetRequest) Execute() (*http.Response, error) {\n\n// uses $ref for response and content: missing model\nfunc (r ApiRefRefGetRequest) Execute() (*http.Response, error) {\njavascript\nThe returnType variables generated typically use the model model or null when the response content has no detected schema/model, which is found in src/api/DefaultApi.js\n// no $ref: works as expected\nlet returnType = 'String';\n\n// uses $ref for response, but no $ref for content: missing model\nlet returnType = null;\n\n// uses $ref for response and content: missing model\nlet returnType = null;\nRelated issues/PRs\nI have not yet found a ticket that seems to reference this issue as well, as most of my search criteria result in hundreds of issues as they are unfortunately rather common terms.\nSuggest a fix\nn/a"
}