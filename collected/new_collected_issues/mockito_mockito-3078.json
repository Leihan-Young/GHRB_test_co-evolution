{
  "issue_id": 3077,
  "issue_url": "https://github.com/mockito/mockito/issues/3077",
  "title": "Unused stubbings are not reported when filters are used",
  "description": "<p dir=\"auto\">Unused stubbings are not reported when a filter is used during the test run. This is documented clearly in the <a href=\"https://github.com/mockito/mockito/blob/f5ad9e9f9a338bcea6180fc474a562acc13f2c84/src/main/java/org/mockito/internal/runners/StrictRunner.java#L47-L52\">StrictRunner class</a>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// only report when:\n// 1. if all tests from given test have ran (filter requested is false)\n//   Otherwise we would report unnecessary stubs even if the user runs just single test\n// from the class\n// 2. tests are successful (we don't want to add an extra failure on top of any existing\n// failure, to avoid confusion)\"><pre class=\"notranslate\"><span class=\"pl-c\">// only report when:</span>\n<span class=\"pl-c\">// 1. if all tests from given test have ran (filter requested is false)</span>\n<span class=\"pl-c\">//   Otherwise we would report unnecessary stubs even if the user runs just single test</span>\n<span class=\"pl-c\">// from the class</span>\n<span class=\"pl-c\">// 2. tests are successful (we don't want to add an extra failure on top of any existing</span>\n<span class=\"pl-c\">// failure, to avoid confusion)</span></pre></div>\n<p dir=\"auto\">Only reporting unused stubbings when all tests are run is reasonable. However, the logic for detecting this case is a little too coarse-grained, since even no-op filters end up disabling the reporting of unused stubbings. This can be troublesome when, for example, JUnit categories are used to distinguish between unit and integration tests.</p>\n<p dir=\"auto\">It'd be nice if we could detect when filters actually prevent one or more tests from being run, and only skip reporting unused stubbings in those cases.</p>\n<p dir=\"auto\">Created based off of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"492837243\" data-permission-text=\"Title is private\" data-url=\"https://github.com/gradle/gradle/issues/10694\" data-hovercard-type=\"issue\" data-hovercard-url=\"/gradle/gradle/issues/10694/hovercard\" href=\"https://github.com/gradle/gradle/issues/10694\">gradle/gradle#10694</a>, specifically <a href=\"https://github.com/gradle/gradle/issues/10694#issuecomment-1374911274\" data-hovercard-type=\"issue\" data-hovercard-url=\"/gradle/gradle/issues/10694/hovercard\">this comment</a>.</p>\n<p dir=\"auto\">This affects a project currently using Mockito version 4.11.0, but I've just verified that it also affects version 5.2.0.</p>",
  "description_text": "Unused stubbings are not reported when a filter is used during the test run. This is documented clearly in the StrictRunner class:\n// only report when:\n// 1. if all tests from given test have ran (filter requested is false)\n//   Otherwise we would report unnecessary stubs even if the user runs just single test\n// from the class\n// 2. tests are successful (we don't want to add an extra failure on top of any existing\n// failure, to avoid confusion)\nOnly reporting unused stubbings when all tests are run is reasonable. However, the logic for detecting this case is a little too coarse-grained, since even no-op filters end up disabling the reporting of unused stubbings. This can be troublesome when, for example, JUnit categories are used to distinguish between unit and integration tests.\nIt'd be nice if we could detect when filters actually prevent one or more tests from being run, and only skip reporting unused stubbings in those cases.\nCreated based off of gradle/gradle#10694, specifically this comment.\nThis affects a project currently using Mockito version 4.11.0, but I've just verified that it also affects version 5.2.0."
}