{
  "issue_id": 9676,
  "issue_url": "https://github.com/apache/skywalking/issues/9676",
  "title": "[Feature] Add virtual MQ analysis for native traces.",
  "description": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I had searched in the <a href=\"https://github.com/apache/skywalking/issues?q=is%3Aissue\">issues</a> and found no similar feature requirement.</li>\n</ul>\n<h3 dir=\"auto\">Description</h3>\n<p dir=\"auto\">As we have the virtual database and cache analysis in 9.3.0, let's bring the last missing core analysis, virtual MQ, into the backend analysis.</p>\n<p dir=\"auto\">As we designed years ago, span layer includes the following options</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public enum SpanLayer {\n    DB(1), RPC_FRAMEWORK(2), HTTP(3), MQ(4), CACHE(5);\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">SpanLayer</span> {\n    <span class=\"pl-c1\">DB</span>(<span class=\"pl-c1\">1</span>), <span class=\"pl-c1\">RPC_FRAMEWORK</span>(<span class=\"pl-c1\">2</span>), <span class=\"pl-c1\">HTTP</span>(<span class=\"pl-c1\">3</span>), <span class=\"pl-c1\">MQ</span>(<span class=\"pl-c1\">4</span>), <span class=\"pl-c1\">CACHE</span>(<span class=\"pl-c1\">5</span>);</pre></div>\n<p dir=\"auto\">MQ span layer represents a queue server with consumer and producer sides, such as, Kafka, RocketMQ, and Pulsar. SkyWalking Java agent has had plugins for these typical and widely used MQ's Java clients for years too.</p>\n<p dir=\"auto\">Now, let's analyze their access load(producing/consuming load), such as X messages per second, and other typical metrics<br>\nThere is one special about time, MQ is able to consume and produce messages in bulk mode, and some queue clients are using pulling mode(typically Kafka), so the span could only include pulling time, but, meanwhile, some pushing mode client span could including all further processes' time.</p>\n<p dir=\"auto\">Also, <code class=\"notranslate\">endpoint_mq_consume_count</code> and <code class=\"notranslate\">endpoint_mq_consume_latency</code> are purely analyzed through OAL, even having tag match expression, we should consider merging it in a consistent way like existing <code class=\"notranslate\">VirtualServiceProcessor</code> implementations.</p>\n<h3 dir=\"auto\">Use case</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">Related issues</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">Are you willing to submit a PR?</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Yes I am willing to submit a PR!</li>\n</ul>\n<h3 dir=\"auto\">Code of Conduct</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I agree to follow this project's <a href=\"https://www.apache.org/foundation/policies/conduct\" rel=\"nofollow\">Code of Conduct</a></li>\n</ul>",
  "description_text": "Search before asking\n\n I had searched in the issues and found no similar feature requirement.\n\nDescription\nAs we have the virtual database and cache analysis in 9.3.0, let's bring the last missing core analysis, virtual MQ, into the backend analysis.\nAs we designed years ago, span layer includes the following options\npublic enum SpanLayer {\n    DB(1), RPC_FRAMEWORK(2), HTTP(3), MQ(4), CACHE(5);\nMQ span layer represents a queue server with consumer and producer sides, such as, Kafka, RocketMQ, and Pulsar. SkyWalking Java agent has had plugins for these typical and widely used MQ's Java clients for years too.\nNow, let's analyze their access load(producing/consuming load), such as X messages per second, and other typical metrics\nThere is one special about time, MQ is able to consume and produce messages in bulk mode, and some queue clients are using pulling mode(typically Kafka), so the span could only include pulling time, but, meanwhile, some pushing mode client span could including all further processes' time.\nAlso, endpoint_mq_consume_count and endpoint_mq_consume_latency are purely analyzed through OAL, even having tag match expression, we should consider merging it in a consistent way like existing VirtualServiceProcessor implementations.\nUse case\nNo response\nRelated issues\nNo response\nAre you willing to submit a PR?\n\n Yes I am willing to submit a PR!\n\nCode of Conduct\n\n I agree to follow this project's Code of Conduct\n"
}