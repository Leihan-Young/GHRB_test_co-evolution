{
  "issue_id": 3838,
  "issue_url": "https://github.com/FasterXML/jackson-databind/issues/3838",
  "title": "Difference in the handling of `ObjectId-property` in `JsonIdentityInfo` depending on the deserialization route",
  "description": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nThis is the problem reported in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"712039983\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-module-kotlin/issues/378\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-module-kotlin/issues/378/hovercard\" href=\"https://github.com/FasterXML/jackson-module-kotlin/issues/378\">FasterXML/jackson-module-kotlin#378</a> .</p>\n<p dir=\"auto\">Setter-based deserialization does not generate an error if the <code class=\"notranslate\">id-property</code> is not present on the <code class=\"notranslate\">JSON</code>.<br>\nOn the other hand, instantiator-based deserialization throws a <code class=\"notranslate\">MismatchedInputException</code> if the <code class=\"notranslate\">id-property</code> is not present in the <code class=\"notranslate\">JSON</code>.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\nIt has been present since at least 2.9.9 and is reproduced in 2.15.0-rc1.</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIdentityInfo;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\n\npublic class ObjectId {\n    @JsonIdentityInfo(property = \"id\", generator = ObjectIdGenerators.PropertyGenerator.class)\n    static class SetterBased {\n        private String id;\n\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n    }\n\n    @JsonIdentityInfo(property = \"id\", generator = ObjectIdGenerators.PropertyGenerator.class)\n    static class CreatorBased {\n        private final String id;\n\n        @JsonCreator\n        CreatorBased(@JsonProperty(value = \"id\") String id) {\n            this.id = id;\n        }\n\n        public String getId() {\n            return id;\n        }\n    }\n\n    @Test\n    void test() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper();\n\n        // -> no error\n        SetterBased t1 = mapper.readValue(\"{}\", SetterBased.class);\n        System.out.println(t1.id); // -> null\n\n        // -> MismatchedInputException thrown\n        CreatorBased t2 = mapper.readValue(\"{}\", CreatorBased.class);\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonCreator</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonIdentityInfo</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonProperty</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">ObjectIdGenerators</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ObjectId</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityInfo</span>(<span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"id\"</span>, <span class=\"pl-s1\">generator</span> = <span class=\"pl-smi\">ObjectIdGenerators</span>.<span class=\"pl-smi\">PropertyGenerator</span>.<span class=\"pl-k\">class</span>)\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">SetterBased</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getId</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">id</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setId</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">id</span> = <span class=\"pl-s1\">id</span>;\n        }\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityInfo</span>(<span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"id\"</span>, <span class=\"pl-s1\">generator</span> = <span class=\"pl-smi\">ObjectIdGenerators</span>.<span class=\"pl-smi\">PropertyGenerator</span>.<span class=\"pl-k\">class</span>)\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">CreatorBased</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n        <span class=\"pl-smi\">CreatorBased</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-s\">\"id\"</span>) <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">id</span> = <span class=\"pl-s1\">id</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getId</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">id</span>;\n        }\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\n        <span class=\"pl-c\">// -> no error</span>\n        <span class=\"pl-smi\">SetterBased</span> <span class=\"pl-s1\">t1</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-smi\">SetterBased</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">t1</span>.<span class=\"pl-s1\">id</span>); <span class=\"pl-c\">// -> null</span>\n\n        <span class=\"pl-c\">// -> MismatchedInputException thrown</span>\n        <span class=\"pl-smi\">CreatorBased</span> <span class=\"pl-s1\">t2</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-smi\">CreatorBased</span>.<span class=\"pl-k\">class</span>);\n    }\n}</pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nIt would be correct to be one of the following summarized below.<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"712039983\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-module-kotlin/issues/378\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-module-kotlin/issues/378/hovercard?comment_id=1477141827&comment_type=issue_comment\" href=\"https://github.com/FasterXML/jackson-module-kotlin/issues/378#issuecomment-1477141827\">FasterXML/jackson-module-kotlin#378 (comment)</a></p>\n<p dir=\"auto\"><strong>Additional context</strong><br>\nn/a</p>",
  "description_text": "Describe the bug\nThis is the problem reported in FasterXML/jackson-module-kotlin#378 .\nSetter-based deserialization does not generate an error if the id-property is not present on the JSON.\nOn the other hand, instantiator-based deserialization throws a MismatchedInputException if the id-property is not present in the JSON.\nVersion information\nIt has been present since at least 2.9.9 and is reproduced in 2.15.0-rc1.\nTo Reproduce\n no error\n        SetterBased t1 = mapper.readValue(\"{}\", SetterBased.class);\n        System.out.println(t1.id); // -> null\n\n        // -> MismatchedInputException thrown\n        CreatorBased t2 = mapper.readValue(\"{}\", CreatorBased.class);\n    }\n}\">import com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIdentityInfo;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\n\npublic class ObjectId {\n    @JsonIdentityInfo(property = \"id\", generator = ObjectIdGenerators.PropertyGenerator.class)\n    static class SetterBased {\n        private String id;\n\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n    }\n\n    @JsonIdentityInfo(property = \"id\", generator = ObjectIdGenerators.PropertyGenerator.class)\n    static class CreatorBased {\n        private final String id;\n\n        @JsonCreator\n        CreatorBased(@JsonProperty(value = \"id\") String id) {\n            this.id = id;\n        }\n\n        public String getId() {\n            return id;\n        }\n    }\n\n    @Test\n    void test() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper();\n\n        // -> no error\n        SetterBased t1 = mapper.readValue(\"{}\", SetterBased.class);\n        System.out.println(t1.id); // -> null\n\n        // -> MismatchedInputException thrown\n        CreatorBased t2 = mapper.readValue(\"{}\", CreatorBased.class);\n    }\n}\nExpected behavior\nIt would be correct to be one of the following summarized below.\nFasterXML/jackson-module-kotlin#378 (comment)\nAdditional context\nn/a"
}