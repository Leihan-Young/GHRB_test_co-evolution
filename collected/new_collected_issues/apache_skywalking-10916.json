{
  "issue_id": 10885,
  "issue_url": "https://github.com/apache/skywalking/issues/10885",
  "title": "[Feature] add sumLabeled @MeterFunction for mal sum downsampling",
  "description": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I had searched in the <a href=\"https://github.com/apache/skywalking/issues?q=is%3Aissue\">issues</a> and found no similar feature requirement.</li>\n</ul>\n<h3 dir=\"auto\">Description</h3>\n<p dir=\"auto\">This is my scenario\uff1a</p>\n<ol dir=\"auto\">\n<li>otel-collector scrape gateway metric endpoint in every 15S</li>\n<li>skywalking mal engine calculate every http code count increasement in this 15s and downsampling by sum method</li>\n<li>skywalking will persist this metric in meter_sum_xxxxxxxx table in value meter mode</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"metricsRules:\n  - name: http_200_code_count\n    exp: http_server_requests_seconds_count.tagEqual('status', '200').sum(['application']).increase('PT15S').service(['application'], Layer.GENERAL).downsampling(SUM)\n  - name: http_404_code_count\n    exp: http_server_requests_seconds_count.tagEqual('status', '404').sum(['application']).increase('PT15S').service(['application'], Layer.GENERAL).downsampling(SUM)\n  ...\n  ...\n  ...\"><pre class=\"notranslate\"><code class=\"notranslate\">metricsRules:\n  - name: http_200_code_count\n    exp: http_server_requests_seconds_count.tagEqual('status', '200').sum(['application']).increase('PT15S').service(['application'], Layer.GENERAL).downsampling(SUM)\n  - name: http_404_code_count\n    exp: http_server_requests_seconds_count.tagEqual('status', '404').sum(['application']).increase('PT15S').service(['application'], Layer.GENERAL).downsampling(SUM)\n  ...\n  ...\n  ...\n</code></pre></div>\n<h3 dir=\"auto\">Use case</h3>\n<p dir=\"auto\">I want to change my mal like this, the sum aggregate method use 'application' and 'status' as aggregate-by params. If skywalking meter system support sumlabeled function, this metric will be persisted in meter_sumlabeled_xxxxxxxx table in datatable meter mode.</p>\n<p dir=\"auto\">The  sumlabeled function is easy to extend under skywalking meter system excellent architecture design, and it can bring us benefits in query efficiency and storage economy.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"metricsRules:\n  - name: http_code_count\n    exp: http_server_requests_seconds_count.sum(['application','status']).increase('PT15S').service(['application'], Layer.GENERAL).downsampling(SUM)\"><pre class=\"notranslate\"><code class=\"notranslate\">metricsRules:\n  - name: http_code_count\n    exp: http_server_requests_seconds_count.sum(['application','status']).increase('PT15S').service(['application'], Layer.GENERAL).downsampling(SUM)\n</code></pre></div>\n<h3 dir=\"auto\">Related issues</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">Are you willing to submit a PR?</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Yes I am willing to submit a PR!</li>\n</ul>\n<h3 dir=\"auto\">Code of Conduct</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I agree to follow this project's <a href=\"https://www.apache.org/foundation/policies/conduct\" rel=\"nofollow\">Code of Conduct</a></li>\n</ul>",
  "description_text": "Search before asking\n\n I had searched in the issues and found no similar feature requirement.\n\nDescription\nThis is my scenario\uff1a\n\notel-collector scrape gateway metric endpoint in every 15S\nskywalking mal engine calculate every http code count increasement in this 15s and downsampling by sum method\nskywalking will persist this metric in meter_sum_xxxxxxxx table in value meter mode\n\nmetricsRules:\n  - name: http_200_code_count\n    exp: http_server_requests_seconds_count.tagEqual('status', '200').sum(['application']).increase('PT15S').service(['application'], Layer.GENERAL).downsampling(SUM)\n  - name: http_404_code_count\n    exp: http_server_requests_seconds_count.tagEqual('status', '404').sum(['application']).increase('PT15S').service(['application'], Layer.GENERAL).downsampling(SUM)\n  ...\n  ...\n  ...\n\nUse case\nI want to change my mal like this, the sum aggregate method use 'application' and 'status' as aggregate-by params. If skywalking meter system support sumlabeled function, this metric will be persisted in meter_sumlabeled_xxxxxxxx table in datatable meter mode.\nThe  sumlabeled function is easy to extend under skywalking meter system excellent architecture design, and it can bring us benefits in query efficiency and storage economy.\nmetricsRules:\n  - name: http_code_count\n    exp: http_server_requests_seconds_count.sum(['application','status']).increase('PT15S').service(['application'], Layer.GENERAL).downsampling(SUM)\n\nRelated issues\nNo response\nAre you willing to submit a PR?\n\n Yes I am willing to submit a PR!\n\nCode of Conduct\n\n I agree to follow this project's Code of Conduct\n"
}