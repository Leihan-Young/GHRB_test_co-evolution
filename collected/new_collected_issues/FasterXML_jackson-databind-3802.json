{
  "issue_id": 3638,
  "issue_url": "https://github.com/FasterXML/jackson-databind/issues/3638",
  "title": "Case-insensitive and number-based enum deserialization are (unnecessarily) mutually exclusive",
  "description": "<p dir=\"auto\">Not sure if this should be filed as a bug or a feature request, since the \"expected\" behavior is mostly left to interpretation, but I went with a bug report in the end. Let me know if that makes sense.</p>\n<p dir=\"auto\"><strong>Describe the bug</strong><br>\nDeserializing an enum field that is marked for case-insensitive deserialization does not work if the source value happens to be shaped as the string representation of a number, whereas the same value will be deserialized properly if case-insensitive deserialization is disabled.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n<code class=\"notranslate\">2.12.4</code></p>\n<p dir=\"auto\"><strong>To Reproduce</strong><br>\nIf you have a way to reproduce this with:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"enum MyEnum {\n    FIRST_MEMBER(0),\n    SECOND_MEMBER(1);\n    \n    private int index;\n\n    private MyEnum(int index) {\n        this.index = index;\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">enum</span> <span class=\"pl-smi\">MyEnum</span> {\n    <span class=\"pl-c1\">FIRST_MEMBER</span>(<span class=\"pl-c1\">0</span>),\n    <span class=\"pl-c1\">SECOND_MEMBER</span>(<span class=\"pl-c1\">1</span>);\n    \n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">index</span>;\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">MyEnum</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">index</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">index</span> = <span class=\"pl-s1\">index</span>;\n    }\n}</pre></div>\n<h4 dir=\"auto\">ACCEPT_CASE_INSENSITIVE_PROPERTIES: disabled</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyClass {\n    public MyEnum enumValue;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">class MyClass {\n    public MyEnum enumValue;\n}\n</code></pre></div>\n<h4 dir=\"auto\">ACCEPT_CASE_INSENSITIVE_PROPERTIES: enabled</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyClass {\n    @JsonFormat(with = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)\n    public MyEnum enumValue;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">class MyClass {\n    @JsonFormat(with = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)\n    public MyEnum enumValue;\n}\n</code></pre></div>\n<hr>\n<table role=\"table\">\n<thead>\n<tr>\n<th align=\"left\">Json input</th>\n<th align=\"center\">ACCEPT_CASE_INSENSITIVE_PROPERTIES: disabled</th>\n<th align=\"center\">ACCEPT_CASE_INSENSITIVE_PROPERTIES: enabled</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"notranslate\">{ \"enumValue\": \"FIRST_MEMBER\" }</code></td>\n<td align=\"center\">\u2705</td>\n<td align=\"center\">\u2705</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"notranslate\">{ \"enumValue\": \"first_member\" }</code></td>\n<td align=\"center\">\u274c</td>\n<td align=\"center\">\u2705</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"notranslate\">{ \"enumValue\": 0 }</code></td>\n<td align=\"center\">\u2705</td>\n<td align=\"center\">\u2705</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"notranslate\">{ \"enumValue\": \"0\" }</code></td>\n<td align=\"center\">\u2705</td>\n<td align=\"center\">\u274c \ud83d\udc48</td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\">Both failures (\u274c) are the same:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `MyClass` from String <X> not one of the values accepted for Enum class: ...\"><pre class=\"notranslate\"><code class=\"notranslate\">com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `MyClass` from String <X> not one of the values accepted for Enum class: ...\n</code></pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nI would expect the case annotated with \ud83d\udc48 in the table above to successfully deserialize the value. It seems as if the reason why this is not the case for now is that the conditional branches branches that handle the case-insensitive parsing and the number-based enum parsing are mutually exclusive:<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/FasterXML/jackson-databind/blob/f5a84a5b74a3fe7fa89d1d68b0805a7e5898c6a9/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java#L306-L330\">jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 306 to 330\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/FasterXML/jackson-databind/commit/f5a84a5b74a3fe7fa89d1d68b0805a7e5898c6a9\">f5a84a5</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L306\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"306\"></td>\n          <td id=\"LC306\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">             <span class=\"pl-c\">// [databind#1313]: Case insensitive enum deserialization</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L307\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"307\"></td>\n          <td id=\"LC307\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">             <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">Boolean</span>.<span class=\"pl-c1\">TRUE</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">_caseInsensitive</span>)) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L308\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"308\"></td>\n          <td id=\"LC308\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">match</span> = <span class=\"pl-s1\">lookup</span>.<span class=\"pl-en\">findCaseInsensitive</span>(<span class=\"pl-s1\">name</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L309\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"309\"></td>\n          <td id=\"LC309\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">match</span> != <span class=\"pl-c1\">null</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L310\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"310\"></td>\n          <td id=\"LC310\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                     <span class=\"pl-k\">return</span> <span class=\"pl-s1\">match</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L311\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"311\"></td>\n          <td id=\"LC311\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L312\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"312\"></td>\n          <td id=\"LC312\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">             } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">ctxt</span>.<span class=\"pl-en\">isEnabled</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">FAIL_ON_NUMBERS_FOR_ENUMS</span>)) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L313\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"313\"></td>\n          <td id=\"LC313\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-c\">// [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L314\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"314\"></td>\n          <td id=\"LC314\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-smi\">char</span> <span class=\"pl-s1\">c</span> = <span class=\"pl-s1\">name</span>.<span class=\"pl-en\">charAt</span>(<span class=\"pl-c1\">0</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L315\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"315\"></td>\n          <td id=\"LC315\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">c</span> >= <span class=\"pl-s\">'0'</span> && <span class=\"pl-s1\">c</span> <= <span class=\"pl-s\">'9'</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L316\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"316\"></td>\n          <td id=\"LC316\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                     <span class=\"pl-k\">try</span> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L317\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"317\"></td>\n          <td id=\"LC317\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">index</span> = <span class=\"pl-smi\">Integer</span>.<span class=\"pl-en\">parseInt</span>(<span class=\"pl-s1\">name</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L318\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"318\"></td>\n          <td id=\"LC318\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">ctxt</span>.<span class=\"pl-en\">isEnabled</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">ALLOW_COERCION_OF_SCALARS</span>)) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L319\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"319\"></td>\n          <td id=\"LC319\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                             <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctxt</span>.<span class=\"pl-en\">handleWeirdStringValue</span>(<span class=\"pl-en\">_enumClass</span>(), <span class=\"pl-s1\">name</span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L320\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"320\"></td>\n          <td id=\"LC320\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-s\">\"value looks like quoted Enum index, but `MapperFeature.ALLOW_COERCION_OF_SCALARS` prevents use\"</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L321\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"321\"></td>\n          <td id=\"LC321\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                                     ); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L322\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"322\"></td>\n          <td id=\"LC322\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L323\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"323\"></td>\n          <td id=\"LC323\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">index</span> >= <span class=\"pl-c1\">0</span> && <span class=\"pl-s1\">index</span> < <span class=\"pl-s1\">_enumsByIndex</span>.<span class=\"pl-s1\">length</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L324\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"324\"></td>\n          <td id=\"LC324\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                             <span class=\"pl-k\">return</span> <span class=\"pl-s1\">_enumsByIndex</span>[<span class=\"pl-s1\">index</span>]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L325\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"325\"></td>\n          <td id=\"LC325\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L326\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"326\"></td>\n          <td id=\"LC326\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                     } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">NumberFormatException</span> <span class=\"pl-s1\">e</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L327\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"327\"></td>\n          <td id=\"LC327\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         <span class=\"pl-c\">// fine, ignore, was not an integer</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L328\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"328\"></td>\n          <td id=\"LC328\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                     } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L329\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"329\"></td>\n          <td id=\"LC329\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L330\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"330\"></td>\n          <td id=\"LC330\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">             } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">Not sure if this is by-design or if there is a historical precedent that lead to this, but I don't see why the deserialization process couldn't rely on attempting the number-based parsing in the case where <code class=\"notranslate\">_caseInsensitive</code> is true and the subsequent lookup failed to return any results.</p>",
  "description_text": "Not sure if this should be filed as a bug or a feature request, since the \"expected\" behavior is mostly left to interpretation, but I went with a bug report in the end. Let me know if that makes sense.\nDescribe the bug\nDeserializing an enum field that is marked for case-insensitive deserialization does not work if the source value happens to be shaped as the string representation of a number, whereas the same value will be deserialized properly if case-insensitive deserialization is disabled.\nVersion information\n2.12.4\nTo Reproduce\nIf you have a way to reproduce this with:\nenum MyEnum {\n    FIRST_MEMBER(0),\n    SECOND_MEMBER(1);\n    \n    private int index;\n\n    private MyEnum(int index) {\n        this.index = index;\n    }\n}\nACCEPT_CASE_INSENSITIVE_PROPERTIES: disabled\nclass MyClass {\n    public MyEnum enumValue;\n}\n\nACCEPT_CASE_INSENSITIVE_PROPERTIES: enabled\nclass MyClass {\n    @JsonFormat(with = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)\n    public MyEnum enumValue;\n}\n\n\n\n\n\nJson input\nACCEPT_CASE_INSENSITIVE_PROPERTIES: disabled\nACCEPT_CASE_INSENSITIVE_PROPERTIES: enabled\n\n\n\n\n{ \"enumValue\": \"FIRST_MEMBER\" }\n\u2705\n\u2705\n\n\n{ \"enumValue\": \"first_member\" }\n\u274c\n\u2705\n\n\n{ \"enumValue\": 0 }\n\u2705\n\u2705\n\n\n{ \"enumValue\": \"0\" }\n\u2705\n\u274c \ud83d\udc48\n\n\n\nBoth failures (\u274c) are the same:\ncom.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `MyClass` from String  not one of the values accepted for Enum class: ...\n\nExpected behavior\nI would expect the case annotated with \ud83d\udc48 in the table above to successfully deserialize the value. It seems as if the reason why this is not the case for now is that the conditional branches branches that handle the case-insensitive parsing and the number-based enum parsing are mutually exclusive:\n\n\n\njackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n\n\n        Lines 306 to 330\n      in\n      f5a84a5\n\n\n\n\n\n\n // [databind#1313]: Case insensitive enum deserialization \n\n\n\n if (Boolean.TRUE.equals(_caseInsensitive)) { \n\n\n\n Object match = lookup.findCaseInsensitive(name); \n\n\n\n if (match != null) { \n\n\n\n return match; \n\n\n\n                 } \n\n\n\n             } else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { \n\n\n\n // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above) \n\n\n\n char c = name.charAt(0); \n\n\n\n if (c >= '0' && c <= '9') { \n\n\n\n try { \n\n\n\n int index = Integer.parseInt(name); \n\n\n\n if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) { \n\n\n\n return ctxt.handleWeirdStringValue(_enumClass(), name, \n\n\n\n \"value looks like quoted Enum index, but `MapperFeature.ALLOW_COERCION_OF_SCALARS` prevents use\" \n\n\n\n                                     ); \n\n\n\n                         } \n\n\n\n if (index >= 0 && index < _enumsByIndex.length) { \n\n\n\n return _enumsByIndex[index]; \n\n\n\n                         } \n\n\n\n                     } catch (NumberFormatException e) { \n\n\n\n // fine, ignore, was not an integer \n\n\n\n                     } \n\n\n\n                 } \n\n\n\n             } \n\n\n\n\n\nNot sure if this is by-design or if there is a historical precedent that lead to this, but I don't see why the deserialization process couldn't rely on attempting the number-based parsing in the case where _caseInsensitive is true and the subsequent lookup failed to return any results."
}