{
  "issue_id": 3566,
  "issue_url": "https://github.com/FasterXML/jackson-databind/issues/3566",
  "title": "Cannot use both `JsonCreator.Mode.DELEGATING` and `JsonCreator.Mode.PROPERTIES` static creator factory methods for Enums",
  "description": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nWhen Enum has two factory methods, one with <code class=\"notranslate\">JsonCreator.Mode.DELEGATING</code> and the other with <code class=\"notranslate\">JsonCreator.Mode.PROPERTIES</code>, only the latter works. Deserialization that is supposed to target the DELEGATING one fails with <code class=\"notranslate\">com.fasterxml.jackson.databind.exc.MismatchedInputException</code>.<br>\nNote that the same setup for a POJO works just fine.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n2.13.3</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class TestCases {\n    @Test\n    void testClass() throws JsonProcessingException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        Assertions.assertEquals(new AClass(\"someName\"), objectMapper.readValue(\"{ \\\"name\\\": \\\"someName\\\" }\", AClass.class));\n        Assertions.assertEquals(new AClass(\"someName\"), objectMapper.readValue(\"\\\"someName\\\"\", AClass.class));\n    }\n\n    @Test\n    void testEnum() throws JsonProcessingException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        Assertions.assertEquals(AEnum.A, objectMapper.readValue(\"{ \\\"type\\\": \\\"AType\\\" }\", AEnum.class));\n        Assertions.assertEquals(AEnum.A, objectMapper.readValue(\"\\\"AType\\\"\", AEnum.class)); // this line fails\n    }\n}\n\nclass AClass {\n    private final String name;\n\n    AClass(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n    public static AClass fromString(String name) {\n        return new AClass(name);\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n    public static AClass create(@JsonProperty(\"name\") String name) {\n        return new AClass(name);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        AClass aClass = (AClass) o;\n        return Objects.equals(name, aClass.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name);\n    }\n}\n\n@JsonFormat(shape = JsonFormat.Shape.OBJECT)\nenum AEnum {\n    A(\"AType\"),\n    B(\"BType\");\n\n    private final String type;\n\n    AEnum(String type) {\n        this.type = type;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n    public static AEnum fromString(String type) {\n        return Arrays.stream(values())\n                .filter(aEnum -> aEnum.type.equals(type))\n                .findFirst()\n                .orElseThrow();\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n    public static AEnum create(@JsonProperty(\"type\") String type) {\n        return fromString(type);\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestCases</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testClass</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">AClass</span>(<span class=\"pl-s\">\"someName\"</span>), <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{ <span class=\"pl-cce\">\\\"</span>name<span class=\"pl-cce\">\\\"</span>: <span class=\"pl-cce\">\\\"</span>someName<span class=\"pl-cce\">\\\"</span> }\"</span>, <span class=\"pl-smi\">AClass</span>.<span class=\"pl-k\">class</span>));\n        <span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">AClass</span>(<span class=\"pl-s\">\"someName\"</span>), <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\\"</span>someName<span class=\"pl-cce\">\\\"</span>\"</span>, <span class=\"pl-smi\">AClass</span>.<span class=\"pl-k\">class</span>));\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testEnum</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-smi\">AEnum</span>.<span class=\"pl-s1\">A</span>, <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{ <span class=\"pl-cce\">\\\"</span>type<span class=\"pl-cce\">\\\"</span>: <span class=\"pl-cce\">\\\"</span>AType<span class=\"pl-cce\">\\\"</span> }\"</span>, <span class=\"pl-smi\">AEnum</span>.<span class=\"pl-k\">class</span>));\n        <span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-smi\">AEnum</span>.<span class=\"pl-s1\">A</span>, <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\\"</span>AType<span class=\"pl-cce\">\\\"</span>\"</span>, <span class=\"pl-smi\">AEnum</span>.<span class=\"pl-k\">class</span>)); <span class=\"pl-c\">// this line fails</span>\n    }\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">AClass</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>;\n\n    <span class=\"pl-smi\">AClass</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">name</span> = <span class=\"pl-s1\">name</span>;\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getName</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">name</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>(<span class=\"pl-s1\">mode</span> = <span class=\"pl-smi\">JsonCreator</span>.<span class=\"pl-s1\">Mode</span>.<span class=\"pl-c1\">DELEGATING</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AClass</span> <span class=\"pl-en\">fromString</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AClass</span>(<span class=\"pl-s1\">name</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>(<span class=\"pl-s1\">mode</span> = <span class=\"pl-smi\">JsonCreator</span>.<span class=\"pl-s1\">Mode</span>.<span class=\"pl-c1\">PROPERTIES</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AClass</span> <span class=\"pl-en\">create</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"name\"</span>) <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AClass</span>(<span class=\"pl-s1\">name</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">o</span>) {\n        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">this</span> == <span class=\"pl-s1\">o</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-en\">getClass</span>() != <span class=\"pl-s1\">o</span>.<span class=\"pl-en\">getClass</span>()) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n        <span class=\"pl-smi\">AClass</span> <span class=\"pl-s1\">aClass</span> = (<span class=\"pl-smi\">AClass</span>) <span class=\"pl-s1\">o</span>;\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">name</span>, <span class=\"pl-s1\">aClass</span>.<span class=\"pl-s1\">name</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">hashCode</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span>.<span class=\"pl-en\">hash</span>(<span class=\"pl-s1\">name</span>);\n    }\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonFormat</span>(<span class=\"pl-s1\">shape</span> = <span class=\"pl-smi\">JsonFormat</span>.<span class=\"pl-s1\">Shape</span>.<span class=\"pl-c1\">OBJECT</span>)\n<span class=\"pl-k\">enum</span> <span class=\"pl-smi\">AEnum</span> {\n    <span class=\"pl-s1\">A</span>(<span class=\"pl-s\">\"AType\"</span>),\n    <span class=\"pl-s1\">B</span>(<span class=\"pl-s\">\"BType\"</span>);\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>;\n\n    <span class=\"pl-smi\">AEnum</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">type</span> = <span class=\"pl-s1\">type</span>;\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getType</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">type</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>(<span class=\"pl-s1\">mode</span> = <span class=\"pl-smi\">JsonCreator</span>.<span class=\"pl-s1\">Mode</span>.<span class=\"pl-c1\">DELEGATING</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AEnum</span> <span class=\"pl-en\">fromString</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Arrays</span>.<span class=\"pl-en\">stream</span>(<span class=\"pl-en\">values</span>())\n                .<span class=\"pl-en\">filter</span>(<span class=\"pl-s1\">aEnum</span> -> <span class=\"pl-s1\">aEnum</span>.<span class=\"pl-s1\">type</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">type</span>))\n                .<span class=\"pl-en\">findFirst</span>()\n                .<span class=\"pl-en\">orElseThrow</span>();\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>(<span class=\"pl-s1\">mode</span> = <span class=\"pl-smi\">JsonCreator</span>.<span class=\"pl-s1\">Mode</span>.<span class=\"pl-c1\">PROPERTIES</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AEnum</span> <span class=\"pl-en\">create</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"type\"</span>) <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">fromString</span>(<span class=\"pl-s1\">type</span>);\n    }\n}</pre></div>\n<p dir=\"auto\">The <code class=\"notranslate\">testClass</code> passes, but <code class=\"notranslate\">testEnum</code> fails with</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.exc.MismatchedInputException: Input mismatch reading Enum `AEnum`: properties-based `@JsonCreator` ([method AEnum#fromString(java.lang.String)]) expects JSON Object (JsonToken.START_OBJECT), got JsonToken.VALUE_STRING\"><pre class=\"notranslate\"><code class=\"notranslate\">com.fasterxml.jackson.databind.exc.MismatchedInputException: Input mismatch reading Enum `AEnum`: properties-based `@JsonCreator` ([method AEnum#fromString(java.lang.String)]) expects JSON Object (JsonToken.START_OBJECT), got JsonToken.VALUE_STRING\n</code></pre></div>\n<p dir=\"auto\">Also, you can remove the PROPERTIES factory method, and the DELEGATING method would work.</p>",
  "description_text": "Describe the bug\nWhen Enum has two factory methods, one with JsonCreator.Mode.DELEGATING and the other with JsonCreator.Mode.PROPERTIES, only the latter works. Deserialization that is supposed to target the DELEGATING one fails with com.fasterxml.jackson.databind.exc.MismatchedInputException.\nNote that the same setup for a POJO works just fine.\nVersion information\n2.13.3\nTo Reproduce\n aEnum.type.equals(type))\n                .findFirst()\n                .orElseThrow();\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n    public static AEnum create(@JsonProperty(\"type\") String type) {\n        return fromString(type);\n    }\n}\">class TestCases {\n    @Test\n    void testClass() throws JsonProcessingException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        Assertions.assertEquals(new AClass(\"someName\"), objectMapper.readValue(\"{ \\\"name\\\": \\\"someName\\\" }\", AClass.class));\n        Assertions.assertEquals(new AClass(\"someName\"), objectMapper.readValue(\"\\\"someName\\\"\", AClass.class));\n    }\n\n    @Test\n    void testEnum() throws JsonProcessingException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        Assertions.assertEquals(AEnum.A, objectMapper.readValue(\"{ \\\"type\\\": \\\"AType\\\" }\", AEnum.class));\n        Assertions.assertEquals(AEnum.A, objectMapper.readValue(\"\\\"AType\\\"\", AEnum.class)); // this line fails\n    }\n}\n\nclass AClass {\n    private final String name;\n\n    AClass(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n    public static AClass fromString(String name) {\n        return new AClass(name);\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n    public static AClass create(@JsonProperty(\"name\") String name) {\n        return new AClass(name);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        AClass aClass = (AClass) o;\n        return Objects.equals(name, aClass.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name);\n    }\n}\n\n@JsonFormat(shape = JsonFormat.Shape.OBJECT)\nenum AEnum {\n    A(\"AType\"),\n    B(\"BType\");\n\n    private final String type;\n\n    AEnum(String type) {\n        this.type = type;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n    public static AEnum fromString(String type) {\n        return Arrays.stream(values())\n                .filter(aEnum -> aEnum.type.equals(type))\n                .findFirst()\n                .orElseThrow();\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n    public static AEnum create(@JsonProperty(\"type\") String type) {\n        return fromString(type);\n    }\n}\nThe testClass passes, but testEnum fails with\ncom.fasterxml.jackson.databind.exc.MismatchedInputException: Input mismatch reading Enum `AEnum`: properties-based `@JsonCreator` ([method AEnum#fromString(java.lang.String)]) expects JSON Object (JsonToken.START_OBJECT), got JsonToken.VALUE_STRING\n\nAlso, you can remove the PROPERTIES factory method, and the DELEGATING method would work."
}