{
  "issue_id": 2401,
  "issue_url": "https://github.com/google/gson/issues/2401",
  "title": "Improve default ProGuard / R8 rules and Troubleshooting Guide",
  "description": "<h1 dir=\"auto\">Problem solved by the feature</h1>\n<p dir=\"auto\">Improve the default ProGuard / R8 rules in <code class=\"notranslate\">META-INF/proguard/gson.pro</code> added by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1728382175\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2397\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/2397/hovercard\" href=\"https://github.com/google/gson/pull/2397\">#2397</a>, and the Troubleshooting Guide.</p>\n<h1 dir=\"auto\">Feature description</h1>\n<p dir=\"auto\">I was testing the new default rules with an Android app and Kotlin classes, and there might be the following areas to improve.</p>\n<h3 dir=\"auto\">Troubleshooting Guide: <code class=\"notranslate\">JsonIOException</code>: 'Abstract classes can't be instantiated!' (R8)</h3>\n<p dir=\"auto\">The Troubleshooting Guide currently suggests the following:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# Keep the no-args constructor of the deserialized class\n-keepclassmembers class com.example.MyClass {\n  <init>();\n}\"><pre class=\"notranslate\"><code class=\"notranslate\"># Keep the no-args constructor of the deserialized class\n-keepclassmembers class com.example.MyClass {\n  <init>();\n}\n</code></pre></div>\n<p dir=\"auto\">This means only the no-args constructor is kept, but not any other constructors. However, especially for Kotlin I assume it is common that classes don't have a no-args constructor because you might declare properties and the primary constructor at once, e.g. <code class=\"notranslate\">class MyClass(val s: String)</code> (see <a href=\"https://kotlinlang.org/docs/classes.html#constructors\" rel=\"nofollow\">Kotlin documentation</a>). Not sure though if using that is a good idea in combination with Gson because it then requires JDK Unsafe to create instances, but that is a different topic.</p>\n<p dir=\"auto\">So there are two questions:</p>\n<ul dir=\"auto\">\n<li>Should the Troubleshooting Guide rather recommend <code class=\"notranslate\"><init>(...);</code> (all constructors), so that the users don't experience issues with R8 anymore (but implicitly depend on JDK Unsafe; using <code class=\"notranslate\">GsonBuilder.disableJdkUnsafe()</code> would cause Gson to fail with a different exception)</li>\n<li>Should the Troubleshooting Guide recommend <code class=\"notranslate\">-keep</code> instead of <code class=\"notranslate\">-keepclassmembers</code>. In case the <code class=\"notranslate\"><init></code> rule for the class properly matches a constructor it might not matter. But in case <code class=\"notranslate\"><init>();</code> is used, but a no-args constructor does not exist, then <code class=\"notranslate\">-keep</code> seems to at least have the side-effect that R8 does not make the class abstract (and then using JDK Unsafe an instance can be created).</li>\n</ul>\n<h3 dir=\"auto\">Troubleshooting Guide: Recommend <code class=\"notranslate\">@Keep</code> for Android</h3>\n<p dir=\"auto\">Instead of configuring ProGuard / R8 rules, it might be easier for Android developers to use <code class=\"notranslate\">@Keep</code> on the corresponding class or constructor, see <a href=\"https://developer.android.com/studio/write/annotations#keep\" rel=\"nofollow\">https://developer.android.com/studio/write/annotations#keep</a></p>\n<h3 dir=\"auto\">Preventing R8 from making classes abstract / removing no-args constructor</h3>\n<p dir=\"auto\">It would be good if we could adjust the default rules to avoid the \"Abstract classes can't be instantiated!\" exception (for most cases) in the first place.</p>\n<p dir=\"auto\">There is probably no general way to detect if a class might be used with Gson, but the most reliable variant might be to keep the constructor if any of the Gson annotations is used by a class.</p>\n<p dir=\"auto\">This can probably be achieved with an <a href=\"https://www.guardsquare.com/manual/configuration/usage#if\" rel=\"nofollow\"><code class=\"notranslate\">-if</code> rule</a> (see also <a href=\"https://stackoverflow.com/q/63162818\" rel=\"nofollow\">answers to this Stack Overflow question</a>). For example:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# If class has fields with `@SerializedName` annotation keep its constructors\n-if class * {\n  @com.google.gson.annotations.SerializedName <fields>;\n}\n-keep class <1> {\n  <init>(...);\n}\"><pre class=\"notranslate\"><code class=\"notranslate\"># If class has fields with `@SerializedName` annotation keep its constructors\n-if class * {\n  @com.google.gson.annotations.SerializedName <fields>;\n}\n-keep class <1> {\n  <init>(...);\n}\n</code></pre></div>\n<p dir=\"auto\">(duplicated for all Gson annotations)</p>\n<p dir=\"auto\">But it looks like this is not enough, maybe because there is no <code class=\"notranslate\">-keep</code> (or <code class=\"notranslate\">-keepclasseswithmembers</code>) rule for the class in the first place so <code class=\"notranslate\">-if</code> somehow has no effect? You additionally need the following (duplicated for all Gson annotations probably):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"-keepclasseswithmembers class * {\n  @com.google.gson.annotations.SerializedName <fields>;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">-keepclasseswithmembers class * {\n  @com.google.gson.annotations.SerializedName <fields>;\n}\n</code></pre></div>\n<p dir=\"auto\">Only then the class is not made abstract and the constructor is properly kept...</p>\n<p dir=\"auto\">(As side note: Having only the <code class=\"notranslate\">-keepclasseswithmembers ... { @SerializedName }</code> above, but not the <code class=\"notranslate\">-if ... -keep</code> seems to prevent R8 from making the class abstract, but still removes all constructors, so users would be dependent on JDK Unsafe then.)</p>\n<p dir=\"auto\">Or similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1681170799\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2379\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/2379/hovercard?comment_id=1564517629&comment_type=issue_comment\" href=\"https://github.com/google/gson/issues/2379#issuecomment-1564517629\">#2379 (comment)</a> maybe the following would work as well:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"-keepclasseswithmembers class * {\n  <init>(...);\n  @com.google.gson.annotations.SerializedName <fields>;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">-keepclasseswithmembers class * {\n  <init>(...);\n  @com.google.gson.annotations.SerializedName <fields>;\n}\n</code></pre></div>\n<p dir=\"auto\">There is however probably no need for the <code class=\"notranslate\">-if</code> rule shown in the original comment, unless that has some special effect, see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1728382175\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2397\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/2397/hovercard?comment_id=1575236086&comment_type=issue_comment\" href=\"https://github.com/google/gson/pull/2397#issuecomment-1575236086\">#2397 (comment)</a>.</p>\n<h3 dir=\"auto\">R8 makes class abstract but still keeps constructors</h3>\n<p dir=\"auto\">It also looks like the Android app build creates (for some reason) additional constructors / keeps constructors even when the class is made abstract. Due to this, the Troubleshooting Guide URLs are unfortunately not included in the exception messages (they are only added at the moment when there are no constructors).<br>\nNot really sure why these constructors exist in the first place and are kept even when the class is made abstract. In the R8 integration test of Gson this behavior was not seen.</p>\n<p dir=\"auto\">Maybe we should remove the <code class=\"notranslate\">getDeclaredConstructors().length == 0</code> check if the class is abstract and always refer to the Troubleshooting Guide. The guide would have to be adjusted then though to also properly cover the case where the class was indeed abstract in the source code.</p>\n<hr>\n<p dir=\"auto\">Any additional feedback is highly appreciated!</p>",
  "description_text": "Problem solved by the feature\nImprove the default ProGuard / R8 rules in META-INF/proguard/gson.pro added by #2397, and the Troubleshooting Guide.\nFeature description\nI was testing the new default rules with an Android app and Kotlin classes, and there might be the following areas to improve.\nTroubleshooting Guide: JsonIOException: 'Abstract classes can't be instantiated!' (R8)\nThe Troubleshooting Guide currently suggests the following:\n# Keep the no-args constructor of the deserialized class\n-keepclassmembers class com.example.MyClass {\n  ();\n}\n\nThis means only the no-args constructor is kept, but not any other constructors. However, especially for Kotlin I assume it is common that classes don't have a no-args constructor because you might declare properties and the primary constructor at once, e.g. class MyClass(val s: String) (see Kotlin documentation). Not sure though if using that is a good idea in combination with Gson because it then requires JDK Unsafe to create instances, but that is a different topic.\nSo there are two questions:\n\nShould the Troubleshooting Guide rather recommend (...); (all constructors), so that the users don't experience issues with R8 anymore (but implicitly depend on JDK Unsafe; using GsonBuilder.disableJdkUnsafe() would cause Gson to fail with a different exception)\nShould the Troubleshooting Guide recommend -keep instead of -keepclassmembers. In case the  rule for the class properly matches a constructor it might not matter. But in case (); is used, but a no-args constructor does not exist, then -keep seems to at least have the side-effect that R8 does not make the class abstract (and then using JDK Unsafe an instance can be created).\n\nTroubleshooting Guide: Recommend @Keep for Android\nInstead of configuring ProGuard / R8 rules, it might be easier for Android developers to use @Keep on the corresponding class or constructor, see https://developer.android.com/studio/write/annotations#keep\nPreventing R8 from making classes abstract / removing no-args constructor\nIt would be good if we could adjust the default rules to avoid the \"Abstract classes can't be instantiated!\" exception (for most cases) in the first place.\nThere is probably no general way to detect if a class might be used with Gson, but the most reliable variant might be to keep the constructor if any of the Gson annotations is used by a class.\nThis can probably be achieved with an -if rule (see also answers to this Stack Overflow question). For example:\n# If class has fields with `@SerializedName` annotation keep its constructors\n-if class * {\n  @com.google.gson.annotations.SerializedName ;\n}\n-keep class <1> {\n  (...);\n}\n\n(duplicated for all Gson annotations)\nBut it looks like this is not enough, maybe because there is no -keep (or -keepclasseswithmembers) rule for the class in the first place so -if somehow has no effect? You additionally need the following (duplicated for all Gson annotations probably):\n-keepclasseswithmembers class * {\n  @com.google.gson.annotations.SerializedName ;\n}\n\nOnly then the class is not made abstract and the constructor is properly kept...\n(As side note: Having only the -keepclasseswithmembers ... { @SerializedName } above, but not the -if ... -keep seems to prevent R8 from making the class abstract, but still removes all constructors, so users would be dependent on JDK Unsafe then.)\nOr similar to #2379 (comment) maybe the following would work as well:\n-keepclasseswithmembers class * {\n  (...);\n  @com.google.gson.annotations.SerializedName ;\n}\n\nThere is however probably no need for the -if rule shown in the original comment, unless that has some special effect, see #2397 (comment).\nR8 makes class abstract but still keeps constructors\nIt also looks like the Android app build creates (for some reason) additional constructors / keeps constructors even when the class is made abstract. Due to this, the Troubleshooting Guide URLs are unfortunately not included in the exception messages (they are only added at the moment when there are no constructors).\nNot really sure why these constructors exist in the first place and are kept even when the class is made abstract. In the R8 integration test of Gson this behavior was not seen.\nMaybe we should remove the getDeclaredConstructors().length == 0 check if the class is abstract and always refer to the Troubleshooting Guide. The guide would have to be adjusted then though to also properly cover the case where the class was indeed abstract in the source code.\n\nAny additional feedback is highly appreciated!"
}