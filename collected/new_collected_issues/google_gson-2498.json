{
  "issue_id": 1510,
  "issue_url": "https://github.com/google/gson/issues/1510",
  "title": "Allow serialization of anonymous classes",
  "description": "<p dir=\"auto\"><strong>Describe the feature</strong><br>\nGson should allow <em>serialization</em> of anonymous classes, the reason is that the user shouldn't care about the implementation of the code that generates the objects they are using.</p>\n<p dir=\"auto\">For example, this code that only uses Guava and Gson looks fine and users may expect it to print <code class=\"notranslate\">[\"a\", \"b\"]</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        System.out.println(gson.toJsonTree(Sets.union(\n                ImmutableSet.of(\"a\"),\n                ImmutableSet.of(\"b\"))));\"><pre class=\"notranslate\"><code class=\"notranslate\">        System.out.println(gson.toJsonTree(Sets.union(\n                ImmutableSet.of(\"a\"),\n                ImmutableSet.of(\"b\"))));\n</code></pre></div>\n<p dir=\"auto\">But actually, that code prints <code class=\"notranslate\">null</code>, totally unexpected to a user that is not familiar with the implementation of <code class=\"notranslate\">Sets.union</code> (that function returns an instance of an anonymous class).</p>\n<p dir=\"auto\"><strong>Additional context</strong></p>\n<p dir=\"auto\">I think this feature is well deserved because of the amount of confusion that has been around the lack of it. If we do a Google search we find several people who were caught by this issue:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"63058598\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/298\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/298/hovercard\" href=\"https://github.com/google/gson/issues/298\">#298</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"124290731\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/762\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/762/hovercard\" href=\"https://github.com/google/gson/issues/762\">#762</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"340611390\" data-permission-text=\"Title is private\" data-url=\"https://github.com/javalin/javalin/issues/288\" data-hovercard-type=\"issue\" data-hovercard-url=\"/javalin/javalin/issues/288/hovercard\" href=\"https://github.com/javalin/javalin/issues/288\">javalin/javalin#288</a></li>\n<li><a href=\"https://stackoverflow.com/questions/10746278/serializing-anonymous-classes-with-gson\" rel=\"nofollow\">https://stackoverflow.com/questions/10746278/serializing-anonymous-classes-with-gson</a></li>\n<li><a href=\"https://stackoverflow.com/questions/26791752/convert-anonymous-java-object-types-to-json-using-gson\" rel=\"nofollow\">https://stackoverflow.com/questions/26791752/convert-anonymous-java-object-types-to-json-using-gson</a></li>\n<li><a href=\"https://stackoverflow.com/questions/55622921/custom-gson-serializer-for-anonymous-classes\" rel=\"nofollow\">https://stackoverflow.com/questions/55622921/custom-gson-serializer-for-anonymous-classes</a></li>\n</ul>\n<p dir=\"auto\">And the list goes on and on.</p>\n<p dir=\"auto\">I think what aggravates the lack of this feature it he way Gson silently serializes those instances to <code class=\"notranslate\">null</code>, which is a source of silent bugs.</p>\n<p dir=\"auto\"><strong>NOTE:</strong><br>\n<em>Deserialization</em> of anonymous inner classes is problematic, I'm not asking for that to be supported. This feature request deals only with serialization.</p>\n<p dir=\"auto\"><strong>Possible workarounds</strong></p>\n<p dir=\"auto\">I've seen suggested workarounds like:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"gson.toJsonTree(union, TypeToken<Set<String>>(){}.getType());.\"><pre class=\"notranslate\"><code class=\"notranslate\">gson.toJsonTree(union, TypeToken<Set<String>>(){}.getType());.\n</code></pre></div>\n<p dir=\"auto\">But notice that only works in the most simple of cases, but it doesn't work in cases where we have a Map with values of different anonymous classes:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ImmutableMap.of(\n    \"key1\", Sets.union(...),\n    \"key2\", new HashSet(){},\n    \"key3\", new MyRecord(){}\n);\"><pre class=\"notranslate\"><code class=\"notranslate\">ImmutableMap.of(\n    \"key1\", Sets.union(...),\n    \"key2\", new HashSet(){},\n    \"key3\", new MyRecord(){}\n);\n</code></pre></div>\n<p dir=\"auto\">As there is not a single TokenType I can accommodate for that disparity of values and that will behave as expected. Moreover, sometimes the values are not known at compile time (in designing APIs, the values can be anything the user passes to us, and its out of our control).</p>",
  "description_text": "Describe the feature\nGson should allow serialization of anonymous classes, the reason is that the user shouldn't care about the implementation of the code that generates the objects they are using.\nFor example, this code that only uses Guava and Gson looks fine and users may expect it to print [\"a\", \"b\"]:\n        System.out.println(gson.toJsonTree(Sets.union(\n                ImmutableSet.of(\"a\"),\n                ImmutableSet.of(\"b\"))));\n\nBut actually, that code prints null, totally unexpected to a user that is not familiar with the implementation of Sets.union (that function returns an instance of an anonymous class).\nAdditional context\nI think this feature is well deserved because of the amount of confusion that has been around the lack of it. If we do a Google search we find several people who were caught by this issue:\n\n#298\n#762\njavalin/javalin#288\nhttps://stackoverflow.com/questions/10746278/serializing-anonymous-classes-with-gson\nhttps://stackoverflow.com/questions/26791752/convert-anonymous-java-object-types-to-json-using-gson\nhttps://stackoverflow.com/questions/55622921/custom-gson-serializer-for-anonymous-classes\n\nAnd the list goes on and on.\nI think what aggravates the lack of this feature it he way Gson silently serializes those instances to null, which is a source of silent bugs.\nNOTE:\nDeserialization of anonymous inner classes is problematic, I'm not asking for that to be supported. This feature request deals only with serialization.\nPossible workarounds\nI've seen suggested workarounds like:\ngson.toJsonTree(union, TypeToken>(){}.getType());.\n\nBut notice that only works in the most simple of cases, but it doesn't work in cases where we have a Map with values of different anonymous classes:\nImmutableMap.of(\n    \"key1\", Sets.union(...),\n    \"key2\", new HashSet(){},\n    \"key3\", new MyRecord(){}\n);\n\nAs there is not a single TokenType I can accommodate for that disparity of values and that will behave as expected. Moreover, sometimes the values are not known at compile time (in designing APIs, the values can be anything the user passes to us, and its out of our control)."
}