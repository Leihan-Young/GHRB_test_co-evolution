{
  "issue_id": 3248,
  "issue_url": "https://github.com/assertj/assertj/issues/3248",
  "title": "Suggesting a doesNotThrowAnyExceptionExcept(...) method",
  "description": "<h4 dir=\"auto\">Feature summary</h4>\n<p dir=\"auto\">As discussed in <a href=\"https://github.com/assertj/assertj/issues/2517#issuecomment-1788856623\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2517/hovercard\">another issue</a>, here is the suggestion to support being able to ignore certain exceptions when not expecting exceptions.</p>\n<p dir=\"auto\">It would be similar to what can be done with the <a href=\"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/support/ui/FluentWait.html\" rel=\"nofollow\">Selenium API</a>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"   // Waiting 30 seconds for an element to be present on the page, checking\n   // for its presence once every 5 seconds.\n   Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n       .withTimeout(Duration.ofSeconds(30L))\n       .pollingEvery(Duration.ofSeconds(5L))\n       .ignoring(NoSuchElementException.class);\"><pre class=\"notranslate\">   <span class=\"pl-c\">// Waiting 30 seconds for an element to be present on the page, checking</span>\n   <span class=\"pl-c\">// for its presence once every 5 seconds.</span>\n   <span class=\"pl-smi\">Wait</span><<span class=\"pl-smi\">WebDriver</span>> <span class=\"pl-s1\">wait</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FluentWait</span><<span class=\"pl-smi\">WebDriver</span>>(<span class=\"pl-s1\">driver</span>)\n       .<span class=\"pl-en\">withTimeout</span>(<span class=\"pl-smi\">Duration</span>.<span class=\"pl-en\">ofSeconds</span>(<span class=\"pl-c1\">30L</span>))\n       .<span class=\"pl-en\">pollingEvery</span>(<span class=\"pl-smi\">Duration</span>.<span class=\"pl-en\">ofSeconds</span>(<span class=\"pl-c1\">5L</span>))\n       .<span class=\"pl-en\">ignoring</span>(<span class=\"pl-smi\">NoSuchElementException</span>.<span class=\"pl-k\">class</span>);</pre></div>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">That is how it can look in AssertJ:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"assertThatCode(() -> { thisFunctionDoesNothing(); })\n                .doesNotThrowAnyExceptionExcept(NoSuchElementException.class, IOException.class);\"><pre class=\"notranslate\"><span class=\"pl-en\">assertThatCode</span>(() -> { <span class=\"pl-en\">thisFunctionDoesNothing</span>(); })\n                .<span class=\"pl-en\">doesNotThrowAnyExceptionExcept</span>(<span class=\"pl-smi\">NoSuchElementException</span>.<span class=\"pl-k\">class</span>, <span class=\"pl-smi\">IOException</span>.<span class=\"pl-k\">class</span>);</pre></div>",
  "description_text": "Feature summary\nAs discussed in another issue, here is the suggestion to support being able to ignore certain exceptions when not expecting exceptions.\nIt would be similar to what can be done with the Selenium API:\n   // Waiting 30 seconds for an element to be present on the page, checking\n   // for its presence once every 5 seconds.\n   Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n       .withTimeout(Duration.ofSeconds(30L))\n       .pollingEvery(Duration.ofSeconds(5L))\n       .ignoring(NoSuchElementException.class);\nExample\nThat is how it can look in AssertJ:\nassertThatCode(() -> { thisFunctionDoesNothing(); })\n                .doesNotThrowAnyExceptionExcept(NoSuchElementException.class, IOException.class);"
}