{
  "issue_id": 882,
  "issue_url": "https://github.com/FasterXML/jackson-core/issues/882",
  "title": "Allow TokenFIlter to skip last elements in arrays",
  "description": "<p dir=\"auto\">When the last element in array is an array or object and that element is skipped, the <code class=\"notranslate\">FilteringParserDelegate</code> will end up in a loop from which it cannot exit. This means that the rest of the input will be skipped too. This results in incorrect JSON.</p>\n<p dir=\"auto\">This behaviour exists since 2.9+<br>\nI believe this is due to <a class=\"commit-link\" href=\"https://github.com/FasterXML/jackson-core/commit/7db467ddec7c2899038249b55695b7e44c7b5c3e#diff-f6642caef61e0c403f51a6150ecf45263034fca5002782fd02eacd01e53fe549L694\"><tt>7db467d</tt>#diff-f6642caef61e0c403f51a6150ecf45263034fca5002782fd02eacd01e53fe549L694</a> where the <code class=\"notranslate\">if (gotEnd)</code> conditions where removed.<br>\nI think this should be added as currently the logic is:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\"><pre class=\"notranslate\"><code class=\"notranslate\"> boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n</code></pre></div>\n<p dir=\"auto\">and that means that it can only exit when <code class=\"notranslate\">_headContext.isStartHandled()</code> is true. For skipped elements this is false.</p>\n<p dir=\"auto\">This can be easily reproduced with this testcase</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" @Test\n    public void testCustomIncludesWithMultipleObjectsInArrayMissLast() throws Exception {\n        var factory = new JsonFactory();\n        var baseParser = factory.createParser(\"{\\\"foo\\\":[{\\\"bar\\\":\\\"baz\\\"},{\\\"bing\\\":\\\"boom\\\"}]}\");\n        var filteredParser = getFilteredParser(baseParser, filter(\"foo\", \"bar\"));\n        var writer = new StringWriter();\n        var generator = factory.createGenerator(writer);\n        Assertions.assertTrue(filteredParser.nextToken().isStructStart());\n        generator.copyCurrentStructure(filteredParser);\n        generator.flush();\n        Assertions.assertEquals(\"{\\\"foo\\\":[{\\\"bar\\\":\\\"baz\\\"}]}\", writer.toString());\n        //Expected :{\"foo\":[{\"bar\":\"baz\"}]}\n        //Actual   :{\"foo\":[{\"bar\":\"baz\"} \n    }\"><pre class=\"notranslate\"><code class=\"notranslate\"> @Test\n    public void testCustomIncludesWithMultipleObjectsInArrayMissLast() throws Exception {\n        var factory = new JsonFactory();\n        var baseParser = factory.createParser(\"{\\\"foo\\\":[{\\\"bar\\\":\\\"baz\\\"},{\\\"bing\\\":\\\"boom\\\"}]}\");\n        var filteredParser = getFilteredParser(baseParser, filter(\"foo\", \"bar\"));\n        var writer = new StringWriter();\n        var generator = factory.createGenerator(writer);\n        Assertions.assertTrue(filteredParser.nextToken().isStructStart());\n        generator.copyCurrentStructure(filteredParser);\n        generator.flush();\n        Assertions.assertEquals(\"{\\\"foo\\\":[{\\\"bar\\\":\\\"baz\\\"}]}\", writer.toString());\n        //Expected :{\"foo\":[{\"bar\":\"baz\"}]}\n        //Actual   :{\"foo\":[{\"bar\":\"baz\"} \n    }\n</code></pre></div>\n<p dir=\"auto\">cc <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/tvernum/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tvernum\">@tvernum</a> who coauthored the fix and the testcases</p>",
  "description_text": "When the last element in array is an array or object and that element is skipped, the FilteringParserDelegate will end up in a loop from which it cannot exit. This means that the rest of the input will be skipped too. This results in incorrect JSON.\nThis behaviour exists since 2.9+\nI believe this is due to 7db467d#diff-f6642caef61e0c403f51a6150ecf45263034fca5002782fd02eacd01e53fe549L694 where the if (gotEnd) conditions where removed.\nI think this should be added as currently the logic is:\n boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n\nand that means that it can only exit when _headContext.isStartHandled() is true. For skipped elements this is false.\nThis can be easily reproduced with this testcase\n @Test\n    public void testCustomIncludesWithMultipleObjectsInArrayMissLast() throws Exception {\n        var factory = new JsonFactory();\n        var baseParser = factory.createParser(\"{\\\"foo\\\":[{\\\"bar\\\":\\\"baz\\\"},{\\\"bing\\\":\\\"boom\\\"}]}\");\n        var filteredParser = getFilteredParser(baseParser, filter(\"foo\", \"bar\"));\n        var writer = new StringWriter();\n        var generator = factory.createGenerator(writer);\n        Assertions.assertTrue(filteredParser.nextToken().isStructStart());\n        generator.copyCurrentStructure(filteredParser);\n        generator.flush();\n        Assertions.assertEquals(\"{\\\"foo\\\":[{\\\"bar\\\":\\\"baz\\\"}]}\", writer.toString());\n        //Expected :{\"foo\":[{\"bar\":\"baz\"}]}\n        //Actual   :{\"foo\":[{\"bar\":\"baz\"} \n    }\n\ncc @tvernum who coauthored the fix and the testcases"
}