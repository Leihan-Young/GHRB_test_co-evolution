{
  "issue_id": 3048,
  "issue_url": "https://github.com/assertj/assertj/issues/3048",
  "title": "`hasNoPackage()` assertion for arrays and primitive types",
  "description": "<p dir=\"auto\"><strong>Describe the bug</strong></p>\n<p dir=\"auto\"><a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Class.html#getPackage()\" rel=\"nofollow\"><code class=\"notranslate\">Class::getPackage</code></a> mentions:</p>\n<blockquote>\n<p dir=\"auto\">If this class represents an array type, a primitive type or void, this method returns <code class=\"notranslate\">null</code>.</p>\n</blockquote>\n<p dir=\"auto\">However, <a href=\"https://www.javadoc.io/doc/org.assertj/assertj-core/latest/org/assertj/core/api/AbstractClassAssert.html#hasPackage(java.lang.Package)\" rel=\"nofollow\"><code class=\"notranslate\">hasPackage(Package)</code></a> does not allow a <code class=\"notranslate\">null</code> parameter.</p>\n<p dir=\"auto\"><strong>Test case reproducing the bug</strong></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"assertThat(int[].class.getPackage()).isNull();  // succeeds\nassertThat(Integer.TYPE.getPackage()).isNull(); // succeeds\nassertThat(Void.TYPE.getPackage()).isNull();    // succeeds\n\nPackage expected = null;\n\nassertThat(int[].class).hasPackage(expected);  // fails with NPE\nassertThat(Integer.TYPE).hasPackage(expected); // fails with NPE\nassertThat(Void.TYPE).hasPackage(expected);    // fails with NPE\"><pre class=\"notranslate\"><span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">int</span>[].<span class=\"pl-k\">class</span>.<span class=\"pl-en\">getPackage</span>()).<span class=\"pl-en\">isNull</span>();  <span class=\"pl-c\">// succeeds</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">Integer</span>.<span class=\"pl-c1\">TYPE</span>.<span class=\"pl-en\">getPackage</span>()).<span class=\"pl-en\">isNull</span>(); <span class=\"pl-c\">// succeeds</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">Void</span>.<span class=\"pl-c1\">TYPE</span>.<span class=\"pl-en\">getPackage</span>()).<span class=\"pl-en\">isNull</span>();    <span class=\"pl-c\">// succeeds</span>\n\n<span class=\"pl-smi\">Package</span> <span class=\"pl-s1\">expected</span> = <span class=\"pl-c1\">null</span>;\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">int</span>[].<span class=\"pl-k\">class</span>).<span class=\"pl-en\">hasPackage</span>(<span class=\"pl-s1\">expected</span>);  <span class=\"pl-c\">// fails with NPE</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">Integer</span>.<span class=\"pl-c1\">TYPE</span>).<span class=\"pl-en\">hasPackage</span>(<span class=\"pl-s1\">expected</span>); <span class=\"pl-c\">// fails with NPE</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">Void</span>.<span class=\"pl-c1\">TYPE</span>).<span class=\"pl-en\">hasPackage</span>(<span class=\"pl-s1\">expected</span>);    <span class=\"pl-c\">// fails with NPE</span></pre></div>",
  "description_text": "Describe the bug\nClass::getPackage mentions:\n\nIf this class represents an array type, a primitive type or void, this method returns null.\n\nHowever, hasPackage(Package) does not allow a null parameter.\nTest case reproducing the bug\nassertThat(int[].class.getPackage()).isNull();  // succeeds\nassertThat(Integer.TYPE.getPackage()).isNull(); // succeeds\nassertThat(Void.TYPE.getPackage()).isNull();    // succeeds\n\nPackage expected = null;\n\nassertThat(int[].class).hasPackage(expected);  // fails with NPE\nassertThat(Integer.TYPE).hasPackage(expected); // fails with NPE\nassertThat(Void.TYPE).hasPackage(expected);    // fails with NPE"
}