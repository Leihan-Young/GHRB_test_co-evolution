{
  "issue_id": 3222,
  "issue_url": "https://github.com/assertj/assertj/issues/3222",
  "title": "`returns` and `doesNotReturn` should invoke `isNotNull` internally",
  "description": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nThe <code class=\"notranslate\">AbstractObjectAssert#returns(...)</code> method should assert that the initial <code class=\"notranslate\">actual</code> value is not <code class=\"notranslate\">null</code>. Instead, it directly applies the <code class=\"notranslate\">from</code> function, which then almost always throws a NullPointerException.</p>\n<p dir=\"auto\">Compatibility consideration:<br>\nWhile one could contrive a scenario where the <code class=\"notranslate\">from</code> function can handle <code class=\"notranslate\">null</code> values (e.g., <code class=\"notranslate\">assertThat((Object)null).returns(true, from(java.util.Objects::isNull))</code>), I cannot think of a real-world use case where any further checks on a <code class=\"notranslate\">null</code> <code class=\"notranslate\">actual</code> value would provide any benefit.</p>\n<ul dir=\"auto\">\n<li>assertj core version: 3.24.2</li>\n<li>java version: 11</li>\n<li>test framework version: -</li>\n<li>os (if relevant): -</li>\n</ul>\n<p dir=\"auto\"><strong>Test case reproducing the bug</strong></p>\n<p dir=\"auto\">The following code should throw an AssertionError instead of a NullPointerException.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"assertThat((Object)null).returns(null, from(Object::toString));\"><pre class=\"notranslate\"><span class=\"pl-en\">assertThat</span>((<span class=\"pl-smi\">Object</span>)<span class=\"pl-c1\">null</span>).<span class=\"pl-en\">returns</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-en\">from</span>(<span class=\"pl-smi\">Object</span>::<span class=\"pl-s1\">toString</span>));</pre></div>",
  "description_text": "Describe the bug\nThe AbstractObjectAssert#returns(...) method should assert that the initial actual value is not null. Instead, it directly applies the from function, which then almost always throws a NullPointerException.\nCompatibility consideration:\nWhile one could contrive a scenario where the from function can handle null values (e.g., assertThat((Object)null).returns(true, from(java.util.Objects::isNull))), I cannot think of a real-world use case where any further checks on a null actual value would provide any benefit.\n\nassertj core version: 3.24.2\njava version: 11\ntest framework version: -\nos (if relevant): -\n\nTest case reproducing the bug\nThe following code should throw an AssertionError instead of a NullPointerException.\nassertThat((Object)null).returns(null, from(Object::toString));"
}