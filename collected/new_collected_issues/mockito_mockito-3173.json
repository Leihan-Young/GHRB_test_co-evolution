{
  "issue_id": 3160,
  "issue_url": "https://github.com/mockito/mockito/issues/3160",
  "title": "Annotation-based spying on a generic class breaks existing final/inline Spies",
  "description": "<p dir=\"auto\">Hello,</p>\n<p dir=\"auto\">I encountered an issue with JUnit5/Mockito when using <code class=\"notranslate\">@Spy</code> annotation with generic types.<br>\nSuch configuration seems to break existing spies of Java <code class=\"notranslate\">record</code> instances (inline mocks). The issue also occurs when using <code class=\"notranslate\">Mockito.spy()</code> directly instead of the <code class=\"notranslate\">@Spy</code> annotation. Example:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@ExtendWith(MockitoExtension.class)\nclass GenericSpyFailingTest {\n\n  // Removing this spy makes the test pass.\n  @Spy\n  private final List<String> genericSpy = List.of(\"item A\", \"item B\");\n\n  @Spy\n  private ExampleRecord exampleRecord = new ExampleRecord(\"some value\");\n\n  @Test\n  void exampleServiceUsesDependency() {\n    // The mocked record has all attributes set to null\n    // despite being explicitly defined.\n    assertNotNull(exampleRecord.someParameter());\n  }\n}\"><pre class=\"notranslate\"><span class=\"pl-c1\">@</span><span class=\"pl-c1\">ExtendWith</span>(<span class=\"pl-smi\">MockitoExtension</span>.<span class=\"pl-k\">class</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">GenericSpyFailingTest</span> {\n\n  <span class=\"pl-c\">// Removing this spy makes the test pass.</span>\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Spy</span>\n  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">genericSpy</span> = <span class=\"pl-smi\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"item A\"</span>, <span class=\"pl-s\">\"item B\"</span>);\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Spy</span>\n  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">ExampleRecord</span> <span class=\"pl-s1\">exampleRecord</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExampleRecord</span>(<span class=\"pl-s\">\"some value\"</span>);\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-smi\">void</span> <span class=\"pl-en\">exampleServiceUsesDependency</span>() {\n    <span class=\"pl-c\">// The mocked record has all attributes set to null</span>\n    <span class=\"pl-c\">// despite being explicitly defined.</span>\n    <span class=\"pl-en\">assertNotNull</span>(<span class=\"pl-s1\">exampleRecord</span>.<span class=\"pl-en\">someParameter</span>());\n  }\n}</pre></div>\n<p dir=\"auto\">See <a href=\"https://github.com/matej-staron/mockito-junit-examples\">the example repo</a> with tests to reproduce.</p>\n<p dir=\"auto\">Any idea why this happens? I couldn't find any mention of limitations related to using <code class=\"notranslate\">@Spy</code> with generics.</p>\n<p dir=\"auto\">This was originally encountered while using <code class=\"notranslate\">mockito-inline</code> and an older Mockito version, but it is also reproducible with the latest <code class=\"notranslate\">mockito-core</code>, as shown in the linked repo.</p>\n<p dir=\"auto\">Any help is appreciated!</p>",
  "description_text": "Hello,\nI encountered an issue with JUnit5/Mockito when using @Spy annotation with generic types.\nSuch configuration seems to break existing spies of Java record instances (inline mocks). The issue also occurs when using Mockito.spy() directly instead of the @Spy annotation. Example:\n@ExtendWith(MockitoExtension.class)\nclass GenericSpyFailingTest {\n\n  // Removing this spy makes the test pass.\n  @Spy\n  private final List<String> genericSpy = List.of(\"item A\", \"item B\");\n\n  @Spy\n  private ExampleRecord exampleRecord = new ExampleRecord(\"some value\");\n\n  @Test\n  void exampleServiceUsesDependency() {\n    // The mocked record has all attributes set to null\n    // despite being explicitly defined.\n    assertNotNull(exampleRecord.someParameter());\n  }\n}\nSee the example repo with tests to reproduce.\nAny idea why this happens? I couldn't find any mention of limitations related to using @Spy with generics.\nThis was originally encountered while using mockito-inline and an older Mockito version, but it is also reproducible with the latest mockito-core, as shown in the linked repo.\nAny help is appreciated!"
}