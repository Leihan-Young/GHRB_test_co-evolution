{
  "issue_id": 2791,
  "issue_url": "https://github.com/assertj/assertj/issues/2791",
  "title": "Introduce `assertThatCharSequence` to disambiguate Groovy's `GString`",
  "description": "<h4 dir=\"auto\">Feature summary</h4>\n<p dir=\"auto\">Currently, Groovy's interpolated expressions cannot be a direct input of <code class=\"notranslate\">assertThat</code> as <code class=\"notranslate\">groovy.lang.GString</code> implements both <code class=\"notranslate\">Comparable</code> and <code class=\"notranslate\">CharSequence</code>.</p>\n<p dir=\"auto\">We might add <code class=\"notranslate\">assertThatCharSequence(CharSequence)</code> / <code class=\"notranslate\">assumeThatCharSequence(CharSequence)</code> and the corresponding BDD variants to disambiguate these calls.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">This should compile:</p>\n<div class=\"highlight highlight-source-groovy notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  @Test\n  void should_accept_interpolated_expressions() {\n    // GIVEN\n    def foo = \"foo\"\n    def actual = /.*${foo}.*/\n    // WHEN/THEN\n    assertThatCharSequence(actual).isEqualTo(\".*foo.*\")\n  }\"><pre class=\"notranslate\">  <span class=\"pl-k\">@Test</span>\n  <span class=\"pl-k\">void</span> <span class=\"pl-en\">should_accept_interpolated_expressions</span>() {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> GIVEN</span>\n    <span class=\"pl-k\">def</span> foo <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-k\">def</span> actual <span class=\"pl-k\">=</span> <span class=\"pl-sr\"><span class=\"pl-pds\">/</span>.*${foo}.*<span class=\"pl-pds\">/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> WHEN/THEN</span>\n    assertThatCharSequence(actual)<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.*foo.*<span class=\"pl-pds\">\"</span></span>)\n  }</pre></div>\n<p dir=\"auto\">Implementation notes:</p>\n<ul dir=\"auto\">\n<li>The implementation can delegate to the existing <code class=\"notranslate\">assertThat(CharSequence)</code></li>\n<li>The new method should also be added to <code class=\"notranslate\">Java6</code> classes whenever possible. <code class=\"notranslate\">Assertions_sync</code> and <code class=\"notranslate\">Java6Assertions_sync</code> can help figure out where the gaps are.</li>\n</ul>\n<h4 dir=\"auto\">Workaround</h4>\n<p dir=\"auto\">Use <code class=\"notranslate\">toString</code>:</p>\n<div class=\"highlight highlight-source-groovy notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  @Test\n  void should_accept_interpolated_expressions() {\n    // GIVEN\n    def foo = \"foo\"\n    def actual = /.*${foo}.*/\n    // WHEN/THEN\n    assertThat(actual.toString()).isEqualTo(\".*foo.*\")\n  }\"><pre class=\"notranslate\">  <span class=\"pl-k\">@Test</span>\n  <span class=\"pl-k\">void</span> <span class=\"pl-en\">should_accept_interpolated_expressions</span>() {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> GIVEN</span>\n    <span class=\"pl-k\">def</span> foo <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-k\">def</span> actual <span class=\"pl-k\">=</span> <span class=\"pl-sr\"><span class=\"pl-pds\">/</span>.*${foo}.*<span class=\"pl-pds\">/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> WHEN/THEN</span>\n    <span class=\"pl-c1\">assertThat</span>(actual<span class=\"pl-k\">.</span>toString())<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.*foo.*<span class=\"pl-pds\">\"</span></span>)\n  }</pre></div>",
  "description_text": "Feature summary\nCurrently, Groovy's interpolated expressions cannot be a direct input of assertThat as groovy.lang.GString implements both Comparable and CharSequence.\nWe might add assertThatCharSequence(CharSequence) / assumeThatCharSequence(CharSequence) and the corresponding BDD variants to disambiguate these calls.\nExample\nThis should compile:\n  @Test\n  void should_accept_interpolated_expressions() {\n    // GIVEN\n    def foo = \"foo\"\n    def actual = /.*${foo}.*/\n    // WHEN/THEN\n    assertThatCharSequence(actual).isEqualTo(\".*foo.*\")\n  }\nImplementation notes:\n\nThe implementation can delegate to the existing assertThat(CharSequence)\nThe new method should also be added to Java6 classes whenever possible. Assertions_sync and Java6Assertions_sync can help figure out where the gaps are.\n\nWorkaround\nUse toString:\n  @Test\n  void should_accept_interpolated_expressions() {\n    // GIVEN\n    def foo = \"foo\"\n    def actual = /.*${foo}.*/\n    // WHEN/THEN\n    assertThat(actual.toString()).isEqualTo(\".*foo.*\")\n  }"
}