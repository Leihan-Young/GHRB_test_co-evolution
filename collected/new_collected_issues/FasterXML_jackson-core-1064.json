{
  "issue_id": 1089,
  "issue_url": "https://github.com/FasterXML/jackson-core/issues/1089",
  "title": "Allow pluggable buffer recycling via new `RecyclerPool` extension point",
  "description": "<p dir=\"auto\">Although the current hard-coder <code class=\"notranslate\">ThreadLocal</code>-based buffer recycling (via <code class=\"notranslate\">BufferRecycler</code> containers accessed via <code class=\"notranslate\">BufferRecyclers</code>) has worked reasonably well up until recently, changes to later JVMs have made <code class=\"notranslate\">ThreadLocal</code> access less beneficial; and in near future (Project Loom et al) even counter-productive.<br>\nBut there are other ways to allow beneficial buffer recycling: especially for use cases where pooling is integrated with other frameworks.</p>\n<p dir=\"auto\">To allow new default and alternative recycling schemes, let's add <code class=\"notranslate\">RecyclerPool</code> extension point, make current implementation work with it.<br>\nAnd for bonus points, possibly implement one or more alternate implementations to use.</p>",
  "description_text": "Although the current hard-coder ThreadLocal-based buffer recycling (via BufferRecycler containers accessed via BufferRecyclers) has worked reasonably well up until recently, changes to later JVMs have made ThreadLocal access less beneficial; and in near future (Project Loom et al) even counter-productive.\nBut there are other ways to allow beneficial buffer recycling: especially for use cases where pooling is integrated with other frameworks.\nTo allow new default and alternative recycling schemes, let's add RecyclerPool extension point, make current implementation work with it.\nAnd for bonus points, possibly implement one or more alternate implementations to use."
}