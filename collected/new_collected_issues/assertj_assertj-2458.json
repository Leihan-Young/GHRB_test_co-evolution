{
  "issue_id": 2381,
  "issue_url": "https://github.com/assertj/assertj/issues/2381",
  "title": "`isUnmodifiable` assertion for Maps",
  "description": "<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Similarly to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"787041364\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2102\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2102/hovercard\" href=\"https://github.com/assertj/assertj/issues/2102\">#2102</a>, we could add a <code class=\"notranslate\">isUnmodifiable()</code> method to the assertion methods for <code class=\"notranslate\">Map</code> types.</p>\n<h4 dir=\"auto\">Implementation Proposal</h4>\n<p dir=\"auto\">Under the hood, the assertion should try to call all the map APIs which are expected to throw <code class=\"notranslate\">UnsupportedOperationException</code>. The assertion succeeds if all of them are throwing the expected exception, otherwise it fails.</p>\n<p dir=\"auto\">Below is the mapping between the map type and the APIs to test. Each subtype would cover also the methods of the parent type. E.g., if we have a <code class=\"notranslate\">NavigableMap</code>, the assertion should also verify <code class=\"notranslate\">Map</code> methods.</p>\n<table role=\"table\">\n<thead>\n<tr>\n<th>Instance Of</th>\n<th>APIs to test</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"notranslate\">Map</code></td>\n<td><code class=\"notranslate\">clear()</code>, <code class=\"notranslate\">compute(K, BiFunction)</code>, <code class=\"notranslate\">computeIfAbsent(K, Function)</code>, <code class=\"notranslate\">computeIfPresent(K, BiFunction)</code>, <code class=\"notranslate\">entrySet().iterator().remove()</code>, <code class=\"notranslate\">keySet().iterator().remove()</code>, <code class=\"notranslate\">merge(K, V, BiFunction)</code>, <code class=\"notranslate\">put(K, V)</code>, <code class=\"notranslate\">putAll(Map)</code>, <code class=\"notranslate\">putIfAbsent(K, V)</code>, <code class=\"notranslate\">replace(K, V)</code>, <code class=\"notranslate\">replace(K, V, V)</code>, <code class=\"notranslate\">remove(Object)</code>, <code class=\"notranslate\">remove(Object, Object)</code>, <code class=\"notranslate\">replaceAll(BiFunction)</code></td>\n</tr>\n<tr>\n<td><code class=\"notranslate\">NavigableMap</code></td>\n<td><code class=\"notranslate\">pollFirstEntry()</code>, <code class=\"notranslate\">pollLastEntry() </code></td>\n</tr>\n<tr>\n<td><code class=\"notranslate\">SortedMap</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Map<String, String> map = new HashMap<>();\nmap.put(\"key\", \"value\");\n\nassertThat(map).isUnmodifiable(); // should fail\n\nMap<String, String> unmodifiableMap = Collections.unmodifiableMap(map);\n\nassertThat(unmodifiableMap).isUnmodifiable(); // should succeed\"><pre class=\"notranslate\"><span class=\"pl-smi\">Map</span><<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span><>();\n<span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"key\"</span>, <span class=\"pl-s\">\"value\"</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">isUnmodifiable</span>(); <span class=\"pl-c\">// should fail</span>\n\n<span class=\"pl-smi\">Map</span><<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">unmodifiableMap</span> = <span class=\"pl-smi\">Collections</span>.<span class=\"pl-en\">unmodifiableMap</span>(<span class=\"pl-s1\">map</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">unmodifiableMap</span>).<span class=\"pl-en\">isUnmodifiable</span>(); <span class=\"pl-c\">// should succeed</span></pre></div>",
  "description_text": "Summary\nSimilarly to #2102, we could add a isUnmodifiable() method to the assertion methods for Map types.\nImplementation Proposal\nUnder the hood, the assertion should try to call all the map APIs which are expected to throw UnsupportedOperationException. The assertion succeeds if all of them are throwing the expected exception, otherwise it fails.\nBelow is the mapping between the map type and the APIs to test. Each subtype would cover also the methods of the parent type. E.g., if we have a NavigableMap, the assertion should also verify Map methods.\n\n\n\nInstance Of\nAPIs to test\n\n\n\n\nMap\nclear(), compute(K, BiFunction), computeIfAbsent(K, Function), computeIfPresent(K, BiFunction), entrySet().iterator().remove(), keySet().iterator().remove(), merge(K, V, BiFunction), put(K, V), putAll(Map), putIfAbsent(K, V), replace(K, V), replace(K, V, V), remove(Object), remove(Object, Object), replaceAll(BiFunction)\n\n\nNavigableMap\npollFirstEntry(), pollLastEntry() \n\n\nSortedMap\n-\n\n\n\nExample\n unmodifiableMap = Collections.unmodifiableMap(map);\n\nassertThat(unmodifiableMap).isUnmodifiable(); // should succeed\">Map<String, String> map = new HashMap<>();\nmap.put(\"key\", \"value\");\n\nassertThat(map).isUnmodifiable(); // should fail\n\nMap<String, String> unmodifiableMap = Collections.unmodifiableMap(map);\n\nassertThat(unmodifiableMap).isUnmodifiable(); // should succeed"
}