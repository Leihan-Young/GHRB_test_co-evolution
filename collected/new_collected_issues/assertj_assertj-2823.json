{
  "issue_id": 2821,
  "issue_url": "https://github.com/assertj/assertj/issues/2821",
  "title": "Make the assertion lambdas Kotlin friendly",
  "description": "<h4 dir=\"auto\">Feature summary</h4>\n<p dir=\"auto\">Some assertions accept a functor:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public static <THROWABLE extends Throwable> THROWABLE catchThrowableOfType(ThrowingCallable shouldRaiseThrowable,\n                                                                             Class<THROWABLE> type) {\n    return AssertionsForClassTypes.catchThrowableOfType(shouldRaiseThrowable, type);\n  }\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <<span class=\"pl-smi\">THROWABLE</span> <span class=\"pl-s1\">extends</span> <span class=\"pl-s1\">Throwable</span>> <span class=\"pl-smi\">THROWABLE</span> <span class=\"pl-s1\">catchThrowableOfType</span>(<span class=\"pl-smi\">ThrowingCallable</span> <span class=\"pl-s1\">shouldRaiseThrowable</span>,\n                                                                             <span class=\"pl-smi\">Class</span><<span class=\"pl-smi\">THROWABLE</span>> <span class=\"pl-s1\">type</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">AssertionsForClassTypes</span>.<span class=\"pl-en\">catchThrowableOfType</span>(<span class=\"pl-s1\">shouldRaiseThrowable</span>, <span class=\"pl-s1\">type</span>);\n  }</pre></div>\n<p dir=\"auto\">Kotlin has a syntax for lambdas, so it could call:</p>\n<div class=\"highlight highlight-source-kotlin notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"catchThrowableOfType(NotFoundException::class.java) { \n    connectionService.findBy(hubId = \"hub2\", connId = \"conn1\") \n}\"><pre class=\"notranslate\">catchThrowableOfType(<span class=\"pl-en\">NotFoundException</span>::<span class=\"pl-c1\">class</span>.java) { \n    connectionService.findBy(hubId <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hub2<span class=\"pl-pds\">\"</span></span>, connId <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conn1<span class=\"pl-pds\">\"</span></span>) \n}</pre></div>\n<p dir=\"auto\">But as it is, it needs to stick with the less readable:</p>\n<div class=\"highlight highlight-source-kotlin notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"catchThrowableOfType( { \n    connectionService.findBy(hubId = \"hub2\", connId = \"conn1\") \n}, NotFoundException::class.java)\"><pre class=\"notranslate\">catchThrowableOfType( { \n    connectionService.findBy(hubId <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hub2<span class=\"pl-pds\">\"</span></span>, connId <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conn1<span class=\"pl-pds\">\"</span></span>) \n}, <span class=\"pl-en\">NotFoundException</span>::<span class=\"pl-c1\">class</span>.java)</pre></div>\n<p dir=\"auto\">Could you please add some overrides, moving the functors to the last place? Like,</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public static <THROWABLE extends Throwable> THROWABLE catchThrowableOfType(\n         Class<THROWABLE> type, ThrowingCallable shouldRaiseThrowable) {\n    return AssertionsForClassTypes.catchThrowableOfType(shouldRaiseThrowable, type);\n  }\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <<span class=\"pl-smi\">THROWABLE</span> <span class=\"pl-s1\">extends</span> <span class=\"pl-s1\">Throwable</span>> <span class=\"pl-smi\">THROWABLE</span> <span class=\"pl-en\">catchThrowableOfType</span>(\n         <span class=\"pl-s1\">Class</span><<span class=\"pl-c1\">THROWABLE</span>> <span class=\"pl-s1\">type</span>, <span class=\"pl-smi\">ThrowingCallable</span> <span class=\"pl-s1\">shouldRaiseThrowable</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">AssertionsForClassTypes</span>.<span class=\"pl-en\">catchThrowableOfType</span>(<span class=\"pl-s1\">shouldRaiseThrowable</span>, <span class=\"pl-s1\">type</span>);\n  }</pre></div>\n<p dir=\"auto\">Thanks for considering.</p>\n<p dir=\"auto\">AssertJ 3.23.11</p>",
  "description_text": "Feature summary\nSome assertions accept a functor:\npublic static <THROWABLE extends Throwable> THROWABLE catchThrowableOfType(ThrowingCallable shouldRaiseThrowable,\n                                                                             Class<THROWABLE> type) {\n    return AssertionsForClassTypes.catchThrowableOfType(shouldRaiseThrowable, type);\n  }\nKotlin has a syntax for lambdas, so it could call:\ncatchThrowableOfType(NotFoundException::class.java) { \n    connectionService.findBy(hubId = \"hub2\", connId = \"conn1\") \n}\nBut as it is, it needs to stick with the less readable:\ncatchThrowableOfType( { \n    connectionService.findBy(hubId = \"hub2\", connId = \"conn1\") \n}, NotFoundException::class.java)\nCould you please add some overrides, moving the functors to the last place? Like,\npublic static <THROWABLE extends Throwable> THROWABLE catchThrowableOfType(\n         Class<THROWABLE> type, ThrowingCallable shouldRaiseThrowable) {\n    return AssertionsForClassTypes.catchThrowableOfType(shouldRaiseThrowable, type);\n  }\nThanks for considering.\nAssertJ 3.23.11"
}