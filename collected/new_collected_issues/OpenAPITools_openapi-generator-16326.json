{
  "issue_id": 7118,
  "issue_url": "https://github.com/OpenAPITools/openapi-generator/issues/7118",
  "title": "[REQ] Handle list of String special case in webclient generator",
  "description": "<h3 dir=\"auto\">Is your feature request related to a problem? Please describe.</h3>\n<p dir=\"auto\">When describing an operation that returns an array of string, the openapi-generator for java-webclient generates an api returning a <code class=\"notranslate\">Flux<String></code>.</p>\n<p dir=\"auto\">However Spring's Webclient handles serialization of JSON array of strings in a special way : <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"425096923\" data-permission-text=\"Title is private\" data-url=\"https://github.com/spring-projects/spring-framework/issues/22662\" data-hovercard-type=\"issue\" data-hovercard-url=\"/spring-projects/spring-framework/issues/22662/hovercard\" href=\"https://github.com/spring-projects/spring-framework/issues/22662\">spring-projects/spring-framework#22662</a></p>\n<p dir=\"auto\">This means expecting a <code class=\"notranslate\">Flux<String></code> when a server return an array of String is a mistake.</p>\n<p dir=\"auto\">Please see sample Gradle project <a href=\"https://github.com/dlicois/webclient-liststring\">https://github.com/dlicois/webclient-liststring</a>, it contains a test class (WebClientListStringTest.java) to better explain the behaviour.<br>\nThe <code class=\"notranslate\">openapi.yaml</code> describes an operation returning an array of string, openapi-generator generates a <code class=\"notranslate\">DefaultApi.java</code> class returning a <code class=\"notranslate\">Flux<String></code>.<br>\nWhen the webclient receive the answer <code class=\"notranslate\">[\"one\",\"two\", \"three\"]</code>, it publishes a single String of value <code class=\"notranslate\">[\"one\",\"two\", \"three\"]</code>.<br>\nI would have expected three Strings.</p>\n<p dir=\"auto\">This makes the generated api unusable for this case, requiring to parse the response a second time to handle it.</p>\n<h2 dir=\"auto\">Describe the solution you'd like</h2>\n<p dir=\"auto\">Recommended solution by Spring developers (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"425096923\" data-permission-text=\"Title is private\" data-url=\"https://github.com/spring-projects/spring-framework/issues/22662\" data-hovercard-type=\"issue\" data-hovercard-url=\"/spring-projects/spring-framework/issues/22662/hovercard\" href=\"https://github.com/spring-projects/spring-framework/issues/22662\">spring-projects/spring-framework#22662</a> and <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-codecs-jackson\" rel=\"nofollow\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-codecs-jackson</a>) is to use a Mono<List> for string arrays.</p>\n<p dir=\"auto\">This would mean making a special case for operations described as arrays of string to generate a Mono<List> instead of Flux.</p>",
  "description_text": "Is your feature request related to a problem? Please describe.\nWhen describing an operation that returns an array of string, the openapi-generator for java-webclient generates an api returning a Flux.\nHowever Spring's Webclient handles serialization of JSON array of strings in a special way : spring-projects/spring-framework#22662\nThis means expecting a Flux when a server return an array of String is a mistake.\nPlease see sample Gradle project https://github.com/dlicois/webclient-liststring, it contains a test class (WebClientListStringTest.java) to better explain the behaviour.\nThe openapi.yaml describes an operation returning an array of string, openapi-generator generates a DefaultApi.java class returning a Flux.\nWhen the webclient receive the answer [\"one\",\"two\", \"three\"], it publishes a single String of value [\"one\",\"two\", \"three\"].\nI would have expected three Strings.\nThis makes the generated api unusable for this case, requiring to parse the response a second time to handle it.\nDescribe the solution you'd like\nRecommended solution by Spring developers (see spring-projects/spring-framework#22662 and https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-codecs-jackson) is to use a Mono for string arrays.\nThis would mean making a special case for operations described as arrays of string to generate a Mono instead of Flux."
}