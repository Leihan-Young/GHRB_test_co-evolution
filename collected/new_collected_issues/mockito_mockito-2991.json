{
  "issue_id": 2982,
  "issue_url": "https://github.com/mockito/mockito/issues/2982",
  "title": "Provide a variant of assertArg that works well with checked exceptions",
  "description": "<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1640641494\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mockito/mockito/issues/2949\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/mockito/mockito/pull/2949/hovercard\" href=\"https://github.com/mockito/mockito/pull/2949\">#2949</a> is a great new feature, thank you. While trying to make use of it in Spring Boot, I came across a situation that would benefit from the consumer of the argument being able to throw checked exceptions:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"then(this.client).should().executeOpen(any(HttpHost.class), assertArg((request) -> {\n\tassertThat(request).isInstanceOf(HttpPost.class);\n\tassertThat(request.getUri()).isEqualTo(this.uri);\n\tassertThat(request.getFirstHeader(HttpHeaders.CONTENT_TYPE)).isNull();\n\tassertThat(request.getFirstHeader(HttpClientTransport.REGISTRY_AUTH_HEADER)).isNull();\n\tassertThat(response.getContent()).isSameAs(this.content);\n}), isNull());\"><pre class=\"notranslate\"><span class=\"pl-en\">then</span>(<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">client</span>).<span class=\"pl-en\">should</span>().<span class=\"pl-en\">executeOpen</span>(<span class=\"pl-en\">any</span>(<span class=\"pl-smi\">HttpHost</span>.<span class=\"pl-k\">class</span>), <span class=\"pl-en\">assertArg</span>((<span class=\"pl-s1\">request</span>) -> {\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">request</span>).<span class=\"pl-en\">isInstanceOf</span>(<span class=\"pl-smi\">HttpPost</span>.<span class=\"pl-k\">class</span>);\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">request</span>.<span class=\"pl-en\">getUri</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">uri</span>);\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">request</span>.<span class=\"pl-en\">getFirstHeader</span>(<span class=\"pl-smi\">HttpHeaders</span>.<span class=\"pl-c1\">CONTENT_TYPE</span>)).<span class=\"pl-en\">isNull</span>();\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">request</span>.<span class=\"pl-en\">getFirstHeader</span>(<span class=\"pl-smi\">HttpClientTransport</span>.<span class=\"pl-c1\">REGISTRY_AUTH_HEADER</span>)).<span class=\"pl-en\">isNull</span>();\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">response</span>.<span class=\"pl-en\">getContent</span>()).<span class=\"pl-en\">isSameAs</span>(<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">content</span>);\n}), <span class=\"pl-en\">isNull</span>());</pre></div>\n<p dir=\"auto\">In this example, <code class=\"notranslate\">request</code> is an <code class=\"notranslate\">org.apache.hc.client5.http.classic.methods.HttpPost</code> and <code class=\"notranslate\">getUri()</code> and <code class=\"notranslate\">getContent()</code> throw <code class=\"notranslate\">URISyntaxException</code> and <code class=\"notranslate\">IOException</code> respectively. As a result, the above snippet does not compile.</p>\n<p dir=\"auto\">I can work around this by using AssertJ's <code class=\"notranslate\">ThrowingConsumer</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"then(this.client).should().executeOpen(any(HttpHost.class), assertArg((ThrowingConsumer<HttpPost>) (request) -> {\n\tassertThat(request).isInstanceOf(HttpPost.class);\n\tassertThat(request.getUri()).isEqualTo(this.uri);\n\tassertThat(request.getFirstHeader(HttpHeaders.CONTENT_TYPE)).isNull();\n\tassertThat(request.getFirstHeader(HttpClientTransport.REGISTRY_AUTH_HEADER)).isNull();\n\tassertThat(response.getContent()).isSameAs(this.content);\n}), isNull());\"><pre class=\"notranslate\"><span class=\"pl-en\">then</span>(<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">client</span>).<span class=\"pl-en\">should</span>().<span class=\"pl-en\">executeOpen</span>(<span class=\"pl-en\">any</span>(<span class=\"pl-smi\">HttpHost</span>.<span class=\"pl-k\">class</span>), <span class=\"pl-en\">assertArg</span>((<span class=\"pl-smi\">ThrowingConsumer</span><<span class=\"pl-smi\">HttpPost</span>>) (<span class=\"pl-s1\">request</span>) -> {\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">request</span>).<span class=\"pl-en\">isInstanceOf</span>(<span class=\"pl-smi\">HttpPost</span>.<span class=\"pl-k\">class</span>);\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">request</span>.<span class=\"pl-en\">getUri</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">uri</span>);\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">request</span>.<span class=\"pl-en\">getFirstHeader</span>(<span class=\"pl-smi\">HttpHeaders</span>.<span class=\"pl-c1\">CONTENT_TYPE</span>)).<span class=\"pl-en\">isNull</span>();\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">request</span>.<span class=\"pl-en\">getFirstHeader</span>(<span class=\"pl-smi\">HttpClientTransport</span>.<span class=\"pl-c1\">REGISTRY_AUTH_HEADER</span>)).<span class=\"pl-en\">isNull</span>();\n\t<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">response</span>.<span class=\"pl-en\">getContent</span>()).<span class=\"pl-en\">isSameAs</span>(<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">content</span>);\n}), <span class=\"pl-en\">isNull</span>());</pre></div>\n<p dir=\"auto\">As you can see, it requires a cast which is ever so slightly inelegant. It also won't help a Mockito user who doesn't use AssertJ. Would you consider adding a <code class=\"notranslate\">ThrowingConsumer</code> interface to Mockito along with a variant of <code class=\"notranslate\">assertArg</code> that takes a <code class=\"notranslate\">ThrowingConsumer</code> rather than a <code class=\"notranslate\">Consumer</code>?</p>",
  "description_text": "#2949 is a great new feature, thank you. While trying to make use of it in Spring Boot, I came across a situation that would benefit from the consumer of the argument being able to throw checked exceptions:\nthen(this.client).should().executeOpen(any(HttpHost.class), assertArg((request) -> {\n\tassertThat(request).isInstanceOf(HttpPost.class);\n\tassertThat(request.getUri()).isEqualTo(this.uri);\n\tassertThat(request.getFirstHeader(HttpHeaders.CONTENT_TYPE)).isNull();\n\tassertThat(request.getFirstHeader(HttpClientTransport.REGISTRY_AUTH_HEADER)).isNull();\n\tassertThat(response.getContent()).isSameAs(this.content);\n}), isNull());\nIn this example, request is an org.apache.hc.client5.http.classic.methods.HttpPost and getUri() and getContent() throw URISyntaxException and IOException respectively. As a result, the above snippet does not compile.\nI can work around this by using AssertJ's ThrowingConsumer:\nthen(this.client).should().executeOpen(any(HttpHost.class), assertArg((ThrowingConsumer<HttpPost>) (request) -> {\n\tassertThat(request).isInstanceOf(HttpPost.class);\n\tassertThat(request.getUri()).isEqualTo(this.uri);\n\tassertThat(request.getFirstHeader(HttpHeaders.CONTENT_TYPE)).isNull();\n\tassertThat(request.getFirstHeader(HttpClientTransport.REGISTRY_AUTH_HEADER)).isNull();\n\tassertThat(response.getContent()).isSameAs(this.content);\n}), isNull());\nAs you can see, it requires a cast which is ever so slightly inelegant. It also won't help a Mockito user who doesn't use AssertJ. Would you consider adding a ThrowingConsumer interface to Mockito along with a variant of assertArg that takes a ThrowingConsumer rather than a Consumer?"
}