{
  "issue_id": 2764,
  "issue_url": "https://github.com/assertj/assertj/issues/2764",
  "title": "`anyOf` and `allOf` variants for multiple `ThrowingConsumer` parameters",
  "description": "<h4 dir=\"auto\">Feature summary</h4>\n<p dir=\"auto\">I need to assert with <code class=\"notranslate\">satisfiesAnyOf</code> for each element in an iterable.</p>\n<p dir=\"auto\">This may be a collection version of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"353346022\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1304\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1304/hovercard\" href=\"https://github.com/assertj/assertj/issues/1304\">#1304</a> .</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"List<Some> some = getSome();\n\n// Now each some.other should be asserted by any of multiple conditions.\n\nsome.stream.map(Some::getOther).forEach(o -> {\n    assertThat(o).satisfiesAnyOf(\n        o1 -> assertThat(o1).isNull(),\n        o1 -> assertThat(o1).isNotNull().extracting(Other::getId).isEqualTo(x);     \n    );\n});\n\nassertThat(some)\n    .extracting(Some::getOther)\n    .allSatisfy(o -> {\n        assertThat(o).satisfiesAnyOf(\n            o1 -> assertThat(o1).isNull(),\n            o1 -> assertThat(o1).isNotNull().extracting(Other::getId).isEqualTo(x);     \n        );\n    });\"><pre class=\"notranslate\"><span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Some</span>> <span class=\"pl-s1\">some</span> = <span class=\"pl-en\">getSome</span>();\n\n<span class=\"pl-c\">// Now each some.other should be asserted by any of multiple conditions.</span>\n\n<span class=\"pl-s1\">some</span>.<span class=\"pl-s1\">stream</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-smi\">Some</span>::<span class=\"pl-s1\">getOther</span>).<span class=\"pl-en\">forEach</span>(<span class=\"pl-s1\">o</span> -> {\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">o</span>).<span class=\"pl-en\">satisfiesAnyOf</span>(\n        <span class=\"pl-s1\">o1</span> -> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">o1</span>).<span class=\"pl-en\">isNull</span>(),\n        <span class=\"pl-s1\">o1</span> -> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">o1</span>).<span class=\"pl-en\">isNotNull</span>().<span class=\"pl-en\">extracting</span>(<span class=\"pl-smi\">Other</span>::<span class=\"pl-s1\">getId</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">x</span>);     \n    );\n});\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">some</span>)\n    .<span class=\"pl-en\">extracting</span>(<span class=\"pl-smi\">Some</span>::<span class=\"pl-s1\">getOther</span>)\n    .<span class=\"pl-en\">allSatisfy</span>(<span class=\"pl-s1\">o</span> -> {\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">o</span>).<span class=\"pl-en\">satisfiesAnyOf</span>(\n            <span class=\"pl-s1\">o1</span> -> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">o1</span>).<span class=\"pl-en\">isNull</span>(),\n            <span class=\"pl-s1\">o1</span> -> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">o1</span>).<span class=\"pl-en\">isNotNull</span>().<span class=\"pl-en\">extracting</span>(<span class=\"pl-smi\">Other</span>::<span class=\"pl-s1\">getId</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">x</span>);     \n        );\n    });</pre></div>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"List<Some> some = getSome();\nassertThat(some)\n    .isNotEmpty()\n    .extracting(Some::getOther)\n    .allSatisfyAnyOf( // or eachSatisfiesAnyOf\n        o -> {},\n        o -> {}\n    );        \"><pre class=\"notranslate\"><span class=\"pl-smi\">List</span><<span class=\"pl-smi\">Some</span>> <span class=\"pl-s1\">some</span> = <span class=\"pl-en\">getSome</span>();\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">some</span>)\n    .<span class=\"pl-en\">isNotEmpty</span>()\n    .<span class=\"pl-en\">extracting</span>(<span class=\"pl-smi\">Some</span>::<span class=\"pl-s1\">getOther</span>)\n    .<span class=\"pl-en\">allSatisfyAnyOf</span>( <span class=\"pl-c\">// or eachSatisfiesAnyOf</span>\n        <span class=\"pl-s1\">o</span> -> {},\n        <span class=\"pl-s1\">o</span> -> {}\n    );        </pre></div>",
  "description_text": "Feature summary\nI need to assert with satisfiesAnyOf for each element in an iterable.\nThis may be a collection version of #1304 .\nList<Some> some = getSome();\n\n// Now each some.other should be asserted by any of multiple conditions.\n\nsome.stream.map(Some::getOther).forEach(o -> {\n    assertThat(o).satisfiesAnyOf(\n        o1 -> assertThat(o1).isNull(),\n        o1 -> assertThat(o1).isNotNull().extracting(Other::getId).isEqualTo(x);     \n    );\n});\n\nassertThat(some)\n    .extracting(Some::getOther)\n    .allSatisfy(o -> {\n        assertThat(o).satisfiesAnyOf(\n            o1 -> assertThat(o1).isNull(),\n            o1 -> assertThat(o1).isNotNull().extracting(Other::getId).isEqualTo(x);     \n        );\n    });\nExample\nList<Some> some = getSome();\nassertThat(some)\n    .isNotEmpty()\n    .extracting(Some::getOther)\n    .allSatisfyAnyOf( // or eachSatisfiesAnyOf\n        o -> {},\n        o -> {}\n    );        "
}