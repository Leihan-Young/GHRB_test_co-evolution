{
  "issue_id": 2651,
  "issue_url": "https://github.com/google/gson/issues/2651",
  "title": "Split `testWriteHtmlSafe` into Two Separate Test Cases for Improved Test Granularity",
  "description": "<h1 dir=\"auto\">Problem solved by the feature</h1>\n\n<p dir=\"auto\">I would like to propose a minor improvement for the <a href=\"https://github.com/google/gson/blob/342d60015ffb2738820d4e49423dbb884533bae8/gson/src/test/java/com/google/gson/MixedStreamTest.java#L199-L212\"><code class=\"notranslate\">MixedStreamTest.testWriteHtmlSafe</code></a> test case.</p>\n<p dir=\"auto\">Currently, the <a href=\"https://github.com/google/gson/blob/342d60015ffb2738820d4e49423dbb884533bae8/gson/src/test/java/com/google/gson/MixedStreamTest.java#L199-L212\"><code class=\"notranslate\">MixedStreamTest.testWriteHtmlSafe</code></a> unit test in Gson's suite checks both the behavior of Gson with HTML escaping enabled and disabled within a single test method.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void testWriteHtmlSafe() {\n    List<String> contents = Arrays.asList(\"<\", \">\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken<List<String>>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new Gson().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString())\n        .isEqualTo(\"[\\\"\\\\u003c\\\",\\\"\\\\u003e\\\",\\\"\\\\u0026\\\",\\\"\\\\u003d\\\",\\\"\\\\u0027\\\"]\");\n\n    writer = new StringWriter();\n    new GsonBuilder().disableHtmlEscaping().create().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(\"[\\\"<\\\",\\\">\\\",\\\"&\\\",\\\"=\\\",\\\"'\\\"]\");\n  }\"><pre class=\"notranslate\">  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testWriteHtmlSafe</span>() {\n    <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">contents</span> = <span class=\"pl-smi\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-s\">\"<\"</span>, <span class=\"pl-s\">\">\"</span>, <span class=\"pl-s\">\"&\"</span>, <span class=\"pl-s\">\"=\"</span>, <span class=\"pl-s\">\"'\"</span>);\n    <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeToken</span><<span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>>>() {}.<span class=\"pl-en\">getType</span>();\n\n    <span class=\"pl-smi\">StringWriter</span> <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">contents</span>, <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">writer</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">toString</span>())\n        .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"[<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003c<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003e<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u0026<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003d<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u0027<span class=\"pl-cce\">\\\"</span>]\"</span>);\n\n    <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>().<span class=\"pl-en\">disableHtmlEscaping</span>().<span class=\"pl-en\">create</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">contents</span>, <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">writer</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">toString</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"[<span class=\"pl-cce\">\\\"</span><<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>><span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>&<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>=<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>'<span class=\"pl-cce\">\\\"</span>]\"</span>);\n  }</pre></div>\n<p dir=\"auto\">This approach, while effective, combines two distinct scenarios into one test. When the first assertion fails, it prevents the subsequent assertions from running, which can obscure the presence of multiple issues under different scenarios. This can also make pinpointing the exact cause of failures slightly more challenging and may slightly increase the time taken to run the test due to combined scenarios</p>\n<h1 dir=\"auto\">Feature description</h1>\n\n<p dir=\"auto\">I propose splitting the testWriteHtmlSafe test case into two separate tests: <code class=\"notranslate\">testWriteHtmlSafeWithEscaping</code> for testing Gson's behavior with HTML escaping enabled and <code class=\"notranslate\">testWriteHtmlSafeWithoutEscaping</code> with it disabled.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@Test\npublic void testWriteHtmlSafeWithEscaping() {\n    List<String> contents = Arrays.asList(\"<\", \">\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken<List<String>>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new Gson().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(\"[\\\"\\\\u003c\\\",\\\"\\\\u003e\\\",\\\"\\\\u0026\\\",\\\"\\\\u003d\\\",\\\"\\\\u0027\\\"]\");\n}\n\n@Test\npublic void testWriteHtmlSafeWithoutEscaping() {\n    List<String> contents = Arrays.asList(\"<\", \">\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken<List<String>>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new GsonBuilder().disableHtmlEscaping().create().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(\"[\\\"<\\\",\\\">\\\",\\\"&\\\",\\\"=\\\",\\\"'\\\"]\");\n}\n\"><pre class=\"notranslate\"><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testWriteHtmlSafeWithEscaping</span>() {\n    <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">contents</span> = <span class=\"pl-smi\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-s\">\"<\"</span>, <span class=\"pl-s\">\">\"</span>, <span class=\"pl-s\">\"&\"</span>, <span class=\"pl-s\">\"=\"</span>, <span class=\"pl-s\">\"'\"</span>);\n    <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeToken</span><<span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>>>() {}.<span class=\"pl-en\">getType</span>();\n\n    <span class=\"pl-smi\">StringWriter</span> <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">contents</span>, <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">writer</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">toString</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"[<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003c<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003e<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u0026<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003d<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u0027<span class=\"pl-cce\">\\\"</span>]\"</span>);\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testWriteHtmlSafeWithoutEscaping</span>() {\n    <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">contents</span> = <span class=\"pl-smi\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-s\">\"<\"</span>, <span class=\"pl-s\">\">\"</span>, <span class=\"pl-s\">\"&\"</span>, <span class=\"pl-s\">\"=\"</span>, <span class=\"pl-s\">\"'\"</span>);\n    <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeToken</span><<span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>>>() {}.<span class=\"pl-en\">getType</span>();\n\n    <span class=\"pl-smi\">StringWriter</span> <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>().<span class=\"pl-en\">disableHtmlEscaping</span>().<span class=\"pl-en\">create</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">contents</span>, <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">writer</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">toString</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"[<span class=\"pl-cce\">\\\"</span><<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>><span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>&<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>=<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>'<span class=\"pl-cce\">\\\"</span>]\"</span>);\n}</pre></div>\n<p dir=\"auto\">This change will enhance the granularity of our testing by isolating each scenario into its own test. Such isolation ensures that a failure in one scenario does not prevent the execution of the other, allowing for clearer identification of issues across different scenarios.</p>\n<p dir=\"auto\">Additionally, having more granular tests could potentially reduce individual test running times, making the testing process more efficient, especially when debugging and running tests repeatedly during development.</p>\n<h1 dir=\"auto\">Alternatives / workarounds</h1>\n\n<hr>\n<p dir=\"auto\">Hope this suggestion is helpful, and if yes, I am more than happy to submit a PR to implement the changes.</p>",
  "description_text": "Problem solved by the feature\nI would like to propose a minor improvement for the MixedStreamTest.testWriteHtmlSafe test case.\nCurrently, the MixedStreamTest.testWriteHtmlSafe unit test in Gson's suite checks both the behavior of Gson with HTML escaping enabled and disabled within a single test method.\n\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new Gson().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString())\n        .isEqualTo(\"[\\\"\\\\u003c\\\",\\\"\\\\u003e\\\",\\\"\\\\u0026\\\",\\\"\\\\u003d\\\",\\\"\\\\u0027\\\"]\");\n\n    writer = new StringWriter();\n    new GsonBuilder().disableHtmlEscaping().create().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(\"[\\\"<\\\",\\\">\\\",\\\"&\\\",\\\"=\\\",\\\"'\\\"]\");\n  }\">  @Test\n  public void testWriteHtmlSafe() {\n    List<String> contents = Arrays.asList(\"<\", \">\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken<List<String>>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new Gson().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString())\n        .isEqualTo(\"[\\\"\\\\u003c\\\",\\\"\\\\u003e\\\",\\\"\\\\u0026\\\",\\\"\\\\u003d\\\",\\\"\\\\u0027\\\"]\");\n\n    writer = new StringWriter();\n    new GsonBuilder().disableHtmlEscaping().create().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(\"[\\\"<\\\",\\\">\\\",\\\"&\\\",\\\"=\\\",\\\"'\\\"]\");\n  }\nThis approach, while effective, combines two distinct scenarios into one test. When the first assertion fails, it prevents the subsequent assertions from running, which can obscure the presence of multiple issues under different scenarios. This can also make pinpointing the exact cause of failures slightly more challenging and may slightly increase the time taken to run the test due to combined scenarios\nFeature description\nI propose splitting the testWriteHtmlSafe test case into two separate tests: testWriteHtmlSafeWithEscaping for testing Gson's behavior with HTML escaping enabled and testWriteHtmlSafeWithoutEscaping with it disabled.\n\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new Gson().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(\"[\\\"\\\\u003c\\\",\\\"\\\\u003e\\\",\\\"\\\\u0026\\\",\\\"\\\\u003d\\\",\\\"\\\\u0027\\\"]\");\n}\n\n@Test\npublic void testWriteHtmlSafeWithoutEscaping() {\n    List contents = Arrays.asList(\"<\", \">\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new GsonBuilder().disableHtmlEscaping().create().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(\"[\\\"<\\\",\\\">\\\",\\\"&\\\",\\\"=\\\",\\\"'\\\"]\");\n}\n\">@Test\npublic void testWriteHtmlSafeWithEscaping() {\n    List<String> contents = Arrays.asList(\"<\", \">\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken<List<String>>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new Gson().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(\"[\\\"\\\\u003c\\\",\\\"\\\\u003e\\\",\\\"\\\\u0026\\\",\\\"\\\\u003d\\\",\\\"\\\\u0027\\\"]\");\n}\n\n@Test\npublic void testWriteHtmlSafeWithoutEscaping() {\n    List<String> contents = Arrays.asList(\"<\", \">\", \"&\", \"=\", \"'\");\n    Type type = new TypeToken<List<String>>() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new GsonBuilder().disableHtmlEscaping().create().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(\"[\\\"<\\\",\\\">\\\",\\\"&\\\",\\\"=\\\",\\\"'\\\"]\");\n}\nThis change will enhance the granularity of our testing by isolating each scenario into its own test. Such isolation ensures that a failure in one scenario does not prevent the execution of the other, allowing for clearer identification of issues across different scenarios.\nAdditionally, having more granular tests could potentially reduce individual test running times, making the testing process more efficient, especially when debugging and running tests repeatedly during development.\nAlternatives / workarounds\n\nHope this suggestion is helpful, and if yes, I am more than happy to submit a PR to implement the changes."
}