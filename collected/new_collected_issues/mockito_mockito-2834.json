{
  "issue_id": 2589,
  "issue_url": "https://github.com/mockito/mockito/issues/2589",
  "title": "Switch the default mockmaker to the inline mockmaker on JDK 17+",
  "description": "<p dir=\"auto\">All right, we have been talking about this for a while so let's consolidate discussions. TLDR: more and more use cases are broken (by default) with Mockito and JDK 17. That's because the subclass mockmaker runs into fundamental limitations on JDK 17, but the inline mockmaker works as expected.</p>\n<p dir=\"auto\">There are a lot of issues related to this:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1162535834\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mockito/mockito/issues/2587\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mockito/mockito/issues/2587/hovercard\" href=\"https://github.com/mockito/mockito/issues/2587\">#2587</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1124721668\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mockito/mockito/issues/2560\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mockito/mockito/issues/2560/hovercard\" href=\"https://github.com/mockito/mockito/issues/2560\">#2560</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1146222870\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mockito/mockito/issues/2573\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mockito/mockito/issues/2573/hovercard\" href=\"https://github.com/mockito/mockito/issues/2573\">#2573</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1128579742\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mockito/mockito/issues/2561\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mockito/mockito/issues/2561/hovercard\" href=\"https://github.com/mockito/mockito/issues/2561\">#2561</a> (suspected)</li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1084634344\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mockito/mockito/issues/2521\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mockito/mockito/issues/2521/hovercard\" href=\"https://github.com/mockito/mockito/issues/2521\">#2521</a> (suspected)</li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1030504423\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mockito/mockito/issues/2449\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mockito/mockito/issues/2449/hovercard\" href=\"https://github.com/mockito/mockito/issues/2449\">#2449</a> (suspected)</li>\n</ul>\n<p dir=\"auto\">At this point, the rate of issues created is increasing, as more and more of our users are adopting JDK 17+</p>\n<p dir=\"auto\">We have historically talked about this as well: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"454698857\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mockito/mockito/issues/1728\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mockito/mockito/issues/1728/hovercard\" href=\"https://github.com/mockito/mockito/issues/1728\">#1728</a></p>\n<p dir=\"auto\">When chatting with <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/raphw/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/raphw\">@raphw</a> about this issue, there were a couple of options that we have available:</p>\n<ol dir=\"auto\">\n<li>Keep on using the subclass mockmaker by default on all JDK's and suggest users to use <code class=\"notranslate\">mockito-inline</code> whenever appropriate</li>\n<li>Switch the default to the inline mockmaker for all JDK's and put the subclass mockmaker in an artifact such as <code class=\"notranslate\">mockito-subclass</code> (legacy)</li>\n<li>Detect the current JDK version and make the inline mockmaker the default on JDK 17+, but keep the subclass mockmaker the default for older JDK versions</li>\n</ol>\n<p dir=\"auto\">In my opinion, we should opt for least amount of surprise. E.g. Mockito should \"just\" work out-of-the-box for the majority of use cases. Therefore, if Mockito (by default) does not work nicely with JDK 17 in more and more cases, I consider that a bug.</p>\n<p dir=\"auto\">That said, I don't think it is a good choice to force all existing users that are on JDK 16 and below to update their codebase wholesale to the new mockmaker. Inheritently, the new mockmaker works slightly different and forcing the update onto users doesn't feel like a nice solution. In the end, it works just fine on JDK 16 on below, so why change it?</p>\n<p dir=\"auto\">Therefore, my proposed way forward is:</p>\n<ol dir=\"auto\">\n<li>We publish Mockito 5 which switches the default mockmaker to the inline mockmaker on JDK 17+</li>\n<li>We update the JavaDoc of the subclass mockmaker to make users aware it is only intended to be used for specific use cases</li>\n</ol>\n<p dir=\"auto\">In terms of timeline, I think we should collective user feedback from the community first. This issue seems like the best place to do so. Once we are confident that we would be able to switch the default, we could publish Mockito 5. For now, what if we take June 2022 as a temporary date to make such a change, unless we receive strong/valid user feedback that should block such a change?</p>\n<p dir=\"auto\">CC @mockito/developers</p>",
  "description_text": "All right, we have been talking about this for a while so let's consolidate discussions. TLDR: more and more use cases are broken (by default) with Mockito and JDK 17. That's because the subclass mockmaker runs into fundamental limitations on JDK 17, but the inline mockmaker works as expected.\nThere are a lot of issues related to this:\n\n#2587\n#2560\n#2573\n#2561 (suspected)\n#2521 (suspected)\n#2449 (suspected)\n\nAt this point, the rate of issues created is increasing, as more and more of our users are adopting JDK 17+\nWe have historically talked about this as well: #1728\nWhen chatting with @raphw about this issue, there were a couple of options that we have available:\n\nKeep on using the subclass mockmaker by default on all JDK's and suggest users to use mockito-inline whenever appropriate\nSwitch the default to the inline mockmaker for all JDK's and put the subclass mockmaker in an artifact such as mockito-subclass (legacy)\nDetect the current JDK version and make the inline mockmaker the default on JDK 17+, but keep the subclass mockmaker the default for older JDK versions\n\nIn my opinion, we should opt for least amount of surprise. E.g. Mockito should \"just\" work out-of-the-box for the majority of use cases. Therefore, if Mockito (by default) does not work nicely with JDK 17 in more and more cases, I consider that a bug.\nThat said, I don't think it is a good choice to force all existing users that are on JDK 16 and below to update their codebase wholesale to the new mockmaker. Inheritently, the new mockmaker works slightly different and forcing the update onto users doesn't feel like a nice solution. In the end, it works just fine on JDK 16 on below, so why change it?\nTherefore, my proposed way forward is:\n\nWe publish Mockito 5 which switches the default mockmaker to the inline mockmaker on JDK 17+\nWe update the JavaDoc of the subclass mockmaker to make users aware it is only intended to be used for specific use cases\n\nIn terms of timeline, I think we should collective user feedback from the community first. This issue seems like the best place to do so. Once we are confident that we would be able to switch the default, we could publish Mockito 5. For now, what if we take June 2022 as a temporary date to make such a change, unless we receive strong/valid user feedback that should block such a change?\nCC @mockito/developers"
}