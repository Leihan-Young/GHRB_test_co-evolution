{
  "issue_id": 5863,
  "issue_url": "https://github.com/apache/rocketmq/issues/5863",
  "title": "[RIP-57] Implement tiered storage metadata",
  "description": "<p dir=\"auto\">link to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1506464155\" data-permission-text=\"Title is private\" data-url=\"https://github.com/apache/rocketmq/issues/5754\" data-hovercard-type=\"issue\" data-hovercard-url=\"/apache/rocketmq/issues/5754/hovercard\" href=\"https://github.com/apache/rocketmq/issues/5754\">#5754</a></p>\n<p dir=\"auto\">In this issue, I add a new module <code class=\"notranslate\">rocketmq-tiered-store</code> and implement the first function of this tiered storage: metadata.</p>\n<p dir=\"auto\">The tiered storage has three kinds of metadata: topic, queue, and file segment. I designed some interfaces to access metadata and persisted them to disk in JSON format like the topic config.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// File segment metadata will be published later\npublic interface TieredStoreMetadataStore {\n    @Nullable\n    TopicMetadata getTopic(String topic);\n    void iterateTopic(Consumer<TopicMetadata> callback);\n    TopicMetadata addTopic(String topic, long reserveTime);\n    void updateTopicReserveTime(String topic, long reserveTime);\n    void updateTopicStatus(String topic, int status);\n    void deleteTopic(String topic);\n\n    @Nullable\n    QueueMetadata getQueue(MessageQueue queue);\n    void iterateQueue(String topic, Consumer<QueueMetadata> callback);\n    QueueMetadata addQueue(MessageQueue queue, long baseOffset);\n    void updateQueue(QueueMetadata metadata);\n    void deleteQueue(MessageQueue queue);\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">// File segment metadata will be published later\npublic interface TieredStoreMetadataStore {\n    @Nullable\n    TopicMetadata getTopic(String topic);\n    void iterateTopic(Consumer<TopicMetadata> callback);\n    TopicMetadata addTopic(String topic, long reserveTime);\n    void updateTopicReserveTime(String topic, long reserveTime);\n    void updateTopicStatus(String topic, int status);\n    void deleteTopic(String topic);\n\n    @Nullable\n    QueueMetadata getQueue(MessageQueue queue);\n    void iterateQueue(String topic, Consumer<QueueMetadata> callback);\n    QueueMetadata addQueue(MessageQueue queue, long baseOffset);\n    void updateQueue(QueueMetadata metadata);\n    void deleteQueue(MessageQueue queue);\n}\n</code></pre></div>",
  "description_text": "link to #5754\nIn this issue, I add a new module rocketmq-tiered-store and implement the first function of this tiered storage: metadata.\nThe tiered storage has three kinds of metadata: topic, queue, and file segment. I designed some interfaces to access metadata and persisted them to disk in JSON format like the topic config.\n// File segment metadata will be published later\npublic interface TieredStoreMetadataStore {\n    @Nullable\n    TopicMetadata getTopic(String topic);\n    void iterateTopic(Consumer callback);\n    TopicMetadata addTopic(String topic, long reserveTime);\n    void updateTopicReserveTime(String topic, long reserveTime);\n    void updateTopicStatus(String topic, int status);\n    void deleteTopic(String topic);\n\n    @Nullable\n    QueueMetadata getQueue(MessageQueue queue);\n    void iterateQueue(String topic, Consumer callback);\n    QueueMetadata addQueue(MessageQueue queue, long baseOffset);\n    void updateQueue(QueueMetadata metadata);\n    void deleteQueue(MessageQueue queue);\n}\n"
}