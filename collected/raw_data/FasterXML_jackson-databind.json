[
  {
    "repository": {
      "pullRequest": {
        "title": "JsonPOJOBuilder.empty() causes incorrect config resolution",
        "url": "https://github.com/FasterXML/jackson-databind/pull/1558",
        "resourcePath": "/FasterXML/jackson-databind/pull/1558",
        "createdAt": "2017-03-15T16:15:58Z",
        "number": 1558,
        "mergeCommit": {
          "oid": "c719155136400e0b39fe77eb9463d861d98f723b",
          "message": "Merge pull request #1558 from stevenschlansker/builder-config-npe-1557\n\nJsonPOJOBuilder.empty() causes incorrect config resolution",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/c719155136400e0b39fe77eb9463d861d98f723b",
          "parents": {
            "nodes": [
              {
                "oid": "e0ea4fc24050c7c2a096b0979398e9cdd8960bbf",
                "message": "Improve number handling yet more"
              },
              {
                "oid": "040706ec09cd4ba6843d6b967d07a283ab39ed6f",
                "message": "JsonPOJOBuilder: remove unsafe 'empty' value\nAll it does is break your builder config (NPE)."
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/annotation/JsonPOJOBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderSimpleTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MTEwODgyOTY5OjA0MDcwNmVjMDljZDRiYTY4NDNkNmI5NjdkMDdhMjgzYWIzOWVkNmY=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/1558/commits/040706ec09cd4ba6843d6b967d07a283ab39ed6f"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1557,
                "url": "https://github.com/FasterXML/jackson-databind/issues/1557",
                "title": "jackson-databind 2.9.0-pr1 breaks builder deserialization",
                "bodyHTML": "<p dir=\"auto\">For a Builder like,</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@AutoValue\n@JsonDeserialize(builder = AutoValue_Restaurant.Builder.class)\n@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)\npublic abstract class Restaurant {\n    Restaurant() { }\n\n    @JsonProperty(&quot;RID&quot;)\n    public abstract long getRID();\n\n    @AutoValue.Builder\n    @JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)\n    @JsonPOJOBuilder(withPrefix=&quot;set&quot;)\n    public abstract static class Builder {\n        @JsonProperty(&quot;RID&quot;)\n        public abstract Builder setRID(long rid);\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-c1\">@</span><span class=\"pl-c1\">AutoValue</span>\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonDeserialize</span>(<span class=\"pl-s1\">builder</span> = <span class=\"pl-smi\">AutoValue_Restaurant</span>.<span class=\"pl-smi\">Builder</span>.<span class=\"pl-k\">class</span>)\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonNaming</span>(<span class=\"pl-smi\">PropertyNamingStrategy</span>.<span class=\"pl-smi\">UpperCamelCaseStrategy</span>.<span class=\"pl-k\">class</span>)\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Restaurant</span> {\n    <span class=\"pl-smi\">Restaurant</span>() { }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"RID\"</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-smi\">long</span> <span class=\"pl-en\">getRID</span>();\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-smi\">AutoValue</span>.<span class=\"pl-s1\">Builder</span>\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonNaming</span>(<span class=\"pl-smi\">PropertyNamingStrategy</span>.<span class=\"pl-smi\">UpperCamelCaseStrategy</span>.<span class=\"pl-k\">class</span>)\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonPOJOBuilder</span>(<span class=\"pl-s1\">withPrefix</span>=<span class=\"pl-s\">\"set\"</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Builder</span> {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"RID\"</span>)\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-smi\">Builder</span> <span class=\"pl-en\">setRID</span>(<span class=\"pl-smi\">long</span> <span class=\"pl-s1\">rid</span>);\n    }\n}</pre></div>\n<p dir=\"auto\">This code worked with 2.8 branch, but updating the 2.9.0-pr1 (to test out <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"181225699\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/1402\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/1402/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/1402\">#1402</a>) breaks it.  It seems that commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/FasterXML/jackson-databind/commit/e45279370ee9d3977776159c6f23d67f05379613/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/commit/e45279370ee9d3977776159c6f23d67f05379613\"><tt>e452793</tt></a> changed the default behavior of <code class=\"notranslate\">AnnotationInspector#findPOJOBuilderConfig()</code> to returning a default value rather than <code class=\"notranslate\">null</code>.</p>\n<p dir=\"auto\">We end up with a <code class=\"notranslate\">ParameterNamesAnnotationIntrospector</code> stacked on top of a <code class=\"notranslate\">JacksonAnnotationIntrospector</code>.  Previously, <code class=\"notranslate\">AnnotationIntrospectorPair#findPOJOBuilderConfig</code> would try the former, get null, then fallback to the latter.  Now it gets a bogus empty configuration from the former and never gets the correct configuration from the latter.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/1557",
                "createdAt": "2017-03-13T22:44:09Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Remove usage of _neitherNull on findProperty",
        "url": "https://github.com/FasterXML/jackson-databind/pull/1913",
        "resourcePath": "/FasterXML/jackson-databind/pull/1913",
        "createdAt": "2018-01-29T15:08:31Z",
        "number": 1913,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": []
        },
        "commits": {
          "edges": []
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1912,
                "url": "https://github.com/FasterXML/jackson-databind/issues/1912",
                "title": "`BeanDeserializerModifier.updateBuilder()` not work to set custom deserializer on a property (since 2.9.0)",
                "bodyHTML": "<p dir=\"auto\">Since <code class=\"notranslate\">2.9</code> use <code class=\"notranslate\">BeanDeserializerModifier.updateBuilder</code> not work to set custom deserializer on a property.</p>\n<p dir=\"auto\">This is because this method on <code class=\"notranslate\">BeanDeserializerBase</code> has bean replace by this :</p>\n<p dir=\"auto\">old</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public SettableBeanProperty findProperty(String propertyName)\n{\n    SettableBeanProperty prop = (_beanProperties == null) ?\n            null : _beanProperties.find(propertyName);\n    if (prop == null &amp;&amp; _propertyBasedCreator != null) {\n        prop = _propertyBasedCreator.findCreatorProperty(propertyName);\n    }\n    return prop;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-smi\">SettableBeanProperty</span> <span class=\"pl-s1\">findProperty</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">propertyName</span>)\n{\n    <span class=\"pl-smi\">SettableBeanProperty</span> <span class=\"pl-s1\">prop</span> = (<span class=\"pl-s1\">_beanProperties</span> == <span class=\"pl-c1\">null</span>) ?\n            <span class=\"pl-c1\">null</span> : <span class=\"pl-s1\">_beanProperties</span>.<span class=\"pl-en\">find</span>(<span class=\"pl-s1\">propertyName</span>);\n    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">prop</span> == <span class=\"pl-c1\">null</span> &amp;&amp; <span class=\"pl-s1\">_propertyBasedCreator</span> != <span class=\"pl-c1\">null</span>) {\n        <span class=\"pl-s1\">prop</span> = <span class=\"pl-s1\">_propertyBasedCreator</span>.<span class=\"pl-en\">findCreatorProperty</span>(<span class=\"pl-s1\">propertyName</span>);\n    }\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">prop</span>;\n}</pre></div>\n<p dir=\"auto\">new</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"    public SettableBeanProperty findProperty(String propertyName)\n    {\n        SettableBeanProperty prop = (_beanProperties == null) ?\n                null : _beanProperties.find(propertyName);\n        if (_neitherNull(prop, _propertyBasedCreator)) {\n            prop = _propertyBasedCreator.findCreatorProperty(propertyName);\n        }\n        return prop;\n    }\n\n   protected final static boolean _neitherNull(Object a, Object b) {\n        return (a != null) &amp;&amp; (b != null);\n    }\"><pre class=\"notranslate\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">SettableBeanProperty</span> <span class=\"pl-s1\">findProperty</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">propertyName</span>)\n    {\n        <span class=\"pl-smi\">SettableBeanProperty</span> <span class=\"pl-s1\">prop</span> = (<span class=\"pl-s1\">_beanProperties</span> == <span class=\"pl-c1\">null</span>) ?\n                <span class=\"pl-c1\">null</span> : <span class=\"pl-s1\">_beanProperties</span>.<span class=\"pl-en\">find</span>(<span class=\"pl-s1\">propertyName</span>);\n        <span class=\"pl-k\">if</span> (<span class=\"pl-en\">_neitherNull</span>(<span class=\"pl-s1\">prop</span>, <span class=\"pl-s1\">_propertyBasedCreator</span>)) {\n            <span class=\"pl-s1\">prop</span> = <span class=\"pl-s1\">_propertyBasedCreator</span>.<span class=\"pl-en\">findCreatorProperty</span>(<span class=\"pl-s1\">propertyName</span>);\n        }\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">prop</span>;\n    }\n\n   <span class=\"pl-k\">protected</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-s1\">_neitherNull</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">a</span>, <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">b</span>) {\n        <span class=\"pl-k\">return</span> (<span class=\"pl-s1\">a</span> != <span class=\"pl-c1\">null</span>) &amp;&amp; (<span class=\"pl-s1\">b</span> != <span class=\"pl-c1\">null</span>);\n    }</pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">prop == null</code> has been replace by <code class=\"notranslate\">prop != null</code>.</p>\n<p dir=\"auto\">So custom deserializer can not be used and are replaced by default.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/1912",
                "createdAt": "2018-01-29T15:03:23Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Implemented JsonNode#optional(...) methods",
        "url": "https://github.com/FasterXML/jackson-databind/pull/2150",
        "resourcePath": "/FasterXML/jackson-databind/pull/2150",
        "createdAt": "2018-10-03T08:34:12Z",
        "number": 2150,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/JsonNode.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MjE5OTU0ODM0OjkzODQwOTZlYzY2ZjVmZWIzMzk2ODNlNGJjZGQxNDRiMDZhYjQ3NDE=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/2150/commits/9384096ec66f5feb339683e4bcdd144b06ab4741"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2145,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2145",
                "title": "Add method #optional(String name) to be able to get an Optional JsonNode",
                "bodyHTML": "<p dir=\"auto\">So I had this idea of how nice it would be to have a getter method that returns an optional JsonNode, like <code class=\"notranslate\">#path(String name)</code> does, but when returning an Optional, it would be simpler to only use a node when its actually present, or handle cases that its not present in.</p>\n<p dir=\"auto\">Current Solution:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"this.guild = data.has(&quot;guild_id&quot;) ? discord.getServer(data.get(&quot;guild_id&quot;).asLong()) : null;\"><pre class=\"notranslate\"><span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">guild</span> = <span class=\"pl-s1\">data</span>.<span class=\"pl-en\">has</span>(<span class=\"pl-s\">\"guild_id\"</span>) ? <span class=\"pl-s1\">discord</span>.<span class=\"pl-en\">getServer</span>(<span class=\"pl-s1\">data</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"guild_id\"</span>).<span class=\"pl-en\">asLong</span>()) : <span class=\"pl-c1\">null</span>;</pre></div>\n<p dir=\"auto\">With optional nodes:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"this.guild = data.getOptional(&quot;guild_id&quot;).map(node -&gt; discord.getServer(node.asLong())).orElse(null);\"><pre class=\"notranslate\"><span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">guild</span> = <span class=\"pl-s1\">data</span>.<span class=\"pl-en\">getOptional</span>(<span class=\"pl-s\">\"guild_id\"</span>).<span class=\"pl-en\">map</span>(<span class=\"pl-s1\">node</span> -&gt; <span class=\"pl-s1\">discord</span>.<span class=\"pl-en\">getServer</span>(<span class=\"pl-s1\">node</span>.<span class=\"pl-en\">asLong</span>())).<span class=\"pl-en\">orElse</span>(<span class=\"pl-c1\">null</span>);</pre></div>\n<p dir=\"auto\">In this scenario, the difference is counter intuitive, because I can use a ternary-if in this case.<br>\nSee this scenario:<br>\nWithout the addition:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"        long afkChannelId = data.path(&quot;afk_channel_id&quot;).asLong(-1);\n        if (afkChannel == null || afkChannel.getId() != afkChannelId) {\n            afkChannel = afkChannelId == -1 ? null : discord.getChannelCache()\n                    .getOrRequest(afkChannelId, afkChannelId);\n            traits.add(AFK_CHANNEL);\n        }\"><pre class=\"notranslate\">        <span class=\"pl-smi\">long</span> <span class=\"pl-s1\">afkChannelId</span> = <span class=\"pl-s1\">data</span>.<span class=\"pl-en\">path</span>(<span class=\"pl-s\">\"afk_channel_id\"</span>).<span class=\"pl-en\">asLong</span>(-<span class=\"pl-c1\">1</span>);\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">afkChannel</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-s1\">afkChannel</span>.<span class=\"pl-en\">getId</span>() != <span class=\"pl-s1\">afkChannelId</span>) {\n            <span class=\"pl-s1\">afkChannel</span> = <span class=\"pl-s1\">afkChannelId</span> == -<span class=\"pl-c1\">1</span> ? <span class=\"pl-c1\">null</span> : <span class=\"pl-s1\">discord</span>.<span class=\"pl-en\">getChannelCache</span>()\n                    .<span class=\"pl-en\">getOrRequest</span>(<span class=\"pl-s1\">afkChannelId</span>, <span class=\"pl-s1\">afkChannelId</span>);\n            <span class=\"pl-s1\">traits</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-c1\">AFK_CHANNEL</span>);\n        }</pre></div>\n<p dir=\"auto\">With the addition:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"        Optional&lt;JsonNode&gt; node = data.getOptional(&quot;afk_channel_id&quot;);\n        if (afkChannel == null || node.map(idN -&gt; idN.asLong() == afkChannel.getId()).orElse(false)) {\n            afkChannel = node.map(json -&gt; discord.getChannelCache().getOrRequest(json.asLong(), json.asLong())).orElse(null);\n        }\"><pre class=\"notranslate\">        <span class=\"pl-smi\">Optional</span>&lt;<span class=\"pl-smi\">JsonNode</span>&gt; <span class=\"pl-s1\">node</span> = <span class=\"pl-s1\">data</span>.<span class=\"pl-en\">getOptional</span>(<span class=\"pl-s\">\"afk_channel_id\"</span>);\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">afkChannel</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-s1\">node</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-s1\">idN</span> -&gt; <span class=\"pl-s1\">idN</span>.<span class=\"pl-en\">asLong</span>() == <span class=\"pl-s1\">afkChannel</span>.<span class=\"pl-en\">getId</span>()).<span class=\"pl-en\">orElse</span>(<span class=\"pl-c1\">false</span>)) {\n            <span class=\"pl-s1\">afkChannel</span> = <span class=\"pl-s1\">node</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-s1\">json</span> -&gt; <span class=\"pl-s1\">discord</span>.<span class=\"pl-en\">getChannelCache</span>().<span class=\"pl-en\">getOrRequest</span>(<span class=\"pl-s1\">json</span>.<span class=\"pl-en\">asLong</span>(), <span class=\"pl-s1\">json</span>.<span class=\"pl-en\">asLong</span>())).<span class=\"pl-en\">orElse</span>(<span class=\"pl-c1\">null</span>);\n        }</pre></div>\n<p dir=\"auto\">I think this scenario could show why the addition could be helpful.<br>\nIf this idea gets approved and it is wished for; I could work on a PR myself.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2145",
                "createdAt": "2018-09-26T11:44:17Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "3.x"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Use key type factory methods ahead of ctors",
        "url": "https://github.com/FasterXML/jackson-databind/pull/2180",
        "resourcePath": "/FasterXML/jackson-databind/pull/2180",
        "createdAt": "2018-11-07T11:07:55Z",
        "number": 2180,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/TestGenericMapDeser.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MjI4OTkyNDA0OjA3YWNhMDRmYTczOWM5MTU1ODBkNzYxZGYyNjk5YTE0YzU4OWMzNWE=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/2180/commits/07aca04fa739c915580d761df2699a14c589c35a"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2158,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2158",
                "title": "@JsonCreator ignored when deserializing map keys",
                "bodyHTML": "<p dir=\"auto\">I'm unsure whether this is a bug or expected behavior, but I found it a bit surprising. Given the following class:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class Key {\n\n    private final String value;\n\n    private Key(final String value) {\n        this.value = value;\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n    public static Key of(final String value) {\n        return new Key(value);\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-smi\">Key</span> {\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>;\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Key</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">value</span> = <span class=\"pl-s1\">value</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>(<span class=\"pl-s1\">mode</span> = <span class=\"pl-smi\">JsonCreator</span>.<span class=\"pl-s1\">Mode</span>.<span class=\"pl-c1\">DELEGATING</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Key</span> <span class=\"pl-en\">of</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Key</span>(<span class=\"pl-s1\">value</span>);\n    }\n}</pre></div>\n<p dir=\"auto\">Then, when a <code class=\"notranslate\">Key</code> value is deserialized, the factory method annotated with <code class=\"notranslate\">@JsonCreator</code> is called as expected.  If <code class=\"notranslate\">Key</code> is used as a key in a <code class=\"notranslate\">Map</code> though, the factory method is not called and Key's private constructor is used directly instead.</p>\n<p dir=\"auto\"><code class=\"notranslate\">Key</code> is of course reduced to demonstrate the issue and hence lacking all properties that would make it actually useful as a key in a map.</p>\n<p dir=\"auto\">I tried the above with version 2.9.7. A repository demonstrating the issue can be found at <a href=\"https://github.com/Trundle/jackson-databind-oddity\">https://github.com/Trundle/jackson-databind-oddity</a></p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2158",
                "createdAt": "2018-10-17T19:01:06Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "duplicate"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add new Serialization Feature to avoid fractions",
        "url": "https://github.com/FasterXML/jackson-databind/pull/2630",
        "resourcePath": "/FasterXML/jackson-databind/pull/2630",
        "createdAt": "2020-02-27T11:12:18Z",
        "number": 2630,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzgwNzgyNjczOjExNzY3MjU5ZTljOGFjODhlY2M0MDQ0MGUxODZmZTE2NDlmOGY1MmU=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/2630/commits/11767259e9c8ac88ecc40440e186fe1649f8f52e"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 116,
                "url": "https://github.com/FasterXML/jackson-modules-java8/issues/116",
                "title": "Allow Instant to be serialized as epochSecond without the fraction part",
                "bodyHTML": "<p dir=\"auto\">I have an <code class=\"notranslate\">Instant</code> field that represents an epoch timestamp in seconds.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @JsonProperty(&quot;registered_at&quot;)\n    @JsonFormat(shape = JsonFormat.Shape.NUMBER)\n    private Instant registeredAt;\"><pre class=\"notranslate\"><code class=\"notranslate\">    @JsonProperty(\"registered_at\")\n    @JsonFormat(shape = JsonFormat.Shape.NUMBER)\n    private Instant registeredAt;\n</code></pre></div>\n<p dir=\"auto\">the mapper is configured this way</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    .featuresToDisable(ADJUST_DATES_TO_CONTEXT_TIME_ZONE,\n                       FAIL_ON_UNKNOWN_PROPERTIES,\n                       WRITE_DATES_AS_TIMESTAMPS,\n                       SORT_PROPERTIES_ALPHABETICALLY)\"><pre class=\"notranslate\"><code class=\"notranslate\">    .featuresToDisable(ADJUST_DATES_TO_CONTEXT_TIME_ZONE,\n                       FAIL_ON_UNKNOWN_PROPERTIES,\n                       WRITE_DATES_AS_TIMESTAMPS,\n                       SORT_PROPERTIES_ALPHABETICALLY)\n</code></pre></div>\n<p dir=\"auto\">However when this gets serialized as</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;registered_at&quot; : 1420324047.000000000\"><pre class=\"notranslate\"><code class=\"notranslate\">\"registered_at\" : 1420324047.000000000\n</code></pre></div>\n<p dir=\"auto\">By looking at the code there's no way to serialize this value as epoch seconds using the standard mechanism.</p>\n<p dir=\"auto\"><code class=\"notranslate\">InstantSerializerBase.serialize(T value, JsonGenerator generator, SerializerProvider provider)</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        if (useTimestamp(provider)) {\n            if (useNanoseconds(provider)) {\n                generator.writeNumber(DecimalUtils.toBigDecimal(\n                        getEpochSeconds.applyAsLong(value), getNanoseconds.applyAsInt(value)\n                ));\n                return;\n            }\n            generator.writeNumber(getEpochMillis.applyAsLong(value));\n            return;\n        }\"><pre class=\"notranslate\"><code class=\"notranslate\">        if (useTimestamp(provider)) {\n            if (useNanoseconds(provider)) {\n                generator.writeNumber(DecimalUtils.toBigDecimal(\n                        getEpochSeconds.applyAsLong(value), getNanoseconds.applyAsInt(value)\n                ));\n                return;\n            }\n            generator.writeNumber(getEpochMillis.applyAsLong(value));\n            return;\n        }\n</code></pre></div>\n<p dir=\"auto\">The only option is to use :</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @JsonGetter(&quot;registered_at&quot;)\n    public long getRegisteredAtEpoch() {\n        return registeredAt.getEpochSecond();\n    }\"><pre class=\"notranslate\"><code class=\"notranslate\">    @JsonGetter(\"registered_at\")\n    public long getRegisteredAtEpoch() {\n        return registeredAt.getEpochSecond();\n    }\n</code></pre></div>\n<p dir=\"auto\">It could be nice if there could be way to tell jackson to avoid serializing the fraction part.</p>",
                "resourcePath": "/FasterXML/jackson-modules-java8/issues/116",
                "createdAt": "2019-07-04T14:21:40Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "new-feature"
                      }
                    },
                    {
                      "node": {
                        "name": "date-time-config"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "implement #2636: provide overloadings of ObjectReader.readValue() taking Class valueType",
        "url": "https://github.com/FasterXML/jackson-databind/pull/2637",
        "resourcePath": "/FasterXML/jackson-databind/pull/2637",
        "createdAt": "2020-03-02T13:32:33Z",
        "number": 2637,
        "mergeCommit": {
          "oid": "7e7fe80d7645e00f32ca0c456c42ea2c983d7f43",
          "message": "Issue #2636 - Mockito tests of overloaded methods",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/7e7fe80d7645e00f32ca0c456c42ea2c983d7f43",
          "parents": {
            "nodes": [
              {
                "oid": "f55f8e8c012676063fee6bb319ed886a8d9961de",
                "message": "Issue #2636 - provide overloadings of ObjectReader.readValue() taking Class valueType"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ObjectReader.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/ObjectReaderTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/ObjectReaderValueOfWithValueTypeTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzgyMzg2MTk0OjJmNGNkZTBhNDQ2NmFiYjlhNmUxNDA2Y2E4OTBiOGFiZjY0NmMyZTA=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/2637/commits/2f4cde0a4466abb9a6e1406ca890b8abf646c2e0"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2636,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2636",
                "title": "ObjectReader readValue lacks Class<T> argument",
                "bodyHTML": "<p dir=\"auto\">Since ObjectMappers are mutable, I am exposing ObjectReader and ObjectWriter through a factory.</p>\n<p dir=\"auto\">Whereas ObjectMapper.readValue(String content, Class valueType) is of known Type =valueType, the equivalent methods on ObjectReader are declared as returning  T but do not take a Class valueType parameter.</p>\n<p dir=\"auto\">Even ObjectReader.forType(Class&lt;?&gt; valueType) does not return a parameterized instance of ObjectReader.</p>\n<p dir=\"auto\">The impact is that, whereas with ObjectMapper.readValue(String,Class) I do not have to typecast the returned value, when I start using ObjectReader.readValue(String) or ObjectReader.forType(Class).readValue(String) I must explicitly typecast the result.</p>\n<p dir=\"auto\">Surely either ObjectReader.readValue should be overloaded with Class valueType (presumably this is trivially easy), or ObjectReader.forType(Class valueType) should return a fully parameterized ObjectReader (more complicated as ObjectReader is not a parameterized class)?</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2636",
                "createdAt": "2020-03-02T12:28:18Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Ignore the explicit names of READONLY properties when they are available",
        "url": "https://github.com/FasterXML/jackson-databind/pull/2720",
        "resourcePath": "/FasterXML/jackson-databind/pull/2720",
        "createdAt": "2020-05-13T13:41:20Z",
        "number": 2720,
        "mergeCommit": {
          "oid": "75f0777e17f425616287697a631cd78fa0c1463d",
          "message": "Ignore the explicit names of READONLY properties when they are available (#2720)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/75f0777e17f425616287697a631cd78fa0c1463d",
          "parents": {
            "nodes": [
              {
                "oid": "a061742d08b9d1c5bc80950ff933a6cc6487646d",
                "message": "Merge branch '2.12'"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/ReadOnlyDeser2719Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDE3MzcwNzAzOmRkNWU2ZDA0NmYyYjQzYzM1ZjU4YTE3OTE5ZWIyZWQ5MTk3ZGMwZWM=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/2720/commits/dd5e6d046f2b43c35f58a17919eb2ed9197dc0ec"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2719,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2719",
                "title": "`FAIL_ON_IGNORED_PROPERTIES` does not throw on `READONLY` properties with an explicit name",
                "bodyHTML": "<p dir=\"auto\">As mentioned in the title, <code class=\"notranslate\">FAIL_ON_IGNORED_PROPERTIES</code> does not throw on properties annotated with <code class=\"notranslate\">@JsonProperty(value = 'XXX', access = JsonProperty.Access.READ_ONLY)</code>. I believe that it is because the implicit name of the property is added to the list of ignorals in <code class=\"notranslate\">POJOPropertiesCollector</code> rather than the explicit names when at least one is available.</p>\n<p dir=\"auto\">I have prepared a Pull Request for this issue, I'll provide it as soon as possible.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2719",
                "createdAt": "2020-05-13T13:33:26Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "FasterXML/jackson-databind#1296 @JsonIncludeProperties",
        "url": "https://github.com/FasterXML/jackson-databind/pull/2771",
        "resourcePath": "/FasterXML/jackson-databind/pull/2771",
        "createdAt": "2020-06-18T01:36:29Z",
        "number": 2771,
        "mergeCommit": {
          "oid": "d9c0332e5ad76d7e4f35d9906f0b8e94a5237627",
          "message": "FasterXML/jackson-databind#1296 @JsonIncludeProperties (#2771)\n\nImplement #1296 (add and support `@JsonIncludeProperties`)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/d9c0332e5ad76d7e4f35d9906f0b8e94a5237627",
          "parents": {
            "nodes": [
              {
                "oid": "5758c6bce6773108beeadd8090641f21778ba5e0",
                "message": "Update release notes wrt #2215"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/main/java/com/fasterxml/jackson/databind/util/IgnorePropertiesUtil.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/IncludeWithDeserTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/ser/filter/IncludePropsForSerTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM2MTc3MzM3OmZiZjRjMTJhY2JhZTI0YjkxYWVhOTJkMzVkMDhkZjA3MzQ3MDgxYzM=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/2771/commits/fbf4c12acbae24b91aea92d35d08df07347081c3"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1296,
                "url": "https://github.com/FasterXML/jackson-databind/issues/1296",
                "title": "Add `@JsonIncludeProperties(propertyNames)` (reverse of `@JsonIgnoreProperties`)",
                "bodyHTML": "<p dir=\"auto\">In some/many cases it'd be easier to just name properties to include, reverse of <code class=\"notranslate\">@JsonIgnoreProperties</code>. And similarly, it should be possible to define baselines by type as well as property overrides; and if ever we support inheritance-merging in class hierarchy, use similar merging strategies (merge vs replace).</p>\n<p dir=\"auto\">NOTE: for this (2.12.0) implementation, no merging exists for class annotations -- sub-class definitions will always simply replace super-class/super-interface definitions. Similarly there is no way to specify inclusions using \"ConfigOverride\" system, although ignoral is possible. Latter would likely be relatively easy to implement (so feel free to file a follow-up request); former (annotation merging) is a more difficult ask (but likewise feel free to file a feature request).</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/1296",
                "createdAt": "2016-07-14T03:12:47Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "most-wanted"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Adds support for `@JsonKey` annotation",
        "url": "https://github.com/FasterXML/jackson-databind/pull/2905",
        "resourcePath": "/FasterXML/jackson-databind/pull/2905",
        "createdAt": "2020-10-26T20:37:11Z",
        "number": 2905,
        "mergeCommit": {
          "oid": "ecc9bfedde013bcc53e08199ef1ff58cfa7833ce",
          "message": "Adds support for `@JsonKey` annotation (#2905)\n\nAdds support for `@JsonKey` annotation\r\n\r\nWhen serializing the key of a Map, look for a `@JsonKey` annotation.\r\nWhen present (taking priority over `@JsonValue`), skip the\r\nStdKey:Serializer and attempt to find a serializer for the inner type.\r\n\r\nFixes #2871",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/ecc9bfedde013bcc53e08199ef1ff58cfa7833ce",
          "parents": {
            "nodes": [
              {
                "oid": "3de2de0d97d8edd87ec3d4311dd174a7f3aa58c3",
                "message": "Rename test class"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/BeanDescription.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/MapSerializingTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTEwMjkyOTY4OjUxYWUwZDc5MDQ5ZTZlODQxNDM4ODVmZmUwNDczMmU4OWQ4NzM2YjE=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/2905/commits/51ae0d79049e6e84143885ffe04732e89d8736b1"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2871,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2871",
                "title": "Add `@JsonKey` annotation (similar to `@JsonValue`) for customizable serialization of Map keys",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nWhen serializing a map key, if the key's type uses <code class=\"notranslate\">@JsonValue</code> on one of its attributes, and if that attribute's type uses <code class=\"notranslate\">@JsonValue</code> on one of its own attributes, the second <code class=\"notranslate\">@JsonValue</code> is ignored, and <code class=\"notranslate\">toString()</code> is used instead.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n2.10.0</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"    class Inner {\n\n        @JsonValue\n        String string;\n\n        Inner(String string) {\n            this.string = string;\n        }\n\n        public String toString() {\n            return &quot;Inner(String=&quot;+this.string+&quot;)&quot;;\n        }\n\n    }\n\n    class Outer {\n\n        @JsonValue\n        Inner inner;\n\n        Outer(Inner inner) {\n            this.inner = inner;\n        }\n\n    }\n\n    public void test() throws Exception {\n        Outer outer = new Outer(new Inner(&quot;key&quot;));\n        ObjectMapper mapper = new ObjectMapper();\n        System.out.println(mapper.writeValueAsString(outer)); // outputs &quot;key&quot;, as expected\n        System.out.println(mapper.writeValueAsString(Collections.singletonMap(outer,&quot;value&quot;))); // outputs {&quot;Inner(String=key)&quot;:&quot;value&quot;}, expected {&quot;key&quot;:&quot;value&quot;}\n    }\"><pre class=\"notranslate\">    <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Inner</span> {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonValue</span>\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">string</span>;\n\n        <span class=\"pl-smi\">Inner</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">string</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">string</span> = <span class=\"pl-s1\">string</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"Inner(String=\"</span>+<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">string</span>+<span class=\"pl-s\">\")\"</span>;\n        }\n\n    }\n\n    <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Outer</span> {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonValue</span>\n        <span class=\"pl-smi\">Inner</span> <span class=\"pl-s1\">inner</span>;\n\n        <span class=\"pl-smi\">Outer</span>(<span class=\"pl-smi\">Inner</span> <span class=\"pl-s1\">inner</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">inner</span> = <span class=\"pl-s1\">inner</span>;\n        }\n\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span> {\n        <span class=\"pl-smi\">Outer</span> <span class=\"pl-s1\">outer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Outer</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Inner</span>(<span class=\"pl-s\">\"key\"</span>));\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">outer</span>)); <span class=\"pl-c\">// outputs \"key\", as expected</span>\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-smi\">Collections</span>.<span class=\"pl-en\">singletonMap</span>(<span class=\"pl-s1\">outer</span>,<span class=\"pl-s\">\"value\"</span>))); <span class=\"pl-c\">// outputs {\"Inner(String=key)\":\"value\"}, expected {\"key\":\"value\"}</span>\n    }</pre></div>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2871",
                "createdAt": "2020-10-05T14:48:46Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "good first issue"
                      }
                    },
                    {
                      "node": {
                        "name": "hacktoberfest-accepted"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Make some java platform modules optional",
        "url": "https://github.com/FasterXML/jackson-databind/pull/2913",
        "resourcePath": "/FasterXML/jackson-databind/pull/2913",
        "createdAt": "2020-11-02T11:16:27Z",
        "number": 2913,
        "mergeCommit": {
          "oid": "5ad9f04624669cb0c493665c31e19d681f94c21f",
          "message": "Make some java platform modules optional (#2913)\n\n* Remove java.logging module dependency\r\n* Make java.xml module optional (static)\r\n* Make java.sql module optional (static)\r\n* Make java.desktop module optional (static)\r\n\r\nSome java environments already don't have java.sql classes\r\nMake DateDeserializers weakly depend on java.sql classes\r\nSerialization is already weak, as pe [databind#1073]\r\n\r\njava.desktop classes (java.beans.ConstructorProperties and java.beans.Transient) are used in com.fasterxml.jackson.databind.ext.Java7SupportImpl, if java.beans classes are not present, then jackson will not load Java7SupportImpl\r\n\r\nCo-authored-by: Xakep_SDK <admin@xakeps.dk>",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/5ad9f04624669cb0c493665c31e19d681f94c21f",
          "parents": {
            "nodes": [
              {
                "oid": "dd8d755f6c828c2300ea69d5b517bbd8c5b9165c",
                "message": "Remove java8 API invocation from AnnotatedConstructor (#2918)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ext/Java7Handlers.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/moditect/module-info.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTEzOTg2NjU2OmRjZTcxYzAyMGZiNDliM2YwZDcwN2EwYzI2NTRiOGZjZjhhMjE3Njg=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/2913/commits/dce71c020fb49b3f0d707a0c2654b8fcf8a21768"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2910,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2910",
                "title": "Make some java platform modules optional",
                "bodyHTML": "<p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong><br>\nJackson module descriptor implicitly depends on these modules:</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">requires java.desktop</code></li>\n<li><code class=\"notranslate\">requires java.logging</code></li>\n<li><code class=\"notranslate\">requires java.sql</code></li>\n<li><code class=\"notranslate\">requires java.xml</code><br>\nCan they become optional?</li>\n</ol>\n<p dir=\"auto\"><strong>Describe the solution you'd like</strong><br>\nMake these modules optional</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">requires static java.desktop</code></li>\n<li><code class=\"notranslate\">requires static java.logging</code></li>\n<li><code class=\"notranslate\">requires static java.sql</code></li>\n<li><code class=\"notranslate\">requires static java.xml</code><br>\nThis may require some code changes, since making module optional means that module may not be present at runtime.<br>\nSo code should check, if relevant classes are present.</li>\n</ol>\n<p dir=\"auto\"><strong>Usage example</strong><br>\njlink and jpackage will produce smaller images. <code class=\"notranslate\">java.sql</code> itself brings 10MB+ of dependencies, according to this <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"623953987\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1707\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1707/hovercard?comment_id=696492821&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/pull/1707#issuecomment-696492821\">google/gson#1707 (comment)</a></p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2910",
                "createdAt": "2020-10-30T08:38:33Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add feature to inverse read/write access logic",
        "url": "https://github.com/FasterXML/jackson-databind/pull/2966",
        "resourcePath": "/FasterXML/jackson-databind/pull/2966",
        "createdAt": "2020-12-02T14:07:22Z",
        "number": 2966,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/MapperFeature.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/ReadOrWriteOnlyTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTMxMDQxMjMzOjlhMzc5NWE2Yjc5MDMzZjQ5OWJlZjRhYTkwY2IwNTBjNjdiNWI5N2U=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/2966/commits/9a3795a6b79033f499bef4aa90cb050c67b5b97e"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2951,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2951",
                "title": "Inverse access of `@JsonProperty(access=)` so it can work differently on server side and client side",
                "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JsonProperty/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JsonProperty\">@JsonProperty</a>'s access mode should be inversed on server side and client side when both sides are sharing the same module class.</p>\n<p dir=\"auto\">when using access = READ_ONLY with <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JsonProperty/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JsonProperty\">@JsonProperty</a>, on the server side, that means property need to be serialized but can't be deserialized. but on the client side, the same property should be able to be deserialized but not to be serialized.</p>\n<p dir=\"auto\">Is it good to have an out-of-box feature to do this inversion?</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2951",
                "createdAt": "2020-11-20T15:16:56Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add Array node#set methods",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3156",
        "resourcePath": "/FasterXML/jackson-databind/pull/3156",
        "createdAt": "2021-05-16T15:41:44Z",
        "number": 3156,
        "mergeCommit": {
          "oid": "884a0506488c14dcfa9c3370e800fe47ef581b2b",
          "message": "Add Array node#set methods (#3156)\n\nfeat: add ArrayNode#set methods",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/884a0506488c14dcfa9c3370e800fe47ef581b2b",
          "parents": {
            "nodes": [
              {
                "oid": "9202d13c121fb6c86d9e707e8c47fa032fcc5671",
                "message": "Fix #3091"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/node/ArrayNodeTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjQ1MzM0NzYwOjE0NmRhZTkzMjY1MTY2MDIzZTNkOWU1OWI1MmI3NTJjMWM5Y2YzYTY=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3156/commits/146dae93265166023e3d9e59b52b752c1c9cf3a6"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3154,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3154",
                "title": "Add `ArrayNode#set(int index, primitive_type value)`",
                "bodyHTML": "<p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong><br>\nCurrently, we could <code class=\"notranslate\">add</code>/<code class=\"notranslate\">insert</code> values to <code class=\"notranslate\">ArrayNode</code> instance. but the <code class=\"notranslate\">set</code> method only accepts <code class=\"notranslate\">JsonNode</code> instance.</p>\n<p dir=\"auto\"><strong>Describe the solution you'd like</strong><br>\nIt would be nice if we have <code class=\"notranslate\">set</code> methods like <code class=\"notranslate\">add</code>/<code class=\"notranslate\">insert</code></p>\n<p dir=\"auto\"><strong>Usage example</strong></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"ArrayNode arr = getNewArrayNode();\narr.add(&quot;a&quot;);\narr.insert(0, &quot;b&quot;);\narr.set(0, &quot;c&quot;);        // &lt;------- Missing\"><pre class=\"notranslate\"><span class=\"pl-smi\">ArrayNode</span> <span class=\"pl-s1\">arr</span> = <span class=\"pl-en\">getNewArrayNode</span>();\n<span class=\"pl-s1\">arr</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-s\">\"a\"</span>);\n<span class=\"pl-s1\">arr</span>.<span class=\"pl-en\">insert</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\">\"b\"</span>);\n<span class=\"pl-s1\">arr</span>.<span class=\"pl-en\">set</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\">\"c\"</span>);        <span class=\"pl-c\">// &lt;------- Missing</span></pre></div>\n<p dir=\"auto\"><strong>Additional context</strong><br>\nN/A</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3154",
                "createdAt": "2021-05-15T13:22:56Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Support `suppressed` property when deserializing `Throwable`",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3179",
        "resourcePath": "/FasterXML/jackson-databind/pull/3179",
        "createdAt": "2021-06-18T09:54:28Z",
        "number": 3179,
        "mergeCommit": {
          "oid": "a05e2cb80b56d4989bf1c3b605bb5ad36f8b6094",
          "message": "Support `suppressed` property when deserializing `Throwable` (#3179)\n\nImplement #31767: support `suppressed` property when deserializing Throwable",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/a05e2cb80b56d4989bf1c3b605bb5ad36f8b6094",
          "parents": {
            "nodes": [
              {
                "oid": "91a98ac5058db5405dcfae62a7468798dacdc8f5",
                "message": "Update release notes"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjczMzMzODQ2OjAyMTAwMGZkNjVhMmRmNWNkMjY1NjJiYmM1ZmQzYWVkZTdiMWJiNGI=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3179/commits/021000fd65a2df5cd26562bbc5fd3aede7b1bb4b"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3177,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3177",
                "title": "Support `suppressed` property when deserializing `Throwable`",
                "bodyHTML": "<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">when using Jackson 2.12.x in my project to serialize / deserialize instances of <code class=\"notranslate\">Throwable</code>, I noticed that the serialized JSON output contains the <code class=\"notranslate\">suppressed</code> property. This property is also successfully filled in JSON if the original <code class=\"notranslate\">Throwable</code> has suppressed exceptions. However, when deserializing the JSON back again to a cloned <code class=\"notranslate\">Throwable</code> then this property is getting ignored, i.e. the cloned instance has an empty array of suppressed exceptions.</p>\n<p dir=\"auto\">When debugging this issue, I think I narrowed it down to <a href=\"https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java#L443\">BeanDeserializerFactory.buildThrowableDeserializer(...)</a> where the <code class=\"notranslate\">suppressed</code> property is added to the ignorable properties.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Java 7 also added &quot;getSuppressed&quot;, skip if we have such data:\nbuilder.addIgnorable(&quot;suppressed&quot;);\"><pre class=\"notranslate\"><code class=\"notranslate\">// Java 7 also added \"getSuppressed\", skip if we have such data:\nbuilder.addIgnorable(\"suppressed\");\n</code></pre></div>\n<p dir=\"auto\">Based on the comment, I guess this ignoring of the <code class=\"notranslate\">suppressed</code> property has historic reasons because it was only introduced in JDK 7, and only since <code class=\"notranslate\">jackson-databind</code> 2.7 the Minimum JDK version is 1.7.</p>\n<p dir=\"auto\">Given that the Minimum JDK version is even 1.8 since <code class=\"notranslate\">jackson-databind</code> 2.12, what is your opinion on introducing deserialization support for the <code class=\"notranslate\">suppressed</code> property? If you agree that this support should be introduced, I would give it a try to introduce it in <code class=\"notranslate\">BeanDeserializerFactory.buildThrowableDeserializer(...)</code> and then send you a pull request. Most likely, I would implement it in a style similar to how the <code class=\"notranslate\">cause</code> property of <code class=\"notranslate\">Throwable</code> gets deserialized, i.e. I would add a manually constructed <code class=\"notranslate\">SettableBeanProperty</code> that is using <code class=\"notranslate\">Throwable.addSuppressed(...)</code> for adding the suppressed exceptions to the <code class=\"notranslate\">Throwable</code> instance.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3177",
                "createdAt": "2021-06-16T16:46:07Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Behavior of `AnnotatedMember.equals()` (#3187)",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3195",
        "resourcePath": "/FasterXML/jackson-databind/pull/3195",
        "createdAt": "2021-07-01T09:57:38Z",
        "number": 3195,
        "mergeCommit": {
          "oid": "2b5a31996d9ca2170cbd61b465332863b0f291d7",
          "message": "Behavior of `AnnotatedMember.equals()` (#3187) (#3195)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/2b5a31996d9ca2170cbd61b465332863b0f291d7",
          "parents": {
            "nodes": [
              {
                "oid": "2c221ad9015cd82fc36b91b55904acb07546408f",
                "message": "backport FUNDING link"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "release-notes/CREDITS-2.x"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/introspect/AnnotatedMemberEqualityTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjgxNjkyMTI2OmU3MTE1ZjI2NjFhMDMzOWQzODk1YzAxYjY4YTIxNTM2OGQyYWM3OTQ=",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3195/commits/e7115f2661a0339d3895c01b68a215368d2ac794"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3187,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3187",
                "title": "`AnnotatedMember.equals()` does not work reliably",
                "bodyHTML": "<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">I noticed some strange behavior of the current <code class=\"notranslate\">AnnotatedMember.equals()</code> implementations. Following test case for <code class=\"notranslate\">AnnotatedConstructor.equals()</code> currently fails:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public void testAnnotatedConstructorEquality() {\n    ObjectMapper mapper = new ObjectMapper();\n    DeserializationConfig context = mapper.getDeserializationConfig();\n    JavaType beanType = mapper.constructType(SomeBean.class);\n\n    AnnotatedClass instance1 = AnnotatedClassResolver.resolve(context, beanType, context);\n    AnnotatedClass instance2 = AnnotatedClassResolver.resolve(context, beanType, context);\n\n    // Successful\n    assertEquals(instance1, instance2);\n    assertEquals(instance1.getDefaultConstructor().getAnnotated(), instance2.getDefaultConstructor().getAnnotated());\n    \n    // Fails\n    assertEquals(instance1.getDefaultConstructor(), instance2.getDefaultConstructor());\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">public void testAnnotatedConstructorEquality() {\n    ObjectMapper mapper = new ObjectMapper();\n    DeserializationConfig context = mapper.getDeserializationConfig();\n    JavaType beanType = mapper.constructType(SomeBean.class);\n\n    AnnotatedClass instance1 = AnnotatedClassResolver.resolve(context, beanType, context);\n    AnnotatedClass instance2 = AnnotatedClassResolver.resolve(context, beanType, context);\n\n    // Successful\n    assertEquals(instance1, instance2);\n    assertEquals(instance1.getDefaultConstructor().getAnnotated(), instance2.getDefaultConstructor().getAnnotated());\n    \n    // Fails\n    assertEquals(instance1.getDefaultConstructor(), instance2.getDefaultConstructor());\n}\n</code></pre></div>\n<p dir=\"auto\">Based on the first two successful <code class=\"notranslate\">assertEquals(...)</code> statements, I would have expected that the third <code class=\"notranslate\">assertEquals(...)</code> should be also successful. However, it currently fails.</p>\n<p dir=\"auto\">The reason for this behavior is that <code class=\"notranslate\">AnnotatedConstructor.equals()</code> is currently using <code class=\"notranslate\">==</code> for comparing the two constructors:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public boolean equals(Object o) {\n    if (o == this) return true;\n    return ClassUtil.hasClass(o, getClass())\n            &amp;&amp; (((AnnotatedConstructor) o)._constructor == _constructor);\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">public boolean equals(Object o) {\n    if (o == this) return true;\n    return ClassUtil.hasClass(o, getClass())\n            &amp;&amp; (((AnnotatedConstructor) o)._constructor == _constructor);\n}\n</code></pre></div>\n<p dir=\"auto\">However, the implementation of the reflection API in <code class=\"notranslate\">java.lang.Class</code> is always copying / cloning the <code class=\"notranslate\">Field</code>, <code class=\"notranslate\">Method</code> and <code class=\"notranslate\">Constructor</code> instances prior to returning them to the caller (e.g. see <code class=\"notranslate\">Class.copyConstructors()</code>). Thus, each call of <code class=\"notranslate\">Class.getConstructors()</code> will always return new instances.</p>\n<p dir=\"auto\">If you agree that the above test case should be successful (i.e. also <code class=\"notranslate\">assertEquals(instance1.getDefaultConstructor(), instance2.getDefaultConstructor())</code> should be successful), I would prepare a corresponding pull request that slightly modifies the current implementation of the <code class=\"notranslate\">equals()</code> method for all subclasses of <code class=\"notranslate\">AnnotatedMember</code> that are affected by this problem (i.e. at least <code class=\"notranslate\">AnnotatedField</code>, <code class=\"notranslate\">AnnotatedConstructor</code> and <code class=\"notranslate\">AnnotatedMethod</code>).</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3187",
                "createdAt": "2021-06-25T12:45:16Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Implement empty string coercion for StringCollectionDeserializer",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3418",
        "resourcePath": "/FasterXML/jackson-databind/pull/3418",
        "createdAt": "2022-03-17T14:28:57Z",
        "number": 3418,
        "mergeCommit": {
          "oid": "9f68b5101542c186c61debb7222646c29d6b3c04",
          "message": "Implement empty string coercion for StringCollectionDeserializer (#3418)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/9f68b5101542c186c61debb7222646c29d6b3c04",
          "parents": {
            "nodes": [
              {
                "oid": "851172ceb14a4c3843df0dabde8a404de4e4a67a",
                "message": "Improve matching of failing tests to be more permissive"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/std/EmptyStringAsSingleValueTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c40mif72gAoNDNhMWI3ZGFiMGUwNjE5NzY0MjY2Mzg0YWYyMDk4NTFkZDVlNzgzNA",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3418/commits/43a1b7dab0e0619764266384af209851dd5e7834"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 513,
                "url": "https://github.com/FasterXML/jackson-dataformat-xml/issues/513",
                "title": "Empty list incorrectly deserialized when `ACCEPT_SINGLE_VALUE_AS_ARRAY` is enabled",
                "bodyHTML": "<p dir=\"auto\">When <code class=\"notranslate\">ACCEPT_SINGLE_VALUE_AS_ARRAY</code> is enabled, an empty <code class=\"notranslate\">List&lt;String&gt;</code> is incorrectly deserialized as a list containing a single empty string (<code class=\"notranslate\">List.of(\"\")</code>). Test case:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.List;\n\npublic class EmptyElementTest {\n    @Test\n    public void test() throws JsonProcessingException {\n        XmlMapper mapper = new XmlMapper();\n        mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        List&lt;String&gt; list = mapper.readValue(&quot;&lt;values/&gt;&quot;, new TypeReference&lt;List&lt;String&gt;&gt;() {});\n        Assert.assertTrue(list.isEmpty());\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">type</span>.<span class=\"pl-s1\">TypeReference</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">dataformat</span>.<span class=\"pl-s1\">xml</span>.<span class=\"pl-s1\">XmlMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Assert</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">EmptyElementTest</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">XmlMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">XmlMapper</span>();\n        <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">ACCEPT_SINGLE_VALUE_AS_ARRAY</span>);\n        <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">list</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"&lt;values/&gt;\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeReference</span>&lt;<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt;&gt;() {});\n        <span class=\"pl-smi\">Assert</span>.<span class=\"pl-en\">assertTrue</span>(<span class=\"pl-s1\">list</span>.<span class=\"pl-en\">isEmpty</span>());\n    }\n}</pre></div>\n<p dir=\"auto\">This is technically correct behavior, because <code class=\"notranslate\">&lt;values/&gt;</code> can be deserialized as an empty string, which can then be wrapped in a list. However imo this should still be fixed.</p>\n<p dir=\"auto\">Looking at the code, the issue is in databind <code class=\"notranslate\">StringCollectionDeserializer</code>. For the test case, <code class=\"notranslate\">isExpectedStartArrayToken</code> returns false, which triggers the <code class=\"notranslate\">handleNonArray</code> logic. This logic checks for the <code class=\"notranslate\">ACCEPT_SINGLE_VALUE_AS_ARRAY</code> <em>first</em>, before trying to coerce the empty string to a list, which would succeed here.</p>\n<p dir=\"auto\">I see two approaches to fix this. Either change <code class=\"notranslate\">FromXmlParser.isExpectedStartArrayToken</code> to return <code class=\"notranslate\">true</code> for an empty string token, or change <code class=\"notranslate\">StringCollectionDeserializer</code> to attempt a coercion from empty string <em>before</em> wrapping the value. imo the former should work fine.</p>\n<p dir=\"auto\">I can work on a fix for this once my corp CLA is cleared, which will be soon(tm).</p>",
                "resourcePath": "/FasterXML/jackson-dataformat-xml/issues/513",
                "createdAt": "2022-03-09T10:44:49Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix #3419 do not generate stack trace for UnresolvedForwardReference throw internally",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3422",
        "resourcePath": "/FasterXML/jackson-databind/pull/3422",
        "createdAt": "2022-03-20T01:34:24Z",
        "number": 3422,
        "mergeCommit": {
          "oid": "fec520d8dea8ca8c47ff9d388b08c343193a62d0",
          "message": "Fix #3419 do not generate stack trace for UnresolvedForwardReference thrown internally. (#3422)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/fec520d8dea8ca8c47ff9d388b08c343193a62d0",
          "parents": {
            "nodes": [
              {
                "oid": "8bf0c05907bab7eb46043e80e0cf5d69ba3d3d20",
                "message": "Fix #3421 (add `JsonNodeFeature.READ_NULL_PROPERTIES`)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/UnresolvedForwardReference.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c40sfZc2gAoN2U4NDAwODk4M2MzNGRjMGZmMGI1Yzk5NjcxMzViY2ZhMWU2MjBhMA",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3422/commits/7e84008983c34dc0ff0b5c9967135bcfa1e620a0"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3419,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3419",
                "title": "Improve performance of `UnresolvedForwardReference` for forward reference resolution",
                "bodyHTML": "<p dir=\"auto\">JsonMappingException is a checked exception used to signal <strong>fatal</strong> problems with mapping of content.</p>\n<p dir=\"auto\">UnresolvedForwardReference, which extends JsonMappingException is thrown and caught internally for completely <strong>VALID</strong> json to resolve forward references.</p>\n<p dir=\"auto\">Throwable.fillInStackTrace() is an expensive operation, it's the main cost of throwing most Exceptions, and it's called for all UnresolvedForwardReference thrown and caught internally.  The stackTrace is irrelevant for these internal exceptions, it is wasted computation.</p>\n<p dir=\"auto\">The json documents we process are full of object references, so I took the liberty of locally redefining UnresolvedForwardReference to extend RuntimeException, and using the RuntimeException constructor to set writableStackTrace to false, bypassing the Throwable.fillInStackTrace() call.<br>\nI noticed speed improvements of 50%, deserialization takes half the time when Throwable.fillInStackTrace() is turned off for our typical json payloads.</p>\n<p dir=\"auto\">DeserializationContext does have a method checkUnresolvedObjectId(), which throws the genuine <strong>fatal</strong> unresolved forward references.</p>\n<p dir=\"auto\">All I'm asking is that UnresolvedForwardReference thrown and caught internally are created with writableStackTrace = false, whether that's achieved by supplying new parent constructors to pass the flag up the hierarchy, or creating a new exception type that's only used internally to report a forward reference to be resolved later, It need not be a breaking change, only an internal performance improvement.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3419",
                "createdAt": "2022-03-18T15:59:49Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Return `new Object()` as default value for \"empty\" for `java.lang.Object`",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3490",
        "resourcePath": "/FasterXML/jackson-databind/pull/3490",
        "createdAt": "2022-05-18T15:50:09Z",
        "number": 3490,
        "mergeCommit": null,
        "potentialMergeCommit": {
          "oid": "497ee13d00e70a7a32c6fc5d84721e3e41d39f63",
          "message": "Merge d6d421cb36e9130c5fe683b2b4672cd468bb6557 into e5f02ff8b48700cf81524c386c15a0957c4e0993",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/497ee13d00e70a7a32c6fc5d84721e3e41d39f63",
          "parents": {
            "nodes": [
              {
                "oid": "e5f02ff8b48700cf81524c386c15a0957c4e0993",
                "message": "Update release notes wrt #4121"
              },
              {
                "oid": "d6d421cb36e9130c5fe683b2b4672cd468bb6557",
                "message": "fix #3489\n\nI've added the empty value to the Object deserializer in maps as `new Object();`."
              }
            ]
          }
        },
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsForContentTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c44CYLS2gAoZDZkNDIxY2IzNmU5MTMwYzVmZTY4M2IyYjQ2NzJjZDQ2OGJiNjU1Nw",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3490/commits/d6d421cb36e9130c5fe683b2b4672cd468bb6557"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3489,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3489",
                "title": "`Nulls.AS_EMPTY` returns null in `java.lang.Object`",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nWhen I'm using <code class=\"notranslate\">JsonSetter.Value.forValueNulls(Nulls.AS_EMPTY, Nulls.AS_EMPTY)</code> for nullable value with type <code class=\"notranslate\">java.lang.Object</code> in a Map, I still getting the null in the deserialized object. I think that problem is that <a href=\"https://github.com/FasterXML/jackson-databind/blob/3be614716f4736867379345c6febbc0c3898050f/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java#L659\"><code class=\"notranslate\">com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla</code></a> doesn't override <a href=\"https://github.com/FasterXML/jackson-databind/blob/3be614716f4736867379345c6febbc0c3898050f/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java#L375\"><code class=\"notranslate\">com.fasterxml.jackson.databind.JsonDeserializer#getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)</code></a>. I think that the deserializer for object should return empty object in the <code class=\"notranslate\">getEmptyValue</code> method.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n2.13.2.2</p>\n<p dir=\"auto\"><strong>To Reproduce</strong><br>\nIf you have a way to reproduce this with:</p>\n<ol dir=\"auto\">\n<li>Create a JSON, like this:</li>\n</ol>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;a&quot;: {\n    &quot;first&quot;: &quot;second&quot;,\n    &quot;third&quot;: null\n  }\n}\"><pre class=\"notranslate\">{\n  <span class=\"pl-ent\">\"a\"</span>: {\n    <span class=\"pl-ent\">\"first\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>second<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"third\"</span>: <span class=\"pl-c1\">null</span>\n  }\n}</pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>Create this class to deserialize with:</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import java.util.Map;\n\npublic class Scratch {\n    private Map&lt;String, Object&gt; a;\n\n    public Map&lt;String, Object&gt; getA() {\n        return a;\n    }\n\n    public void setA(Map&lt;String, Object&gt; a) {\n        this.a = a;\n    }\n}\n\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Scratch</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">a</span>;\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-en\">getA</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">a</span>;\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setA</span>(<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">a</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">a</span> = <span class=\"pl-s1\">a</span>;\n    }\n}</pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>Create the <code class=\"notranslate\">ObjectMapper</code> and override nullable behavior:</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"        final ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configOverride(Map.class).setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.AS_EMPTY, Nulls.AS_EMPTY));\"><pre class=\"notranslate\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">configOverride</span>(<span class=\"pl-smi\">Map</span>.<span class=\"pl-k\">class</span>).<span class=\"pl-en\">setSetterInfo</span>(<span class=\"pl-smi\">JsonSetter</span>.<span class=\"pl-s1\">Value</span>.<span class=\"pl-en\">forValueNulls</span>(<span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">AS_EMPTY</span>, <span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">AS_EMPTY</span>));</pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>Deserialize this JSON:</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"        String json = &quot;...&quot;;\n        final Scratch scratch = objectMapper.readValue(json, Scratch.class);\"><pre class=\"notranslate\">        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"...\"</span>;\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Scratch</span> <span class=\"pl-s1\">scratch</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Scratch</span>.<span class=\"pl-k\">class</span>);</pre></div>\n<ol start=\"5\" dir=\"auto\">\n<li>Verify that in the <code class=\"notranslate\">a</code> object we got a <code class=\"notranslate\">null</code> in the <code class=\"notranslate\">third</code> key:</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        final Object third = scratch.getA().get(&quot;third&quot;);\n        assert third != null; // fails\"><pre class=\"notranslate\"><code class=\"notranslate\">        final Object third = scratch.getA().get(\"third\");\n        assert third != null; // fails\n</code></pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nI'm expecting that the empty value of the <code class=\"notranslate\">java.lang.Object</code> is a new Object instance.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3489",
                "createdAt": "2022-05-18T14:28:38Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "to-evaluate"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "add tuple type for list with fixed element types format",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3597",
        "resourcePath": "/FasterXML/jackson-databind/pull/3597",
        "createdAt": "2022-09-09T08:38:01Z",
        "number": 3597,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/TupleDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/main/java/com/fasterxml/jackson/databind/type/TupleType.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/ObjectReaderTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c4-qUIL2gAoODlmOTA3YzFlMmM3ODE0MTI4NjgwOTMzNGUwYjFlOTNjY2QwMTJkNg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3597/commits/89f907c1e2c78141286809334e0b1e93ccd012d6"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3592,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3592",
                "title": "jackson should provides a method which can deserialize a collection that contains different type items",
                "bodyHTML": "<p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"String collectionJson = &quot;[ {\\&quot;school&quot; : \\&quot;xxx\\&quot;, ... },  {\\&quot;student&quot; : \\&quot;yyy\\&quot;, ...} ]&quot;;\nList&lt;JavaType&gt; javaTypeList = new ArrayList&lt;&gt;();\njavaTypeList.add(schoolJavaType);\njavaTypeList.add(studentJavaType);\n// like fastjson#parseArray(collectionJsonString, arrayOfJavaLangReflectType);\nList&lt;Object&gt; objectList = objectMapper.parseListByType(collectionJson, javaTypeList);\"><pre class=\"notranslate\"><code class=\"notranslate\">String collectionJson = \"[ {\\\"school\" : \\\"xxx\\\", ... },  {\\\"student\" : \\\"yyy\\\", ...} ]\";\nList&lt;JavaType&gt; javaTypeList = new ArrayList&lt;&gt;();\njavaTypeList.add(schoolJavaType);\njavaTypeList.add(studentJavaType);\n// like fastjson#parseArray(collectionJsonString, arrayOfJavaLangReflectType);\nList&lt;Object&gt; objectList = objectMapper.parseListByType(collectionJson, javaTypeList);\n</code></pre></div>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3592",
                "createdAt": "2022-09-06T23:17:18Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Added more documentation for Builder",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3620",
        "resourcePath": "/FasterXML/jackson-databind/pull/3620",
        "createdAt": "2022-10-11T00:48:30Z",
        "number": 3620,
        "mergeCommit": {
          "oid": "df095d51d14c93dc706de205b050bf9269953a39",
          "message": "Added more documentation for Builder (#3620)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/df095d51d14c93dc706de205b050bf9269953a39",
          "parents": {
            "nodes": [
              {
                "oid": "6e530018a2c9cef67eeceed55633745ad3f10d6c",
                "message": "Back to snapshot deps"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "README.md"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5Ah7DA2gAoMTM5Yjk4NmMxNTE1YWRiMGUwYjc0ZmY2YmI3MjhmNTNiZWJjODZjOQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3620/commits/139b986c1515adb0e0b74ff6bb728f53bebc86c9"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2898,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2898",
                "title": "Add more advanced examples of Builder-pattern on Wiki page",
                "bodyHTML": "<p dir=\"auto\">(note: follow-up to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"427423344\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/2291\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/2291/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/2291\">#2291</a> in which basic example added on README)</p>\n<p dir=\"auto\">So: beyond initial simple Builder usage shown on README it would be nice to have more in-depth usage example(s).<br>\nThis could be a wiki page on this repo or <code class=\"notranslate\">jackson-docs</code>, or blog post to link to.</p>\n<p dir=\"auto\">For purposes of Hacktoberfest whoever works on this could do PR for change in README to link to whatever resource gets added.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2898",
                "createdAt": "2020-10-21T01:28:19Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "documentation"
                      }
                    },
                    {
                      "node": {
                        "name": "good first issue"
                      }
                    },
                    {
                      "node": {
                        "name": "hacktoberfest"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Change Records deserialization to use the same mechanism as POJO deserialization.",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3724",
        "resourcePath": "/FasterXML/jackson-databind/pull/3724",
        "createdAt": "2023-01-09T12:02:15Z",
        "number": 3724,
        "mergeCommit": {
          "oid": "5b0bc3519d5b3e5470667a99fd6ab32bec15a807",
          "message": "Change Records deserialization to use the same mechanism as POJO deserialization. (#3724)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/5b0bc3519d5b3e5470667a99fd6ab32bec15a807",
          "parents": {
            "nodes": [
              {
                "oid": "87b50e9b2c970fe4f4ee7497190c45395f999c43",
                "message": "link added for tidelift (#3729)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/Jdk8ConstructorParameterNameAnnotationIntrospector.java"
              }
            },
            {
              "node": {
                "changeType": "RENAMED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordBasicsTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordCreatorsTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordExplicitCreatorsTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordImplicitCreatorsTest.java"
              }
            },
            {
              "node": {
                "changeType": "RENAMED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordNamingStrategy2992Test.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordTypeInfo3342Test.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordWithJsonIgnoreTest.java"
              }
            },
            {
              "node": {
                "changeType": "RENAMED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordWithJsonNaming3102Test.java"
              }
            },
            {
              "node": {
                "changeType": "RENAMED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordWithJsonSetter2974Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5G-CIq2gAoZWFmMDEzYTUwMDNhNTk4OGI4YzEzNDg1MWZjNmY1NTRhMjY3MjdiYQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3724/commits/eaf013a5003a5988b8c134851fc6f554a26727ba"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2974,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2974",
                "title": "Null coercion with `@JsonSetter` does not work with `java.lang.Record`",
                "bodyHTML": "<p dir=\"auto\">Looks like use of <code class=\"notranslate\">@JsonSetter(nulls=...)</code> does not work with Records in 2.12.0.</p>\n<p dir=\"auto\">Note that earlier report (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"757693294\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/2970\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/2970/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/2970\">#2970</a>) turned out to be valid, but since I closed it earlier decided to file a separate one.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2974",
                "createdAt": "2020-12-06T23:46:24Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "has-failing-test"
                      }
                    },
                    {
                      "node": {
                        "name": "Record"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "number": 2992,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2992",
                "title": "`@JsonNaming` does not work with Records",
                "bodyHTML": "<p dir=\"auto\">Hello,</p>\n<p dir=\"auto\">When I try to use a <code class=\"notranslate\">@JsonNaming</code>  annotation on a record, I cannot unmarshall json to an object because a mapping exception occurs.</p>\n<p dir=\"auto\">I use jackson 2.12.0 with JDK 15.</p>\n<p dir=\"auto\">A Test example can be something like:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Test\n    void tryJsonNamingOnRecord() throws Exception{\n        ObjectMapper mapper=new ObjectMapper();\n\n        @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n                record Test(String myId, String myValue){}\n\n        var src=new Test(&quot;id&quot;, &quot;value&quot;);\n        String json=mapper.writeValueAsString(src);\n        assertThat(json).contains(&quot;\\&quot;my_id\\&quot;:\\&quot;id\\&quot;&quot;, &quot;\\&quot;my_value\\&quot;:\\&quot;value\\&quot;&quot;);\n        var after=mapper.readValue(json, Test.class);\n        assertThat(after).isEqualTo(src);\n    }\"><pre class=\"notranslate\"><code class=\"notranslate\">    @Test\n    void tryJsonNamingOnRecord() throws Exception{\n        ObjectMapper mapper=new ObjectMapper();\n\n        @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\n                record Test(String myId, String myValue){}\n\n        var src=new Test(\"id\", \"value\");\n        String json=mapper.writeValueAsString(src);\n        assertThat(json).contains(\"\\\"my_id\\\":\\\"id\\\"\", \"\\\"my_value\\\":\\\"value\\\"\");\n        var after=mapper.readValue(json, Test.class);\n        assertThat(after).isEqualTo(src);\n    }\n</code></pre></div>\n<p dir=\"auto\">The json String is generated correctly, but when unmarshalling, I got an exception</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.JsonMappingException: Can not set final java.lang.String field test.Tests$1Test.myValue to java.lang.String\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:274)\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:623)\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:611)\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:634)\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.set(FieldProperty.java:193)\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyValue$Regular.assign(PropertyValue.java:62)\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:211)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:520)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1390)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:362)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:195)\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4591)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3546)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3514)\n\tat test.Tests.tryJsonNamingOnRecord(Tests.java:100)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t...\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n...\nCaused by: java.lang.IllegalAccessException: Can not set final java.lang.String field test.Tests$1Test.myValue to java.lang.String\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:76)\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:80)\n\tat java.base/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:79)\n\tat java.base/java.lang.reflect.Field.set(Field.java:793)\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.set(FieldProperty.java:190)\n\t... 76 more\"><pre class=\"notranslate\"><code class=\"notranslate\">com.fasterxml.jackson.databind.JsonMappingException: Can not set final java.lang.String field test.Tests$1Test.myValue to java.lang.String\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:274)\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:623)\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:611)\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:634)\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.set(FieldProperty.java:193)\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyValue$Regular.assign(PropertyValue.java:62)\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:211)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:520)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1390)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:362)\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:195)\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4591)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3546)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3514)\n\tat test.Tests.tryJsonNamingOnRecord(Tests.java:100)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\t...\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n...\nCaused by: java.lang.IllegalAccessException: Can not set final java.lang.String field test.Tests$1Test.myValue to java.lang.String\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:76)\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:80)\n\tat java.base/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:79)\n\tat java.base/java.lang.reflect.Field.set(Field.java:793)\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.set(FieldProperty.java:190)\n\t... 76 more\n</code></pre></div>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2992",
                "createdAt": "2020-12-18T15:54:35Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Record"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "number": 3180,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3180",
                "title": "Support `@JsonCreator` annotation on record classes",
                "bodyHTML": "<p dir=\"auto\">Using Jackson 2.12.</p>\n<p dir=\"auto\">One common pattern in code on my teams is to use 'alias' types to decorate otherwise primitive value types in APIs and/or for dimensional units to gain compiler support for detecting otherwise subtle programming errors (such as using the wrong unit or passing parameters in the wrong order).</p>\n<p dir=\"auto\">Today, to do this with Java records, we need to write classes like</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public record Watts(@JsonValue double value) {\n    @JsonCreator\n    public static Watts of(double value) {\n        return new Watts(value);\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> record <span class=\"pl-s1\">Watts</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonValue</span> <span class=\"pl-smi\">double</span> <span class=\"pl-s1\">value</span>) {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Watts</span> <span class=\"pl-en\">of</span>(<span class=\"pl-smi\">double</span> <span class=\"pl-s1\">value</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Watts</span>(<span class=\"pl-s1\">value</span>);\n    }\n}</pre></div>\n<p dir=\"auto\">Without the <code class=\"notranslate\">@JsonCreator</code> annotated static method (or similarly trivial but verbose constructor), Jackson produces the error</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `...Watts` \n  (although at least one Creator exists): no double/Double-argument constructor/factory method to \n  deserialize from Number value (&lt;value&gt;)\"><pre class=\"notranslate\"><code class=\"notranslate\">com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `...Watts` \n  (although at least one Creator exists): no double/Double-argument constructor/factory method to \n  deserialize from Number value (&lt;value&gt;)\n</code></pre></div>\n<p dir=\"auto\">If we could place <code class=\"notranslate\">@JsonCreator</code> on record classes and infer use of the single argument default constructor I think it'd cut the boilerplate even more. Alternatively, or in addition, it might be interesting to infer that a record class with a single labeled <code class=\"notranslate\">@JsonValue</code> parameter should use the default constructor, allowing us to write either:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@JsonCreator\npublic record Watts(@JsonValue int value) {}\"><pre class=\"notranslate\"><span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n<span class=\"pl-k\">public</span> record <span class=\"pl-s1\">Watts</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonValue</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">value</span>) {}</pre></div>\n<p dir=\"auto\">or</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public record Watts(@JsonValue int value) {}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> record <span class=\"pl-s1\">Watts</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonValue</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">value</span>) {}</pre></div>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3180",
                "createdAt": "2021-06-21T16:14:55Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Record"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "number": 3297,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3297",
                "title": "`@JsonDeserialize(converter = ...)` does not work with Records",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\n<code class=\"notranslate\">@JsonDeserialize(converter = ...)</code> on Record's fields isn't picked up by Jackson during deserialization. I'm using this converter to parse time without zone information into <code class=\"notranslate\">Instant</code> field.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\nJackson: 2.13, 2.13.1-SNAPSHOT<br>\nJDK: 17</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class JacksonTestCase {\n\n    public static void main(String[] args) throws JsonProcessingException {\n        var objectMapper = new ObjectMapper().registerModule(new JavaTimeModule());\n\n        objectMapper.readValue(&quot;&quot;&quot;\n                               { &quot;value&quot;: &quot;test&quot;, &quot;time&quot;: &quot;2021-10-07T22:47:15&quot; }\n                                &quot;&quot;&quot;, RecordEntity.class);\n    }\n\n    static record RecordEntity(\n            String value,\n            @JsonDeserialize(converter = InstantWithoutZoneConverter.class)\n            Instant time\n    ) {\n    }\n\n    static class InstantWithoutZoneConverter implements Converter&lt;LocalDateTime, Instant&gt; {\n        @Override\n        public Instant convert(LocalDateTime value) {\n            return value.toInstant(ZoneOffset.UTC);\n        }\n\n        @Override\n        public JavaType getInputType(TypeFactory typeFactory) {\n            return typeFactory.constructType(LocalDateTime.class);\n        }\n\n        @Override\n        public JavaType getOutputType(TypeFactory typeFactory) {\n            return typeFactory.constructType(Instant.class);\n        }\n    }\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">public class JacksonTestCase {\n\n    public static void main(String[] args) throws JsonProcessingException {\n        var objectMapper = new ObjectMapper().registerModule(new JavaTimeModule());\n\n        objectMapper.readValue(\"\"\"\n                               { \"value\": \"test\", \"time\": \"2021-10-07T22:47:15\" }\n                                \"\"\", RecordEntity.class);\n    }\n\n    static record RecordEntity(\n            String value,\n            @JsonDeserialize(converter = InstantWithoutZoneConverter.class)\n            Instant time\n    ) {\n    }\n\n    static class InstantWithoutZoneConverter implements Converter&lt;LocalDateTime, Instant&gt; {\n        @Override\n        public Instant convert(LocalDateTime value) {\n            return value.toInstant(ZoneOffset.UTC);\n        }\n\n        @Override\n        public JavaType getInputType(TypeFactory typeFactory) {\n            return typeFactory.constructType(LocalDateTime.class);\n        }\n\n        @Override\n        public JavaType getOutputType(TypeFactory typeFactory) {\n            return typeFactory.constructType(Instant.class);\n        }\n    }\n}\n</code></pre></div>\n<p dir=\"auto\"><strong>Additional context</strong><br>\nIt looks similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"758054830\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/2974\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/2974/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/2974\">#2974</a> and workaround to add <code class=\"notranslate\">@JsonProperty(\"time\")</code> works here as well:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    static record RecordEntity(\n            String value,\n            @JsonProperty(&quot;time&quot;)\n            @JsonDeserialize(converter = InstantWithoutZoneConverter.class)\n            Instant time\n    ) {\n    }\"><pre class=\"notranslate\"><code class=\"notranslate\">    static record RecordEntity(\n            String value,\n            @JsonProperty(\"time\")\n            @JsonDeserialize(converter = InstantWithoutZoneConverter.class)\n            Instant time\n    ) {\n    }\n</code></pre></div>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3297",
                "createdAt": "2021-10-07T21:10:53Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Record"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "number": 3342,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3342",
                "title": "`JsonTypeInfo.As.EXTERNAL_PROPERTY` does not work with record wrappers",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nWhen I try to use  <code class=\"notranslate\">JsonTypeInfo.As.EXTERNAL_PROPERTY</code> inside a record, I get</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.exc.ValueInstantiationException: Cannot construct instance of `my.company.fastcheck.analyzer.JacksonExternalTypeIdTest$Parent`, problem: Internal error: no creator index for property 'child' (of type com.fasterxml.jackson.databind.deser.impl.FieldProperty)\"><pre class=\"notranslate\"><code class=\"notranslate\">com.fasterxml.jackson.databind.exc.ValueInstantiationException: Cannot construct instance of `my.company.fastcheck.analyzer.JacksonExternalTypeIdTest$Parent`, problem: Internal error: no creator index for property 'child' (of type com.fasterxml.jackson.databind.deser.impl.FieldProperty)\n</code></pre></div>\n<p dir=\"auto\">Note that it works with normal classes. Code examples below.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n2.13.0</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<p dir=\"auto\">Using a record as wrapping object: (<strong>Fails</strong>)</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.databind.DatabindContext;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;\nimport com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\n\nclass JacksonExternalTypeIdTest {\n\n\t@Test\n\tvoid testExternalTypeIdPropertyInsideRecord() throws IOException {\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tParent parent = objectMapper.readValue(&quot;&quot;&quot;\n\t\t\t{&quot;type&quot;: &quot;CHILLED&quot;, &quot;child&quot;: {}}\n\t\t&quot;&quot;&quot;, Parent.class);\n\t\tAssertions.assertTrue(parent.child instanceof ChilledChild);\n\t}\n\n\tpublic enum ParentType {\n\t\tCHILLED,\n\t\tAGGRESSIVE\n\t}\n\n\tpublic static record Parent(\n\t\t\tParentType type,\n\t\t\t@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = &quot;type&quot;)\n\t\t\t@JsonTypeIdResolver(ChildBaseByParentTypeResolver.class)\n\t\t\tChildBase child\n\t) {}\n\n\tpublic static interface ChildBase {\n\t}\n\n\tpublic static record AggressiveChild(String someString) implements ChildBase {\n\t}\n\n\tpublic static record ChilledChild(String someString) implements ChildBase {\n\t}\n\n\tpublic static class ChildBaseByParentTypeResolver extends TypeIdResolverBase {\n\n\t\tprivate JavaType superType;\n\n\t\t@Override\n\t\tpublic void init(JavaType baseType) {\n\t\t\tsuperType = baseType;\n\t\t}\n\n\t\t@Override\n\t\tpublic JsonTypeInfo.Id getMechanism() {\n\t\t\treturn JsonTypeInfo.Id.NAME;\n\t\t}\n\n\t\t@Override\n\t\tpublic JavaType typeFromId(DatabindContext context, String id) {\n\t\t\tClass&lt;?&gt; subType = switch (id) {\n\t\t\t\tcase &quot;CHILLED&quot; -&gt; ChilledChild.class;\n\t\t\t\tcase &quot;AGGRESSIVE&quot; -&gt; AggressiveChild.class;\n\t\t\t\tdefault -&gt; throw new IllegalArgumentException();\n\t\t\t};\n\t\t\treturn context.constructSpecializedType(superType, subType);\n\t\t}\n\n\t\t@Override\n\t\tpublic String idFromValue(Object value) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic String idFromValueAndType(Object value, Class&lt;?&gt; suggestedType) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DatabindContext</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JavaType</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeIdResolver</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">jsontype</span>.<span class=\"pl-s1\">impl</span>.<span class=\"pl-s1\">TypeIdResolverBase</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">io</span>.<span class=\"pl-s1\">IOException</span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">JacksonExternalTypeIdTest</span> {\n\n\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n\t<span class=\"pl-smi\">void</span> <span class=\"pl-en\">testExternalTypeIdPropertyInsideRecord</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n\t\t<span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\t\t<span class=\"pl-smi\">Parent</span> <span class=\"pl-s1\">parent</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"\"\"</span>\n<span class=\"pl-s\">\t\t\t{\"type\": \"CHILLED\", \"child\": {}}</span>\n<span class=\"pl-s\">\t\t\"\"\"</span>, <span class=\"pl-smi\">Parent</span>.<span class=\"pl-k\">class</span>);\n\t\t<span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertTrue</span>(<span class=\"pl-s1\">parent</span>.<span class=\"pl-s1\">child</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">ChilledChild</span>);\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">ParentType</span> {\n\t\t<span class=\"pl-c1\">CHILLED</span>,\n\t\t<span class=\"pl-c1\">AGGRESSIVE</span>\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> record <span class=\"pl-s1\">Parent</span>(\n\t\t\t<span class=\"pl-smi\">ParentType</span> <span class=\"pl-s1\">type</span>,\n\t\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeInfo</span>(<span class=\"pl-s1\">use</span> = <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">Id</span>.<span class=\"pl-c1\">CLASS</span>, <span class=\"pl-s1\">include</span> = <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">As</span>.<span class=\"pl-c1\">EXTERNAL_PROPERTY</span>, <span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"type\"</span>)\n\t\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeIdResolver</span>(<span class=\"pl-smi\">ChildBaseByParentTypeResolver</span>.<span class=\"pl-k\">class</span>)\n\t\t\t<span class=\"pl-smi\">ChildBase</span> <span class=\"pl-s1\">child</span>\n\t) {}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">ChildBase</span> {\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> record <span class=\"pl-s1\">AggressiveChild</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">someString</span>) <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">ChildBase</span> {\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> record <span class=\"pl-s1\">ChilledChild</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">someString</span>) <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">ChildBase</span> {\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ChildBaseByParentTypeResolver</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">TypeIdResolverBase</span> {\n\n\t\t<span class=\"pl-k\">private</span> <span class=\"pl-smi\">JavaType</span> <span class=\"pl-s1\">superType</span>;\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">init</span>(<span class=\"pl-smi\">JavaType</span> <span class=\"pl-s1\">baseType</span>) {\n\t\t\t<span class=\"pl-s1\">superType</span> = <span class=\"pl-s1\">baseType</span>;\n\t\t}\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-smi\">Id</span> <span class=\"pl-en\">getMechanism</span>() {\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">Id</span>.<span class=\"pl-c1\">NAME</span>;\n\t\t}\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">JavaType</span> <span class=\"pl-en\">typeFromId</span>(<span class=\"pl-smi\">DatabindContext</span> <span class=\"pl-s1\">context</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>) {\n\t\t\t<span class=\"pl-smi\">Class</span>&lt;?&gt; <span class=\"pl-s1\">subType</span> = <span class=\"pl-k\">switch</span> (<span class=\"pl-s1\">id</span>) {\n\t\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\">\"CHILLED\"</span> -&gt; <span class=\"pl-smi\">ChilledChild</span>.<span class=\"pl-k\">class</span>;\n\t\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\">\"AGGRESSIVE\"</span> -&gt; <span class=\"pl-smi\">AggressiveChild</span>.<span class=\"pl-k\">class</span>;\n\t\t\t\t<span class=\"pl-k\">default</span> -&gt; <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>();\n\t\t\t};\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">context</span>.<span class=\"pl-en\">constructSpecializedType</span>(<span class=\"pl-s1\">superType</span>, <span class=\"pl-s1\">subType</span>);\n\t\t}\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">idFromValue</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">value</span>) {\n\t\t\t<span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UnsupportedOperationException</span>();\n\t\t}\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">idFromValueAndType</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">value</span>, <span class=\"pl-smi\">Class</span>&lt;?&gt; <span class=\"pl-s1\">suggestedType</span>) {\n\t\t\t<span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UnsupportedOperationException</span>();\n\t\t}\n\t}\n}</pre></div>\n<p dir=\"auto\">Using a class as wrapping object: (<strong>Passes</strong>)</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.databind.DatabindContext;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;\nimport com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\n\nclass JacksonExternalTypeIdTest {\n\n\t@Test\n\tvoid testExternalTypeIdPropertyInsideRecord() throws IOException {\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tParent parent = objectMapper.readValue(&quot;&quot;&quot;\n\t\t\t\t\t{&quot;type&quot;: &quot;CHILLED&quot;, &quot;child&quot;: {}}\n\t\t\t\t&quot;&quot;&quot;, Parent.class);\n\t\tAssertions.assertTrue(parent.child instanceof ChilledChild);\n\t}\n\n\tpublic enum ParentType {\n\t\tCHILLED,\n\t\tAGGRESSIVE\n\t}\n\n\tpublic static final class Parent {\n\t\tprivate final ParentType type;\n\n\t\t@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = &quot;type&quot;)\n\t\t@JsonTypeIdResolver(ChildBaseByParentTypeResolver.class)\n\t\tprivate final ChildBase child;\n\n\t\tpublic Parent(\n\t\t\t\t@JsonProperty(&quot;type&quot;) ParentType type,\n\t\t\t\t@JsonProperty(&quot;child&quot;) ChildBase child\n\t\t) {\n\t\t\tthis.type = type;\n\t\t\tthis.child = child;\n\t\t}\n\n\t\tpublic ParentType type() {\n\t\t\treturn type;\n\t\t}\n\n\t\tpublic ChildBase child() {\n\t\t\treturn child;\n\t\t}\n\n\t}\n\n\tpublic static interface ChildBase {\n\t}\n\n\tpublic static record AggressiveChild(String someString) implements ChildBase {\n\t}\n\n\tpublic static record ChilledChild(String someString) implements ChildBase {\n\t}\n\n\tpublic static class ChildBaseByParentTypeResolver extends TypeIdResolverBase {\n\n\t\tprivate JavaType superType;\n\n\t\t@Override\n\t\tpublic void init(JavaType baseType) {\n\t\t\tsuperType = baseType;\n\t\t}\n\n\t\t@Override\n\t\tpublic JsonTypeInfo.Id getMechanism() {\n\t\t\treturn JsonTypeInfo.Id.NAME;\n\t\t}\n\n\t\t@Override\n\t\tpublic JavaType typeFromId(DatabindContext context, String id) {\n\t\t\tClass&lt;?&gt; subType = switch (id) {\n\t\t\t\tcase &quot;CHILLED&quot; -&gt; ChilledChild.class;\n\t\t\t\tcase &quot;AGGRESSIVE&quot; -&gt; AggressiveChild.class;\n\t\t\t\tdefault -&gt; throw new IllegalArgumentException();\n\t\t\t};\n\t\t\treturn context.constructSpecializedType(superType, subType);\n\t\t}\n\n\t\t@Override\n\t\tpublic String idFromValue(Object value) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic String idFromValueAndType(Object value, Class&lt;?&gt; suggestedType) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonProperty</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DatabindContext</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JavaType</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeIdResolver</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">jsontype</span>.<span class=\"pl-s1\">impl</span>.<span class=\"pl-s1\">TypeIdResolverBase</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">io</span>.<span class=\"pl-s1\">IOException</span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">JacksonExternalTypeIdTest</span> {\n\n\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n\t<span class=\"pl-smi\">void</span> <span class=\"pl-en\">testExternalTypeIdPropertyInsideRecord</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n\t\t<span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\t\t<span class=\"pl-smi\">Parent</span> <span class=\"pl-s1\">parent</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"\"\"</span>\n<span class=\"pl-s\">\t\t\t\t\t{\"type\": \"CHILLED\", \"child\": {}}</span>\n<span class=\"pl-s\">\t\t\t\t\"\"\"</span>, <span class=\"pl-smi\">Parent</span>.<span class=\"pl-k\">class</span>);\n\t\t<span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertTrue</span>(<span class=\"pl-s1\">parent</span>.<span class=\"pl-s1\">child</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">ChilledChild</span>);\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">ParentType</span> {\n\t\t<span class=\"pl-c1\">CHILLED</span>,\n\t\t<span class=\"pl-c1\">AGGRESSIVE</span>\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Parent</span> {\n\t\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ParentType</span> <span class=\"pl-s1\">type</span>;\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeInfo</span>(<span class=\"pl-s1\">use</span> = <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">Id</span>.<span class=\"pl-c1\">CLASS</span>, <span class=\"pl-s1\">include</span> = <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">As</span>.<span class=\"pl-c1\">EXTERNAL_PROPERTY</span>, <span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"type\"</span>)\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeIdResolver</span>(<span class=\"pl-smi\">ChildBaseByParentTypeResolver</span>.<span class=\"pl-k\">class</span>)\n\t\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ChildBase</span> <span class=\"pl-s1\">child</span>;\n\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">Parent</span>(\n\t\t\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"type\"</span>) <span class=\"pl-smi\">ParentType</span> <span class=\"pl-s1\">type</span>,\n\t\t\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"child\"</span>) <span class=\"pl-smi\">ChildBase</span> <span class=\"pl-s1\">child</span>\n\t\t) {\n\t\t\t<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">type</span> = <span class=\"pl-s1\">type</span>;\n\t\t\t<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">child</span> = <span class=\"pl-s1\">child</span>;\n\t\t}\n\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">ParentType</span> <span class=\"pl-en\">type</span>() {\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">type</span>;\n\t\t}\n\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">ChildBase</span> <span class=\"pl-en\">child</span>() {\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">child</span>;\n\t\t}\n\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">ChildBase</span> {\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> record <span class=\"pl-s1\">AggressiveChild</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">someString</span>) <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">ChildBase</span> {\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> record <span class=\"pl-s1\">ChilledChild</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">someString</span>) <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">ChildBase</span> {\n\t}\n\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ChildBaseByParentTypeResolver</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">TypeIdResolverBase</span> {\n\n\t\t<span class=\"pl-k\">private</span> <span class=\"pl-smi\">JavaType</span> <span class=\"pl-s1\">superType</span>;\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">init</span>(<span class=\"pl-smi\">JavaType</span> <span class=\"pl-s1\">baseType</span>) {\n\t\t\t<span class=\"pl-s1\">superType</span> = <span class=\"pl-s1\">baseType</span>;\n\t\t}\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-smi\">Id</span> <span class=\"pl-en\">getMechanism</span>() {\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">Id</span>.<span class=\"pl-c1\">NAME</span>;\n\t\t}\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">JavaType</span> <span class=\"pl-en\">typeFromId</span>(<span class=\"pl-smi\">DatabindContext</span> <span class=\"pl-s1\">context</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>) {\n\t\t\t<span class=\"pl-smi\">Class</span>&lt;?&gt; <span class=\"pl-s1\">subType</span> = <span class=\"pl-k\">switch</span> (<span class=\"pl-s1\">id</span>) {\n\t\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\">\"CHILLED\"</span> -&gt; <span class=\"pl-smi\">ChilledChild</span>.<span class=\"pl-k\">class</span>;\n\t\t\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\">\"AGGRESSIVE\"</span> -&gt; <span class=\"pl-smi\">AggressiveChild</span>.<span class=\"pl-k\">class</span>;\n\t\t\t\t<span class=\"pl-k\">default</span> -&gt; <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>();\n\t\t\t};\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">context</span>.<span class=\"pl-en\">constructSpecializedType</span>(<span class=\"pl-s1\">superType</span>, <span class=\"pl-s1\">subType</span>);\n\t\t}\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">idFromValue</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">value</span>) {\n\t\t\t<span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UnsupportedOperationException</span>();\n\t\t}\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">idFromValueAndType</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">value</span>, <span class=\"pl-smi\">Class</span>&lt;?&gt; <span class=\"pl-s1\">suggestedType</span>) {\n\t\t\t<span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UnsupportedOperationException</span>();\n\t\t}\n\t}\n}</pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nShould work with records, too.<br>\nFor now, using normal class as workaround.</p>\n<p dir=\"auto\"><strong>Additional context</strong><br>\n(none)</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3342",
                "createdAt": "2021-12-07T10:10:30Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Record"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Improve JavaDoc and tests to SimpleModule \"last one wins\" for (de)serializer registrations",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3789",
        "resourcePath": "/FasterXML/jackson-databind/pull/3789",
        "createdAt": "2023-02-19T12:36:22Z",
        "number": 3789,
        "mergeCommit": {
          "oid": "958ce1db062cfa34e7a22b7a7df449330a28a622",
          "message": "Improve JavaDoc and tests to SimpleModule \"last one wins\" for (de)serializer registrations (#3789)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/958ce1db062cfa34e7a22b7a7df449330a28a622",
          "parents": {
            "nodes": [
              {
                "oid": "87b62c33debd718627611e44feb0dd68a8c2c29a",
                "message": "Minor tweaking on BigString test"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/module/SimpleModuleTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5KSMH82gAoMDAwNGUxYWUwOTU5NWJjNDRjZTQ3MGNlNjAwNTMxNjRmMDZmYTYxZg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3789/commits/0004e1ae09595bc44ce470ce60053164f06fa61f"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3787,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3787",
                "title": "Improve Javadoc of `SimpleModule` to indicate \"last one wins\" for (de)serializer registrations",
                "bodyHTML": "<p dir=\"auto\">(offshoot of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"841966873\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/3089\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/3089/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/3089\">#3089</a>)</p>\n<p dir=\"auto\">Looks like Javadocs do not mention the basic implementation aspect that if a (de)serializer is added to be registered for a given <code class=\"notranslate\">Class</code>, possible earlier addition will be replaced. This should be mentioned about everything that can be added, most notably serializers/deserializers.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3787",
                "createdAt": "2023-02-17T22:56:21Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.15"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix : Case insensitive and number based enum deserialization",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3802",
        "resourcePath": "/FasterXML/jackson-databind/pull/3802",
        "createdAt": "2023-03-02T23:29:58Z",
        "number": 3802,
        "mergeCommit": {
          "oid": "ca385386c3c94567fd0e48f8c185a66adc789ddd",
          "message": "Fix : Case insensitive and number based enum deserialization (#3802)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/ca385386c3c94567fd0e48f8c185a66adc789ddd",
          "parents": {
            "nodes": [
              {
                "oid": "7b1870d6d82ce03ccb981912ef55e7ab1c43250b",
                "message": "Add tests and JavaDoc to `SimpleFilterProvider` (#3799)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/enums/EnumDeserialization3638Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5LLRvy2gAoYmJjZDVjNWVjOTgyOWNmYjBjOTkwYzg4MDJjZDZlNWU2OTllZTRhNw",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3802/commits/bbcd5c5ec9829cfb0c990c8802cd6e5e699ee4a7"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3638,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3638",
                "title": "Case-insensitive and number-based enum deserialization are (unnecessarily) mutually exclusive",
                "bodyHTML": "<p dir=\"auto\">Not sure if this should be filed as a bug or a feature request, since the \"expected\" behavior is mostly left to interpretation, but I went with a bug report in the end. Let me know if that makes sense.</p>\n<p dir=\"auto\"><strong>Describe the bug</strong><br>\nDeserializing an enum field that is marked for case-insensitive deserialization does not work if the source value happens to be shaped as the string representation of a number, whereas the same value will be deserialized properly if case-insensitive deserialization is disabled.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n<code class=\"notranslate\">2.12.4</code></p>\n<p dir=\"auto\"><strong>To Reproduce</strong><br>\nIf you have a way to reproduce this with:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"enum MyEnum {\n    FIRST_MEMBER(0),\n    SECOND_MEMBER(1);\n    \n    private int index;\n\n    private MyEnum(int index) {\n        this.index = index;\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">enum</span> <span class=\"pl-smi\">MyEnum</span> {\n    <span class=\"pl-c1\">FIRST_MEMBER</span>(<span class=\"pl-c1\">0</span>),\n    <span class=\"pl-c1\">SECOND_MEMBER</span>(<span class=\"pl-c1\">1</span>);\n    \n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">index</span>;\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">MyEnum</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">index</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">index</span> = <span class=\"pl-s1\">index</span>;\n    }\n}</pre></div>\n<h4 dir=\"auto\">ACCEPT_CASE_INSENSITIVE_PROPERTIES: disabled</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyClass {\n    public MyEnum enumValue;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">class MyClass {\n    public MyEnum enumValue;\n}\n</code></pre></div>\n<h4 dir=\"auto\">ACCEPT_CASE_INSENSITIVE_PROPERTIES: enabled</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyClass {\n    @JsonFormat(with = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)\n    public MyEnum enumValue;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">class MyClass {\n    @JsonFormat(with = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)\n    public MyEnum enumValue;\n}\n</code></pre></div>\n<hr>\n<table role=\"table\">\n<thead>\n<tr>\n<th align=\"left\">Json input</th>\n<th align=\"center\">ACCEPT_CASE_INSENSITIVE_PROPERTIES: disabled</th>\n<th align=\"center\">ACCEPT_CASE_INSENSITIVE_PROPERTIES: enabled</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"notranslate\">{ \"enumValue\": \"FIRST_MEMBER\" }</code></td>\n<td align=\"center\">\u2705</td>\n<td align=\"center\">\u2705</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"notranslate\">{ \"enumValue\": \"first_member\" }</code></td>\n<td align=\"center\">\u274c</td>\n<td align=\"center\">\u2705</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"notranslate\">{ \"enumValue\": 0 }</code></td>\n<td align=\"center\">\u2705</td>\n<td align=\"center\">\u2705</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"notranslate\">{ \"enumValue\": \"0\" }</code></td>\n<td align=\"center\">\u2705</td>\n<td align=\"center\">\u274c \ud83d\udc48</td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\">Both failures (\u274c) are the same:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `MyClass` from String &lt;X&gt; not one of the values accepted for Enum class: ...\"><pre class=\"notranslate\"><code class=\"notranslate\">com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `MyClass` from String &lt;X&gt; not one of the values accepted for Enum class: ...\n</code></pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nI would expect the case annotated with \ud83d\udc48 in the table above to successfully deserialize the value. It seems as if the reason why this is not the case for now is that the conditional branches branches that handle the case-insensitive parsing and the number-based enum parsing are mutually exclusive:<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/FasterXML/jackson-databind/blob/f5a84a5b74a3fe7fa89d1d68b0805a7e5898c6a9/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java#L306-L330\">jackson-databind/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 306 to 330\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/FasterXML/jackson-databind/commit/f5a84a5b74a3fe7fa89d1d68b0805a7e5898c6a9\">f5a84a5</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L306\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"306\"></td>\n          <td id=\"LC306\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">             <span class=\"pl-c\">// [databind#1313]: Case insensitive enum deserialization</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L307\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"307\"></td>\n          <td id=\"LC307\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">             <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">Boolean</span>.<span class=\"pl-c1\">TRUE</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">_caseInsensitive</span>)) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L308\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"308\"></td>\n          <td id=\"LC308\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">match</span> = <span class=\"pl-s1\">lookup</span>.<span class=\"pl-en\">findCaseInsensitive</span>(<span class=\"pl-s1\">name</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L309\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"309\"></td>\n          <td id=\"LC309\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">match</span> != <span class=\"pl-c1\">null</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L310\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"310\"></td>\n          <td id=\"LC310\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                     <span class=\"pl-k\">return</span> <span class=\"pl-s1\">match</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L311\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"311\"></td>\n          <td id=\"LC311\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L312\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"312\"></td>\n          <td id=\"LC312\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">             } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">ctxt</span>.<span class=\"pl-en\">isEnabled</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">FAIL_ON_NUMBERS_FOR_ENUMS</span>)) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L313\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"313\"></td>\n          <td id=\"LC313\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-c\">// [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L314\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"314\"></td>\n          <td id=\"LC314\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-smi\">char</span> <span class=\"pl-s1\">c</span> = <span class=\"pl-s1\">name</span>.<span class=\"pl-en\">charAt</span>(<span class=\"pl-c1\">0</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L315\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"315\"></td>\n          <td id=\"LC315\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">c</span> &gt;= <span class=\"pl-s\">'0'</span> &amp;&amp; <span class=\"pl-s1\">c</span> &lt;= <span class=\"pl-s\">'9'</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L316\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"316\"></td>\n          <td id=\"LC316\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                     <span class=\"pl-k\">try</span> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L317\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"317\"></td>\n          <td id=\"LC317\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">index</span> = <span class=\"pl-smi\">Integer</span>.<span class=\"pl-en\">parseInt</span>(<span class=\"pl-s1\">name</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L318\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"318\"></td>\n          <td id=\"LC318\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">ctxt</span>.<span class=\"pl-en\">isEnabled</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">ALLOW_COERCION_OF_SCALARS</span>)) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L319\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"319\"></td>\n          <td id=\"LC319\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                             <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctxt</span>.<span class=\"pl-en\">handleWeirdStringValue</span>(<span class=\"pl-en\">_enumClass</span>(), <span class=\"pl-s1\">name</span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L320\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"320\"></td>\n          <td id=\"LC320\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-s\">\"value looks like quoted Enum index, but `MapperFeature.ALLOW_COERCION_OF_SCALARS` prevents use\"</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L321\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"321\"></td>\n          <td id=\"LC321\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                                     ); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L322\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"322\"></td>\n          <td id=\"LC322\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L323\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"323\"></td>\n          <td id=\"LC323\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">index</span> &gt;= <span class=\"pl-c1\">0</span> &amp;&amp; <span class=\"pl-s1\">index</span> &lt; <span class=\"pl-s1\">_enumsByIndex</span>.<span class=\"pl-s1\">length</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L324\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"324\"></td>\n          <td id=\"LC324\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                             <span class=\"pl-k\">return</span> <span class=\"pl-s1\">_enumsByIndex</span>[<span class=\"pl-s1\">index</span>]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L325\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"325\"></td>\n          <td id=\"LC325\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L326\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"326\"></td>\n          <td id=\"LC326\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                     } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">NumberFormatException</span> <span class=\"pl-s1\">e</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L327\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"327\"></td>\n          <td id=\"LC327\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                         <span class=\"pl-c\">// fine, ignore, was not an integer</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L328\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"328\"></td>\n          <td id=\"LC328\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                     } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L329\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"329\"></td>\n          <td id=\"LC329\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">                 } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L330\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"330\"></td>\n          <td id=\"LC330\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">             } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">Not sure if this is by-design or if there is a historical precedent that lead to this, but I don't see why the deserialization process couldn't rely on attempting the number-based parsing in the case where <code class=\"notranslate\">_caseInsensitive</code> is true and the subsequent lookup failed to return any results.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3638",
                "createdAt": "2022-10-19T20:27:32Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.15"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix : Allow deserialization of concrete subtypes of `@JsonTypeInfo` target type",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3803",
        "resourcePath": "/FasterXML/jackson-databind/pull/3803",
        "createdAt": "2023-03-04T00:57:16Z",
        "number": 3803,
        "mergeCommit": {
          "oid": "822d323b03284a48c6889b465b948bcc91716dce",
          "message": "Fix : Allow deserialization of concrete subtypes of `@JsonTypeInfo` target type (#3803)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/822d323b03284a48c6889b465b948bcc91716dce",
          "parents": {
            "nodes": [
              {
                "oid": "4bdbf83d62b9b7fc1067410d4df9acb1430b3760",
                "message": "Fixed #3816"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/JsonTypeInfoIgnored2968Test.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/TestBaseTypeAsDefault.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/failing/DeserDefaultTypedConcrete2968Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5LRY9S2gAoMjAwOTZhOWE2NWM3NjYwZmEwYTU2NTQwNTBkOWJkYzMxYjQ4ODNhMQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3803/commits/20096a9a65c7660fa0a5654050d9bdc31b4883a1"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2968,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2968",
                "title": "Deserialization of `@JsonTypeInfo` annotated type fails with missing type id even for explicit concrete subtypes",
                "bodyHTML": "<p dir=\"auto\">When attempting to deserialize to a concrete class that is part of a polymorphic type hierarchy, an InvalidTypeIdException is thrown if the JSON does not contain the type id field. Example:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@JsonTypeInfo(\n    use = JsonTypeInfo.Id.NAME,\n    property = &quot;type&quot;)\n@JsonSubTypes({\n    @JsonSubTypes.Type(value = Foo.class, name = &quot;foo&quot;),\n    @JsonSubTypes.Type(value = Bar.class, name = &quot;bar&quot;)})\npublic interface Base {}\n\npublic class Foo implements Base {}\n\npublic class Bar implements Base {}\n\nObjectMapper mapper = new ObjectMapper();\n\nmapper.readerFor(Foo.class).readValue(&quot;{}&quot;); // throws InvalidTypeIdException\nmapper.readValue(&quot;{}&quot;, Foo.class); // throws InvalidTypeIdException\"><pre class=\"notranslate\"><span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeInfo</span>(\n    <span class=\"pl-s1\">use</span> = <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">Id</span>.<span class=\"pl-c1\">NAME</span>,\n    <span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"type\"</span>)\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonSubTypes</span>({\n    <span class=\"pl-c1\">@</span><span class=\"pl-smi\">JsonSubTypes</span>.<span class=\"pl-s1\">Type</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-smi\">Foo</span>.<span class=\"pl-k\">class</span>, <span class=\"pl-s1\">name</span> = <span class=\"pl-s\">\"foo\"</span>),\n    <span class=\"pl-c1\">@</span><span class=\"pl-smi\">JsonSubTypes</span>.<span class=\"pl-s1\">Type</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-smi\">Bar</span>.<span class=\"pl-k\">class</span>, <span class=\"pl-s1\">name</span> = <span class=\"pl-s\">\"bar\"</span>)})\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Base</span> {}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Base</span> {}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Bar</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Base</span> {}\n\n<span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\n<span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readerFor</span>(<span class=\"pl-smi\">Foo</span>.<span class=\"pl-k\">class</span>).<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{}\"</span>); <span class=\"pl-c\">// throws InvalidTypeIdException</span>\n<span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-smi\">Foo</span>.<span class=\"pl-k\">class</span>); <span class=\"pl-c\">// throws InvalidTypeIdException</span></pre></div>\n<p dir=\"auto\">While I understand <em>why</em> this happens, as Jackson is finding the JsonTypeInfo / JsonSubTypes annotations on the interface, it is counterintuitive to me. In this instance, I am instructing the mapper as to the specific concrete class to deserialize to, so consulting those annotations seems unnecessary. Perhaps checking if the class / type supplied to readerFor / readValue matches exactly one of the classes listed in JsonSubType could be a fallback if the type id property is not found?</p>\n<p dir=\"auto\">So far, the only workaround I've found is to do something like this:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\npublic class Foo implements Base {}\"><pre class=\"notranslate\"><span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeInfo</span>(<span class=\"pl-s1\">use</span> = <span class=\"pl-smi\">JsonTypeInfo</span>.<span class=\"pl-s1\">Id</span>.<span class=\"pl-c1\">NONE</span>)\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Base</span> {}</pre></div>\n<p dir=\"auto\">but then that means serializing a Foo instance would not get the type id property. Perhaps a custom TypeIdResolver or SubTypeResolver could also be used, but having the described behavior baked in seems like a sensible default to me. Thoughts?</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2968",
                "createdAt": "2020-12-03T05:04:33Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "most-wanted"
                      }
                    },
                    {
                      "node": {
                        "name": "2.15"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix `Enum` deserialization with `JsonFormat.Shape.OBJECT` using both `DELEGATING` and `PROPERTIES` creator modes",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3851",
        "resourcePath": "/FasterXML/jackson-databind/pull/3851",
        "createdAt": "2023-03-29T13:58:44Z",
        "number": 3851,
        "mergeCommit": {
          "oid": "3aa2de1f9cd9c6039e3803e47e3c626bd0d98bcd",
          "message": "Fix `Enum` deserialization with `JsonFormat.Shape.OBJECT` using both `DELEGATING` and `PROPERTIES` creator modes (#3851)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/3aa2de1f9cd9c6039e3803e47e3c626bd0d98bcd",
          "parents": {
            "nodes": [
              {
                "oid": "68ba588a5aab92dcaab0c55ebf85db0c79c7edfc",
                "message": "Bump actions/checkout from 3.3.0 to 3.5.0 (#3844)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "RENAMED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/creators/JsonCreatorModeForEnum3566.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5NK4y62gAoM2JjMGRlMmJkNmYxMTRiZmI4MDBhOTVhOTQ4YjE4YzBjYTZjZjBiMQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3851/commits/3bc0de2bd6f114bfb800a95a948b18c0ca6cf0b1"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3566,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3566",
                "title": "Cannot use both `JsonCreator.Mode.DELEGATING` and `JsonCreator.Mode.PROPERTIES` static creator factory methods for Enums",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nWhen Enum has two factory methods, one with <code class=\"notranslate\">JsonCreator.Mode.DELEGATING</code> and the other with <code class=\"notranslate\">JsonCreator.Mode.PROPERTIES</code>, only the latter works. Deserialization that is supposed to target the DELEGATING one fails with <code class=\"notranslate\">com.fasterxml.jackson.databind.exc.MismatchedInputException</code>.<br>\nNote that the same setup for a POJO works just fine.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n2.13.3</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class TestCases {\n    @Test\n    void testClass() throws JsonProcessingException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        Assertions.assertEquals(new AClass(&quot;someName&quot;), objectMapper.readValue(&quot;{ \\&quot;name\\&quot;: \\&quot;someName\\&quot; }&quot;, AClass.class));\n        Assertions.assertEquals(new AClass(&quot;someName&quot;), objectMapper.readValue(&quot;\\&quot;someName\\&quot;&quot;, AClass.class));\n    }\n\n    @Test\n    void testEnum() throws JsonProcessingException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        Assertions.assertEquals(AEnum.A, objectMapper.readValue(&quot;{ \\&quot;type\\&quot;: \\&quot;AType\\&quot; }&quot;, AEnum.class));\n        Assertions.assertEquals(AEnum.A, objectMapper.readValue(&quot;\\&quot;AType\\&quot;&quot;, AEnum.class)); // this line fails\n    }\n}\n\nclass AClass {\n    private final String name;\n\n    AClass(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n    public static AClass fromString(String name) {\n        return new AClass(name);\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n    public static AClass create(@JsonProperty(&quot;name&quot;) String name) {\n        return new AClass(name);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        AClass aClass = (AClass) o;\n        return Objects.equals(name, aClass.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name);\n    }\n}\n\n@JsonFormat(shape = JsonFormat.Shape.OBJECT)\nenum AEnum {\n    A(&quot;AType&quot;),\n    B(&quot;BType&quot;);\n\n    private final String type;\n\n    AEnum(String type) {\n        this.type = type;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n    public static AEnum fromString(String type) {\n        return Arrays.stream(values())\n                .filter(aEnum -&gt; aEnum.type.equals(type))\n                .findFirst()\n                .orElseThrow();\n    }\n\n    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n    public static AEnum create(@JsonProperty(&quot;type&quot;) String type) {\n        return fromString(type);\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestCases</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testClass</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">AClass</span>(<span class=\"pl-s\">\"someName\"</span>), <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{ <span class=\"pl-cce\">\\\"</span>name<span class=\"pl-cce\">\\\"</span>: <span class=\"pl-cce\">\\\"</span>someName<span class=\"pl-cce\">\\\"</span> }\"</span>, <span class=\"pl-smi\">AClass</span>.<span class=\"pl-k\">class</span>));\n        <span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">AClass</span>(<span class=\"pl-s\">\"someName\"</span>), <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\\"</span>someName<span class=\"pl-cce\">\\\"</span>\"</span>, <span class=\"pl-smi\">AClass</span>.<span class=\"pl-k\">class</span>));\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testEnum</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-smi\">AEnum</span>.<span class=\"pl-s1\">A</span>, <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{ <span class=\"pl-cce\">\\\"</span>type<span class=\"pl-cce\">\\\"</span>: <span class=\"pl-cce\">\\\"</span>AType<span class=\"pl-cce\">\\\"</span> }\"</span>, <span class=\"pl-smi\">AEnum</span>.<span class=\"pl-k\">class</span>));\n        <span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-smi\">AEnum</span>.<span class=\"pl-s1\">A</span>, <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\\"</span>AType<span class=\"pl-cce\">\\\"</span>\"</span>, <span class=\"pl-smi\">AEnum</span>.<span class=\"pl-k\">class</span>)); <span class=\"pl-c\">// this line fails</span>\n    }\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">AClass</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>;\n\n    <span class=\"pl-smi\">AClass</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">name</span> = <span class=\"pl-s1\">name</span>;\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getName</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">name</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>(<span class=\"pl-s1\">mode</span> = <span class=\"pl-smi\">JsonCreator</span>.<span class=\"pl-s1\">Mode</span>.<span class=\"pl-c1\">DELEGATING</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AClass</span> <span class=\"pl-en\">fromString</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AClass</span>(<span class=\"pl-s1\">name</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>(<span class=\"pl-s1\">mode</span> = <span class=\"pl-smi\">JsonCreator</span>.<span class=\"pl-s1\">Mode</span>.<span class=\"pl-c1\">PROPERTIES</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AClass</span> <span class=\"pl-en\">create</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"name\"</span>) <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AClass</span>(<span class=\"pl-s1\">name</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">o</span>) {\n        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">this</span> == <span class=\"pl-s1\">o</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-en\">getClass</span>() != <span class=\"pl-s1\">o</span>.<span class=\"pl-en\">getClass</span>()) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n        <span class=\"pl-smi\">AClass</span> <span class=\"pl-s1\">aClass</span> = (<span class=\"pl-smi\">AClass</span>) <span class=\"pl-s1\">o</span>;\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">name</span>, <span class=\"pl-s1\">aClass</span>.<span class=\"pl-s1\">name</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">hashCode</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span>.<span class=\"pl-en\">hash</span>(<span class=\"pl-s1\">name</span>);\n    }\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonFormat</span>(<span class=\"pl-s1\">shape</span> = <span class=\"pl-smi\">JsonFormat</span>.<span class=\"pl-s1\">Shape</span>.<span class=\"pl-c1\">OBJECT</span>)\n<span class=\"pl-k\">enum</span> <span class=\"pl-smi\">AEnum</span> {\n    <span class=\"pl-s1\">A</span>(<span class=\"pl-s\">\"AType\"</span>),\n    <span class=\"pl-s1\">B</span>(<span class=\"pl-s\">\"BType\"</span>);\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>;\n\n    <span class=\"pl-smi\">AEnum</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">type</span> = <span class=\"pl-s1\">type</span>;\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getType</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">type</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>(<span class=\"pl-s1\">mode</span> = <span class=\"pl-smi\">JsonCreator</span>.<span class=\"pl-s1\">Mode</span>.<span class=\"pl-c1\">DELEGATING</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AEnum</span> <span class=\"pl-en\">fromString</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Arrays</span>.<span class=\"pl-en\">stream</span>(<span class=\"pl-en\">values</span>())\n                .<span class=\"pl-en\">filter</span>(<span class=\"pl-s1\">aEnum</span> -&gt; <span class=\"pl-s1\">aEnum</span>.<span class=\"pl-s1\">type</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">type</span>))\n                .<span class=\"pl-en\">findFirst</span>()\n                .<span class=\"pl-en\">orElseThrow</span>();\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>(<span class=\"pl-s1\">mode</span> = <span class=\"pl-smi\">JsonCreator</span>.<span class=\"pl-s1\">Mode</span>.<span class=\"pl-c1\">PROPERTIES</span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AEnum</span> <span class=\"pl-en\">create</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s\">\"type\"</span>) <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">fromString</span>(<span class=\"pl-s1\">type</span>);\n    }\n}</pre></div>\n<p dir=\"auto\">The <code class=\"notranslate\">testClass</code> passes, but <code class=\"notranslate\">testEnum</code> fails with</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.exc.MismatchedInputException: Input mismatch reading Enum `AEnum`: properties-based `@JsonCreator` ([method AEnum#fromString(java.lang.String)]) expects JSON Object (JsonToken.START_OBJECT), got JsonToken.VALUE_STRING\"><pre class=\"notranslate\"><code class=\"notranslate\">com.fasterxml.jackson.databind.exc.MismatchedInputException: Input mismatch reading Enum `AEnum`: properties-based `@JsonCreator` ([method AEnum#fromString(java.lang.String)]) expects JSON Object (JsonToken.START_OBJECT), got JsonToken.VALUE_STRING\n</code></pre></div>\n<p dir=\"auto\">Also, you can remove the PROPERTIES factory method, and the DELEGATING method would work.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3566",
                "createdAt": "2022-08-05T07:03:35Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enum"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Support strict Type ID handling.",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3854",
        "resourcePath": "/FasterXML/jackson-databind/pull/3854",
        "createdAt": "2023-03-31T08:24:46Z",
        "number": 3854,
        "mergeCommit": {
          "oid": "5e2c6430951b71c5d803f19015c19c638bfb3502",
          "message": "Support strict Type ID handling. (#3854)\n\nAdd `MapperFeature.REQUIRE_TYPE_ID_FOR_SUBTYPES` (default: true)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/5e2c6430951b71c5d803f19015c19c638bfb3502",
          "parents": {
            "nodes": [
              {
                "oid": "ac971e90a773e705efe64327275490d02248ed06",
                "message": "Deprecate unused constructors of `AsPropertyTypeDeserializer`"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/MapperFeature.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/JsonTypeInfoIgnored2968Test.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/StrictJsonTypeInfoHandling3853Test.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/TestBaseTypeAsDefault.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/DeserDefaultTypedConcrete2968Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5NVF-_2gAoYTFmMzBiNTBiNWQyZWY0ZjFjZDg4ZDFjOWI4YmYyNWRkMmNkOGM0NA",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3854/commits/a1f30b50b5d2ef4f1cd88d1c9b8bf25dd2cd8c44"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3853,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3853",
                "title": "Add `MapperFeature.REQUIRE_TYPE_ID_FOR_SUBTYPES` to enable/disable strict subtype Type Id handling",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nIn 2.14, if you setup <code class=\"notranslate\">@JsonTypeInfo(use = Id.NAME)</code> then all JSON passed to <code class=\"notranslate\">readValue</code> <em>must</em> include the <code class=\"notranslate\">@type</code> information, but that's no longer true in 2.15, which will now unmarshall JSON with missing type information (as long as no other constraints fail). Although I guess it's possibly something to consider as an improvement, but personally I would like to ensure that clients must pass the type information, not least so that one cannot accidentally send the wrong JSON, but have it pass because it's close <em>enough</em> to the intended type.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n2.15.0-rc2</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<p dir=\"auto\">Unit test:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\nimport com.fasterxml.jackson.annotation.JsonTypeName;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.exc.InvalidTypeIdException;\n\npublic class RegressionTest {\n    \n    @Test\n    public void testTypeRequired() throws Exception {\n        ObjectMapper om = new ObjectMapper();\n        DoSomethingCommand cmd = om.readValue(&quot;{\\&quot;@type\\&quot;:\\&quot;do-something\\&quot;}&quot;, DoSomethingCommand.class);\n        assertThat(cmd).isNotNull();\n        // Prove that we can't load the command _without_ the type information\n        // This assertion passes in 2.14, but fails in 2.15 as nothing is thrown and the instance\n        // is unmarshalled anyway\n        assertThrows(InvalidTypeIdException.class, () -&gt; om.readValue(&quot;{}&quot;, DoSomethingCommand.class));\n    }\n}\n\n@JsonTypeInfo(use = Id.NAME)\ninterface Command {\n}\n\n@JsonTypeName(&quot;do-something&quot;)\nclass DoSomethingCommand implements Command {\n}\n\n/*\n * This highlights why I think it's dangerous to accept the JSON with no type information. A\n * client might accidentally send this structure, but without the type information, which would\n * be rejected in 2.14, but with 2.15 it would be accepted (incorrectly IMHO)\n */\n@JsonTypeName(&quot;do-something-else&quot;)\nclass DoSomethingElseCommand extends DoSomethingCommand {\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-s1\">assertThat</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-s1\">assertThrows</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>.<span class=\"pl-s1\">Id</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeName</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">exc</span>.<span class=\"pl-s1\">InvalidTypeIdException</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">RegressionTest</span> {\n    \n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testTypeRequired</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">om</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">DoSomethingCommand</span> <span class=\"pl-s1\">cmd</span> = <span class=\"pl-s1\">om</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{<span class=\"pl-cce\">\\\"</span>@type<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>do-something<span class=\"pl-cce\">\\\"</span>}\"</span>, <span class=\"pl-smi\">DoSomethingCommand</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">cmd</span>).<span class=\"pl-en\">isNotNull</span>();\n        <span class=\"pl-c\">// Prove that we can't load the command _without_ the type information</span>\n        <span class=\"pl-c\">// This assertion passes in 2.14, but fails in 2.15 as nothing is thrown and the instance</span>\n        <span class=\"pl-c\">// is unmarshalled anyway</span>\n        <span class=\"pl-en\">assertThrows</span>(<span class=\"pl-smi\">InvalidTypeIdException</span>.<span class=\"pl-k\">class</span>, () -&gt; <span class=\"pl-s1\">om</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-smi\">DoSomethingCommand</span>.<span class=\"pl-k\">class</span>));\n    }\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeInfo</span>(<span class=\"pl-s1\">use</span> = <span class=\"pl-smi\">Id</span>.<span class=\"pl-c1\">NAME</span>)\n<span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Command</span> {\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeName</span>(<span class=\"pl-s\">\"do-something\"</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">DoSomethingCommand</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Command</span> {\n}\n\n<span class=\"pl-c\">/*</span>\n<span class=\"pl-c\"> * This highlights why I think it's dangerous to accept the JSON with no type information. A</span>\n<span class=\"pl-c\"> * client might accidentally send this structure, but without the type information, which would</span>\n<span class=\"pl-c\"> * be rejected in 2.14, but with 2.15 it would be accepted (incorrectly IMHO)</span>\n<span class=\"pl-c\"> */</span>\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeName</span>(<span class=\"pl-s\">\"do-something-else\"</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">DoSomethingElseCommand</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">DoSomethingCommand</span> {\n}</pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong></p>\n<p dir=\"auto\">The unit test passes, as an <code class=\"notranslate\">InvalidTypeIdException</code> is thrown when no type information is present in the incoming JSON, as was the case in 2.14</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3853",
                "createdAt": "2023-03-30T14:04:07Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.15"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Enhance `StdNodeBasedDeserializer` to facilitate usage with `ObjectMapper#readerForUpdating`",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3860",
        "resourcePath": "/FasterXML/jackson-databind/pull/3860",
        "createdAt": "2023-04-05T10:22:53Z",
        "number": 3860,
        "mergeCommit": {
          "oid": "aeffef7c48524fb3711a52c2738ada08af656e7d",
          "message": "Enhance `StdNodeBasedDeserializer` to facilitate usage with `ObjectMapper#readerForUpdating` (#3860)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/aeffef7c48524fb3711a52c2738ada08af656e7d",
          "parents": {
            "nodes": [
              {
                "oid": "158a68bf0d03eec407922f1c130816c17e1535ef",
                "message": "One last cleaup thing (remove readValue() method 3.0 drops)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateViaObjectReader.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5NqZH-2gAoN2Y2YzFiZmJiOTY2NmEwODRiOWQyZTNlNDU5ZmNhMDE1ZTJjNjVkYg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3860/commits/7f6c1bfbb9666a084b9d2e3e459fca015e2c65db"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3814,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3814",
                "title": "Enhance `StdNodeBasedDeserializer` to support `readerForUpdating`",
                "bodyHTML": "<p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong></p>\n<p dir=\"auto\">Currently if you want to perform a <code class=\"notranslate\">readerForUpdating</code> from a <code class=\"notranslate\">JsonNode</code> to <code class=\"notranslate\">T</code> you need to convert to <code class=\"notranslate\">JsonNode</code> yourself from the parser. The request is to enhance <code class=\"notranslate\">StdNodeDeserializer</code> to assist with <code class=\"notranslate\">readerForUpdating</code>.</p>\n<p dir=\"auto\"><strong>Describe the solution you'd like</strong></p>\n<p dir=\"auto\">Change StdNodeBasedDeserializer to provide a convert method to complement both of JsonDeserializer's deserialize methods by adding another paired method for the intoValue flow.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public abstract class StdNodeBasedDeserializer&lt;T&gt; ... {\n\t// new method with default implementation to be passive\n\tpublic T convert(JsonNode root, DeserializationContext ctxt, T intoValue) throws IOException {\n\t\t// move the bad merge check from JsonDeserializer's deserialize intoValue method here, as it is only a bad merge if the updating reader flow is called and this method is not overridden\n\t\tctxt.handleBadMerge(this);\n\t\treturn convert(root, ctxt);\n\t}\n\t\n    // new override\n\t@Override\n\tpublic T deserialize(JsonParser jp, DeserializationContext ctxt, T intoValue) throws IOException {\n\t\tJsonNode n = (JsonNode) _treeDeserializer.deserialize(jp, ctxt);\n\t\treturn convert(n, ctxt, intoValue);\n\t}\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">StdNodeBasedDeserializer</span>&lt;<span class=\"pl-smi\">T</span>&gt; ... {\n\t<span class=\"pl-c\">// new method with default implementation to be passive</span>\n\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">T</span> <span class=\"pl-en\">convert</span>(<span class=\"pl-smi\">JsonNode</span> <span class=\"pl-s1\">root</span>, <span class=\"pl-smi\">DeserializationContext</span> <span class=\"pl-s1\">ctxt</span>, <span class=\"pl-smi\">T</span> <span class=\"pl-s1\">intoValue</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n\t\t<span class=\"pl-c\">// move the bad merge check from JsonDeserializer's deserialize intoValue method here, as it is only a bad merge if the updating reader flow is called and this method is not overridden</span>\n\t\t<span class=\"pl-s1\">ctxt</span>.<span class=\"pl-en\">handleBadMerge</span>(<span class=\"pl-smi\">this</span>);\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-en\">convert</span>(<span class=\"pl-s1\">root</span>, <span class=\"pl-s1\">ctxt</span>);\n\t}\n\t\n    <span class=\"pl-c\">// new override</span>\n\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">T</span> <span class=\"pl-en\">deserialize</span>(<span class=\"pl-smi\">JsonParser</span> <span class=\"pl-s1\">jp</span>, <span class=\"pl-smi\">DeserializationContext</span> <span class=\"pl-s1\">ctxt</span>, <span class=\"pl-smi\">T</span> <span class=\"pl-s1\">intoValue</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n\t\t<span class=\"pl-smi\">JsonNode</span> <span class=\"pl-s1\">n</span> = (<span class=\"pl-smi\">JsonNode</span>) <span class=\"pl-s1\">_treeDeserializer</span>.<span class=\"pl-en\">deserialize</span>(<span class=\"pl-s1\">jp</span>, <span class=\"pl-s1\">ctxt</span>);\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-en\">convert</span>(<span class=\"pl-s1\">n</span>, <span class=\"pl-s1\">ctxt</span>, <span class=\"pl-s1\">intoValue</span>);\n\t}\n}</pre></div>\n<p dir=\"auto\"><strong>Usage example</strong><br>\nIf you have a clear idea of how to use proposed new/modified feature, please show an example.</p>\n<p dir=\"auto\">before</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public class MyDeserializer extends StdDeserializer&lt;MyObject&gt; {\n\t@Override\n\tpublic MyObject deserialize(final JsonParser p, final DeserializationContext ctxt, final MyObject myObject) throws IOException { \n\t\tmyObject.updateFromNode(p.readValueAs(JsonNode.class));\n\t\treturn myObject;\n\t}\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyDeserializer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">StdDeserializer</span>&lt;<span class=\"pl-smi\">MyObject</span>&gt; {\n\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">MyObject</span> <span class=\"pl-en\">deserialize</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">JsonParser</span> <span class=\"pl-s1\">p</span>, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">DeserializationContext</span> <span class=\"pl-s1\">ctxt</span>, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">MyObject</span> <span class=\"pl-s1\">myObject</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> { \n\t\t<span class=\"pl-s1\">myObject</span>.<span class=\"pl-en\">updateFromNode</span>(<span class=\"pl-s1\">p</span>.<span class=\"pl-en\">readValueAs</span>(<span class=\"pl-smi\">JsonNode</span>.<span class=\"pl-k\">class</span>));\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">myObject</span>;\n\t}\n}</pre></div>\n<p dir=\"auto\">after</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// changed to extend StdNodeBasedDeserializer\n// changed method overrides to convert\n// no longer converting parse to node directly\npublic class MyDeserializer extends StdNodeBasedDeserializer&lt;MyObject&gt; {\n\t@Override\n\tpublic MyObject convert(JsonNode root, DeserializationContext ctxt, MyObject myObject) throws IOException {\n\t\tmyObject.updateFromNode(root);\n\t\treturn myObject;\n\t}\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// changed to extend StdNodeBasedDeserializer</span>\n<span class=\"pl-c\">// changed method overrides to convert</span>\n<span class=\"pl-c\">// no longer converting parse to node directly</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyDeserializer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">StdNodeBasedDeserializer</span>&lt;<span class=\"pl-smi\">MyObject</span>&gt; {\n\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">MyObject</span> <span class=\"pl-en\">convert</span>(<span class=\"pl-smi\">JsonNode</span> <span class=\"pl-s1\">root</span>, <span class=\"pl-smi\">DeserializationContext</span> <span class=\"pl-s1\">ctxt</span>, <span class=\"pl-smi\">MyObject</span> <span class=\"pl-s1\">myObject</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n\t\t<span class=\"pl-s1\">myObject</span>.<span class=\"pl-en\">updateFromNode</span>(<span class=\"pl-s1\">root</span>);\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">myObject</span>;\n\t}\n}</pre></div>\n<p dir=\"auto\"><strong>Additional context</strong><br>\nAdd any other context about the feature request here.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3814",
                "createdAt": "2023-03-08T01:09:15Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.15"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix handling of ObjectId-property in JsonIdentityInfo for uniform deserialization",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3868",
        "resourcePath": "/FasterXML/jackson-databind/pull/3868",
        "createdAt": "2023-04-07T14:56:24Z",
        "number": 3868,
        "mergeCommit": {
          "oid": "325d129810a7ebe58549cd8940ed93cc94752c7a",
          "message": "Fix handling of ObjectId-property in JsonIdentityInfo for uniform deserialization (#3868)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/325d129810a7ebe58549cd8940ed93cc94752c7a",
          "parents": {
            "nodes": [
              {
                "oid": "d8f17b9b388eb1cc6f7bd20626a45d384cb88d5a",
                "message": "Bump actions/checkout from 3.5.2 to 3.5.3 (#3978)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/JsonIdentityInfoIdProperty3838Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5N16_e2gAoNmI3MWUwMTYzYWU3ZDlhNDdkZDdhMTQ1ZTBmNzgyYzYyNGUzZTkzYw",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3868/commits/6b71e0163ae7d9a47dd7a145e0f782c624e3e93c"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3838,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3838",
                "title": "Difference in the handling of `ObjectId-property` in `JsonIdentityInfo` depending on the deserialization route",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nThis is the problem reported in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"712039983\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-module-kotlin/issues/378\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-module-kotlin/issues/378/hovercard\" href=\"https://github.com/FasterXML/jackson-module-kotlin/issues/378\">FasterXML/jackson-module-kotlin#378</a> .</p>\n<p dir=\"auto\">Setter-based deserialization does not generate an error if the <code class=\"notranslate\">id-property</code> is not present on the <code class=\"notranslate\">JSON</code>.<br>\nOn the other hand, instantiator-based deserialization throws a <code class=\"notranslate\">MismatchedInputException</code> if the <code class=\"notranslate\">id-property</code> is not present in the <code class=\"notranslate\">JSON</code>.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\nIt has been present since at least 2.9.9 and is reproduced in 2.15.0-rc1.</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIdentityInfo;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\n\npublic class ObjectId {\n    @JsonIdentityInfo(property = &quot;id&quot;, generator = ObjectIdGenerators.PropertyGenerator.class)\n    static class SetterBased {\n        private String id;\n\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n    }\n\n    @JsonIdentityInfo(property = &quot;id&quot;, generator = ObjectIdGenerators.PropertyGenerator.class)\n    static class CreatorBased {\n        private final String id;\n\n        @JsonCreator\n        CreatorBased(@JsonProperty(value = &quot;id&quot;) String id) {\n            this.id = id;\n        }\n\n        public String getId() {\n            return id;\n        }\n    }\n\n    @Test\n    void test() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper();\n\n        // -&gt; no error\n        SetterBased t1 = mapper.readValue(&quot;{}&quot;, SetterBased.class);\n        System.out.println(t1.id); // -&gt; null\n\n        // -&gt; MismatchedInputException thrown\n        CreatorBased t2 = mapper.readValue(&quot;{}&quot;, CreatorBased.class);\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonCreator</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonIdentityInfo</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonProperty</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">ObjectIdGenerators</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ObjectId</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityInfo</span>(<span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"id\"</span>, <span class=\"pl-s1\">generator</span> = <span class=\"pl-smi\">ObjectIdGenerators</span>.<span class=\"pl-smi\">PropertyGenerator</span>.<span class=\"pl-k\">class</span>)\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">SetterBased</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getId</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">id</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setId</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">id</span> = <span class=\"pl-s1\">id</span>;\n        }\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonIdentityInfo</span>(<span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"id\"</span>, <span class=\"pl-s1\">generator</span> = <span class=\"pl-smi\">ObjectIdGenerators</span>.<span class=\"pl-smi\">PropertyGenerator</span>.<span class=\"pl-k\">class</span>)\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">CreatorBased</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n        <span class=\"pl-smi\">CreatorBased</span>(<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-s\">\"id\"</span>) <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">id</span> = <span class=\"pl-s1\">id</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getId</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">id</span>;\n        }\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\n        <span class=\"pl-c\">// -&gt; no error</span>\n        <span class=\"pl-smi\">SetterBased</span> <span class=\"pl-s1\">t1</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-smi\">SetterBased</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">t1</span>.<span class=\"pl-s1\">id</span>); <span class=\"pl-c\">// -&gt; null</span>\n\n        <span class=\"pl-c\">// -&gt; MismatchedInputException thrown</span>\n        <span class=\"pl-smi\">CreatorBased</span> <span class=\"pl-s1\">t2</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-smi\">CreatorBased</span>.<span class=\"pl-k\">class</span>);\n    }\n}</pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nIt would be correct to be one of the following summarized below.<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"712039983\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-module-kotlin/issues/378\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-module-kotlin/issues/378/hovercard?comment_id=1477141827&amp;comment_type=issue_comment\" href=\"https://github.com/FasterXML/jackson-module-kotlin/issues/378#issuecomment-1477141827\">FasterXML/jackson-module-kotlin#378 (comment)</a></p>\n<p dir=\"auto\"><strong>Additional context</strong><br>\nn/a</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3838",
                "createdAt": "2023-03-22T13:41:34Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.16"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add new `@JsonTypeInfo.requireTypeIdForSubtypes` usage",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3891",
        "resourcePath": "/FasterXML/jackson-databind/pull/3891",
        "createdAt": "2023-04-21T10:13:39Z",
        "number": 3891,
        "mergeCommit": {
          "oid": "c5eabf8b96018e2563934776a5d82da0371f7b62",
          "message": "Add new `@JsonTypeInfo.requireTypeIdForSubtypes` usage (#3891)\n\nImplements #3877",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/c5eabf8b96018e2563934776a5d82da0371f7b62",
          "parents": {
            "nodes": [
              {
                "oid": "58c231928f56077ccb8f411044183ebb011f26f4",
                "message": "Update TypeFactory.java (#3966)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/OverrideStrictTypeInfoHandling3877Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5O2Vhw2gAoY2NiZDc0Y2JkNDM5ZGQxZGZmNWU3NTM3M2M1NGI0YTNhNzFjOGFkYg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3891/commits/ccbd74cbd439dd1dff5e75373c54b4a3a71c8adb"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3877,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3877",
                "title": "Add new `OptBoolean` valued property in `@JsonTypeInfo`, handling, to allow per-polymorphic type loose Type Id handling",
                "bodyHTML": "<p dir=\"auto\">(note: offshoot of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1647699078\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/3853\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/3853/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/3853\">#3853</a>)</p>\n<p dir=\"auto\">It seems reasonable and useful to allow annotation(s) to specify loose/strict handling of Type Ids for polymorphic types.<br>\nThe simplest location to do that would seem to be <code class=\"notranslate\">@JsonTypeInfo</code>; this would only allow enabling/disabling for all (or none) subtypes but alternatives are probably more difficult to implement.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3877",
                "createdAt": "2023-04-12T01:32:07Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.16"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add basic impl of IterationType",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3952",
        "resourcePath": "/FasterXML/jackson-databind/pull/3952",
        "createdAt": "2023-05-23T03:44:10Z",
        "number": 3952,
        "mergeCommit": {
          "oid": "234b9adafc8065db5cecddef0788de0fd2ff2e31",
          "message": "Add basic impl of IterationType (#3952)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/234b9adafc8065db5cecddef0788de0fd2ff2e31",
          "parents": {
            "nodes": [
              {
                "oid": "f878a669d2865a3268b5e3bcf72d1f103fd34c6e",
                "message": "..."
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "release-notes/VERSION-2.x"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/JavaType.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/type/IterationType.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5RGDoy2gAoYTYxZGNmNjZkMjlmNWI4MWMyNmUyZWJmYzYwZDRhMTliNzRiOTIxYw",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3952/commits/a61dcf66d29f5b81c26e2ebfc60d4a19b74b921c"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3950,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3950",
                "title": "Create new `JavaType` subtype `IterationType` (extending `SimpleType`)",
                "bodyHTML": "<p dir=\"auto\">(note: possible replacement/impl of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1708593573\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/3926\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/3926/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/3926\">#3926</a>)</p>\n<p dir=\"auto\">There are benefits in recognizing types like:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">Iterator</code></li>\n<li><code class=\"notranslate\">Stream</code></li>\n<li><code class=\"notranslate\">DoubleStream</code> / <code class=\"notranslate\">IntStream</code> / <code class=\"notranslate\">LongStream</code></li>\n</ul>\n<p dir=\"auto\">as first-class <code class=\"notranslate\">JavaType</code> variants (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1708453845\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-dataformat-xml/issues/597\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/FasterXML/jackson-dataformat-xml/pull/597/hovercard\" href=\"https://github.com/FasterXML/jackson-dataformat-xml/pull/597\">FasterXML/jackson-dataformat-xml#597</a> f.ex).<br>\nIt should be based on <code class=\"notranslate\">SimpleType</code>, similar to <code class=\"notranslate\">ReferenceType</code>.</p>\n<p dir=\"auto\">If and when implemented we could consider whether to extend <code class=\"notranslate\">Deserializers</code>, <code class=\"notranslate\">Serializers</code> and other extension points.<br>\nAlso: would need to add support by Scala module, possibly Kotlin (and maybe Guava?).</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3950",
                "createdAt": "2023-05-22T23:21:58Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.16"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix `Coercion` fail message around `Array` and `Object`",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3962",
        "resourcePath": "/FasterXML/jackson-databind/pull/3962",
        "createdAt": "2023-06-01T03:21:42Z",
        "number": 3962,
        "mergeCommit": {
          "oid": "404d64b0ccc5581da711302b0f774c605431d1ff",
          "message": "Fix `Coercion` fail message around `Array` and `Object`. (#3962)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/404d64b0ccc5581da711302b0f774c605431d1ff",
          "parents": {
            "nodes": [
              {
                "oid": "17eb07afd308d8923779addc0b654db53b869587",
                "message": "Tiny improvement to #3690 test (wrt #3924)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/convert/DisableCoercions3690Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5R2eWM2gAoNzg4NTM4MmViZGY1NWMxMDIyYjJmYmMxNTJmNTAzMGU3OTA0OTcyOQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3962/commits/7885382ebdf55c1022b2fbc152f5030e79049729"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3924,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3924",
                "title": "Incorrect target type when disabling coercion, trying to deserialize String from Array/Object",
                "bodyHTML": "<p dir=\"auto\">When disabling coercions and providing a wrong type on an array element, the error message is specifying that we are trying to coerce the type of the array when it should mention we are trying to coerce the type of the element of the array. See the example below. This is another instance of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1478544963\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/3690\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/3690/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/3690\">#3690</a>.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Test class.\npublic static class Input&lt;T&gt; {\n    private T field;\n\n    public T getField() {\n        return field;\n    }\n\n    public void setField(T field) {\n        this.field = field;\n    }\n}\n\n// Building a strict ObjectMapper.\nObjectMapper objectMapper = JsonMapper.builder()\n    .withCoercionConfigDefaults(config -&gt; {\n        config.setCoercion(CoercionInputShape.Boolean, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.Integer, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.Float, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.String, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.Array, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.Object, CoercionAction.Fail);\n    })\n    .build();\nTypeFactory typeFactory = objectMapper.getTypeFactory();\n\n// Test.\nJavaType arrayType = typeFactory.constructParametricType(List.class, String.class);\nJavaType inputType = typeFactory.constructParametricType(Input.class, arrayType);\ntry {\n    // Returns class java.lang.String + VALUE_NUMBER_INT -&gt; correct.\n    objectMapper.readValue(&quot;{ \\&quot;field\\&quot;: [ 1 ] }&quot;, inputType);\n    // Returns class java.util.ArrayList + START_ARRAY -&gt; was expecting target type to be String.\n    objectMapper.readValue(&quot;{ \\&quot;field\\&quot;: [ [ 1 ] ] }&quot;, inputType);\n    // Returns class java.util.ArrayList + START_OBJECT -&gt; was expecting target type to be String.\n    objectMapper.readValue(&quot;{ \\&quot;field\\&quot;: [ { \\&quot;field\\&quot;: 1 } ] }&quot;, inputType);\n} catch (MismatchedInputException exception) {\n    JsonParser parser = (JsonParser) exception.getProcessor();\n    System.out.println(exception.getTargetType());\n    System.out.println(parser.currentToken());\n}\n\n// A truly strict String parser.\n// If we register this deserializer in the ObjectMapper above we will then get the expected target type.\npublic class StringDeserializer extends JsonDeserializer&lt;String&gt; {\n    @Override\n    public String deserialize(JsonParser parser, DeserializationContext context) throws IOException {\n        if (!parser.hasToken(VALUE_STRING)) {\n            throw context.wrongTokenException(parser, String.class, VALUE_STRING, null);\n        }\n\n        return parser.getText();\n    }\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">// Test class.\npublic static class Input&lt;T&gt; {\n    private T field;\n\n    public T getField() {\n        return field;\n    }\n\n    public void setField(T field) {\n        this.field = field;\n    }\n}\n\n// Building a strict ObjectMapper.\nObjectMapper objectMapper = JsonMapper.builder()\n    .withCoercionConfigDefaults(config -&gt; {\n        config.setCoercion(CoercionInputShape.Boolean, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.Integer, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.Float, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.String, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.Array, CoercionAction.Fail)\n            .setCoercion(CoercionInputShape.Object, CoercionAction.Fail);\n    })\n    .build();\nTypeFactory typeFactory = objectMapper.getTypeFactory();\n\n// Test.\nJavaType arrayType = typeFactory.constructParametricType(List.class, String.class);\nJavaType inputType = typeFactory.constructParametricType(Input.class, arrayType);\ntry {\n    // Returns class java.lang.String + VALUE_NUMBER_INT -&gt; correct.\n    objectMapper.readValue(\"{ \\\"field\\\": [ 1 ] }\", inputType);\n    // Returns class java.util.ArrayList + START_ARRAY -&gt; was expecting target type to be String.\n    objectMapper.readValue(\"{ \\\"field\\\": [ [ 1 ] ] }\", inputType);\n    // Returns class java.util.ArrayList + START_OBJECT -&gt; was expecting target type to be String.\n    objectMapper.readValue(\"{ \\\"field\\\": [ { \\\"field\\\": 1 } ] }\", inputType);\n} catch (MismatchedInputException exception) {\n    JsonParser parser = (JsonParser) exception.getProcessor();\n    System.out.println(exception.getTargetType());\n    System.out.println(parser.currentToken());\n}\n\n// A truly strict String parser.\n// If we register this deserializer in the ObjectMapper above we will then get the expected target type.\npublic class StringDeserializer extends JsonDeserializer&lt;String&gt; {\n    @Override\n    public String deserialize(JsonParser parser, DeserializationContext context) throws IOException {\n        if (!parser.hasToken(VALUE_STRING)) {\n            throw context.wrongTokenException(parser, String.class, VALUE_STRING, null);\n        }\n\n        return parser.getText();\n    }\n}\n</code></pre></div>\n<p dir=\"auto\">This is our test suite for JSON strict parsing which we have used to open many such issues in the past, in case you want to take inspiration for Jackson tests.<br>\n<a href=\"https://github.com/FasterXML/jackson-databind/files/11461536/Test.zip\">Test.zip</a></p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3924",
                "createdAt": "2023-05-12T09:25:35Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "good first issue"
                      }
                    },
                    {
                      "node": {
                        "name": "2.16"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Ignore ConstructorDetector.SingleArgConstructor.PROPERTIES preference for Records.",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3969",
        "resourcePath": "/FasterXML/jackson-databind/pull/3969",
        "createdAt": "2023-06-07T12:06:24Z",
        "number": 3969,
        "mergeCommit": {
          "oid": "24c1e3091de18ffd6f20cb38e5bd85562ff6ea8e",
          "message": "Ignore ConstructorDetector.SingleArgConstructor.PROPERTIES preference for Records. (#3969)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/24c1e3091de18ffd6f20cb38e5bd85562ff6ea8e",
          "parents": {
            "nodes": [
              {
                "oid": "a1e6208fd8c6d1873ae41106eb58f8c3751a12f3",
                "message": "to 2.15.3-SNAPSHOT"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordImplicitSingleValueUsePropertiesBasedCreatorsTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5SZ_D62gAoN2NmM2JjMGM1MTM1ZmUzM2Y3Zjg3YzVlY2I2MjViZDQ3ZmNhMmM4MQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3969/commits/7cf3bc0c5135fe33f7f87c5ecb625bd47fca2c81"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3968,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3968",
                "title": "Records with additional constructors failed to deserialize",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nRecords are not deserialized as before due to error:</p>\n<blockquote>\n<p dir=\"auto\">com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Conflicting property-based creators: already had implicitly discovered creator [constructor for <code class=\"notranslate\">RecordsDeserializationTest$TestRecord</code> (1 arg), annotations: [null], encountered another: [constructor for <code class=\"notranslate\">RecordsDeserializationTest$TestRecord</code> (2 args), annotations: [null]<br>\nat [Source: (String)\"{\"a\":\"a\", \"b\":\"b\"}\"; line: 1, column: 1]</p>\n</blockquote>\n<p dir=\"auto\">See the test below for the exact setup.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\nWhich Jackson version(s) was this for?<br>\n2.15.0</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.cfg.ConstructorDetector;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass RecordsDeserializationTest {\n\n    private final ObjectMapper objectMapper = JsonMapper.builder()\n            // commenting only this fixes the problem\n            .addModules(new ParameterNamesModule())\n            // commenting only this fixes the problem\n            .constructorDetector(ConstructorDetector.USE_PROPERTIES_BASED)\n            .build();\n\n    record TestRecord(String a, String b) {\n\n        // uncommenting only this fixes the problem\n        // @JsonIgnore\n        TestRecord(String c) {\n            this(c, c);\n        }\n    }\n\n    @Test\n    void testDeserialization() throws JsonProcessingException {\n        assertEquals(\n                new TestRecord(&quot;a&quot;, &quot;b&quot;),\n                objectMapper.readValue(&quot;{\\&quot;a\\&quot;:\\&quot;a\\&quot;, \\&quot;b\\&quot;:\\&quot;b\\&quot;}&quot;, TestRecord.class));\n    }\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.cfg.ConstructorDetector;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass RecordsDeserializationTest {\n\n    private final ObjectMapper objectMapper = JsonMapper.builder()\n            // commenting only this fixes the problem\n            .addModules(new ParameterNamesModule())\n            // commenting only this fixes the problem\n            .constructorDetector(ConstructorDetector.USE_PROPERTIES_BASED)\n            .build();\n\n    record TestRecord(String a, String b) {\n\n        // uncommenting only this fixes the problem\n        // @JsonIgnore\n        TestRecord(String c) {\n            this(c, c);\n        }\n    }\n\n    @Test\n    void testDeserialization() throws JsonProcessingException {\n        assertEquals(\n                new TestRecord(\"a\", \"b\"),\n                objectMapper.readValue(\"{\\\"a\\\":\\\"a\\\", \\\"b\\\":\\\"b\\\"}\", TestRecord.class));\n    }\n}\n</code></pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nThe exact combination of configuration is not working in version 2.15.0.<br>\nThere are 4 ways to fix it:</p>\n<ul dir=\"auto\">\n<li>remove module <code class=\"notranslate\">ParameterNamesModule</code></li>\n<li>don't use <code class=\"notranslate\">USE_PROPERTIES_BASED</code> constructor detection</li>\n<li>add <code class=\"notranslate\">@JsonIgnore</code> annotation to the extra constructor</li>\n<li>use version 2.13.4 on which this works</li>\n</ul>\n<p dir=\"auto\"><strong>Additional context</strong><br>\nThe caveat here is that I can't use explicit <code class=\"notranslate\">@JsonCreator</code> annotation on the primary constructor on a <code class=\"notranslate\">record</code> (or I have to implement it just to add the annotation). Ideally, you should restore the old behavior. The <code class=\"notranslate\">@JsonIgnore</code> approach seems like a hack to me.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3968",
                "createdAt": "2023-06-07T10:48:20Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add `JsonNodeFeature.WRITE_PROPERTIES_SORTED` for sorting `ObjectNode` properties on serialization",
        "url": "https://github.com/FasterXML/jackson-databind/pull/3998",
        "resourcePath": "/FasterXML/jackson-databind/pull/3998",
        "createdAt": "2023-06-19T18:36:43Z",
        "number": 3998,
        "mergeCommit": {
          "oid": "0a4b3a14209b16a0d110b15018a66134cebf861b",
          "message": "Add `JsonNodeFeature.WRITE_PROPERTIES_SORTED` for sorting `ObjectNode` properties on serialization (#3998)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/0a4b3a14209b16a0d110b15018a66134cebf861b",
          "parents": {
            "nodes": [
              {
                "oid": "778198c5d5679c8dceb4902b301d297ca6ff973f",
                "message": "Implement `withSettings` (#3996)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "release-notes/VERSION-2.x"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/cfg/JsonNodeFeature.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/node/NodeFeaturesTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5TXdTP2gAoNjdlMTZkYmE4YmY3YzNjOThjZDBkMTljNTVmYWNlY2U2N2VlZDQ5NQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/3998/commits/67e16dba8bf7c3c98cd0d19c55facece67eed495"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3965,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3965",
                "title": "Add `JsonNodeFeature.WRITE_PROPERTIES_SORTED` for sorting `ObjectNode` properties on serialization",
                "bodyHTML": "<p dir=\"auto\">(note: inspired by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1740365931\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/3963\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/FasterXML/jackson-databind/pull/3963/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/pull/3963\">#3963</a>)</p>\n<p dir=\"auto\">So, there are ways for alphabetic output of JSON Object keys, for:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS</code> orders <code class=\"notranslate\">Map</code> keys</li>\n<li><code class=\"notranslate\">MapperFeature.SORT_PROPERTIES_ALPHABETICALLY</code> orders POJO properties</li>\n</ul>\n<p dir=\"auto\">but there is nothing to force this on <code class=\"notranslate\">ObjectNode</code> (JsonNode subtype). It should be relatively simple to add this, both for general usage and possibly to help with \"Canonical JSON\" output.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3965",
                "createdAt": "2023-06-05T01:20:18Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "node-config"
                      }
                    },
                    {
                      "node": {
                        "name": "2.16"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix #4047",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4050",
        "resourcePath": "/FasterXML/jackson-databind/pull/4050",
        "createdAt": "2023-07-20T14:59:09Z",
        "number": 4050,
        "mergeCommit": {
          "oid": "8c820ef76cafc8d4041a9e4ed0a463b7446b3db7",
          "message": "Fix #4047 (#4050)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/8c820ef76cafc8d4041a9e4ed0a463b7446b3db7",
          "parents": {
            "nodes": [
              {
                "oid": "deaf38f8c596bdef61e245ba14625a2f3d7f3dd4",
                "message": "Fix #3906 (#4057)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5WA3-Q2gAoNzU0YmQ3NWU5OTgwMmM5NjFjZGU0NmNjMjQzNmExYzI4MjFkYmJlMg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4050/commits/754bd75e99802c961cde46cc2436a1c2821dbbe2"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4047,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4047",
                "title": "`ObjectMapper.valueToTree()` will ignore the configuration `SerializationFeature.WRAP_ROOT_VALUE`",
                "bodyHTML": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\">When we upgrade the jackson-databind version, then we found the ObjectMapper.valueToTree will return the different result with the previous version. Actually, we configured the SerializationFeature.WRAP_ROOT_VALUE.</p>\n<p dir=\"auto\">The class is like this:</p>\n<p dir=\"auto\">@JsonRootName(\"event\")<br>\npublic class Event {</p>\n<p dir=\"auto\">}</p>\n<p dir=\"auto\">The previous ObjectMapper.valueToTree result:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/12562318/254165372-a7e457b5-dacd-49d2-8f0f-79f266770d55.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTIwNjQ5NzEsIm5iZiI6MTcxMjA2NDY3MSwicGF0aCI6Ii8xMjU2MjMxOC8yNTQxNjUzNzItYTdlNDU3YjUtZGFjZC00OWQyLThmMGYtNzlmMjY2NzcwZDU1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MDIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDAyVDEzMzExMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTcyN2JjYmNlMGQ1ZjBlY2IwMzc4MzhjY2I4NDE4NDU0MmJhYTg5YzQ0YzhkODhkMDZhMzY1Y2E1YWM1Y2I1YzkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.RFvLFeM-xZi4Vpwr86SQgtLU3z8BqDK5SS1C3pVMHMU\"><img src=\"https://private-user-images.githubusercontent.com/12562318/254165372-a7e457b5-dacd-49d2-8f0f-79f266770d55.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTIwNjQ5NzEsIm5iZiI6MTcxMjA2NDY3MSwicGF0aCI6Ii8xMjU2MjMxOC8yNTQxNjUzNzItYTdlNDU3YjUtZGFjZC00OWQyLThmMGYtNzlmMjY2NzcwZDU1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MDIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDAyVDEzMzExMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTcyN2JjYmNlMGQ1ZjBlY2IwMzc4MzhjY2I4NDE4NDU0MmJhYTg5YzQ0YzhkODhkMDZhMzY1Y2E1YWM1Y2I1YzkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.RFvLFeM-xZi4Vpwr86SQgtLU3z8BqDK5SS1C3pVMHMU\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">After upgraded the version result:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/12562318/254165804-0ab4429c-8add-48db-9f9a-f52167420e2f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTIwNjQ5NzEsIm5iZiI6MTcxMjA2NDY3MSwicGF0aCI6Ii8xMjU2MjMxOC8yNTQxNjU4MDQtMGFiNDQyOWMtOGFkZC00OGRiLTlmOWEtZjUyMTY3NDIwZTJmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MDIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDAyVDEzMzExMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWQ3Y2JhYmZhMzUwMjhlOGM2YWRiZDkzMzhhMDY5NDNjNjBjOTA5M2UxMGMxMGU5OTViYTRhZTE5OGRiMTY5ZGUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.YMyYriWdH-zA1HcGshxzbjOWTR3LHp5RO34cU86YoB0\"><img src=\"https://private-user-images.githubusercontent.com/12562318/254165804-0ab4429c-8add-48db-9f9a-f52167420e2f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTIwNjQ5NzEsIm5iZiI6MTcxMjA2NDY3MSwicGF0aCI6Ii8xMjU2MjMxOC8yNTQxNjU4MDQtMGFiNDQyOWMtOGFkZC00OGRiLTlmOWEtZjUyMTY3NDIwZTJmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MDIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDAyVDEzMzExMVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWQ3Y2JhYmZhMzUwMjhlOGM2YWRiZDkzMzhhMDY5NDNjNjBjOTA5M2UxMGMxMGU5OTViYTRhZTE5OGRiMTY5ZGUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.YMyYriWdH-zA1HcGshxzbjOWTR3LHp5RO34cU86YoB0\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">This should caused by the commit.<br>\n<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/FasterXML/jackson-databind/commit/2e986dfe5937b28ba39b4d28e0f993802c7c9f68/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/commit/2e986dfe5937b28ba39b4d28e0f993802c7c9f68\"><tt>2e986df</tt></a><br>\nCan we re-enbale SerializationFeature.WRAP_ROOT_VALUE in ObjectMapper.valueToTree method to keep consistent with method writeValueAsString?</p>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.14.2 (The version after 2.13 should have this issue)</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<p dir=\"auto\">&lt;-- Any of the following</p>\n<ol dir=\"auto\">\n<li>Configure the object mapper  objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);</li>\n<li>Call objectMapper.valueToTree(event) method</li>\n<li>You can the SerializationFeature.WRAP_ROOT_VALUE does not take effect after version 2.13.x<br>\n--&gt;</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\" public ObjectMapper objectMapper() {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.findAndRegisterModules();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n        objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);\n        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        objectMapper.registerModule(new JSR310Module());\n        return objectMapper;\n    }\n\n@JsonRootName(&quot;event&quot;)\npublic class Event {\n    private Long id;\n    private String name;\n}\n//call valueToTree method\nobjectMapper.valueToTree(event)\"><pre class=\"notranslate\"> <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span>() {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">findAndRegisterModules</span>();\n        <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">configure</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">FAIL_ON_UNKNOWN_PROPERTIES</span>, <span class=\"pl-c1\">false</span>);\n        <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">configure</span>(<span class=\"pl-smi\">SerializationFeature</span>.<span class=\"pl-c1\">WRITE_DATES_AS_TIMESTAMPS</span>, <span class=\"pl-c1\">false</span>);\n        <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">SerializationFeature</span>.<span class=\"pl-c1\">WRAP_ROOT_VALUE</span>);\n        <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">setSerializationInclusion</span>(<span class=\"pl-smi\">JsonInclude</span>.<span class=\"pl-s1\">Include</span>.<span class=\"pl-c1\">NON_NULL</span>);\n        <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">registerModule</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">JSR310Module</span>());\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">objectMapper</span>;\n    }\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonRootName</span>(<span class=\"pl-s\">\"event\"</span>)\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Event</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Long</span> <span class=\"pl-s1\">id</span>;\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>;\n}\n<span class=\"pl-c\">//call valueToTree method</span>\n<span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">valueToTree</span>(<span class=\"pl-s1\">event</span>)</pre></div>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\">SerializationFeature.WRAP_ROOT_VALUE configuration should be global and take effect in method valueToTree to keep the same with writeValueAsString</p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\"><em>No response</em></p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4047",
                "createdAt": "2023-07-18T06:48:58Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.16"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add support for new `JsonTypeInfo.Id.SIMPLE_NAME` polymorphic type id option",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4065",
        "resourcePath": "/FasterXML/jackson-databind/pull/4065",
        "createdAt": "2023-08-02T15:33:06Z",
        "number": 4065,
        "mergeCommit": {
          "oid": "3579be0d0f81be74fef5d6955952023193ce52c4",
          "message": "Add support for new `JsonTypeInfo.Id.SIMPLE_NAME` polymorphic type id option (#4065)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/3579be0d0f81be74fef5d6955952023193ce52c4",
          "parents": {
            "nodes": [
              {
                "oid": "73eca590a04adc6efb35c74835692725104ea536",
                "message": "Minor Javadoc improvements"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SimpleNameIdResolver.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/JsonTypeInfoSimpleClassName4061Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5XBdMQ2gAoZjhkMGQ3YzNlMzA1NDMwZjBlZDQxNDMwOThiMmQ2YzcwZTFmY2M4OA",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4065/commits/f8d0d7c3e305430f0ed4143098b2d6c70e1fcc88"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4061,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4061",
                "title": "Add JsonTypeInfo.Id.SIMPLE_NAME which defaults type id to `Class.getSimpleName()`",
                "bodyHTML": "<h3 dir=\"auto\">Is your feature request related to a problem? Please describe.</h3>\n<p dir=\"auto\">Add JsonTypeInfo.Id.SIMPLE_NAME that would use Class::getSimpleName for type ids.</p>\n<p dir=\"auto\">My use case is sealed hierarchies where there is <em>single</em> sealed super interface, it would result in cleaner type ids. My work around:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"            // AnnotationIntrospector\n            @Override\n            public String findTypeName(AnnotatedClass ac) {\n                if (Arrays.stream(ac.getAnnotated().getInterfaces()).filter(Class::isSealed).count() == 1) {\n                    return ac.getAnnotated().getSimpleName();\n                }\n\n                return super.findTypeName(ac);\n            }\"><pre class=\"notranslate\"><code class=\"notranslate\">            // AnnotationIntrospector\n            @Override\n            public String findTypeName(AnnotatedClass ac) {\n                if (Arrays.stream(ac.getAnnotated().getInterfaces()).filter(Class::isSealed).count() == 1) {\n                    return ac.getAnnotated().getSimpleName();\n                }\n\n                return super.findTypeName(ac);\n            }\n</code></pre></div>\n<h3 dir=\"auto\">Describe the solution you'd like</h3>\n<p dir=\"auto\">JsonTypeInfo.Id.SIMPLE_NAME</p>\n<h3 dir=\"auto\">Usage example</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\"><em>No response</em></p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4061",
                "createdAt": "2023-07-30T06:48:38Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.16"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Ignore `\"message\"` property for deserialization of custom `Throwable`",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4072",
        "resourcePath": "/FasterXML/jackson-databind/pull/4072",
        "createdAt": "2023-08-09T13:58:27Z",
        "number": 4072,
        "mergeCommit": {
          "oid": "efad166f165504359fa1a7db7499960dd5f3c847",
          "message": "Add test (#4072)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/efad166f165504359fa1a7db7499960dd5f3c847",
          "parents": {
            "nodes": [
              {
                "oid": "c6522de69fb2f4aed36fae7bde56b878c54c15d0",
                "message": "Make NamedType collection predictable (#4086)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/exc/CustomExceptionDeser4071Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5Xikhd2gAoNWIzY2M1OWMwZGQ2N2ZlMjU5ODE3ZDAxZmQ4NTFkMGYzNTUzMGVlNg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4072/commits/5b3cc59c0dd67fe259817d01fd851d0f35530ee6"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4071,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4071",
                "title": "Impossible to deserialize custom `Throwable` sub-classes that do not have single-String constructors",
                "bodyHTML": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\">An UnrecognizedPropertyException is thrown on fields \"message\" and/or \"suppressed\" while deserializing a custom exception.<br>\n(since correction <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1250200678\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/3497\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/3497/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/3497\">#3497</a>)</p>\n<p dir=\"auto\">Workaround : adding \".configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\" (but with operationnal impact)</p>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.14+</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<p dir=\"auto\">public class CustomException extends Exception{<br>\npublic CustomException (){<br>\nsuper();<br>\n}<br>\n}</p>\n<p dir=\"auto\">String json = JsonMapper.builder().build().writeValueAsString(new CustomException());<br>\nJsonMapper.builder().build().readValue(json, CustomException.class);</p>\n<p dir=\"auto\">==&gt; UnrecognizedPropertyException</p>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\">Deserialization is possible without disabling FAIL_ON_UNKNOWN_PROPERTIES</p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\">Since <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/FasterXML/jackson-databind/commit/f27df6357db7eefe8698c565aac20644fc6e7294/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/commit/f27df6357db7eefe8698c565aac20644fc6e7294\"><tt>f27df63</tt></a><br>\nwith the removal of \"builder.addIgnorable(\"localizedMessage\");\" and \"builder.addIgnorable(\"suppressed\");\" In class [BeanDeserializerFactory.java] (line 452 and line 454)</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4071",
                "createdAt": "2023-08-08T07:44:14Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "to-evaluate"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Allow some jdk modules (such as `java.desktop`) to be optional in `Java7Support` again",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4080",
        "resourcePath": "/FasterXML/jackson-databind/pull/4080",
        "createdAt": "2023-08-16T15:03:47Z",
        "number": 4080,
        "mergeCommit": {
          "oid": "09a60ea19453dbeaec05d234295176301e515e84",
          "message": "catch IllegalAccessError in Java7Support (#4080)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/09a60ea19453dbeaec05d234295176301e515e84",
          "parents": {
            "nodes": [
              {
                "oid": "7f85d4a9c1891cc67e0dc29a447073bb5a34ddf6",
                "message": "Cherry-picked simplifications from #4076"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ext/Java7Support.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5YEyfS2gAoYmFhOWNkN2E5MDNhZTJiMDg5ZmEwNWI2OTAxYzJhMTYzNjQ1MTE5ZA",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4080/commits/baa9cd7a903ae2b089fa05b6901c2a163645119d"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4078,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4078",
                "title": "`java.desktop` module is no longer optional",
                "bodyHTML": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"732986506\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/2910\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/2910/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/2910\">#2910</a>/<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"734419516\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/2913\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/FasterXML/jackson-databind/pull/2913/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/pull/2913\">#2913</a> made the <code class=\"notranslate\">java.desktop</code> module optional, which worked fine in 2.13.x.<br>\nAfter an upgrade to 2.15.2, starting a modular application with Jackson that does not explicitly include <code class=\"notranslate\">java.desktop</code> will throw an error:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Exception in thread &quot;main&quot; java.lang.IllegalAccessError: class com.fasterxml.jackson.databind.ext.Java7SupportImpl (in module de.ii.xtraplatform.runtime) cannot access class java.beans.Transient (in module java.desktop) because module de.ii.xtraplatform.runtime does not read module java.desktop\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.ext.Java7SupportImpl.&lt;init&gt;(Java7SupportImpl.java:22)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.util.ClassUtil.createInstance(ClassUtil.java:565)\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.ext.Java7Support.&lt;clinit&gt;(Java7Support.java:24)\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.&lt;clinit&gt;(JacksonAnnotationIntrospector.java:68)\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.ObjectMapper.&lt;clinit&gt;(ObjectMapper.java:375)\n\tat de.ii.xtraplatform.runtime.intellij/io.dropwizard.jackson.Jackson.newObjectMapper(Jackson.java:45)\n        at de.ii.xtraplatform.base@5.3.0-SNAPSHOT/de.ii.xtraplatform.base.domain.ConfigurationReader.&lt;init&gt;(ConfigurationReader.java:98)\n\tat de.ii.xtraplatform.base@5.3.0-SNAPSHOT/de.ii.xtraplatform.base.domain.AppLauncher.init(AppLauncher.java:109)\n\tat de.ii.ldproxy@3.5.0-SNAPSHOT/de.ii.xtraplatform.application.Launcher.main(Launcher.java:32)\"><pre class=\"notranslate\"><code class=\"notranslate\">Exception in thread \"main\" java.lang.IllegalAccessError: class com.fasterxml.jackson.databind.ext.Java7SupportImpl (in module de.ii.xtraplatform.runtime) cannot access class java.beans.Transient (in module java.desktop) because module de.ii.xtraplatform.runtime does not read module java.desktop\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.ext.Java7SupportImpl.&lt;init&gt;(Java7SupportImpl.java:22)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.util.ClassUtil.createInstance(ClassUtil.java:565)\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.ext.Java7Support.&lt;clinit&gt;(Java7Support.java:24)\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.&lt;clinit&gt;(JacksonAnnotationIntrospector.java:68)\n\tat de.ii.xtraplatform.runtime.intellij/com.fasterxml.jackson.databind.ObjectMapper.&lt;clinit&gt;(ObjectMapper.java:375)\n\tat de.ii.xtraplatform.runtime.intellij/io.dropwizard.jackson.Jackson.newObjectMapper(Jackson.java:45)\n        at de.ii.xtraplatform.base@5.3.0-SNAPSHOT/de.ii.xtraplatform.base.domain.ConfigurationReader.&lt;init&gt;(ConfigurationReader.java:98)\n\tat de.ii.xtraplatform.base@5.3.0-SNAPSHOT/de.ii.xtraplatform.base.domain.AppLauncher.init(AppLauncher.java:109)\n\tat de.ii.ldproxy@3.5.0-SNAPSHOT/de.ii.xtraplatform.application.Launcher.main(Launcher.java:32)\n</code></pre></div>\n<p dir=\"auto\">This seems to be caused by the changes introduced in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1622464853\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/3827\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/FasterXML/jackson-databind/pull/3827/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/pull/3827\">#3827</a>. <code class=\"notranslate\">IncompatibleClassChangeError</code>, which is considered fatal and therefore rethrown, is the super class of <code class=\"notranslate\">IllegalAccessError</code>, which is thrown when accessing a class from an absent optional module.</p>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.15.2</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<p dir=\"auto\">Start a modular application that does not explicitly include java.desktop and creates a new <code class=\"notranslate\">ObjectMapper</code>.</p>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\">The application starts without errors.</p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\">As a workaround, <code class=\"notranslate\">Java7Support</code> can be initialised before creating the first <code class=\"notranslate\">ObjectMapper</code>, which allows to catch and ignore the exception:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"try{\n  Java7Support java7Support = Java7Support.instance();\n} catch (IllegalAccessError e) {\n  // ignore\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">try</span>{\n  <span class=\"pl-smi\">Java7Support</span> <span class=\"pl-s1\">java7Support</span> = <span class=\"pl-smi\">Java7Support</span>.<span class=\"pl-en\">instance</span>();\n} <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IllegalAccessError</span> <span class=\"pl-s1\">e</span>) {\n  <span class=\"pl-c\">// ignore</span>\n}</pre></div>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4078",
                "createdAt": "2023-08-13T08:30:27Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.16"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add new `DefaultTyping.NON_FINAL_AND_ENUMS` to allow Default Typing  for `Enum`s",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4159",
        "resourcePath": "/FasterXML/jackson-databind/pull/4159",
        "createdAt": "2023-10-15T12:17:33Z",
        "number": 4159,
        "mergeCommit": {
          "oid": "9065be2244867fed8f1e9675c5664b3a0d37a277",
          "message": "Add new `DefaultTyping.NON_FINAL_AND_ENUMS` to allow default type handler for `Enum`s (#4159)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/9065be2244867fed8f1e9675c5664b3a0d37a277",
          "parents": {
            "nodes": [
              {
                "oid": "597d1bbdd79130faebbe1d75f97a4e074ea82105",
                "message": "enable java 21 testing in CI (#4130)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForEnums.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5c1EJs2gAoZTRjY2E3NGFiODdjMjEzYTBlNTE4ODg3N2E4NmU5YWM4YTAzZDU3Yg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4159/commits/e4cca74ab87c213a0e5188877a86e9ac8a03d57b"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 3569,
                "url": "https://github.com/FasterXML/jackson-databind/issues/3569",
                "title": "`FactoryBasedEnumDeserializer` unable to deserialize enum object with Polymorphic Type Id (\"As.WRAPPER_ARRAY\") - fails on START_ARRAY token",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the bug</strong><br>\nFactoryBasedEnumDeserializer is unable to deserialize enum value which is wrapped in Array.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\nThis is for Jackson 2.13.1 - It worked fine for release 2.10.1</p>\n<p dir=\"auto\"><strong>To Reproduce</strong><br>\nIf you have a way to reproduce this with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class EnumDeserializeTest {\n\n    public static void main(String[] args) throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        GenericJackson2JsonRedisSerializer serializer = new GenericJackson2JsonRedisSerializer();\n        Frequency frequency = Frequency.DAILY;\n        byte[] frequencyAsBytes = serializer.serialize(frequency);\n        Frequency frequencyDeserialized = mapper.readValue(frequencyAsBytes, Frequency.class);\n    }\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">public class EnumDeserializeTest {\n\n    public static void main(String[] args) throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        GenericJackson2JsonRedisSerializer serializer = new GenericJackson2JsonRedisSerializer();\n        Frequency frequency = Frequency.DAILY;\n        byte[] frequencyAsBytes = serializer.serialize(frequency);\n        Frequency frequencyDeserialized = mapper.readValue(frequencyAsBytes, Frequency.class);\n    }\n}\n</code></pre></div>\n<p dir=\"auto\">Value is serialized as : [\"Frequency\",\"DAILY\"]</p>\n<p dir=\"auto\">This results in exception:</p>\n<p dir=\"auto\"><code class=\"notranslate\">Exception in thread \"main\" com.fasterxml.jackson.databind.exc.ValueInstantiationException: Cannot construct instance of </code>Frequency<code class=\"notranslate\">, problem: Unexpected value '' at [Source: (byte[])\"[\"Frequency\",\"DAILY\"]\"; line: 1, column: 21] at com.fasterxml.jackson.databind.exc.ValueInstantiationException.from(ValueInstantiationException.java:47) at com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:2047) at com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem(DeserializationContext.java:1400) at com.fasterxml.jackson.databind.deser.std.FactoryBasedEnumDeserializer.deserialize(FactoryBasedEnumDeserializer.java:182) at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323) at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674) at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3690) at EnumDeserializeTest.main(EnumDeserializeTest.java:26)</code></p>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nDeserialization should work fine with FactoryBasedEnumDeserializer but fails when it encounters START_ARRAY token. EnumDeserializer works just fine and it is able to parse the array tokens and retrieves the enum value. Similarly, FactoryBasedEnumDeserializer should also work.</p>\n<p dir=\"auto\"><strong>Additional context</strong><br>\nThis issue is faced when using GenericJackson2JsonRedisSerializer. A change was made to this serialiser in Spring-data-redis 2.7.2 which uses JsonTypeInfo.Id.CLASS annotation as default for all types. Prior to this release, enum types were serialised as simple/plain values but with this change they are wrapped in an array where 1st element is denoted for class and 2nd element holds the enum value.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/3569",
                "createdAt": "2022-08-09T11:52:19Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "has-failing-test"
                      }
                    },
                    {
                      "node": {
                        "name": "2.16"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Exception when deserialization of private `record` with default constructor (fix for #4175)",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4178",
        "resourcePath": "/FasterXML/jackson-databind/pull/4178",
        "createdAt": "2023-10-26T15:22:47Z",
        "number": 4178,
        "mergeCommit": {
          "oid": "132c9698671ef037b4442309e8ffa5423c2738c1",
          "message": "Exception when deserialization of private `record` with default constructor (fix for #4175) (#4178)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/132c9698671ef037b4442309e8ffa5423c2738c1",
          "parents": {
            "nodes": [
              {
                "oid": "3a0991cc4326ceae47c64d9ad668ea21b8a63bd4",
                "message": "Move test for #4175 under failing/ for 2.16 (as it's failing)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "release-notes/VERSION-2.x"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java"
              }
            },
            {
              "node": {
                "changeType": "RENAMED",
                "path": "src/test-jdk17/java/com/fasterxml/jackson/databind/jdk17/RecordPrivate4175Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5d4eb22gAoMTNlNzVhMjZhZjkxYjg0ZjIyYmQ3MThlOWY1Yzk0MDQ3NTRjNjNkYg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4178/commits/13e75a26af91b84f22bd718e9f5c9404754c63db"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4175,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4175",
                "title": "Exception when deserialization of `private` record with default constructor",
                "bodyHTML": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\">When deserializing a record, jackson fails with</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of ... (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\"><pre class=\"notranslate\"><code class=\"notranslate\">com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of ... (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\n</code></pre></div>\n<p dir=\"auto\">It looks like jackson does not see default constructor.</p>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.16.0-rc1</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\n\nclass TestObjectTest {\n\n    @Test\n    public void shouldDeserialize() throws JsonProcessingException {\n        TestObject testObject = new ObjectMapper().readValue(&quot;{\\&quot;text\\&quot;:\\&quot;anything\\&quot;}&quot;, TestObject.class);\n        Assertions.assertEquals(&quot;anything&quot;, testObject.text());\n    }\n\n    private record TestObject(String text) {}\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Tag</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestObjectTest</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">shouldDeserialize</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">TestObject</span> <span class=\"pl-s1\">testObject</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>().<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{<span class=\"pl-cce\">\\\"</span>text<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>anything<span class=\"pl-cce\">\\\"</span>}\"</span>, <span class=\"pl-smi\">TestObject</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-smi\">Assertions</span>.<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"anything\"</span>, <span class=\"pl-s1\">testObject</span>.<span class=\"pl-en\">text</span>());\n    }\n\n    <span class=\"pl-k\">private</span> record <span class=\"pl-s1\">TestObject</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">text</span>) {}\n}</pre></div>\n<p dir=\"auto\">When I add compact constructor with <code class=\"notranslate\">@JsonCreator</code> to TestObject, it works correctly:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"    private record TestObject(String text) {\n        @JsonCreator\n        private TestObject {\n        }\n    }\"><pre class=\"notranslate\">    <span class=\"pl-k\">private</span> record <span class=\"pl-s1\">TestObject</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">text</span>) {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n        <span class=\"pl-k\">private</span> <span class=\"pl-s1\">TestObject</span> {\n        }\n    }</pre></div>\n<h3 dir=\"auto\">Additional context</h3>\n<ul dir=\"auto\">\n<li>It works correctly in version 2.15.3</li>\n<li>tested on java 21</li>\n<li>May be related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1902818147\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/4119\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/4119/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/4119\">#4119</a></li>\n</ul>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4175",
                "createdAt": "2023-10-25T10:45:40Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "has-failing-test"
                      }
                    },
                    {
                      "node": {
                        "name": "Record"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add `JsonNodeFeature.FAIL_ON_NAN_TO_BIG_DECIMAL_COERCION` to determine what happens on `JsonNode` coercion to `BigDecimal` with NaN",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4195",
        "resourcePath": "/FasterXML/jackson-databind/pull/4195",
        "createdAt": "2023-11-09T00:23:14Z",
        "number": 4195,
        "mergeCommit": {
          "oid": "722edd45f20dd9f1bf845c8eed9bfd023783f40a",
          "message": "Add `DeserializationFeature.FAIL_ON_NAN_TO_BIG_DECIMAL_COERCION` to determine what happens on `JsonNode` coercion to `BigDecimal` with NaN (#4195)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/722edd45f20dd9f1bf845c8eed9bfd023783f40a",
          "parents": {
            "nodes": [
              {
                "oid": "5612abaaaae85f2ca83e2dd49faa7b588dcefed1",
                "message": "Merge branch '2.16' into 2.17"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/cfg/JsonNodeFeature.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/node/NumberNodes1770Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5e-xRx2gAoYmFlMzI4MTdkMWRjNmI4OTkwNTMyNWE4YzJlMzk3M2RhYWEzMzg1OA",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4195/commits/bae32817d1dc6b89905325a8c2e3973daaa33858"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4194,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4194",
                "title": "Add `JsonNodeFeature.FAIL_ON_NAN_TO_BIG_DECIMAL_COERCION` option to fail on attempting to coerce `NaN` into `BigDecimal`",
                "bodyHTML": "<h3 dir=\"auto\">Describe your Issue</h3>\n<p dir=\"auto\">(follow up to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"258947000\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/1770\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/1770/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/1770\">#1770</a>)</p>\n<p dir=\"auto\">So, we should not (by default) coerce \"NaN\"s (infinity, NaN) for <code class=\"notranslate\">JsonNode</code> as is done with <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"258947000\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/1770\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/1770/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/1770\">#1770</a> fixed.<br>\nThere should probably be a <code class=\"notranslate\">JsonNodeFeature</code> to allow such coercion, however.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4194",
                "createdAt": "2023-11-08T02:03:45Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.17"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "[2.17] Fail on missing `@JsonProperty(required=true)` Creator param only after searching for absent value ",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4202",
        "resourcePath": "/FasterXML/jackson-databind/pull/4202",
        "createdAt": "2023-11-13T01:58:30Z",
        "number": 4202,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/creators/RequiredCreatorTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5fQFt92gAoZDIyZGQzMmU2OTFhNWEwNzVlMTBlY2FlZGRjM2Y3ODdmY2FkOWUwNQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4202/commits/d22dd32e691a5a075e10ecaeddc3f787fcad9e05"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4201,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4201",
                "title": "If the property is `required`, the `absentValue` is ignored and a `MismatchedInputException` is thrown.",
                "bodyHTML": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\">If the property is <code class=\"notranslate\">required</code>, the <code class=\"notranslate\">absentValue</code> is ignored and a <code class=\"notranslate\">MismatchedInputException</code> is thrown.</p>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.15.3</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JacksonException;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class GitHubXXX {\n    static class MyDeser extends StdDeserializer&lt;String&gt; {\n        public MyDeser() {\n            super(String.class);\n        }\n\n        @Override\n        public String deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JacksonException {\n            return p.getValueAsString();\n        }\n\n        @Override\n        public Object getAbsentValue(DeserializationContext ctxt) {\n            return &quot;absent&quot;;\n        }\n    }\n\n    static class Dto {\n        private final String foo;\n        private final String bar;\n\n        @JsonCreator\n        Dto(\n                @JsonProperty(value = &quot;foo&quot;, required = false)\n                @JsonDeserialize(using = MyDeser.class)\n                String foo,\n                @JsonDeserialize(using = MyDeser.class)\n                @JsonProperty(value = &quot;bar&quot;, required = true)\n                String bar\n        ) {\n            this.foo = foo;\n            this.bar = bar;\n        }\n    }\n\n    @Test\n    void test() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper();\n\n        Dto r1 = mapper.readValue(&quot;{\\&quot;bar\\&quot;:\\&quot;value\\&quot;}&quot;, Dto.class);\n        assertEquals(&quot;absent&quot;, r1.foo);\n        assertEquals(&quot;value&quot;, r1.bar);\n\n        // -&gt; throws MismatchedInputException: Missing required creator property 'bar' (index 1)\n        Dto r2 = mapper.readValue(&quot;{}&quot;, Dto.class);\n        assertEquals(&quot;absent&quot;, r2.foo);\n        assertEquals(&quot;absent&quot;, r2.bar);\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonCreator</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonProperty</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JacksonException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonParser</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationContext</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonDeserialize</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">deser</span>.<span class=\"pl-s1\">std</span>.<span class=\"pl-s1\">StdDeserializer</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">io</span>.<span class=\"pl-s1\">IOException</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-s1\">assertEquals</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">GitHubXXX</span> {\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyDeser</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">StdDeserializer</span>&lt;<span class=\"pl-smi\">String</span>&gt; {\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MyDeser</span>() {\n            <span class=\"pl-en\">super</span>(<span class=\"pl-smi\">String</span>.<span class=\"pl-k\">class</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">deserialize</span>(<span class=\"pl-smi\">JsonParser</span> <span class=\"pl-s1\">p</span>, <span class=\"pl-smi\">DeserializationContext</span> <span class=\"pl-s1\">ctxt</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span>, <span class=\"pl-smi\">JacksonException</span> {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">p</span>.<span class=\"pl-en\">getValueAsString</span>();\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Object</span> <span class=\"pl-en\">getAbsentValue</span>(<span class=\"pl-smi\">DeserializationContext</span> <span class=\"pl-s1\">ctxt</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"absent\"</span>;\n        }\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Dto</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">foo</span>;\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">bar</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonCreator</span>\n        <span class=\"pl-smi\">Dto</span>(\n                <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-s\">\"foo\"</span>, <span class=\"pl-s1\">required</span> = <span class=\"pl-c1\">false</span>)\n                <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonDeserialize</span>(<span class=\"pl-s1\">using</span> = <span class=\"pl-smi\">MyDeser</span>.<span class=\"pl-k\">class</span>)\n                <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">foo</span>,\n                <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonDeserialize</span>(<span class=\"pl-s1\">using</span> = <span class=\"pl-smi\">MyDeser</span>.<span class=\"pl-k\">class</span>)\n                <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonProperty</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-s\">\"bar\"</span>, <span class=\"pl-s1\">required</span> = <span class=\"pl-c1\">true</span>)\n                <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">bar</span>\n        ) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">foo</span> = <span class=\"pl-s1\">foo</span>;\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">bar</span> = <span class=\"pl-s1\">bar</span>;\n        }\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\n        <span class=\"pl-smi\">Dto</span> <span class=\"pl-s1\">r1</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{<span class=\"pl-cce\">\\\"</span>bar<span class=\"pl-cce\">\\\"</span>:<span class=\"pl-cce\">\\\"</span>value<span class=\"pl-cce\">\\\"</span>}\"</span>, <span class=\"pl-smi\">Dto</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"absent\"</span>, <span class=\"pl-s1\">r1</span>.<span class=\"pl-s1\">foo</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"value\"</span>, <span class=\"pl-s1\">r1</span>.<span class=\"pl-s1\">bar</span>);\n\n        <span class=\"pl-c\">// -&gt; throws MismatchedInputException: Missing required creator property 'bar' (index 1)</span>\n        <span class=\"pl-smi\">Dto</span> <span class=\"pl-s1\">r2</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-smi\">Dto</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"absent\"</span>, <span class=\"pl-s1\">r2</span>.<span class=\"pl-s1\">foo</span>);\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"absent\"</span>, <span class=\"pl-s1\">r2</span>.<span class=\"pl-s1\">bar</span>);\n    }\n}</pre></div>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\">If <code class=\"notranslate\">absentValue</code> returns a non-null value, then processing should continue.</p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\">By organizing these priorities, we believe that the deserialization process in <code class=\"notranslate\">kotlin-module</code> can be written easily and without differences in behavior.<br>\n<a href=\"https://github.com/FasterXML/jackson-module-kotlin/blob/fc47a94e81586990dd19d05087580652c14b7f7a/src/main/kotlin/com/fasterxml/jackson/module/kotlin/KotlinValueInstantiator.kt#L75-L89\">https://github.com/FasterXML/jackson-module-kotlin/blob/fc47a94e81586990dd19d05087580652c14b7f7a/src/main/kotlin/com/fasterxml/jackson/module/kotlin/KotlinValueInstantiator.kt#L75-L89</a></p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4201",
                "createdAt": "2023-11-12T08:32:11Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "will-not-fix"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Deprecate `DefaultTyping.EVERYTHING` ",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4240",
        "resourcePath": "/FasterXML/jackson-databind/pull/4240",
        "createdAt": "2023-12-03T11:36:34Z",
        "number": 4240,
        "mergeCommit": {
          "oid": "bd7dae5f0633cf33ae65db73161fc5f8baab718b",
          "message": "Deprecate `DefaultTyping.EVERYTHING`  (#4240)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/bd7dae5f0633cf33ae65db73161fc5f8baab718b",
          "parents": {
            "nodes": [
              {
                "oid": "295a407c89f2bd6a6c6c4417667aa769b80806dc",
                "message": "Tiny streamlining"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5g-05q2gAoMTRkZmI1ZWI2ZjI2ZjM3NzNkNjZlMzhhNzNjYmQzYzI3ODIzYTc3Ng",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4240/commits/14dfb5eb6f26f3773d66e38a73cbd3c27823a776"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4160,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4160",
                "title": "Deprecate `DefaultTyping.EVERYTHING` in `2.x` and remove in `3.0`",
                "bodyHTML": "<h3 dir=\"auto\">Is your feature request related to a problem? Please describe.</h3>\n<p dir=\"auto\">As per JavaDoc of <code class=\"notranslate\">ObjectMapper.DefaultTyping.EVERYTHING</code> itself, users are better off without it, even though was initally created off a feature request. So I propose that we remove it progressively.</p>\n<h3 dir=\"auto\">Describe the solution you'd like</h3>\n<ol dir=\"auto\">\n<li>Deprecate in <code class=\"notranslate\">2.x</code>, then</li>\n<li>remove in <code class=\"notranslate\">3.0</code></li>\n</ol>\n<h3 dir=\"auto\">Usage example</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\"><em>No response</em></p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4160",
                "createdAt": "2023-10-15T12:30:22Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "3.x"
                      }
                    },
                    {
                      "node": {
                        "name": "2.17"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix #4248: add special handling for `null` \"cause\" for Throwable deserialization",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4249",
        "resourcePath": "/FasterXML/jackson-databind/pull/4249",
        "createdAt": "2023-12-08T02:53:43Z",
        "number": 4249,
        "mergeCommit": {
          "oid": "6edd415a0f1ac17bd0fbd82dec5fb00a53ab7905",
          "message": "Fix #4248: add special handling for `null` \"cause\" for Throwable deserialization (#4249)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/6edd415a0f1ac17bd0fbd82dec5fb00a53ab7905",
          "parents": {
            "nodes": [
              {
                "oid": "26f232ad4b13dba7f1e57e447a8e75b1c6ec7c6a",
                "message": "Improve `JsonNodeDeserializer` handling of NaN wrt `USE_BIG_DECIMAL_FOR_FLOATS` (#4245)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "release-notes/VERSION-2.x"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5hewiP2gAoODM2NzVhMzIzNGE0NjI5MDgxNDczZjI5ZjYwYjA0ODcyMmM3NmQxYg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4249/commits/83675a3234a4629081473f29f60b048722c76d1b"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4248,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4248",
                "title": "`ThrowableDeserializer` does not handle `null` well for `cause`",
                "bodyHTML": "<h3 dir=\"auto\">Describe your Issue</h3>\n<p dir=\"auto\">Currently JSON for deserializing any <code class=\"notranslate\">Throwable</code> with <code class=\"notranslate\">null</code> for <code class=\"notranslate\">\"cause\"</code> property:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{ &quot;message&quot;: &quot;...&quot;,\n   &quot;cause&quot;: null\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">{ \"message\": \"...\",\n   \"cause\": null\n}\n</code></pre></div>\n<p dir=\"auto\">will lead to cryptic exception, due to <code class=\"notranslate\">Throwable.initCause()</code> being called with <code class=\"notranslate\">null</code>.<br>\nTo avoid this, <code class=\"notranslate\">ThrowableDeserializer</code> should handle this edge case gracefully.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4248",
                "createdAt": "2023-12-08T02:47:38Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.17"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix `REQUIRE_SETTERS_FOR_GETTERS` taking no effect",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4257",
        "resourcePath": "/FasterXML/jackson-databind/pull/4257",
        "createdAt": "2023-12-11T15:46:52Z",
        "number": 4257,
        "mergeCommit": {
          "oid": "9e147a82472cd2a8546c3306f3e6883e4e532d70",
          "message": "Fix `REQUIRE_SETTERS_FOR_GETTERS` taking no effect (#4257)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/9e147a82472cd2a8546c3306f3e6883e4e532d70",
          "parents": {
            "nodes": [
              {
                "oid": "6b406629b14760209fb8e909fb33519c9c5f7468",
                "message": "Another minor tweak to ThrowableDeserializer to flatten call stack"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "RENAMED",
                "path": "src/test/java/com/fasterxml/jackson/databind/ser/RequireSetterForGetter736Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5hsrSC2gAoYTA5YWFlZmNkZTUwMWI3ZjM0ZDhhYWRhN2U1ZjkwZTFkMWJkYzA3NA",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4257/commits/a09aaefcde501b7f34d8aada7e5f90e1d1bdc074"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 736,
                "url": "https://github.com/FasterXML/jackson-databind/issues/736",
                "title": "`MapperFeature.REQUIRE_SETTERS_FOR_GETTERS` has no effect",
                "bodyHTML": "<p dir=\"auto\">Hi, I've tried the code below to serialize properties that have both a getter and a setter. However the output is: <code class=\"notranslate\">{\"readonly\":1,\"readwrite\":2}</code> while I expected it to be: <code class=\"notranslate\">{\"readwrite\":2}</code>.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public class Main {\n\n    public static class DataB {\n        private int readonly;\n        private int readwrite;\n\n        public DataB() {\n            readonly = 1;\n            readwrite = 2;\n        }\n\n        public int getReadwrite() {\n            return readwrite;\n        }\n        public void setReadwrite(int readwrite) {\n            this.readwrite = readwrite;\n        }\n        public int getReadonly() {\n            return readonly;\n        }\n    }\n\n    public static void main(String[] args) {\n        ObjectMapper mapper = new ObjectMapper(); \n        mapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE);\n        mapper.setVisibility(PropertyAccessor.GETTER, Visibility.PUBLIC_ONLY);\n        mapper.setVisibility(PropertyAccessor.SETTER, Visibility.PUBLIC_ONLY);\n        mapper.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS);\n        DataB dataB = new DataB();\n        try {\n            String json = mapper.writeValueAsString(dataB);\n            System.out.println(json);\n        } catch (JsonProcessingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Main</span> {\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">DataB</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">readonly</span>;\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">readwrite</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">DataB</span>() {\n            <span class=\"pl-s1\">readonly</span> = <span class=\"pl-c1\">1</span>;\n            <span class=\"pl-s1\">readwrite</span> = <span class=\"pl-c1\">2</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">getReadwrite</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">readwrite</span>;\n        }\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setReadwrite</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">readwrite</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">readwrite</span> = <span class=\"pl-s1\">readwrite</span>;\n        }\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">getReadonly</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">readonly</span>;\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) {\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>(); \n        <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">setVisibility</span>(<span class=\"pl-smi\">PropertyAccessor</span>.<span class=\"pl-c1\">ALL</span>, <span class=\"pl-smi\">Visibility</span>.<span class=\"pl-c1\">NONE</span>);\n        <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">setVisibility</span>(<span class=\"pl-smi\">PropertyAccessor</span>.<span class=\"pl-c1\">GETTER</span>, <span class=\"pl-smi\">Visibility</span>.<span class=\"pl-c1\">PUBLIC_ONLY</span>);\n        <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">setVisibility</span>(<span class=\"pl-smi\">PropertyAccessor</span>.<span class=\"pl-c1\">SETTER</span>, <span class=\"pl-smi\">Visibility</span>.<span class=\"pl-c1\">PUBLIC_ONLY</span>);\n        <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">MapperFeature</span>.<span class=\"pl-c1\">REQUIRE_SETTERS_FOR_GETTERS</span>);\n        <span class=\"pl-smi\">DataB</span> <span class=\"pl-s1\">dataB</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DataB</span>();\n        <span class=\"pl-k\">try</span> {\n            <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">dataB</span>);\n            <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">json</span>);\n        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">JsonProcessingException</span> <span class=\"pl-s1\">e</span>) {\n            <span class=\"pl-c\">// TODO Auto-generated catch block</span>\n            <span class=\"pl-s1\">e</span>.<span class=\"pl-en\">printStackTrace</span>();\n        }\n    }\n\n}</pre></div>",
                "resourcePath": "/FasterXML/jackson-databind/issues/736",
                "createdAt": "2015-03-27T14:01:27Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "has-failing-test"
                      }
                    },
                    {
                      "node": {
                        "name": "2.17"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "NumberFormat support",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4273",
        "resourcePath": "/FasterXML/jackson-databind/pull/4273",
        "createdAt": "2023-12-20T14:59:24Z",
        "number": 4273,
        "mergeCommit": null,
        "potentialMergeCommit": {
          "oid": "c38f6a9983fd3d1204465149f7d405230b0484c4",
          "message": "Merge 35f0c609f32fccff25c3815e6871e5a4080af94b into 9d31ec7b804e47979cf3d5fc62a5b5c543708a49",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/c38f6a9983fd3d1204465149f7d405230b0484c4",
          "parents": {
            "nodes": [
              {
                "oid": "9d31ec7b804e47979cf3d5fc62a5b5c543708a49",
                "message": "Update release notes"
              },
              {
                "oid": "35f0c609f32fccff25c3815e6871e5a4080af94b",
                "message": "Minor refactoring"
              }
            ]
          }
        },
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/format/NumberFormatTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5iewe02gAoMzVmMGM2MDlmMzJmY2NmZjI1YzM4MTVlNjg3MWU1YTQwODBhZjk0Yg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4273/commits/35f0c609f32fccff25c3815e6871e5a4080af94b"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1114,
                "url": "https://github.com/FasterXML/jackson-databind/issues/1114",
                "title": "Support `@JsonFormat` for `String`, numbers, using String.format()",
                "bodyHTML": "<p dir=\"auto\">Seems like it would be nice to just support formats available via format Strings that <code class=\"notranslate\">String.format()</code> uses.<br>\nNote that existing support for date/time values use different formatting; this should be fine, and if we want to for some reason support something from <code class=\"notranslate\">java.text.Format</code> it should be possible to use heuristics to determine intended type of format. However that may not be necessary.</p>\n<p dir=\"auto\">Initially we should just support simple types:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">java.lang.String</code></li>\n<li><code class=\"notranslate\">int</code>, <code class=\"notranslate\">long</code>, <code class=\"notranslate\">short</code>, <code class=\"notranslate\">byte</code>, <code class=\"notranslate\">float</code>, <code class=\"notranslate\">double</code> and matching wrapper types</li>\n<li><code class=\"notranslate\">BigDecimal</code>, <code class=\"notranslate\">BigInteger</code></li>\n</ul>",
                "resourcePath": "/FasterXML/jackson-databind/issues/1114",
                "createdAt": "2016-02-02T04:37:02Z",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix #4309",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4320",
        "resourcePath": "/FasterXML/jackson-databind/pull/4320",
        "createdAt": "2024-01-15T15:12:56Z",
        "number": 4320,
        "mergeCommit": {
          "oid": "094f7b445d95a768c529e7d8305809cb9f500022",
          "message": "Fix #4309 (#4320)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/094f7b445d95a768c529e7d8305809cb9f500022",
          "parents": {
            "nodes": [
              {
                "oid": "79423936840c469b9a8b54166a48efea8d8ba3a2",
                "message": "Bump the github-actions group with 2 updates (#4319)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "release-notes/VERSION-2.x"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "RENAMED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/NullsSkip4309Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5kGhpU2gAoY2VjY2Y4ZmI0YTQ1YzQyNjQ3NDFiYTE5NzdhMmUyOTU5MWEzYTc3Yg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4320/commits/ceccf8fb4a45c4264741ba1977a2e29591a3a77b"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4309,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4309",
                "title": "`@JsonSetter(nulls=...)` handling of `Collection` `null` values during deserialization with `READ_UNKNOWN_ENUM_VALUES_AS_NULL` and `FAIL_ON_INVALID_SUBTYPE` wrong",
                "bodyHTML": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\">Issue comes from 2018, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"181225699\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/1402\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/1402/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/1402\">#1402</a> (two last comments).</p>\n<p dir=\"auto\">Unknown enum values and subtypes are added as null into result collection instead of being skipped.</p>\n<p dir=\"auto\"><code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code> and <code class=\"notranslate\">.defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))</code> have no effect on nulls with:</p>\n<ul dir=\"auto\">\n<li>READ_UNKNOWN_ENUM_VALUES_AS_NULL (is used for enums to consider unknown as null)</li>\n<li>FAIL_ON_INVALID_SUBTYPE (is used for subtypes to consider unknown as null)</li>\n</ul>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.15.3</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<p dir=\"auto\">READ_UNKNOWN_ENUM_VALUES_AS_NULL:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.fasterxml.jackson.annotation.JsonSetter;\nimport com.fasterxml.jackson.annotation.Nulls;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\n\nclass TestCase {\n\n    ObjectMapper objectMapper = JsonMapper.builder()\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\n            .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)\n            .build();\n\n    static class Data {\n\n        private List&lt;Type&gt; types;\n\n        public List&lt;Type&gt; getTypes() {\n            return types;\n        }\n\n        public void setTypes(List&lt;Type&gt; types) {\n            this.types = types;\n        }\n\n    }\n\n    static enum Type {\n        ONE, TWO\n    }\n\n    @Test\n    void shouldSkipUnknownEnumDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\n        String json = &quot;{ \\&quot;types\\&quot; : [\\&quot;TWO\\&quot;, \\&quot;THREE\\&quot;] }&quot;;\n\n        Data data = objectMapper.readValue(json, Data.class); // will be [TWO, null]\n\n        assertThat(data.getTypes()).isEqualTo(List.of(Type.TWO));\n    }\n\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-s1\">assertThat</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonSetter</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">Nulls</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">json</span>.<span class=\"pl-s1\">JsonMapper</span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestCase</span> {\n\n    <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-smi\">JsonMapper</span>.<span class=\"pl-en\">builder</span>()\n            .<span class=\"pl-en\">defaultSetterInfo</span>(<span class=\"pl-smi\">JsonSetter</span>.<span class=\"pl-s1\">Value</span>.<span class=\"pl-en\">forContentNulls</span>(<span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">SKIP</span>))\n            .<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">READ_UNKNOWN_ENUM_VALUES_AS_NULL</span>)\n            .<span class=\"pl-en\">build</span>();\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Data</span> {\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Type</span>&gt; <span class=\"pl-s1\">types</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Type</span>&gt; <span class=\"pl-en\">getTypes</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">types</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setTypes</span>(<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Type</span>&gt; <span class=\"pl-s1\">types</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">types</span> = <span class=\"pl-s1\">types</span>;\n        }\n\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">Type</span> {\n        <span class=\"pl-c1\">ONE</span>, <span class=\"pl-c1\">TWO</span>\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">shouldSkipUnknownEnumDeserializationWithSetter</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonMappingException</span>, <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"{ <span class=\"pl-cce\">\\\"</span>types<span class=\"pl-cce\">\\\"</span> : [<span class=\"pl-cce\">\\\"</span>TWO<span class=\"pl-cce\">\\\"</span>, <span class=\"pl-cce\">\\\"</span>THREE<span class=\"pl-cce\">\\\"</span>] }\"</span>;\n\n        <span class=\"pl-smi\">Data</span> <span class=\"pl-s1\">data</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Data</span>.<span class=\"pl-k\">class</span>); <span class=\"pl-c\">// will be [TWO, null]</span>\n\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">data</span>.<span class=\"pl-en\">getTypes</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-smi\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-smi\">Type</span>.<span class=\"pl-c1\">TWO</span>));\n    }\n\n}</pre></div>\n<p dir=\"auto\">FAIL_ON_INVALID_SUBTYPE:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.List;\nimport java.util.Objects;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.fasterxml.jackson.annotation.JsonSetter;\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.As;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\nimport com.fasterxml.jackson.annotation.Nulls;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\n\nclass TestCase {\n\n    ObjectMapper objectMapper = JsonMapper.builder()\n            .defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))\n            .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)\n            .build();\n\n    @JsonTypeInfo(use = Id.NAME, property = &quot;type&quot;, include = As.EXISTING_PROPERTY, visible = true)\n    @JsonSubTypes(value = { @JsonSubTypes.Type(value = DataType1.class, names = { &quot;TYPE1&quot; }) })\n    static abstract class Data {\n\n        private String type;\n\n        public String getType() {\n            return type;\n        }\n\n        public void setType(String type) {\n            this.type = type;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(type);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null || getClass() != obj.getClass()) {\n                return false;\n            }\n            Data other = (Data) obj;\n            return Objects.equals(type, other.type);\n        }\n\n    }\n\n    static class DataType1 extends Data {\n\n    }\n\n    @Test\n    void shouldSkipUnknownSubTypeDeserializationWithSetter() throws JsonMappingException, JsonProcessingException {\n        String json = &quot;[ { \\&quot;type\\&quot; : \\&quot;TYPE1\\&quot;  }, { \\&quot;type\\&quot; : \\&quot;TYPE2\\&quot;  } ]&quot;;\n\n        List&lt;Data&gt; actual = objectMapper.readValue(json, new TypeReference&lt;List&lt;Data&gt;&gt;() {});\n\n        DataType1 data = new DataType1();\n        data.setType(&quot;TYPE1&quot;);\n        List&lt;Data&gt; expected = List.of(data); // will be [{type: TYPE1}, null]\n\n        assertEquals(expected, actual);\n    }\n\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-s1\">assertEquals</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Objects</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonSetter</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonSubTypes</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>.<span class=\"pl-s1\">As</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">JsonTypeInfo</span>.<span class=\"pl-s1\">Id</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">annotation</span>.<span class=\"pl-s1\">Nulls</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">type</span>.<span class=\"pl-s1\">TypeReference</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonMappingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">json</span>.<span class=\"pl-s1\">JsonMapper</span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">TestCase</span> {\n\n    <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-smi\">JsonMapper</span>.<span class=\"pl-en\">builder</span>()\n            .<span class=\"pl-en\">defaultSetterInfo</span>(<span class=\"pl-smi\">JsonSetter</span>.<span class=\"pl-s1\">Value</span>.<span class=\"pl-en\">forContentNulls</span>(<span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">SKIP</span>))\n            .<span class=\"pl-en\">disable</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">FAIL_ON_INVALID_SUBTYPE</span>)\n            .<span class=\"pl-en\">build</span>();\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonTypeInfo</span>(<span class=\"pl-s1\">use</span> = <span class=\"pl-smi\">Id</span>.<span class=\"pl-c1\">NAME</span>, <span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"type\"</span>, <span class=\"pl-s1\">include</span> = <span class=\"pl-smi\">As</span>.<span class=\"pl-c1\">EXISTING_PROPERTY</span>, <span class=\"pl-s1\">visible</span> = <span class=\"pl-c1\">true</span>)\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonSubTypes</span>(<span class=\"pl-s1\">value</span> = { <span class=\"pl-c1\">@</span><span class=\"pl-smi\">JsonSubTypes</span>.<span class=\"pl-s1\">Type</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-smi\">DataType1</span>.<span class=\"pl-k\">class</span>, <span class=\"pl-s1\">names</span> = { <span class=\"pl-s\">\"TYPE1\"</span> }) })\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Data</span> {\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getType</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">type</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setType</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">type</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">type</span> = <span class=\"pl-s1\">type</span>;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">hashCode</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span>.<span class=\"pl-en\">hash</span>(<span class=\"pl-s1\">type</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">obj</span>) {\n            <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">this</span> == <span class=\"pl-s1\">obj</span>) {\n                <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n            }\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">obj</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-en\">getClass</span>() != <span class=\"pl-s1\">obj</span>.<span class=\"pl-en\">getClass</span>()) {\n                <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n            }\n            <span class=\"pl-smi\">Data</span> <span class=\"pl-s1\">other</span> = (<span class=\"pl-smi\">Data</span>) <span class=\"pl-s1\">obj</span>;\n            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">type</span>, <span class=\"pl-s1\">other</span>.<span class=\"pl-s1\">type</span>);\n        }\n\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">DataType1</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Data</span> {\n\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">shouldSkipUnknownSubTypeDeserializationWithSetter</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonMappingException</span>, <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"[ { <span class=\"pl-cce\">\\\"</span>type<span class=\"pl-cce\">\\\"</span> : <span class=\"pl-cce\">\\\"</span>TYPE1<span class=\"pl-cce\">\\\"</span>  }, { <span class=\"pl-cce\">\\\"</span>type<span class=\"pl-cce\">\\\"</span> : <span class=\"pl-cce\">\\\"</span>TYPE2<span class=\"pl-cce\">\\\"</span>  } ]\"</span>;\n\n        <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Data</span>&gt; <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeReference</span>&lt;<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Data</span>&gt;&gt;() {});\n\n        <span class=\"pl-smi\">DataType1</span> <span class=\"pl-s1\">data</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DataType1</span>();\n        <span class=\"pl-s1\">data</span>.<span class=\"pl-en\">setType</span>(<span class=\"pl-s\">\"TYPE1\"</span>);\n        <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Data</span>&gt; <span class=\"pl-s1\">expected</span> = <span class=\"pl-smi\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s1\">data</span>); <span class=\"pl-c\">// will be [{type: TYPE1}, null]</span>\n\n        <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">expected</span>, <span class=\"pl-s1\">actual</span>);\n    }\n\n}</pre></div>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\">When <code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code> or <code class=\"notranslate\">.defaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP))</code> is used, null should be skipped.</p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\"><em>No response</em></p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4309",
                "createdAt": "2024-01-08T14:05:06Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.17"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Make `@JsonAlias` be respected by polymorphic deduction for deserialization",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4335",
        "resourcePath": "/FasterXML/jackson-databind/pull/4335",
        "createdAt": "2024-01-23T23:23:25Z",
        "number": 4335,
        "mergeCommit": {
          "oid": "c210bdc72bd657af775e1912102d9e0d38a166f3",
          "message": "Make `@JsonAlias` be respected by polymorphic deduction for deserialization (#4335)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/c210bdc72bd657af775e1912102d9e0d38a166f3",
          "parents": {
            "nodes": [
              {
                "oid": "a26c015e8c06a1b2afd6b1300027682cca395b4f",
                "message": "Implement new `BeanPropertyDefinition.getAliases()` method (#4336)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "release-notes/VERSION-2.x"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test-jdk17/java/com/fasterxml/jackson/databind/records/JsonAliasWithDeduction4327RecordTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/jsontype/JsonAliasWithDeduction4327Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5k5MAm2gAoNjUxYWUwOGMzYmNlNTZjNDRjN2UyMTVjOTk0Mjc4YmJlZDczOGY2YQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4335/commits/651ae08c3bce56c44c7e215c994278bbed738f6a"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4327,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4327",
                "title": "`@JsonAlias` not respected by polymorphic deduction",
                "bodyHTML": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\">I'm trying use <code class=\"notranslate\">@JsonAlias</code> on a class which is a member of a type hierarchy, and then expecting Jackson Databind to be able to use the alias to determine the type.</p>\n<p dir=\"auto\">My class hierarchy is Deduction, annotated with its two concrete implementations:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@JsonTypeInfo(use = JsonTypeInfo.Id.DEDUCTION)\n    @JsonSubTypes({\n            @JsonSubTypes.Type(value = DeductionBean1.class),\n            @JsonSubTypes.Type(value = DeductionBean2.class)\n    })\"><pre class=\"notranslate\"><code class=\"notranslate\">@JsonTypeInfo(use = JsonTypeInfo.Id.DEDUCTION)\n    @JsonSubTypes({\n            @JsonSubTypes.Type(value = DeductionBean1.class),\n            @JsonSubTypes.Type(value = DeductionBean2.class)\n    })\n</code></pre></div>\n<p dir=\"auto\">where <code class=\"notranslate\">DeductionBean2</code> uses an alias.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    record DeductionBean2(@JsonAlias(&quot;Y&quot;) int y) implements Deduction {\n    }\"><pre class=\"notranslate\"><code class=\"notranslate\">    record DeductionBean2(@JsonAlias(\"Y\") int y) implements Deduction {\n    }\n</code></pre></div>\n<p dir=\"auto\">This fails like so when deserializing <code class=\"notranslate\">{'Y': 2 }</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class com.fasterxml.jackson.databind.deser.PropertyAliasTest$Deduction]: Cannot deduce unique subtype of `com.fasterxml.jackson.databind.deser.PropertyAliasTest$Deduction` (2 candidates match)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 9]\n\"><pre class=\"notranslate\"><code class=\"notranslate\">com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class com.fasterxml.jackson.databind.deser.PropertyAliasTest$Deduction]: Cannot deduce unique subtype of `com.fasterxml.jackson.databind.deser.PropertyAliasTest$Deduction` (2 candidates match)\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 9]\n\n</code></pre></div>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.17<br>\nmaster</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<p dir=\"auto\">I've added a test tools.jackson.databind.deser.PropertyAliasTest#testAliasWithPolymorphicDeduction that demonstrates the issue I face.</p>\n<p dir=\"auto\"><a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/k-wall/jackson-databind/commit/8380c9437710f189aca79a47fea59f148927c7aa/hovercard\" href=\"https://github.com/k-wall/jackson-databind/commit/8380c9437710f189aca79a47fea59f148927c7aa\">k-wall@<tt>8380c94</tt></a></p>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\">Aliases to be respected by <code class=\"notranslate\">DEDUCTION</code>.</p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\"><em>No response</em></p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4327",
                "createdAt": "2024-01-17T14:27:28Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "polymorphic-deduction"
                      }
                    },
                    {
                      "node": {
                        "name": "2.17"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Allow @JsonAnySetter on Creator constructors",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4366",
        "resourcePath": "/FasterXML/jackson-databind/pull/4366",
        "createdAt": "2024-02-03T14:38:42Z",
        "number": 4366,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/creators/AnySetterForCreator562Test.java"
              }
            },
            {
              "node": {
                "changeType": "DELETED",
                "path": "src/test/java/com/fasterxml/jackson/failing/AnySetterForCreator562Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5l6sHZ2gAoN2Q3YTRjNWViZTVjNzY1Mjg5MjYxZDkxYzI5YmVjOTQ5YjcxOGQxNg",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4366/commits/7d7a4c5ebe5c765289261d91c29bec949b718d16"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 562,
                "url": "https://github.com/FasterXML/jackson-databind/issues/562",
                "title": "Allow 'JsonAnySetter' to flow through JsonCreator.",
                "bodyHTML": "<p dir=\"auto\">I could speed up some code if I could write:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@JsonCreator\npublic MyClass(@JsonProperty(&quot;a&quot;) String a, @JsonAnySetter Map&lt;String, Object&gt; leftovers) {}\"><pre class=\"notranslate\"><code class=\"notranslate\">@JsonCreator\npublic MyClass(@JsonProperty(\"a\") String a, @JsonAnySetter Map&lt;String, Object&gt; leftovers) {}\n</code></pre></div>",
                "resourcePath": "/FasterXML/jackson-databind/issues/562",
                "createdAt": "2014-09-29T16:16:00Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "most-wanted"
                      }
                    },
                    {
                      "node": {
                        "name": "2.17"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix #2543: Skip delegating creator arguments when collecting properties",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4426",
        "resourcePath": "/FasterXML/jackson-databind/pull/4426",
        "createdAt": "2024-03-12T14:26:43Z",
        "number": 4426,
        "mergeCommit": {
          "oid": "89b5708893c292d639b4009cb816225368407904",
          "message": "Fix #2543: Skip delegating creator arguments when collecting properties (#4426)",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/89b5708893c292d639b4009cb816225368407904",
          "parents": {
            "nodes": [
              {
                "oid": "f6d2f949c96ed378202c462ebdbaa9ae26a1ec4a",
                "message": "..."
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "release-notes/CREDITS-2.x"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "release-notes/VERSION-2.x"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingCreatorImplicitNames2543Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5pYpJy2gAoMWFlNjJhOWYyNzJiNzZiYTgyN2EwMjUyNzg1M2NiZmQzYWE2ZjVjNQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4426/commits/1ae62a9f272b76ba827a02527853cbfd3aa6f5c5"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2543,
                "url": "https://github.com/FasterXML/jackson-databind/issues/2543",
                "title": "Introspection includes delegating ctor's only parameter as a property in `BeanDescription`",
                "bodyHTML": "<p dir=\"auto\">If I have <code class=\"notranslate\">ParameterNamesModule</code> and this data class:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class Data {\n  private final String foo;\n  private final Integer bar;\n\n  @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n  static Data fromBuilder(Builder builder) {\n    return new Data(builder.foo, builder.bar);\n  }\n\n  private Data(String foo, Integer bar) {\n    this.foo = foo;\n    this.bar = bar;\n  }\n\n  public String getFoo() {\n    return foo;\n  }\n\n  public Integer getBar() {\n    return bar;\n  }\n\n  public static class Builder {\n    private String foo;\n    private Integer bar;\n\n    @JsonProperty(&quot;foo&quot;)\n    public Builder foo(String foo) {\n      this.foo = foo;\n      return this;\n    }\n\n    @JsonProperty(&quot;bar&quot;)\n    public Builder bar(Integer bar) {\n      this.bar = bar;\n      return this;\n    }\n\n    public Data build() {\n      return Data.fromBuilder(this);\n    }\n  }\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">public class Data {\n  private final String foo;\n  private final Integer bar;\n\n  @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n  static Data fromBuilder(Builder builder) {\n    return new Data(builder.foo, builder.bar);\n  }\n\n  private Data(String foo, Integer bar) {\n    this.foo = foo;\n    this.bar = bar;\n  }\n\n  public String getFoo() {\n    return foo;\n  }\n\n  public Integer getBar() {\n    return bar;\n  }\n\n  public static class Builder {\n    private String foo;\n    private Integer bar;\n\n    @JsonProperty(\"foo\")\n    public Builder foo(String foo) {\n      this.foo = foo;\n      return this;\n    }\n\n    @JsonProperty(\"bar\")\n    public Builder bar(Integer bar) {\n      this.bar = bar;\n      return this;\n    }\n\n    public Data build() {\n      return Data.fromBuilder(this);\n    }\n  }\n}\n</code></pre></div>\n<p dir=\"auto\">Then running <code class=\"notranslate\">objectMapper.getSerializationConfig().introspect(/* Data type */);</code> will return a <code class=\"notranslate\">BeanDescription</code> that includes <code class=\"notranslate\">builder</code> as a property.</p>\n<p dir=\"auto\">This happens because with <code class=\"notranslate\">ParameterNamesModule</code> we are able to infer the name of the <code class=\"notranslate\">JsonCreator</code> parameter <a href=\"https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java#L451\">here</a> and when we are, we include this parameter in the properties.</p>\n<p dir=\"auto\">I think <a href=\"https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java#L438\">here</a> we should be checking if the creator factory is a delegating kind that takes a complex value as an input. If maintainers of this repo agree, I will file a PR with the fix.</p>",
                "resourcePath": "/FasterXML/jackson-databind/issues/2543",
                "createdAt": "2019-11-16T19:21:24Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "2.17"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Make `FieldProperty` skip nulls on `set()` method",
        "url": "https://github.com/FasterXML/jackson-databind/pull/4455",
        "resourcePath": "/FasterXML/jackson-databind/pull/4455",
        "createdAt": "2024-03-28T15:32:12Z",
        "number": 4455,
        "mergeCommit": null,
        "potentialMergeCommit": {
          "oid": "7c8c8ea0ded01df492c93ce090ec3262dd4f89f9",
          "message": "Merge b7239dd73e481166d9c3df7b8714df8543a66ffe into a29f346e7ed54228cd287c1ce12d6171215d7804",
          "commitUrl": "https://github.com/FasterXML/jackson-databind/commit/7c8c8ea0ded01df492c93ce090ec3262dd4f89f9",
          "parents": {
            "nodes": [
              {
                "oid": "a29f346e7ed54228cd287c1ce12d6171215d7804",
                "message": "Bump the github-actions group with 1 update (#4463)"
              },
              {
                "oid": "b7239dd73e481166d9c3df7b8714df8543a66ffe",
                "message": "Merge branch '2.18' into fix-4441"
              }
            ]
          }
        },
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "src/test/java/com/fasterxml/jackson/databind/deser/SkipNulls4441Test.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAC5e2c5rEgL52gAoYjcyMzlkZDczZTQ4MTE2NmQ5YzNkZjdiODcxNGRmODU0M2E2NmZmZQ",
                "url": "https://github.com/FasterXML/jackson-databind/pull/4455/commits/b7239dd73e481166d9c3df7b8714df8543a66ffe"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 4441,
                "url": "https://github.com/FasterXML/jackson-databind/issues/4441",
                "title": "@JsonSetter(nulls = Nulls.SKIP) doesn't work in some situations",
                "bodyHTML": "<h3 dir=\"auto\">Search before asking</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I searched in the <a href=\"https://github.com/FasterXML/jackson-databind/issues\">issues</a> and found nothing similar.</li>\n</ul>\n<h3 dir=\"auto\">Describe the bug</h3>\n<p dir=\"auto\">We're using <code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code> quite heavily in our code base to avoid dealing with <code class=\"notranslate\">null</code> values, but yesterday I noticed that some fields contain <code class=\"notranslate\">null</code> despite being annotated with <code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code></p>\n<h3 dir=\"auto\">Version Information</h3>\n<p dir=\"auto\">2.15.3, 2.15.4, 2.16.0, 2.16.1, 2.16.2, 2.17.0</p>\n<h3 dir=\"auto\">Reproduction</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public class Main {\n    static class Outer {\n        @JsonSetter(nulls = Nulls.SKIP)\n        private final List&lt;Middle&gt; list1 = new ArrayList&lt;&gt;();\n\n        public Outer() {\n        }\n\n        public List&lt;Middle&gt; getList1() {\n            return list1;\n        }\n    }\n\n    static class Middle {\n        @JsonSetter(nulls = Nulls.SKIP)\n        private final List&lt;Inner&gt; list1 = new ArrayList&lt;&gt;();\n        private final String field1;\n\n        @ConstructorProperties({&quot;field1&quot;})\n        public Middle(String field1) {\n            this.field1 = field1;\n        }\n\n        public List&lt;Inner&gt; getList1() {\n            return list1;\n        }\n\n        public String getField1() {\n            return field1;\n        }\n    }\n\n    static class Inner {\n        private final String field1;\n\n        @ConstructorProperties({&quot;field1&quot;})\n        public Inner(String field1) {\n            this.field1 = field1;\n        }\n\n        public String getField1() {\n            return field1;\n        }\n    }\n\n    public static void main(String[] args) {\n        String json = &quot;&quot;&quot;\n                {\n                    &quot;list1&quot;: [\n                        {\n                            &quot;list1&quot;: null,\n                            &quot;field1&quot;: &quot;data&quot;\n                        }\n                    ]\n                }\n                &quot;&quot;&quot;;\n        ObjectMapper objectMapper = new ObjectMapper();\n        Outer outer;\n        try {\n            outer = objectMapper.readValue(json, Outer.class);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n        validateNotNull(outer);\n        validateNotNull(outer.getList1());\n        for (Middle middle : outer.getList1()) {\n            validateNotNull(middle);\n            validateNotNull(middle.getField1());\n            validateNotNull(middle.getList1());\n        }\n    }\n\n    private static void validateNotNull(Object o) {\n        if (o == null) {\n            throw new IllegalStateException(&quot;Shouldn't be null&quot;);\n        }\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Main</span> {\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Outer</span> {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonSetter</span>(<span class=\"pl-s1\">nulls</span> = <span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">SKIP</span>)\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Middle</span>&gt; <span class=\"pl-s1\">list1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span>&lt;&gt;();\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Outer</span>() {\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Middle</span>&gt; <span class=\"pl-en\">getList1</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">list1</span>;\n        }\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Middle</span> {\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonSetter</span>(<span class=\"pl-s1\">nulls</span> = <span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">SKIP</span>)\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Inner</span>&gt; <span class=\"pl-s1\">list1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span>&lt;&gt;();\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field1</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">ConstructorProperties</span>({<span class=\"pl-s\">\"field1\"</span>})\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Middle</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field1</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">field1</span> = <span class=\"pl-s1\">field1</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Inner</span>&gt; <span class=\"pl-en\">getList1</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">list1</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getField1</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">field1</span>;\n        }\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Inner</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field1</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">ConstructorProperties</span>({<span class=\"pl-s\">\"field1\"</span>})\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Inner</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field1</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">field1</span> = <span class=\"pl-s1\">field1</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getField1</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">field1</span>;\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"\"\"</span>\n<span class=\"pl-s\">                {</span>\n<span class=\"pl-s\">                    \"list1\": [</span>\n<span class=\"pl-s\">                        {</span>\n<span class=\"pl-s\">                            \"list1\": null,</span>\n<span class=\"pl-s\">                            \"field1\": \"data\"</span>\n<span class=\"pl-s\">                        }</span>\n<span class=\"pl-s\">                    ]</span>\n<span class=\"pl-s\">                }</span>\n<span class=\"pl-s\">                \"\"\"</span>;\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">Outer</span> <span class=\"pl-s1\">outer</span>;\n        <span class=\"pl-k\">try</span> {\n            <span class=\"pl-s1\">outer</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Outer</span>.<span class=\"pl-k\">class</span>);\n        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">JsonProcessingException</span> <span class=\"pl-s1\">e</span>) {\n            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s1\">e</span>);\n        }\n        <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">outer</span>);\n        <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">outer</span>.<span class=\"pl-en\">getList1</span>());\n        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Middle</span> <span class=\"pl-s1\">middle</span> : <span class=\"pl-s1\">outer</span>.<span class=\"pl-en\">getList1</span>()) {\n            <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">middle</span>);\n            <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">middle</span>.<span class=\"pl-en\">getField1</span>());\n            <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-s1\">middle</span>.<span class=\"pl-en\">getList1</span>());\n        }\n    }\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">validateNotNull</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">o</span>) {\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o</span> == <span class=\"pl-c1\">null</span>) {\n            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalStateException</span>(<span class=\"pl-s\">\"Shouldn't be null\"</span>);\n        }\n    }\n}</pre></div>\n<h3 dir=\"auto\">Expected behavior</h3>\n<p dir=\"auto\"><code class=\"notranslate\">middle.getList1()</code> shouldn't be <code class=\"notranslate\">null</code> since it's annotated with <code class=\"notranslate\">@JsonSetter(nulls = Nulls.SKIP)</code></p>\n<h3 dir=\"auto\">Additional context</h3>\n<p dir=\"auto\">Any of the following seems to fix the issue, but is not really feasible to do:</p>\n<ul dir=\"auto\">\n<li>Change the order of fields in the JSON:</li>\n</ul>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n    &quot;list1&quot;: [\n        {\n            &quot;field1&quot;: &quot;data&quot;,\n            &quot;list1&quot;: null\n        }\n    ]\n}\"><pre class=\"notranslate\">{\n    <span class=\"pl-ent\">\"list1\"</span>: [\n        {\n            <span class=\"pl-ent\">\"field1\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-ent\">\"list1\"</span>: <span class=\"pl-c1\">null</span>\n        }\n    ]\n}</pre></div>\n<ul dir=\"auto\">\n<li>Remove <code class=\"notranslate\">final</code> from <code class=\"notranslate\">Middle#field1</code> and remove this field from constructor parameters</li>\n</ul>",
                "resourcePath": "/FasterXML/jackson-databind/issues/4441",
                "createdAt": "2024-03-22T02:28:59Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "to-evaluate"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  }
]