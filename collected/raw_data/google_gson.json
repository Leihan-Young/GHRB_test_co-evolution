[
  {
    "repository": {
      "pullRequest": {
        "title": "Fix #2334",
        "url": "https://github.com/google/gson/pull/2337",
        "resourcePath": "/google/gson/pull/2337",
        "createdAt": "2023-03-06T15:40:50Z",
        "number": 2337,
        "mergeCommit": {
          "oid": "85ebaf7c3553a5d5c058fd6067824a7c5258d07f",
          "message": "Fix #2334 (#2337)\n\n* Fix #2334\r\n\r\nThis commit replaces the `NumberFormatException` with `MalformedJsonException` in the `JsonReader#readEscapeCharacter()` and also fixes the tests.\r\n\r\n* Removes white-space",
          "commitUrl": "https://github.com/google/gson/commit/85ebaf7c3553a5d5c058fd6067824a7c5258d07f",
          "parents": {
            "nodes": [
              {
                "oid": "0adcdc80d5ef3a40086a8abd6e2f55164a7c2597",
                "message": "Fail Maven build on warnings (#2335)\n\n* Fail Maven build on warnings\r\n\r\n* Fix configuration parameter name\r\n\r\nFor the Javadoc plugin it is \"warnings\" (plural) instead of \"warning\""
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985LYgg92gAoMTFkYmFlNmVmYmY4MmMzNjM3ZDUwNGY1YjlhNTQxN2I4MjE2ZGMxOQ",
                "url": "https://github.com/google/gson/pull/2337/commits/11dbae6efbf82c3637d504f5b9a5417b8216dc19"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2334,
                "url": "https://github.com/google/gson/issues/2334",
                "title": "Malformed Unicode escape sequence causes `NumberFormatException` instead of `MalformedJsonException`",
                "bodyHTML": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.10.1</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\"><code class=\"notranslate\">JsonReader</code> throws a <code class=\"notranslate\">NumberFormatException</code> instead of a <code class=\"notranslate\">MalformedJsonException</code> when it encounters a malformed Unicode escape sequence in the JSON data.<br>\nThis actually works as designed:<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/19983737ae5e45f90cbc50cbd7b70a0db9ed7a83/gson/src/main/java/com/google/gson/stream/JsonReader.java#L1590-L1591\">gson/gson/src/main/java/com/google/gson/stream/JsonReader.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 1590 to 1591\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/google/gson/commit/19983737ae5e45f90cbc50cbd7b70a0db9ed7a83\">1998373</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L1590\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"1590\"></td>\n          <td id=\"LC1590\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\">   * @throws NumberFormatException if any unicode escape sequences are</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1591\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"1591\"></td>\n          <td id=\"LC1591\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\">   *     malformed.</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">However, it is questionable whether that design is really a good choice because a <code class=\"notranslate\">MalformedJsonException</code> seems to fit better here, especially since other malformed escape sequences do cause a <code class=\"notranslate\">MalformedJsonException</code>.</p>\n<p dir=\"auto\">Note that <code class=\"notranslate\">NumberFormatException</code> being thrown is apparently not publicly documented, so changing this should be rather safe to do.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">A <code class=\"notranslate\">MalformedJsonException</code> is thrown for malformed Unicode escape sequences.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">A <code class=\"notranslate\">NumberFormatException</code> is thrown.</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Reader reader = new StringReader(&quot;\\&quot;\\\\uXYZ\\&quot;&quot;);\nJsonReader jsonReader = new JsonReader(reader);\njsonReader.nextString();\"><pre class=\"notranslate\"><span class=\"pl-smi\">Reader</span> <span class=\"pl-s1\">reader</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringReader</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>uXYZ<span class=\"pl-cce\">\\\"</span>\"</span>);\n<span class=\"pl-smi\">JsonReader</span> <span class=\"pl-s1\">jsonReader</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonReader</span>(<span class=\"pl-s1\">reader</span>);\n<span class=\"pl-s1\">jsonReader</span>.<span class=\"pl-en\">nextString</span>();</pre></div>",
                "resourcePath": "/google/gson/issues/2334",
                "createdAt": "2023-03-04T11:49:51Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Use non-`null` `FormattingStyle`; configure space after separator",
        "url": "https://github.com/google/gson/pull/2345",
        "resourcePath": "/google/gson/pull/2345",
        "createdAt": "2023-03-18T22:46:32Z",
        "number": 2345,
        "mergeCommit": {
          "oid": "481ac9b82cd5713f43018fafc16218d4045dc4c4",
          "message": "Use non-`null` `FormattingStyle`; configure space after separator (#2345)\n\n* Use non-`null` `FormattingStyle`; configure space after separator\r\n\r\n* Improve Javadoc and tests\r\n\r\n* Rename to plural separator*s*\r\n\r\n* Add explicit tests for default formatting styles\r\n\r\n---------\r\n\r\nCo-authored-by: \u00c9amonn McManus <emcmanus@google.com>",
          "commitUrl": "https://github.com/google/gson/commit/481ac9b82cd5713f43018fafc16218d4045dc4c4",
          "parents": {
            "nodes": [
              {
                "oid": "d3e17587fe8dbf1c6afd1acbad4878f19ff64c02",
                "message": "Bump guava from 31.1-jre to 32.0.0-jre (#2399)\n\nBumps [guava](https://github.com/google/guava) from 31.1-jre to 32.0.0-jre.\r\n- [Release notes](https://github.com/google/guava/releases)\r\n- [Commits](https://github.com/google/guava/commits)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: com.google.guava:guava\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/FormattingStyle.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/Gson.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/GsonBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/GsonTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/FormattingStyleTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985MYDW_2gAoM2M2YmFjYWI1MjA1M2M1NDdjYTE3NWUwNTlmZjk0MTBhNTkyZmZkOQ",
                "url": "https://github.com/google/gson/pull/2345/commits/3c6bacab52053c547ca175e059ff9410a592ffd9"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2344,
                "url": "https://github.com/google/gson/issues/2344",
                "title": "Support single line pretty-printed JSON output",
                "bodyHTML": "<h1 dir=\"auto\">Problem solved by the feature</h1>\n<p dir=\"auto\">When users know in advance that the JSON data to write is rather small, but they still want increased readability, they might not want line breaks but a space after <code class=\"notranslate\">,</code> and <code class=\"notranslate\">:</code>. For example:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{&quot;a&quot;: [1, 2, 3], &quot;b&quot;: true}\"><pre class=\"notranslate\">{<span class=\"pl-ent\">\"a\"</span>: [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-ent\">\"b\"</span>: <span class=\"pl-c1\">true</span>}</pre></div>\n<p dir=\"auto\">Even with the upcoming <code class=\"notranslate\">FormattingStyle</code> (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1431858762\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2231\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/2231/hovercard\" href=\"https://github.com/google/gson/pull/2231\">#2231</a>) this is currently not possible. See also slightly related discussion in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1599906618\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2327\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/2327/hovercard?comment_id=1454741797&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/pull/2327#issuecomment-1454741797\">#2327 (comment)</a>.</p>\n<h1 dir=\"auto\">Feature description</h1>\n<p dir=\"auto\">Extend <code class=\"notranslate\">FormattingStyle</code> with a setting <code class=\"notranslate\">withSpaceAfterSeparator(boolean)</code> (or similar):</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">true</code>: always add a space after <code class=\"notranslate\">:</code>, and in case the newline value of the style is empty, also add a space after <code class=\"notranslate\">,</code></li>\n<li><code class=\"notranslate\">false</code>: don't add a space after <code class=\"notranslate\">:</code> and <code class=\"notranslate\">,</code></li>\n</ul>\n<p dir=\"auto\">Note: This has no effect on the newline value of the style. If the newline is not empty it will still be added after <code class=\"notranslate\">,</code> and no space will be added after the <code class=\"notranslate\">,</code>, regardless of the <code class=\"notranslate\">withSpaceAfterSeparator</code> value.</p>\n<h1 dir=\"auto\">Alternatives / workarounds</h1>\n<p dir=\"auto\">None?</p>\n<p dir=\"auto\">But maybe this use case is not common enough to justify adding a new <code class=\"notranslate\">FormattingStyle</code> method.</p>",
                "resourcePath": "/google/gson/issues/2344",
                "createdAt": "2023-03-18T22:02:43Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add strategies for unknown and missing fields",
        "url": "https://github.com/google/gson/pull/2358",
        "resourcePath": "/google/gson/pull/2358",
        "createdAt": "2023-03-26T23:10:30Z",
        "number": 2358,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/main/java/com/google/gson/UnknownFieldStrategy.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/GsonTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/test/java/com/google/gson/Java17MissingFieldValueStrategyTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/test/java/com/google/gson/Java17UnknownFieldStrategyTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/test/java/com/google/gson/MissingFieldValueStrategyTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/test/java/com/google/gson/UnknownFieldStrategyTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/ArrayTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/UncategorizedTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985M6-Fl2gAoMzc3MDgxOTBhM2IxNWU5MjIzYmIwMDZkZmEyNmY1ZjczZWNkMzQ3Mg",
                "url": "https://github.com/google/gson/pull/2358/commits/37708190a3b15e9223bb006dfa26f5f73ecd3472"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 188,
                "url": "https://github.com/google/gson/issues/188",
                "title": "Support handlers for unknown properties, useful for error handling",
                "bodyHTML": "<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"What steps will reproduce the problem?\n1. create a JSON string containing extra attributes\n2. invoke Gson.fromJson supplying a class with fewer elements\n3. GSON successfully instantiates the class without protesting about the \nexistence of extra attributes in the string.\n\nWhat is the expected output? What do you see instead?\n1. define class A containing two fields: name and surname\n2. define class B containing only one field: name\n3. transform an instance of class A to Json string and use the Json string \nto create an instance of class B.\n\nGSON doesn't complain. Even if this is the intended behavior, shouldn't \nthere be an option to enforce stricter parsing?\n\nWhat version of the product are you using? On what operating system?\ngson-1.4\n\nPlease provide any additional information below.\n\n\"><pre class=\"notranslate\"><code class=\"notranslate\">What steps will reproduce the problem?\n1. create a JSON string containing extra attributes\n2. invoke Gson.fromJson supplying a class with fewer elements\n3. GSON successfully instantiates the class without protesting about the \nexistence of extra attributes in the string.\n\nWhat is the expected output? What do you see instead?\n1. define class A containing two fields: name and surname\n2. define class B containing only one field: name\n3. transform an instance of class A to Json string and use the Json string \nto create an instance of class B.\n\nGSON doesn't complain. Even if this is the intended behavior, shouldn't \nthere be an option to enforce stricter parsing?\n\nWhat version of the product are you using? On what operating system?\ngson-1.4\n\nPlease provide any additional information below.\n\n\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">mperdik...@gmail.com</code> on 22 Jan 2010 at 10:13</p>\n<p dir=\"auto\">Attachments:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://storage.googleapis.com/google-code-attachments/google-gson/issue-188/comment-0/Converter.java\" rel=\"nofollow\">Converter.java</a></li>\n</ul>",
                "resourcePath": "/google/gson/issues/188",
                "createdAt": "2015-03-19T18:25:46Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    },
                    {
                      "node": {
                        "name": "auto-migrated"
                      }
                    },
                    {
                      "node": {
                        "name": "Type-Enhancement"
                      }
                    },
                    {
                      "node": {
                        "name": "Priority-Critical"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "number": 1005,
                "url": "https://github.com/google/gson/issues/1005",
                "title": "Default Value for Missing fields in Json",
                "bodyHTML": "<p dir=\"auto\">I know, We can achieve this by just setting up the field with the expected value, but people may not always remember that. Can Gson provide us with some mechanism of handling the fields which are not present in JSON?</p>",
                "resourcePath": "/google/gson/issues/1005",
                "createdAt": "2017-01-28T17:38:45Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fixes outdated URL (`ISO8601Utils.java`)",
        "url": "https://github.com/google/gson/pull/2363",
        "resourcePath": "/google/gson/pull/2363",
        "createdAt": "2023-04-01T13:35:56Z",
        "number": 2363,
        "mergeCommit": {
          "oid": "051cb43fd9040a432626ef53523f1e7db7ab52c1",
          "message": "Fixes outdated URL (`ISO8601Utils.java`) (#2363)\n\n* Fixes comments\r\n\r\nFixes the javadoc and the link to Jackson databind ISO8601Utils.java\r\n\r\n* Updates outdated URL in UtcDateTypeAdapter",
          "commitUrl": "https://github.com/google/gson/commit/051cb43fd9040a432626ef53523f1e7db7ab52c1",
          "parents": {
            "nodes": [
              {
                "oid": "3adead6ab4f240ed53322eff34210ed4a69dd490",
                "message": "Fix incorrect sample code in User Guide (#2362)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985NaMCl2gAoZGRjN2Q3YjFkYTQ2NTk2YzRjOTA5YTgwMTJlMWI5Y2FmMGEyZTNmZg",
                "url": "https://github.com/google/gson/pull/2363/commits/ddc7d7b1da46596c4c909a8012e1b9caf0a2e3ff"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1475,
                "url": "https://github.com/google/gson/issues/1475",
                "title": "URL outdated (ISO8601Utils.java)",
                "bodyHTML": "<p dir=\"auto\">In <a href=\"https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java\">ISO8601Utils.java</a> a file is linked in line 16, which has been removed and can't be accessed. I'm not completely sure what the file once contained, but I think <a href=\"https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java\">this file</a> might be the new location. Should the link just be removed (maybe with line 15 referencing it) or should it be changed to the file I proposed or where is this file now located?</p>",
                "resourcePath": "/google/gson/issues/1475",
                "createdAt": "2019-02-21T01:06:14Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    },
                    {
                      "node": {
                        "name": "documentation"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Adds support to `BigDecimal` in `JsonPrimitive#equals`",
        "url": "https://github.com/google/gson/pull/2364",
        "resourcePath": "/google/gson/pull/2364",
        "createdAt": "2023-04-01T16:10:29Z",
        "number": 2364,
        "mergeCommit": {
          "oid": "db61bb07f04512b6fc21a5ce4d2b7cd380a1e7fc",
          "message": "Adds support to `BigDecimal` in `JsonPrimitive#equals` (#2364)\n\n* Adds support to `BigDecimal`\r\n\r\nAdds to the JsonPrimitive#equals the possibility to support BigDecimal\r\n\r\n* Adds test\r\n\r\nAdds test to check if the equals work with BigDecimals. Code snippet from issue #904\r\n\r\n* Implements review comments\r\n\r\nReplaces the `.equals` method with the `compareTo` in the `JsonPrimitive#equals`\r\n\r\nChange the ternary operator from `||` to `&&` so we are sure that both are `BigDecimal`\r\n\r\nImplements tests\r\n\r\n* Changes to follow the google-style-guide\r\n\r\n* implements review comment\r\n\r\nCo-authored-by: Marcono1234 <Marcono1234@users.noreply.github.com>\r\n\r\n* Fixes the `OperatorPrecedence` warn\r\n\r\n* Implements code improvements\r\n\r\n- Extracts `thisAsDouble` & `otherAsDouble` variables to avoid double functions calls.\r\n\r\n- Adds a comment to improve the code readability.\r\n\r\n* Implements `BigDecimal` check in the `JsonPrimitive.equals()`\r\n\r\n* Formats the code with `spotless:apply`\r\n\r\n---------\r\n\r\nCo-authored-by: Marcono1234 <Marcono1234@users.noreply.github.com>",
          "commitUrl": "https://github.com/google/gson/commit/db61bb07f04512b6fc21a5ce4d2b7cd380a1e7fc",
          "parents": {
            "nodes": [
              {
                "oid": "29ea3198f4adc7dc7cd9b670a0da71e0b43feeee",
                "message": "Bump github/codeql-action from 3.23.2 to 3.24.0 (#2610)\n\nBumps [github/codeql-action](https://github.com/github/codeql-action) from 3.23.2 to 3.24.0.\r\n- [Release notes](https://github.com/github/codeql-action/releases)\r\n- [Changelog](https://github.com/github/codeql-action/blob/main/CHANGELOG.md)\r\n- [Commits](https://github.com/github/codeql-action/compare/b7bf0a3ed3ecfa44160715d7c442788f65f0f923...e8893c57a1f3a2b659b6b55564fdfdbbd2982911)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: github/codeql-action\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-minor\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/JsonPrimitive.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985NaZ482gAoZDU5ZjY5Yjk5ZDg1NDRjNTk0ODhkNzc1YmZkOGRjZWU1MDBlZTlhMA",
                "url": "https://github.com/google/gson/pull/2364/commits/d59f69b99d8544c59488d775bfd8dcee500ee9a0"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 904,
                "url": "https://github.com/google/gson/issues/904",
                "title": "BigDecimal equals problem",
                "bodyHTML": "<p dir=\"auto\">Dear developers, it looks like the primitive's equals to did not handle BigDecimal's comparison. The following test will fail:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  public void testUnequalDecimals() {\n      JsonPrimitive small = new JsonPrimitive(1.0);\n      JsonPrimitive large = new JsonPrimitive(2.0);\n      assertFalse(&quot;small = large&quot;, small.equals(large));\n\n      BigDecimal dmax = BigDecimal.valueOf(Double.MAX_VALUE);\n      JsonPrimitive smallBD =        // dmax + 100.0\n          new JsonPrimitive(dmax.add(new BigDecimal(&quot;100.0&quot;)));\n      JsonPrimitive largeBD =        // dmax + 200.0\n          new JsonPrimitive(dmax.add(new BigDecimal(&quot;200.0&quot;)));\n      assertFalse(&quot;small = large&quot;, smallBD.equals(largeBD));\n  }\"><pre class=\"notranslate\"><code class=\"notranslate\">  public void testUnequalDecimals() {\n      JsonPrimitive small = new JsonPrimitive(1.0);\n      JsonPrimitive large = new JsonPrimitive(2.0);\n      assertFalse(\"small = large\", small.equals(large));\n\n      BigDecimal dmax = BigDecimal.valueOf(Double.MAX_VALUE);\n      JsonPrimitive smallBD =        // dmax + 100.0\n          new JsonPrimitive(dmax.add(new BigDecimal(\"100.0\")));\n      JsonPrimitive largeBD =        // dmax + 200.0\n          new JsonPrimitive(dmax.add(new BigDecimal(\"200.0\")));\n      assertFalse(\"small = large\", smallBD.equals(largeBD));\n  }\n</code></pre></div>\n<p dir=\"auto\">Could you consider a fix for this, so it can support big decimal comparisons, too?</p>\n<p dir=\"auto\">Thanks!</p>",
                "resourcePath": "/google/gson/issues/904",
                "createdAt": "2016-08-22T10:02:26Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Prevent `TypeToken` from capturing type variables",
        "url": "https://github.com/google/gson/pull/2376",
        "resourcePath": "/google/gson/pull/2376",
        "createdAt": "2023-04-16T13:48:42Z",
        "number": 2376,
        "mergeCommit": {
          "oid": "7b8ce2b9f7faaa22893bb77140563e3c41afb4ab",
          "message": "Prevent `TypeToken` from capturing type variables (#2376)\n\n* Prevent `TypeToken` from capturing type variables\r\n\r\n* Use hyphen for term \"type-safe\"\r\n\r\nNot completely sure if that is grammatically correct, but it might make the\r\ntext a bit easier to understand.\r\n\r\n* Update Troubleshooting Guide URLs in tests from 'master' to 'main'\r\n\r\n* Rename system property\r\n\r\n* Simplify system property check",
          "commitUrl": "https://github.com/google/gson/commit/7b8ce2b9f7faaa22893bb77140563e3c41afb4ab",
          "parents": {
            "nodes": [
              {
                "oid": "db4a58a417976419de9ebe0cb2bb44ce528f9860",
                "message": "Revert \"Bump org.codehaus.plexus:plexus-utils from 3.5.1 to 4.0.0 (#2468)\" (#2469)\n\nThis reverts commit 97d33f4a499400df98fcfde69dfdf3bb8a8cecf3."
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "Troubleshooting.md"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/src/main/java/com/example/ClassWithJsonAdapterAnnotation.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985Oak062gAoMjMyNDE5MDc1MzFmYzYzOWVjYmQ4OGI5MTU0ZDJhMWY0Y2NhOTM2NA",
                "url": "https://github.com/google/gson/pull/2376/commits/23241907531fc639ecbd88b9154d2a1f4cca9364"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1219,
                "url": "https://github.com/google/gson/issues/1219",
                "title": "Don't silently ignore missing type information from `TypeTokens`.",
                "bodyHTML": "<p dir=\"auto\">I'm active on Stack Overflow, and often see questions with code more or less like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class Main {\n\t\t\n\tpublic static void main(String[] args) {\n            // should work right?\n\t    MyClass mc = new Gson().fromJson(&quot;{}&quot;, Main.&lt;MyClass&gt;typeTokenHelper());\n\t}\n\t\n\tstatic class MyClass {}\n\t\n\tpublic static &lt;T&gt; Type typeTokenHelper() {\n\t\treturn new TypeToken&lt;T&gt;() {}.getType();\n\t}\n\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">public class Main {\n\t\t\n\tpublic static void main(String[] args) {\n            // should work right?\n\t    MyClass mc = new Gson().fromJson(\"{}\", Main.&lt;MyClass&gt;typeTokenHelper());\n\t}\n\t\n\tstatic class MyClass {}\n\t\n\tpublic static &lt;T&gt; Type typeTokenHelper() {\n\t\treturn new TypeToken&lt;T&gt;() {}.getType();\n\t}\n\n}\n</code></pre></div>\n<p dir=\"auto\">Of course this fails with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to test.Main$MyClass\"><pre class=\"notranslate\"><code class=\"notranslate\">java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to test.Main$MyClass\n</code></pre></div>\n<p dir=\"auto\">Since there is not actually any type information available from the <code class=\"notranslate\">TypeToken</code>. The <code class=\"notranslate\">Type</code> that you get is the generic type <code class=\"notranslate\">T</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Type t = Main.&lt;MyClass&gt;typeTokenHelper();\nSystem.out.println(t); // prints 'T'. instead of the na\u00efvely expected 'MyClass'\"><pre class=\"notranslate\"><code class=\"notranslate\">Type t = Main.&lt;MyClass&gt;typeTokenHelper();\nSystem.out.println(t); // prints 'T'. instead of the na\u00efvely expected 'MyClass'\n</code></pre></div>\n<p dir=\"auto\">This is confusing. The missing type information should not be silently ignored only to get a <code class=\"notranslate\">ClassCastException</code> later. The missing type information is caused by a design time error and should be flagged as early as possible.</p>\n<p dir=\"auto\">At first glance a check like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// where 'typeOfT' is the type returned by TypeToken::getType\nif(typeOfT instanceof TypeVariable) {  // java.lang.reflect.TypeVariable\n    throw new RuntimeExcepiton(...);\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">// where 'typeOfT' is the type returned by TypeToken::getType\nif(typeOfT instanceof TypeVariable) {  // java.lang.reflect.TypeVariable\n    throw new RuntimeExcepiton(...);\n}\n</code></pre></div>\n<p dir=\"auto\">Somewhere might fix this issue. Perhaps in <a href=\"https://github.com/google/gson/blob/0636635cbffa08157bdbd558b1212e4d806474eb/gson/src/main/java/com/google/gson/reflect/TypeToken.java#L81\"><code class=\"notranslate\">TypeToken::getSuperclassTypeParameter</code></a> or in <a href=\"https://github.com/google/gson/blob/0636635cbffa08157bdbd558b1212e4d806474eb/gson/src/main/java/com/google/gson/Gson.java#L878\"><code class=\"notranslate\">Gson::fromJson</code></a>. (I don't know where the use of TypeTokens with TypeVariables might be required though)</p>",
                "resourcePath": "/google/gson/issues/1219",
                "createdAt": "2018-01-01T17:10:33Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add ProGuard / R8 integration tests & add default ProGuard rules",
        "url": "https://github.com/google/gson/pull/2397",
        "resourcePath": "/google/gson/pull/2397",
        "createdAt": "2023-05-27T00:53:18Z",
        "number": 2397,
        "mergeCommit": {
          "oid": "43396e45fd1f03e408e0e83b168a72a0f3e0b84e",
          "message": "Add ProGuard / R8 integration tests & add default ProGuard rules (#2397)\n\n* Add code shrinking tools integration test\r\n\r\n* Keep no-args constructor of classes usable with JsonAdapter\r\n\r\n* Add library ProGuard rules for Gson\r\n\r\nThey are automatically applied for all users of Gson, see\r\nhttps://developer.android.com/build/shrink-code#configuration-files\r\n\r\n* Skip japicmp-maven-plugin for shrinker-test\r\n\r\n* Add more tests for JsonAdapter, add tests for generic classes\r\n\r\n* Extend default constructor test\r\n\r\n* Add Troubleshooting Guide entry for TypeToken",
          "commitUrl": "https://github.com/google/gson/commit/43396e45fd1f03e408e0e83b168a72a0f3e0b84e",
          "parents": {
            "nodes": [
              {
                "oid": "4c65a82871ec92e0550d8d313e10bbfb621d0f39",
                "message": "Remove accidental invisible characters from Troubleshooting Guide (#2395)\n\nAccidentally contained U+200C (Zero Width Non-Joiner) followed by U+200B (Zero Width Space)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/main/java/com/example/ClassWithNamedFields.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/main/java/com/example/ClassWithSerializedName.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/main/java/com/example/ClassWithVersionAnnotations.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/main/java/com/example/DefaultConstructorMain.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/main/java/com/example/EnumClass.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/main/java/com/example/EnumClassWithSerializedName.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/main/java/com/example/GenericClasses.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/main/java/com/example/Main.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/main/java/com/example/TestExecutor.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "shrinker-test/src/test/java/com/google/gson/it/ShrinkingIT.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985RexO02gAoMjFlZGE3NThkYjJhY2YxMGFmMjZmMmM3NWMyOWY4OWVjOWM5MzU0Yw",
                "url": "https://github.com/google/gson/pull/2397/commits/21eda758db2acf10af26f2c75c29f89ec9c9354c"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1945,
                "url": "https://github.com/google/gson/issues/1945",
                "title": "Declare proguard rules automatically",
                "bodyHTML": "<p dir=\"auto\">Could gson have basic proguard rules automatically declared as retrofit does ?<br>\n<a href=\"https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro\">https://github.com/square/retrofit/blob/master/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro</a></p>",
                "resourcePath": "/google/gson/issues/1945",
                "createdAt": "2021-08-31T08:48:49Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Rename `master` to `main` everywhere.",
        "url": "https://github.com/google/gson/pull/2410",
        "resourcePath": "/google/gson/pull/2410",
        "createdAt": "2023-06-05T20:16:48Z",
        "number": 2410,
        "mergeCommit": {
          "oid": "a80bc24e04d0747314bffcc5779a1412c86f6468",
          "message": "Rename `master` to `main` everywhere. (#2410)",
          "commitUrl": "https://github.com/google/gson/commit/a80bc24e04d0747314bffcc5779a1412c86f6468",
          "parents": {
            "nodes": [
              {
                "oid": "e7f85dff8a17928fd3f0451e59f76ee72764430c",
                "message": "Bump maven-surefire-plugin from 3.1.0 to 3.1.2 (#2411)\n\nBumps [maven-surefire-plugin](https://github.com/apache/maven-surefire) from 3.1.0 to 3.1.2.\r\n- [Release notes](https://github.com/apache/maven-surefire/releases)\r\n- [Commits](https://github.com/apache/maven-surefire/compare/surefire-3.1.0...surefire-3.1.2)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.apache.maven.plugins:maven-surefire-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/ReflectionAccessTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/pom.xml"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/r8.pro"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/src/test/java/com/google/gson/it/ShrinkingIT.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985SPI6K2gAoODVmNTFhNGM3MDQ4NTBmYWVjOWMzNzdhZDk4ZDM0NmI5NzVhOGVkOQ",
                "url": "https://github.com/google/gson/pull/2410/commits/85f51a4c704850faec9c377ad98d346b975a8ed9"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2405,
                "url": "https://github.com/google/gson/issues/2405",
                "title": "Rename `master` branch to `main`",
                "bodyHTML": "<p dir=\"auto\">In keeping with <a href=\"https://github.com/github/renaming\">recent practice</a>, we should rename the <code class=\"notranslate\">master</code> branch on GitHub to <code class=\"notranslate\">main</code>. This change is well-supported on GitHub.</p>\n<p dir=\"auto\">One notable effect is that we can change the <a href=\"https://github.com/google/gson/blob/2d7cc2e9f4e12163d4405a601fa8e814a66c9725/gson/src/main/java/com/google/gson/internal/TroubleshootingGuide.java#L10\">links</a> to the troubleshooting guide that were recently added to some exception messages, so that they look like <code class=\"notranslate\">https://github.com/google/gson/blob/main/Troubleshooting.md#foo</code> instead of <code class=\"notranslate\">https://github.com/google/gson/blob/master/Troubleshooting.md#foo</code>. (The old links will continue to work after the rename, but the new ones will be preferred.)</p>",
                "resourcePath": "/google/gson/issues/2405",
                "createdAt": "2023-06-01T21:39:33Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Priority-Medium"
                      }
                    },
                    {
                      "node": {
                        "name": "Type-Task"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Adjust ProGuard default rules and shrinking tests",
        "url": "https://github.com/google/gson/pull/2420",
        "resourcePath": "/google/gson/pull/2420",
        "createdAt": "2023-06-17T14:44:03Z",
        "number": 2420,
        "mergeCommit": {
          "oid": "ecb9f8c8adab5446225461b7f8aea16c79e2e104",
          "message": "Adjust ProGuard default rules and shrinking tests (#2420)\n\n* Adjust ProGuard default rules and shrinking tests\r\n\r\n* Adjust comment\r\n\r\n* Add shrinking test for class without no-args constructor; improve docs\r\n\r\n* Improve Unsafe mention in Troubleshooting Guide\r\n\r\n* Improve comment for `-if class *`",
          "commitUrl": "https://github.com/google/gson/commit/ecb9f8c8adab5446225461b7f8aea16c79e2e104",
          "parents": {
            "nodes": [
              {
                "oid": "6d9c3566b71900c54644a9f71ce028696ee5d4bd",
                "message": "Document minimum Android API level and add workflow to check compatibility (#2431)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/resources/META-INF/proguard/gson.pro"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/Java17RecordTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/internal/ConstructorConstructorTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/pom.xml"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/proguard.pro"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/r8.pro"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/src/main/java/com/example/ClassWithJsonAdapterAnnotation.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/src/main/java/com/example/DefaultConstructorMain.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/src/test/java/com/google/gson/it/ShrinkingIT.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985TQXWz2gAoZjU5NTdhMjI0ZDQxMWQxM2Y4ZjU5ZmVlMDU1N2RmYjY1NDY2ODY5Mw",
                "url": "https://github.com/google/gson/pull/2420/commits/f5957a224d411d13f8f59fee0557dfb654668693"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2401,
                "url": "https://github.com/google/gson/issues/2401",
                "title": "Improve default ProGuard / R8 rules and Troubleshooting Guide",
                "bodyHTML": "<h1 dir=\"auto\">Problem solved by the feature</h1>\n<p dir=\"auto\">Improve the default ProGuard / R8 rules in <code class=\"notranslate\">META-INF/proguard/gson.pro</code> added by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1728382175\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2397\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/2397/hovercard\" href=\"https://github.com/google/gson/pull/2397\">#2397</a>, and the Troubleshooting Guide.</p>\n<h1 dir=\"auto\">Feature description</h1>\n<p dir=\"auto\">I was testing the new default rules with an Android app and Kotlin classes, and there might be the following areas to improve.</p>\n<h3 dir=\"auto\">Troubleshooting Guide: <code class=\"notranslate\">JsonIOException</code>: 'Abstract classes can't be instantiated!' (R8)</h3>\n<p dir=\"auto\">The Troubleshooting Guide currently suggests the following:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# Keep the no-args constructor of the deserialized class\n-keepclassmembers class com.example.MyClass {\n  &lt;init&gt;();\n}\"><pre class=\"notranslate\"><code class=\"notranslate\"># Keep the no-args constructor of the deserialized class\n-keepclassmembers class com.example.MyClass {\n  &lt;init&gt;();\n}\n</code></pre></div>\n<p dir=\"auto\">This means only the no-args constructor is kept, but not any other constructors. However, especially for Kotlin I assume it is common that classes don't have a no-args constructor because you might declare properties and the primary constructor at once, e.g. <code class=\"notranslate\">class MyClass(val s: String)</code> (see <a href=\"https://kotlinlang.org/docs/classes.html#constructors\" rel=\"nofollow\">Kotlin documentation</a>). Not sure though if using that is a good idea in combination with Gson because it then requires JDK Unsafe to create instances, but that is a different topic.</p>\n<p dir=\"auto\">So there are two questions:</p>\n<ul dir=\"auto\">\n<li>Should the Troubleshooting Guide rather recommend <code class=\"notranslate\">&lt;init&gt;(...);</code> (all constructors), so that the users don't experience issues with R8 anymore (but implicitly depend on JDK Unsafe; using <code class=\"notranslate\">GsonBuilder.disableJdkUnsafe()</code> would cause Gson to fail with a different exception)</li>\n<li>Should the Troubleshooting Guide recommend <code class=\"notranslate\">-keep</code> instead of <code class=\"notranslate\">-keepclassmembers</code>. In case the <code class=\"notranslate\">&lt;init&gt;</code> rule for the class properly matches a constructor it might not matter. But in case <code class=\"notranslate\">&lt;init&gt;();</code> is used, but a no-args constructor does not exist, then <code class=\"notranslate\">-keep</code> seems to at least have the side-effect that R8 does not make the class abstract (and then using JDK Unsafe an instance can be created).</li>\n</ul>\n<h3 dir=\"auto\">Troubleshooting Guide: Recommend <code class=\"notranslate\">@Keep</code> for Android</h3>\n<p dir=\"auto\">Instead of configuring ProGuard / R8 rules, it might be easier for Android developers to use <code class=\"notranslate\">@Keep</code> on the corresponding class or constructor, see <a href=\"https://developer.android.com/studio/write/annotations#keep\" rel=\"nofollow\">https://developer.android.com/studio/write/annotations#keep</a></p>\n<h3 dir=\"auto\">Preventing R8 from making classes abstract / removing no-args constructor</h3>\n<p dir=\"auto\">It would be good if we could adjust the default rules to avoid the \"Abstract classes can't be instantiated!\" exception (for most cases) in the first place.</p>\n<p dir=\"auto\">There is probably no general way to detect if a class might be used with Gson, but the most reliable variant might be to keep the constructor if any of the Gson annotations is used by a class.</p>\n<p dir=\"auto\">This can probably be achieved with an <a href=\"https://www.guardsquare.com/manual/configuration/usage#if\" rel=\"nofollow\"><code class=\"notranslate\">-if</code> rule</a> (see also <a href=\"https://stackoverflow.com/q/63162818\" rel=\"nofollow\">answers to this Stack Overflow question</a>). For example:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# If class has fields with `@SerializedName` annotation keep its constructors\n-if class * {\n  @com.google.gson.annotations.SerializedName &lt;fields&gt;;\n}\n-keep class &lt;1&gt; {\n  &lt;init&gt;(...);\n}\"><pre class=\"notranslate\"><code class=\"notranslate\"># If class has fields with `@SerializedName` annotation keep its constructors\n-if class * {\n  @com.google.gson.annotations.SerializedName &lt;fields&gt;;\n}\n-keep class &lt;1&gt; {\n  &lt;init&gt;(...);\n}\n</code></pre></div>\n<p dir=\"auto\">(duplicated for all Gson annotations)</p>\n<p dir=\"auto\">But it looks like this is not enough, maybe because there is no <code class=\"notranslate\">-keep</code> (or <code class=\"notranslate\">-keepclasseswithmembers</code>) rule for the class in the first place so <code class=\"notranslate\">-if</code> somehow has no effect? You additionally need the following (duplicated for all Gson annotations probably):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"-keepclasseswithmembers class * {\n  @com.google.gson.annotations.SerializedName &lt;fields&gt;;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">-keepclasseswithmembers class * {\n  @com.google.gson.annotations.SerializedName &lt;fields&gt;;\n}\n</code></pre></div>\n<p dir=\"auto\">Only then the class is not made abstract and the constructor is properly kept...</p>\n<p dir=\"auto\">(As side note: Having only the <code class=\"notranslate\">-keepclasseswithmembers ... { @SerializedName }</code> above, but not the <code class=\"notranslate\">-if ... -keep</code> seems to prevent R8 from making the class abstract, but still removes all constructors, so users would be dependent on JDK Unsafe then.)</p>\n<p dir=\"auto\">Or similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1681170799\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2379\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/2379/hovercard?comment_id=1564517629&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/issues/2379#issuecomment-1564517629\">#2379 (comment)</a> maybe the following would work as well:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"-keepclasseswithmembers class * {\n  &lt;init&gt;(...);\n  @com.google.gson.annotations.SerializedName &lt;fields&gt;;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">-keepclasseswithmembers class * {\n  &lt;init&gt;(...);\n  @com.google.gson.annotations.SerializedName &lt;fields&gt;;\n}\n</code></pre></div>\n<p dir=\"auto\">There is however probably no need for the <code class=\"notranslate\">-if</code> rule shown in the original comment, unless that has some special effect, see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1728382175\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2397\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/2397/hovercard?comment_id=1575236086&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/pull/2397#issuecomment-1575236086\">#2397 (comment)</a>.</p>\n<h3 dir=\"auto\">R8 makes class abstract but still keeps constructors</h3>\n<p dir=\"auto\">It also looks like the Android app build creates (for some reason) additional constructors / keeps constructors even when the class is made abstract. Due to this, the Troubleshooting Guide URLs are unfortunately not included in the exception messages (they are only added at the moment when there are no constructors).<br>\nNot really sure why these constructors exist in the first place and are kept even when the class is made abstract. In the R8 integration test of Gson this behavior was not seen.</p>\n<p dir=\"auto\">Maybe we should remove the <code class=\"notranslate\">getDeclaredConstructors().length == 0</code> check if the class is abstract and always refer to the Troubleshooting Guide. The guide would have to be adjusted then though to also properly cover the case where the class was indeed abstract in the source code.</p>\n<hr>\n<p dir=\"auto\">Any additional feedback is highly appreciated!</p>",
                "resourcePath": "/google/gson/issues/2401",
                "createdAt": "2023-05-29T12:40:12Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    },
                    {
                      "node": {
                        "name": "proguard-r8"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Document minimum Android API level and add workflow to check compatibility",
        "url": "https://github.com/google/gson/pull/2431",
        "resourcePath": "/google/gson/pull/2431",
        "createdAt": "2023-07-06T14:19:17Z",
        "number": 2431,
        "mergeCommit": {
          "oid": "6d9c3566b71900c54644a9f71ce028696ee5d4bd",
          "message": "Document minimum Android API level and add workflow to check compatibility (#2431)",
          "commitUrl": "https://github.com/google/gson/commit/6d9c3566b71900c54644a9f71ce028696ee5d4bd",
          "parents": {
            "nodes": [
              {
                "oid": "a589ef20087b4b0f1ec3048d3ceaef1eedccd09d",
                "message": "Improve creation of `ParameterizedType` (#2375)\n\n- Reject non-generic raw types for TypeToken.getParameterized\r\n- Fix ParameterizedTypeImpl erroneously requiring owner type for types\r\n  without owner"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "ADDED",
                "path": ".github/workflows/check-android-compatibility.yml"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": ".github/workflows/check-api-compatibility.yml"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "README.md"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/pom.xml"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "metrics/pom.xml"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "pom.xml"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "shrinker-test/pom.xml"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985U0Q442gAoNTVmYzNjYTA5YzUxNmJiNTE2ZmEwOWQyYzNhMjA4YThmMmMxMzMxNw",
                "url": "https://github.com/google/gson/pull/2431/commits/55fc3ca09c516bb516fa09d2c3a208a8f2c13317"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2429,
                "url": "https://github.com/google/gson/issues/2429",
                "title": "Specify minimum Android API level (+ add Animal Sniffer to verify this)",
                "bodyHTML": "<h1 dir=\"auto\">Problem solved by the feature</h1>\n<p dir=\"auto\">The README only specifies that Java 7 is the minimum version for the latest Gson versions. However, for Android developers this information is not that helpful because Java 7 API was added in multiple different Android API levels. For example <code class=\"notranslate\">java.lang.ReflectiveOperationException</code> added in Java 7 was only added for Android API level 19 (Android 4.4), see also <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1571483648\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2310\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/2310/hovercard?comment_id=1616848536&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/issues/2310#issuecomment-1616848536\">#2310 (comment)</a>.</p>\n<h1 dir=\"auto\">Feature description</h1>\n<ul dir=\"auto\">\n<li>The README should explicitly state which Android API level is the minimum</li>\n<li>The build setup should verify that no newer Android APIs are used (respectively that desugaring is supported).<br>\nThis can be verified using Animal Sniffer, see:\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"691230470\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/guava/issues/4005\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/guava/issues/4005/hovercard\" href=\"https://github.com/google/guava/issues/4005\">google/guava#4005</a></li>\n<li>Android Scents for Maven<br>\n(to be verified that these artifacts are safe; but appears they are also used by other projects, e.g. OkHttp (<a href=\"https://github.com/square/okhttp/blob/7cd7f9720dc7ff45663c29b7a15a42d27cc845d4/gradle/libs.versions.toml#L82-L83\">code</a>))\n<ul dir=\"auto\">\n<li><a href=\"https://sourceforge.net/projects/androidscents/\" rel=\"nofollow\">https://sourceforge.net/projects/androidscents/</a></li>\n<li><a href=\"https://search.maven.org/search?q=g:net.sf.androidscents.signature\" rel=\"nofollow\">https://search.maven.org/search?q=g:net.sf.androidscents.signature</a></li>\n</ul>\n</li>\n<li>Animal Sniffer signatures, considering desugaring: <a href=\"https://github.com/open-toast/gummy-bears\">https://github.com/open-toast/gummy-bears</a><br>\nIn that case would have to explicitly mention desugaring (using the latest Android build tools?) in the README</li>\n</ul>\n</li>\n</ul>\n<h1 dir=\"auto\">Alternatives / workarounds</h1>\n<p dir=\"auto\"><em>none</em></p>",
                "resourcePath": "/google/gson/issues/2429",
                "createdAt": "2023-07-02T21:50:54Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix `Gson.getDelegateAdapter` not working properly for `JsonAdapter`",
        "url": "https://github.com/google/gson/pull/2435",
        "resourcePath": "/google/gson/pull/2435",
        "createdAt": "2023-07-15T14:12:14Z",
        "number": 2435,
        "mergeCommit": {
          "oid": "7ee5ad6cd1640d957f3a73d89a271ee2ef9c7956",
          "message": "Fix `Gson.getDelegateAdapter` not working properly for `JsonAdapter` (#2435)\n\n* Fix `Gson.getDelegateAdapter` not working properly for `JsonAdapter`\r\n\r\n* Address review feedback and add comments regarding thread-safety\r\n\r\n* Revert InstanceCreator instance validation\r\n\r\n* Disallow `null` as `skipPast`\r\n\r\n* Avoid `equals` usage in `getDelegateAdapter` & minor other changes\r\n\r\nPreviously `getDelegateAdapter` called `factories.contains(skipPast)`,\r\nbut unlike the other comparisons which check for reference equality,\r\nthat would have used the `equals` method.\r\nThis could lead to spurious \"GSON cannot serialize ...\" exceptions\r\nif two factory instances compared equal, but the one provided as\r\n`skipPast` had not been registered yet.",
          "commitUrl": "https://github.com/google/gson/commit/7ee5ad6cd1640d957f3a73d89a271ee2ef9c7956",
          "parents": {
            "nodes": [
              {
                "oid": "393db094dd089ea463bc1a215bd7971fd5feab42",
                "message": "Add test for unused class to shrinker-test (#2455)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/Gson.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/InstanceCreator.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/GsonTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985VlfIg2gAoYmRhZjYwODhiNGQ5MjRiOGUwMTZhZWEzY2Q5NDZjY2RlNjhhOTM0Mg",
                "url": "https://github.com/google/gson/pull/2435/commits/bdaf6088b4d924b8e016aea3cd946ccde68a9342"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1028,
                "url": "https://github.com/google/gson/issues/1028",
                "title": "getDelegateAdapter() does not work properly in TypeAdapterFactory used from JsonAdapter annotation",
                "bodyHTML": "<p dir=\"auto\">GSON's getDelegateAdapter method does not appear to work properly inside of a TypeAdapterFactory that is used through the @JsonAdapter annotation.  This was found using GSON 2.8.0 and Java 7.</p>\n<p dir=\"auto\">For example, given a class like:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public final class Thing {\n    @JsonAdapter(NonEmptyMapAdapterFactory.class)\n    private final Map&lt;Integer, String&gt; data;\n\n    public Thing() {\n        data = new HashMap&lt;&gt;();\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Thing</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonAdapter</span>(<span class=\"pl-smi\">NonEmptyMapAdapterFactory</span>.<span class=\"pl-k\">class</span>)\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">data</span>;\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Thing</span>() {\n        <span class=\"pl-s1\">data</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;&gt;();\n    }\n}</pre></div>\n<p dir=\"auto\">And a TypeAdapterFactory like:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public class NonEmptyMapAdapterFactory implements TypeAdapterFactory {\n\n    @Override\n    public &lt;T&gt; TypeAdapter&lt;T&gt; create(final Gson gson, final TypeToken&lt;T&gt; type) {\n        if (!Map.class.isAssignableFrom(type.getRawType())) {\n            return null;\n        }\n\n        //final TypeAdapter&lt;T&gt; delegate = gson.getAdapter(type);\n        final TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(this, type);\n\n        return new TypeAdapter&lt;T&gt;() {\n            @Override\n            public void write(final JsonWriter writer, T value) throws IOException {\n                final Map map = (Map) value;\n                if (map == null || map.isEmpty()) {\n                    writer.nullValue();\n                } else {\n                    delegate.write(writer, value);\n                }\n            }\n\n            @SuppressWarnings(&quot;unchecked&quot;)\n            @Override\n            public T read(final JsonReader reader) throws IOException {\n                final T map = delegate.read(reader);\n                if (map == null) {\n                    return (T) new HashMap();\n                } else {\n                    return map;\n                }\n            }\n        };\n    }\n\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">NonEmptyMapAdapterFactory</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">TypeAdapterFactory</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> &lt;<span class=\"pl-smi\">T</span>&gt; <span class=\"pl-smi\">TypeAdapter</span>&lt;<span class=\"pl-smi\">T</span>&gt; <span class=\"pl-en\">create</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">Gson</span> <span class=\"pl-s1\">gson</span>, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">TypeToken</span>&lt;<span class=\"pl-smi\">T</span>&gt; <span class=\"pl-s1\">type</span>) {\n        <span class=\"pl-k\">if</span> (!<span class=\"pl-smi\">Map</span>.<span class=\"pl-k\">class</span>.<span class=\"pl-en\">isAssignableFrom</span>(<span class=\"pl-s1\">type</span>.<span class=\"pl-en\">getRawType</span>())) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;\n        }\n\n        <span class=\"pl-c\">//final TypeAdapter&lt;T&gt; delegate = gson.getAdapter(type);</span>\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">TypeAdapter</span>&lt;<span class=\"pl-smi\">T</span>&gt; <span class=\"pl-s1\">delegate</span> = <span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">getDelegateAdapter</span>(<span class=\"pl-smi\">this</span>, <span class=\"pl-s1\">type</span>);\n\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeAdapter</span>&lt;<span class=\"pl-smi\">T</span>&gt;() {\n            <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">write</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">JsonWriter</span> <span class=\"pl-s1\">writer</span>, <span class=\"pl-smi\">T</span> <span class=\"pl-s1\">value</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Map</span> <span class=\"pl-s1\">map</span> = (<span class=\"pl-smi\">Map</span>) <span class=\"pl-s1\">value</span>;\n                <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">map</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-s1\">map</span>.<span class=\"pl-en\">isEmpty</span>()) {\n                    <span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">nullValue</span>();\n                } <span class=\"pl-k\">else</span> {\n                    <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">write</span>(<span class=\"pl-s1\">writer</span>, <span class=\"pl-s1\">value</span>);\n                }\n            }\n\n            <span class=\"pl-c1\">@</span><span class=\"pl-c1\">SuppressWarnings</span>(<span class=\"pl-s\">\"unchecked\"</span>)\n            <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">T</span> <span class=\"pl-en\">read</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">JsonReader</span> <span class=\"pl-s1\">reader</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">T</span> <span class=\"pl-s1\">map</span> = <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">read</span>(<span class=\"pl-s1\">reader</span>);\n                <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">map</span> == <span class=\"pl-c1\">null</span>) {\n                    <span class=\"pl-k\">return</span> (<span class=\"pl-smi\">T</span>) <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>();\n                } <span class=\"pl-k\">else</span> {\n                    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">map</span>;\n                }\n            }\n        };\n    }\n\n}</pre></div>\n<p dir=\"auto\">The call to <code class=\"notranslate\">gson.getDelegateAdapter(this, type);</code> returns an adapter of type \"ReflectiveTypeAdapterFactory$Adapter\".  Calling <code class=\"notranslate\">gson.getAdapter(type);</code> instead does return the expected \"MapTypeAdapterFactory$Adapter\", but this obviously won't work correctly if this adapter factory is instead used without the JsonAdapter annotation.</p>\n<p dir=\"auto\">If the annotation is removed from the field in the Thing class and gson is instead set up like:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"new GsonBuilder()\n        .registerTypeAdapterFactory(new NonEmptyMapAdapterFactory())\n        .create();\"><pre class=\"notranslate\"><span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>()\n        .<span class=\"pl-en\">registerTypeAdapterFactory</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">NonEmptyMapAdapterFactory</span>())\n        .<span class=\"pl-en\">create</span>();</pre></div>\n<p dir=\"auto\">Then the custom TypeAdapterFactory shown above works exactly as expected: <code class=\"notranslate\">gson.getDelegateAdapter(this, type);</code> returns a \"MapTypeAdapterFactory$Adapter\", but calling <code class=\"notranslate\">gson.getAdapter(type);</code> returns the the same class, resulting in a stack overflow in the read and write methods.</p>\n<p dir=\"auto\">The problem seems to happen because of this code at the beginning of getDelegateAdapter():</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// Hack. If the skipPast factory isn't registered, assume the factory is being requested via\n// our @JsonAdapter annotation.\nif (!factories.contains(skipPast)) {\n  skipPast = jsonAdapterFactory;\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// Hack. If the skipPast factory isn't registered, assume the factory is being requested via</span>\n<span class=\"pl-c\">// our @JsonAdapter annotation.</span>\n<span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">factories</span>.<span class=\"pl-en\">contains</span>(<span class=\"pl-s1\">skipPast</span>)) {\n  <span class=\"pl-s1\">skipPast</span> = <span class=\"pl-s1\">jsonAdapterFactory</span>;\n}</pre></div>\n<p dir=\"auto\">In the list of factories, jsonAdapterFactory comes after the entry for the MapTypeAdapterFactory, causing both to be skipped.</p>",
                "resourcePath": "/google/gson/issues/1028",
                "createdAt": "2017-03-01T22:05:41Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Only create one `BoundField` instance per field in `ReflectiveTypeAdapterFactory`",
        "url": "https://github.com/google/gson/pull/2440",
        "resourcePath": "/google/gson/pull/2440",
        "createdAt": "2023-07-20T22:15:08Z",
        "number": 2440,
        "mergeCommit": {
          "oid": "e7cf5c458374e5fc69dbdce6de5cb2c881521135",
          "message": "Only create one `BoundField` instance per field in `ReflectiveTypeAdapterFactory` (#2440)\n\n* Only create one BoundField instance per field in ReflectiveTypeAdapterFactory\r\n\r\nInstead of creating a BoundField for every possible name of a field (for\r\nSerializedName usage) and then storing for that BoundField whether it is\r\nserialized or deserialized, instead only create one BoundField and then have\r\na separate Map<String, BoundField> for deserialized fields, and a separate\r\nList<BoundField> for serialized fields.\r\n\r\n* Fix indentation",
          "commitUrl": "https://github.com/google/gson/commit/e7cf5c458374e5fc69dbdce6de5cb2c881521135",
          "parents": {
            "nodes": [
              {
                "oid": "45acc4db428217a890a27ef00165a78232fc55d3",
                "message": "Suppress serialization warnings. (#2502)\n\nRecent versions of javac emit a warning if a serializable class has\r\na non-transient instance field with a declared type that does not\r\ninherit `Serializable`. In this context, we know that the actual\r\nvalues will always be serializable."
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985WDJr52gAoYTA2YzRjNmRjMWY5MDFkNmVmYTBhYmRmM2Y5NDc2NzQwZmMwNjczNA",
                "url": "https://github.com/google/gson/pull/2440/commits/a06c4c6dc1f901d6efa0abdf3f9476740fc06734"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2438,
                "url": "https://github.com/google/gson/issues/2438",
                "title": "JsonSerializers are constructed multiple times when associated with SerializedName with alternate names but only one is used",
                "bodyHTML": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.10.1</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">Java 17</p>\n<h1 dir=\"auto\">Used tools</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Maven; version: 3.8.1</li>\n</ul>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">When a class has a field with :</p>\n<ul dir=\"auto\">\n<li>@SerializedName annotation with alternate names</li>\n<li>and with @JsonAdapter indicating a JsonSerializer class to use</li>\n</ul>\n<p dir=\"auto\">Then a new JsonSerializer will instanciate for each alternate names, even if they will never be used (<a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L167\">serialize</a> is always false because of <a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L301\">this</a>)</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">Instanciante a new JsonSerializer only for the main name, because created one can be an heavy operation.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">A new JsonSerializer will instanciate for each alternate names</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<p dir=\"auto\">Run the following code</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public static class Pojo {\n\n        @SerializedName(value = &quot;field1&quot;, alternate = {&quot;field2&quot;, &quot;field3&quot;})\n        @JsonAdapter(StringSerializer.class)\n        public final String str;\n\n        public Pojo(String str) {\n            this.str = str;\n        }\n\n}\n\npublic static class StringSerializer implements JsonSerializer&lt;String&gt; {\n\n        private static int count = 0;\n\n        private final int c;\n\n        public StringSerializer() {\n            this.c = count;\n            System.out.println(&quot;new StringSerializer &quot; + this.c);\n            count++;\n        }\n\n        @Override\n        public JsonElement serialize(String value, Type type, JsonSerializationContext context) {\n            System.out.println(&quot;serialize &quot; + this.c);\n            return new JsonPrimitive(value);\n        }\n\n}\n\npublic static void main(String[] args) {\n        TypeAdapter&lt;Pojo&gt; adapter = new Gson().getAdapter(Pojo.class);\n        Pojo pojo1 = new Pojo(&quot;my value 1&quot;);\n        Pojo pojo2 = new Pojo(&quot;my value 2&quot;);\n        adapter.toJson(pojo1);\n        adapter.toJson(pojo2);\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Pojo</span> {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">SerializedName</span>(<span class=\"pl-s1\">value</span> = <span class=\"pl-s\">\"field1\"</span>, <span class=\"pl-s1\">alternate</span> = {<span class=\"pl-s\">\"field2\"</span>, <span class=\"pl-s\">\"field3\"</span>})\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonAdapter</span>(<span class=\"pl-smi\">StringSerializer</span>.<span class=\"pl-k\">class</span>)\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">str</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Pojo</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">str</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">str</span> = <span class=\"pl-s1\">str</span>;\n        }\n\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">StringSerializer</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">JsonSerializer</span>&lt;<span class=\"pl-smi\">String</span>&gt; {\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">count</span> = <span class=\"pl-c1\">0</span>;\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">c</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">StringSerializer</span>() {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">c</span> = <span class=\"pl-s1\">count</span>;\n            <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"new StringSerializer \"</span> + <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">c</span>);\n            <span class=\"pl-s1\">count</span>++;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonElement</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>, <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span>, <span class=\"pl-smi\">JsonSerializationContext</span> <span class=\"pl-s1\">context</span>) {\n            <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"serialize \"</span> + <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">c</span>);\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonPrimitive</span>(<span class=\"pl-s1\">value</span>);\n        }\n\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) {\n        <span class=\"pl-smi\">TypeAdapter</span>&lt;<span class=\"pl-smi\">Pojo</span>&gt; <span class=\"pl-s1\">adapter</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">getAdapter</span>(<span class=\"pl-smi\">Pojo</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-smi\">Pojo</span> <span class=\"pl-s1\">pojo1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Pojo</span>(<span class=\"pl-s\">\"my value 1\"</span>);\n        <span class=\"pl-smi\">Pojo</span> <span class=\"pl-s1\">pojo2</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Pojo</span>(<span class=\"pl-s\">\"my value 2\"</span>);\n        <span class=\"pl-s1\">adapter</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">pojo1</span>);\n        <span class=\"pl-s1\">adapter</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">pojo2</span>);\n}</pre></div>\n<h1 dir=\"auto\">Dev hint</h1>\n<p dir=\"auto\">Maybe we can give <code class=\"notranslate\">serialize</code> value to <a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L158\">this</a> method call and used it in some way ?</p>\n<p dir=\"auto\">OR</p>\n<p dir=\"auto\">Create <a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L158\">this</a> type adapter before <a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L299\">here</a></p>",
                "resourcePath": "/google/gson/issues/2438",
                "createdAt": "2023-07-20T11:09:25Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix and add the documentation for Built-in Serializers and Deserializers",
        "url": "https://github.com/google/gson/pull/2441",
        "resourcePath": "/google/gson/pull/2441",
        "createdAt": "2023-07-21T15:46:19Z",
        "number": 2441,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "UserGuide.md"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985WHC1O2gAoYmZkNzBjY2Y0ZjE4YzNjYjdjYWM4YzE2MWFmMjhiMWY0ZDY1OWJkNQ",
                "url": "https://github.com/google/gson/pull/2441/commits/bfd70ccf4f18c3cb7cac8c161af28b1f4d659bd5"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 620,
                "url": "https://github.com/google/gson/issues/620",
                "title": "Documentation missing for built-in serializers",
                "bodyHTML": "<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"https://sites.google.com/site/gson/gson-user-guide#TOC-Built-in-Serializers-and-\nDeserializers\n\nThe documentation reads:\n\n&quot;Built-in Serializers and Deserializers\n\nGson has built-in serializers and deserializers for commonly used classes whose \ndefault representation may be inappropriate. \n\nHere is a list of such classes: \n\n1. java.net.URL to match it with strings like \n&quot;http://code.google.com/p/google-gson/&quot;.\n2. java.net.URI to match it with strings like &quot;/p/google-gson/&quot;.\nYou can also find source-code for some commonly used classes such as JodaTime \nat this page.&quot;\n\n\nNotice that there is no &quot;list of such classes&quot;. And I haven't any idea what was \nmeant by those numbers items 1 and 2. I suspect it's a documentation template \nissue?\n\nIn any case, it seems important to document what the built-in serializers and \ndeserializers are. I came looking for this documentation and can't find any.\n\n(This is on the current google code site as of this writing, no particular \nversion)\n\"><pre class=\"notranslate\"><code class=\"notranslate\">https://sites.google.com/site/gson/gson-user-guide#TOC-Built-in-Serializers-and-\nDeserializers\n\nThe documentation reads:\n\n\"Built-in Serializers and Deserializers\n\nGson has built-in serializers and deserializers for commonly used classes whose \ndefault representation may be inappropriate. \n\nHere is a list of such classes: \n\n1. java.net.URL to match it with strings like \n\"http://code.google.com/p/google-gson/\".\n2. java.net.URI to match it with strings like \"/p/google-gson/\".\nYou can also find source-code for some commonly used classes such as JodaTime \nat this page.\"\n\n\nNotice that there is no \"list of such classes\". And I haven't any idea what was \nmeant by those numbers items 1 and 2. I suspect it's a documentation template \nissue?\n\nIn any case, it seems important to document what the built-in serializers and \ndeserializers are. I came looking for this documentation and can't find any.\n\n(This is on the current google code site as of this writing, no particular \nversion)\n\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">derrick....@hp.com</code> on 15 Jan 2015 at 5:07</p>",
                "resourcePath": "/google/gson/issues/620",
                "createdAt": "2015-03-19T18:34:30Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    },
                    {
                      "node": {
                        "name": "documentation"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Throw exception when using classes from other JSON libraries with Gson",
        "url": "https://github.com/google/gson/pull/2452",
        "resourcePath": "/google/gson/pull/2452",
        "createdAt": "2023-07-26T19:24:58Z",
        "number": 2452,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "Troubleshooting.md"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/pom.xml"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/Gson.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/UnsupportedJsonLibraryTypeAdapterFactory.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/test/java/com/google/gson/functional/JsonOrgInteropTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985WeYGm2gAoZGM2YmY1NDA4NTgyYmM3Zjg2YWYwZTk4OTQxMjUzZTA5MjY5YzllMg",
                "url": "https://github.com/google/gson/pull/2452/commits/dc6bf5408582bc7f86af0e98941253e09269c9e2"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2445,
                "url": "https://github.com/google/gson/issues/2445",
                "title": "Throw exception when using classes from other JSON libraries with Gson",
                "bodyHTML": "<h1 dir=\"auto\">Problem solved by the feature</h1>\n<p dir=\"auto\">Quite frequently users seem to accidentally use JSON classes from other libraries with Gson, such as JSON-java's <code class=\"notranslate\">JSONObject</code>. This leads to incorrect results because Gson will then fall back to using reflection on these classes.</p>\n<p dir=\"auto\">Examples:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://stackoverflow.com/q/6089989\" rel=\"nofollow\">https://stackoverflow.com/q/6089989</a></li>\n<li><a href=\"https://stackoverflow.com/q/34309811\" rel=\"nofollow\">https://stackoverflow.com/q/34309811</a></li>\n<li><a href=\"https://stackoverflow.com/q/42925887\" rel=\"nofollow\">https://stackoverflow.com/q/42925887</a></li>\n<li><a href=\"https://stackoverflow.com/q/50059808\" rel=\"nofollow\">https://stackoverflow.com/q/50059808</a></li>\n<li><a href=\"https://stackoverflow.com/q/66884585\" rel=\"nofollow\">https://stackoverflow.com/q/66884585</a></li>\n<li><a href=\"https://stackoverflow.com/q/69960938\" rel=\"nofollow\">https://stackoverflow.com/q/69960938</a></li>\n<li><a href=\"https://stackoverflow.com/q/71369104\" rel=\"nofollow\">https://stackoverflow.com/q/71369104</a></li>\n<li><a href=\"https://stackoverflow.com/q/76706456\" rel=\"nofollow\">https://stackoverflow.com/q/76706456</a></li>\n<li><a href=\"https://stackoverflow.com/q/76755061\" rel=\"nofollow\">https://stackoverflow.com/q/76755061</a></li>\n<li><a href=\"https://stackoverflow.com/q/76756548\" rel=\"nofollow\">https://stackoverflow.com/q/76756548</a></li>\n</ul>\n<p dir=\"auto\">Related:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://stackoverflow.com/q/32319222\" rel=\"nofollow\">https://stackoverflow.com/q/32319222</a></li>\n<li><a href=\"https://stackoverflow.com/q/42157126\" rel=\"nofollow\">https://stackoverflow.com/q/42157126</a></li>\n<li><a href=\"https://stackoverflow.com/q/56661362\" rel=\"nofollow\">https://stackoverflow.com/q/56661362</a></li>\n</ul>\n<p dir=\"auto\">Relates to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"97893469\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/673\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/673/hovercard\" href=\"https://github.com/google/gson/issues/673\">#673</a>, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"131017992\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/782\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/782/hovercard\" href=\"https://github.com/google/gson/issues/782\">#782</a></p>\n<h1 dir=\"auto\">Feature description</h1>\n<p dir=\"auto\">Register a default <code class=\"notranslate\">TypeAdapter</code> (or <code class=\"notranslate\">TypeAdapterFactory</code>) which checks if the class is from a different popular JSON library and in that case throw an exception.</p>\n<ul dir=\"auto\">\n<li>The exception should only be thrown in the <code class=\"notranslate\">read</code> and <code class=\"notranslate\">write</code> methods of <code class=\"notranslate\">TypeAdapter</code> to minimize the risk of backward incompatibility when users don't actually serialize or deserialize the instances</li>\n<li>The adapter should act as fallback (internally registered right before the reflection-based factory); a user defined adapter should have higher precedence</li>\n<li>The exception message mention that the class is unsupported and the Gson equivalent should be used; optionally it should also point to a new troubleshooting guide entry</li>\n</ul>\n<p dir=\"auto\">Libraries with JSON classes which should be detected:</p>\n<ul dir=\"auto\">\n<li>JSON-java (these are also the ones available for Android)</li>\n<li>Jackson<br>\nMight not be necessary because the Jackson classes have different naming (<code class=\"notranslate\">ObjectNode</code> for JSON object, <code class=\"notranslate\">ArrayNode</code> for JSON array, though the base class is named <code class=\"notranslate\">JsonNode</code>), so the risk of confusion might be lower</li>\n<li>Vert.x ?</li>\n<li>json-simple<br>\nProbably not necessary because <code class=\"notranslate\">JSONArray</code> extends <code class=\"notranslate\">ArrayList</code> and <code class=\"notranslate\">JSONObject</code> extends <code class=\"notranslate\">HashMap</code></li>\n<li>fastjson<br>\nProbably not necessary because <code class=\"notranslate\">JSONArray</code> implements <code class=\"notranslate\">List</code> and <code class=\"notranslate\">JSONObject</code> implements <code class=\"notranslate\">Map</code></li>\n<li>json-smart<br>\nProbably not necessary because <code class=\"notranslate\">JSONArray</code> extends <code class=\"notranslate\">ArrayList</code> and <code class=\"notranslate\">JSONObject</code> extends <code class=\"notranslate\">HashMap</code></li>\n<li>...?</li>\n</ul>\n<p dir=\"auto\">Note that this would break backward compatibility for applications which (accidentally) rely on this, but they could register a custom <code class=\"notranslate\">TypeAdapter</code> to restore the functionality.</p>\n<h1 dir=\"auto\">Alternatives / workarounds</h1>\n<ul dir=\"auto\">\n<li>Do nothing</li>\n<li>Add default adapters which support third-party JSON classes; probably not something we want to do?</li>\n</ul>",
                "resourcePath": "/google/gson/issues/2445",
                "createdAt": "2023-07-24T22:51:14Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Access `RecordComponent` via `Class.forName`.",
        "url": "https://github.com/google/gson/pull/2465",
        "resourcePath": "/google/gson/pull/2465",
        "createdAt": "2023-08-10T17:32:00Z",
        "number": 2465,
        "mergeCommit": {
          "oid": "c5c1fbf9a12def0b3b5e6c6e84c36b185dfb4628",
          "message": "Access `RecordComponent` via `Class.forName`. (#2465)\n\nThis should mean that GraalVM will understand the reflective lookup of its methods.\r\nSee [documentation](https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/#automatic-detection).",
          "commitUrl": "https://github.com/google/gson/commit/c5c1fbf9a12def0b3b5e6c6e84c36b185dfb4628",
          "parents": {
            "nodes": [
              {
                "oid": "cdbbee4e723c39c1df302a805f3bde8d4fe12bd1",
                "message": "Bump com.google.errorprone:error_prone_core from 2.20.0 to 2.21.1 (#2463)\n\nSuppress a couple of new Error Prone warnings."
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/reflect/ReflectionHelper.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985XqW9t2gAoMmJkMzhjNmZmMWQ3Y2JmN2Y2NDlkNmFmZTVkYmMzYmIwZDU5MGU3Ng",
                "url": "https://github.com/google/gson/pull/2465/commits/2bd38c6ff1d7cbf7f649d6afe5dbc3bb0d590e76"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2464,
                "url": "https://github.com/google/gson/issues/2464",
                "title": "Using gson to deserialize json in native image fails",
                "bodyHTML": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.10.1</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">17.0.8</p>\n<h1 dir=\"auto\">Used tools</h1>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">I used gson in springboot, and the code works normally in normal mode. But I packaged the program into a native image and ran it, and an exception occurred.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n\n<h2 dir=\"auto\">Actual behavior</h2>\n\n<h1 dir=\"auto\">Reproduction steps</h1>\n<ol dir=\"auto\">\n<li>public record MicrosoftASRResponse(String RecognitionStatus, String DisplayText, String Offset,<br>\nString Duration) {</li>\n</ol>\n<p dir=\"auto\">}<br>\n2. Gson gson = new Gson()<br>\n3. var asrResponse = gson.fromJson(s, MicrosoftASRResponse.class);<br>\n4. my reflect-config.json  is<br>\n5. <code class=\"notranslate\">[  { \"name\": \"com.mobvoi.noise.microsoft.model.MicrosoftASRResponse\", \"allDeclaredFields\": true, \"allDeclaredConstructors\": true, \"allDeclaredMethods\": true, \"allPublicMethods\": true, \"allDeclaredClasses\": true, \"unsafeAllocated\": true } ]  </code></p>\n<h1 dir=\"auto\">Exception stack trace</h1>\n\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"2023-08-09 18:08:29.686 INFO  2800 --- [http-nio-8080-exec-3] com.mobvoi.noise.service.impl.NoiseServiceImpl - asr success {&quot;RecognitionStatus&quot;:&quot;Success&quot;,&quot;Offset&quot;:400000,&quot;Duration&quot;:31600000,&quot;DisplayText&quot;:&quot;\u4eca\u5929\u5929\u6c14\u600e\u4e48\u6837\uff1f&quot;}\n2023-08-09 18:08:29.686 ERROR 2800 --- [http-nio-8080-exec-3] com.mobvoi.noise.service.impl.NoiseServiceImpl - get issue token failed\njava.lang.RuntimeException: Unexpected IllegalAccessException occurred (Gson 2.10.1). Certain ReflectionAccessFilter features require Java &gt;= 9 to work correctly. If you are not using ReflectionAccessFilter, report this to the Gson maintainers.\n        at com.google.gson.internal.reflect.ReflectionHelper.createExceptionForUnexpectedIllegalAccess(ReflectionHelper.java:153)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:399)\n        at com.google.gson.Gson.fromJson(Gson.java:1227)\n        at com.google.gson.Gson.fromJson(Gson.java:1137)\n        at com.google.gson.Gson.fromJson(Gson.java:1047)\n        at com.google.gson.Gson.fromJson(Gson.java:982)\n        at com.mobvoi.noise.service.impl.NoiseServiceImpl.getAsr(NoiseServiceImpl.java:254)\n        at com.mobvoi.noise.controller.NoiseController.asr(NoiseController.java:42)\n        at java.base@17.0.8/java.lang.reflect.Method.invoke(Method.java:568)\n        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\n        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\n        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\n        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\n        at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\n        at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\n        at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.base@17.0.8/java.lang.Thread.run(Thread.java:833)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:807)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.windows.WindowsPlatformThreads.osThreadStartRoutine(WindowsPlatformThreads.java:179)\nCaused by: java.lang.IllegalAccessException: Can not set final java.lang.String field com.mobvoi.noise.microsoft.model.MicrosoftASRResponse.RecognitionStatus to java.lang.String\n        at java.base@17.0.8/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:76)\n        at java.base@17.0.8/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:80)\n        at java.base@17.0.8/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:79)\n        at java.base@17.0.8/java.lang.reflect.Field.set(Field.java:799)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.readIntoField(ReflectiveTypeAdapterFactory.java:222)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldReflectionAdapter.readField(ReflectiveTypeAdapterFactory.java:433)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:393)\n        ... 59 common frames omitted\"><pre class=\"notranslate\"><code class=\"notranslate\">2023-08-09 18:08:29.686 INFO  2800 --- [http-nio-8080-exec-3] com.mobvoi.noise.service.impl.NoiseServiceImpl - asr success {\"RecognitionStatus\":\"Success\",\"Offset\":400000,\"Duration\":31600000,\"DisplayText\":\"\u4eca\u5929\u5929\u6c14\u600e\u4e48\u6837\uff1f\"}\n2023-08-09 18:08:29.686 ERROR 2800 --- [http-nio-8080-exec-3] com.mobvoi.noise.service.impl.NoiseServiceImpl - get issue token failed\njava.lang.RuntimeException: Unexpected IllegalAccessException occurred (Gson 2.10.1). Certain ReflectionAccessFilter features require Java &gt;= 9 to work correctly. If you are not using ReflectionAccessFilter, report this to the Gson maintainers.\n        at com.google.gson.internal.reflect.ReflectionHelper.createExceptionForUnexpectedIllegalAccess(ReflectionHelper.java:153)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:399)\n        at com.google.gson.Gson.fromJson(Gson.java:1227)\n        at com.google.gson.Gson.fromJson(Gson.java:1137)\n        at com.google.gson.Gson.fromJson(Gson.java:1047)\n        at com.google.gson.Gson.fromJson(Gson.java:982)\n        at com.mobvoi.noise.service.impl.NoiseServiceImpl.getAsr(NoiseServiceImpl.java:254)\n        at com.mobvoi.noise.controller.NoiseController.asr(NoiseController.java:42)\n        at java.base@17.0.8/java.lang.reflect.Method.invoke(Method.java:568)\n        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)\n        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)\n        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\n        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\n        at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\n        at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\n        at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.base@17.0.8/java.lang.Thread.run(Thread.java:833)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:807)\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.windows.WindowsPlatformThreads.osThreadStartRoutine(WindowsPlatformThreads.java:179)\nCaused by: java.lang.IllegalAccessException: Can not set final java.lang.String field com.mobvoi.noise.microsoft.model.MicrosoftASRResponse.RecognitionStatus to java.lang.String\n        at java.base@17.0.8/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:76)\n        at java.base@17.0.8/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:80)\n        at java.base@17.0.8/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:79)\n        at java.base@17.0.8/java.lang.reflect.Field.set(Field.java:799)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.readIntoField(ReflectiveTypeAdapterFactory.java:222)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldReflectionAdapter.readField(ReflectiveTypeAdapterFactory.java:433)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:393)\n        ... 59 common frames omitted\n</code></pre></div>",
                "resourcePath": "/google/gson/issues/2464",
                "createdAt": "2023-08-09T11:05:24Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "changes to ensure if no object is opened user won't be able to add pr\u2026",
        "url": "https://github.com/google/gson/pull/2474",
        "resourcePath": "/google/gson/pull/2474",
        "createdAt": "2023-08-21T16:59:55Z",
        "number": 2474,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985YaKN-2gAoNGZmNjc1ZDRkZDFjMDhjM2UzZTJlZGRkMDU3Yjk1ODNiM2ZiNjE0Yw",
                "url": "https://github.com/google/gson/pull/2474/commits/4ff675d4dd1c08c3e3e2eddd057b9583b3fb614c"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2407,
                "url": "https://github.com/google/gson/issues/2407",
                "title": "`JsonWriter.name` does not throw exception when not inside JSON object",
                "bodyHTML": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.10.1</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">Java 17</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">Calling <code class=\"notranslate\">JsonWriter.name</code> (and maybe also <code class=\"notranslate\">JsonTreeWriter.name</code>) when not inside a JSON object does not fail.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">An <code class=\"notranslate\">IllegalStateException</code> should be thrown</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">No exception is thrown</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"JsonWriter jsonWriter = new JsonWriter(new StringWriter());\n// Should throw exception\njsonWriter.name(&quot;a&quot;);\"><pre class=\"notranslate\"><span class=\"pl-smi\">JsonWriter</span> <span class=\"pl-s1\">jsonWriter</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>());\n<span class=\"pl-c\">// Should throw exception</span>\n<span class=\"pl-s1\">jsonWriter</span>.<span class=\"pl-en\">name</span>(<span class=\"pl-s\">\"a\"</span>);</pre></div>",
                "resourcePath": "/google/gson/issues/2407",
                "createdAt": "2023-06-04T00:44:31Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Throw exception when calling `JsonWriter.name` outside JSON object",
        "url": "https://github.com/google/gson/pull/2476",
        "resourcePath": "/google/gson/pull/2476",
        "createdAt": "2023-08-22T20:14:56Z",
        "number": 2476,
        "mergeCommit": {
          "oid": "70bda4b9c9eb8d0b567f8715a67dbada00b02216",
          "message": "Throw exception when calling `JsonWriter.name` outside JSON object (#2476)\n\nPrevious fix in 392cc65ff3004689e03b219d9b00979072f9c9d0 only covered writing\r\nname as top level value, but not when trying to write name inside JSON array.\r\n\r\nRemoved `stackSize == 0` check from `JsonWriter.name` because that is done\r\nalready by `peek()` call.",
          "commitUrl": "https://github.com/google/gson/commit/70bda4b9c9eb8d0b567f8715a67dbada00b02216",
          "parents": {
            "nodes": [
              {
                "oid": "ddc76ea4cc7dc8ccb0930ddfee668e2f53a4426c",
                "message": "Bump org.graalvm.buildtools:native-maven-plugin from 0.9.24 to 0.9.25 (#2482)\n\nBumps [org.graalvm.buildtools:native-maven-plugin](https://github.com/graalvm/native-build-tools) from 0.9.24 to 0.9.25.\r\n- [Release notes](https://github.com/graalvm/native-build-tools/releases)\r\n- [Commits](https://github.com/graalvm/native-build-tools/commits)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.graalvm.buildtools:native-maven-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985YiPBV2gAoOGNlNGE1NjRmMGQ4MTJkMjEzNmJlNDNhMWJhNTBhMzkzNDEzYjU1Nw",
                "url": "https://github.com/google/gson/pull/2476/commits/8ce4a564f0d812d2136be43a1ba50a393413b557"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2407,
                "url": "https://github.com/google/gson/issues/2407",
                "title": "`JsonWriter.name` does not throw exception when not inside JSON object",
                "bodyHTML": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.10.1</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">Java 17</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">Calling <code class=\"notranslate\">JsonWriter.name</code> (and maybe also <code class=\"notranslate\">JsonTreeWriter.name</code>) when not inside a JSON object does not fail.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">An <code class=\"notranslate\">IllegalStateException</code> should be thrown</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">No exception is thrown</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"JsonWriter jsonWriter = new JsonWriter(new StringWriter());\n// Should throw exception\njsonWriter.name(&quot;a&quot;);\"><pre class=\"notranslate\"><span class=\"pl-smi\">JsonWriter</span> <span class=\"pl-s1\">jsonWriter</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>());\n<span class=\"pl-c\">// Should throw exception</span>\n<span class=\"pl-s1\">jsonWriter</span>.<span class=\"pl-en\">name</span>(<span class=\"pl-s\">\"a\"</span>);</pre></div>",
                "resourcePath": "/google/gson/issues/2407",
                "createdAt": "2023-06-04T00:44:31Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "issue#2436: Throw exception when registering adapter for Object or JsonElement",
        "url": "https://github.com/google/gson/pull/2479",
        "resourcePath": "/google/gson/pull/2479",
        "createdAt": "2023-08-25T19:28:05Z",
        "number": 2479,
        "mergeCommit": {
          "oid": "0109f451299e7780a334d1844548d3a3346a9b39",
          "message": "issue#2436: Throw exception when registering adapter for Object or JsonElement (#2479)\n\n* Code changes and tests for #2436 to throw exception when trying to register adapter for Object or JsonElement\r\n\r\n* #2436 - Updates to User guide & comments to indicate exception cases and fix for 7 test cases of Parameterized Type\r\n\r\n* #2436 - Fixes as per the review comments.\r\n\r\n* #2436 - Refactored as per latest review comments + throwing error message.\r\n\r\n* #2436 - added a clarifying comment in a positive test case.\r\n\r\n* #2436 - formatting and minor changes as per review.\r\n\r\n* Update gson/src/main/java/com/google/gson/GsonBuilder.java\r\n\r\nCo-authored-by: Marcono1234 <Marcono1234@users.noreply.github.com>\r\n\r\n* Update gson/src/test/java/com/google/gson/GsonBuilderTest.java\r\n\r\nCo-authored-by: Marcono1234 <Marcono1234@users.noreply.github.com>\r\n\r\n* Update gson/src/test/java/com/google/gson/GsonBuilderTest.java\r\n\r\nCo-authored-by: Marcono1234 <Marcono1234@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Sachin Patil <sachin.patil2@capitalone.com>\r\nCo-authored-by: Marcono1234 <Marcono1234@users.noreply.github.com>",
          "commitUrl": "https://github.com/google/gson/commit/0109f451299e7780a334d1844548d3a3346a9b39",
          "parents": {
            "nodes": [
              {
                "oid": "4dfae77af3d543bea2782f85a154cc070290f086",
                "message": "Bump com.github.siom79.japicmp:japicmp-maven-plugin (#2504)\n\nBumps [com.github.siom79.japicmp:japicmp-maven-plugin](https://github.com/siom79/japicmp) from 0.18.0 to 0.18.1.\r\n- [Release notes](https://github.com/siom79/japicmp/releases)\r\n- [Changelog](https://github.com/siom79/japicmp/blob/master/release.py)\r\n- [Commits](https://github.com/siom79/japicmp/compare/japicmp-base-0.18.0...japicmp-base-0.18.1)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: com.github.siom79.japicmp:japicmp-maven-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "UserGuide.md"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/GsonBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/GsonBuilderTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/GsonTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985Y0tny2gAoZmNmMjU1MTZhNmQ3ODdiMzJiYzYwOWFhNTEwMDgwZmQxODI0ZTViNA",
                "url": "https://github.com/google/gson/pull/2479/commits/fcf25516a6d787b32bc609aa510080fd1824e5b4"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2436,
                "url": "https://github.com/google/gson/issues/2436",
                "title": "`GsonBuilder` should throw exception when trying to register adapter for `Object` or `JsonElement`",
                "bodyHTML": "<h1 dir=\"auto\">Problem solved by the feature</h1>\n<p dir=\"auto\"><code class=\"notranslate\">GsonBuilder</code> does not support overwriting the built-in adapters for <code class=\"notranslate\">Object</code> and for <code class=\"notranslate\">JsonElement</code> (and subclasses). This might not be obvious to users (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"267915657\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1177\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/1177/hovercard\" href=\"https://github.com/google/gson/issues/1177\">#1177</a>).<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/6d9c3566b71900c54644a9f71ce028696ee5d4bd/gson/src/main/java/com/google/gson/Gson.java#L283-L285\">gson/gson/src/main/java/com/google/gson/Gson.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 283 to 285\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/google/gson/commit/6d9c3566b71900c54644a9f71ce028696ee5d4bd\">6d9c356</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L283\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"283\"></td>\n          <td id=\"LC283\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\">// built-in type adapters that cannot be overridden</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L284\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"284\"></td>\n          <td id=\"LC284\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-s1\">factories</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-smi\">TypeAdapters</span>.<span class=\"pl-c1\">JSON_ELEMENT_FACTORY</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L285\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"285\"></td>\n          <td id=\"LC285\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-s1\">factories</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-smi\">ObjectTypeAdapter</span>.<span class=\"pl-en\">getFactory</span>(<span class=\"pl-s1\">objectToNumberStrategy</span>)); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">(Side note: This only affects <code class=\"notranslate\">GsonBuilder</code>; it is possible to overwrite these adapters when using <code class=\"notranslate\">@JsonAdapter</code> on a field.)</p>\n<h1 dir=\"auto\">Feature description</h1>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">GsonBuilder.registerTypeAdapter</code> should throw an exception when the type is <code class=\"notranslate\">Object</code> or <code class=\"notranslate\">JsonElement</code> or a subclass of it</li>\n<li><code class=\"notranslate\">GsonBuilder.registerTypeHierarchyAdapter</code> should throw an exception when the type is <code class=\"notranslate\">JsonElement</code> or a subclass of it</li>\n</ul>\n<p dir=\"auto\">Additionally for both methods the documentation should be extended to specify that overwriting these adapters is not possible (but maybe mention that <code class=\"notranslate\">@JsonAdapter</code> can be used instead).</p>\n<h1 dir=\"auto\">Alternatives / workarounds</h1>\n<p dir=\"auto\">Only adjust the documentation (and Troubleshooting Guide) to mention that these adapters cannot be overwritten.</p>\n<p dir=\"auto\">Or as proposed by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"267915657\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1177\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/1177/hovercard\" href=\"https://github.com/google/gson/issues/1177\">#1177</a> let users overwrite the built-in adapters for these types.</p>",
                "resourcePath": "/google/gson/issues/2436",
                "createdAt": "2023-07-16T13:37:57Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Support serializing anonymous and local class with custom adapter",
        "url": "https://github.com/google/gson/pull/2498",
        "resourcePath": "/google/gson/pull/2498",
        "createdAt": "2023-09-23T20:14:37Z",
        "number": 2498,
        "mergeCommit": {
          "oid": "46ab704221608fb6318d110f1b0c2abca73a9ea2",
          "message": "Support serializing anonymous and local class with custom adapter (#2498)\n\n* Support serializing anonymous and local class with custom adapter\r\n\r\n* Fix formatting and fix switched 'expected' and 'actual' in EnumTest\r\n\r\n* Minor code improvements\r\n\r\n---------\r\n\r\nCo-authored-by: \u00c9amonn McManus <emcmanus@google.com>",
          "commitUrl": "https://github.com/google/gson/commit/46ab704221608fb6318d110f1b0c2abca73a9ea2",
          "parents": {
            "nodes": [
              {
                "oid": "2032818ecb1a5d0932d4702ff36a8cc5b3bc20aa",
                "message": "Bump com.diffplug.spotless:spotless-maven-plugin from 2.41.1 to 2.43.0 (#2603)\n\nBumps [com.diffplug.spotless:spotless-maven-plugin](https://github.com/diffplug/spotless) from 2.41.1 to 2.43.0.\r\n- [Changelog](https://github.com/diffplug/spotless/blob/main/CHANGES.md)\r\n- [Commits](https://github.com/diffplug/spotless/compare/maven/2.41.1...lib/2.43.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: com.diffplug.spotless:spotless-maven-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-minor\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/Excluder.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/reflect/ReflectionHelper.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/EnumTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/ObjectTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985bC-rU2gAoYTMyM2RkNTY5OTYwMzA5NTk0ZjAyODVlZGNiZmFkOWEzYTA2NGRiOA",
                "url": "https://github.com/google/gson/pull/2498/commits/a323dd569960309594f0285edcbfad9a3a064db8"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1510,
                "url": "https://github.com/google/gson/issues/1510",
                "title": "Allow serialization of anonymous classes",
                "bodyHTML": "<p dir=\"auto\"><strong>Describe the feature</strong><br>\nGson should allow <em>serialization</em> of anonymous classes, the reason is that the user shouldn't care about the implementation of the code that generates the objects they are using.</p>\n<p dir=\"auto\">For example, this code that only uses Guava and Gson looks fine and users may expect it to print <code class=\"notranslate\">[\"a\", \"b\"]</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        System.out.println(gson.toJsonTree(Sets.union(\n                ImmutableSet.of(&quot;a&quot;),\n                ImmutableSet.of(&quot;b&quot;))));\"><pre class=\"notranslate\"><code class=\"notranslate\">        System.out.println(gson.toJsonTree(Sets.union(\n                ImmutableSet.of(\"a\"),\n                ImmutableSet.of(\"b\"))));\n</code></pre></div>\n<p dir=\"auto\">But actually, that code prints <code class=\"notranslate\">null</code>, totally unexpected to a user that is not familiar with the implementation of <code class=\"notranslate\">Sets.union</code> (that function returns an instance of an anonymous class).</p>\n<p dir=\"auto\"><strong>Additional context</strong></p>\n<p dir=\"auto\">I think this feature is well deserved because of the amount of confusion that has been around the lack of it. If we do a Google search we find several people who were caught by this issue:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"63058598\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/298\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/298/hovercard\" href=\"https://github.com/google/gson/issues/298\">#298</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"124290731\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/762\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/762/hovercard\" href=\"https://github.com/google/gson/issues/762\">#762</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"340611390\" data-permission-text=\"Title is private\" data-url=\"https://github.com/javalin/javalin/issues/288\" data-hovercard-type=\"issue\" data-hovercard-url=\"/javalin/javalin/issues/288/hovercard\" href=\"https://github.com/javalin/javalin/issues/288\">javalin/javalin#288</a></li>\n<li><a href=\"https://stackoverflow.com/questions/10746278/serializing-anonymous-classes-with-gson\" rel=\"nofollow\">https://stackoverflow.com/questions/10746278/serializing-anonymous-classes-with-gson</a></li>\n<li><a href=\"https://stackoverflow.com/questions/26791752/convert-anonymous-java-object-types-to-json-using-gson\" rel=\"nofollow\">https://stackoverflow.com/questions/26791752/convert-anonymous-java-object-types-to-json-using-gson</a></li>\n<li><a href=\"https://stackoverflow.com/questions/55622921/custom-gson-serializer-for-anonymous-classes\" rel=\"nofollow\">https://stackoverflow.com/questions/55622921/custom-gson-serializer-for-anonymous-classes</a></li>\n</ul>\n<p dir=\"auto\">And the list goes on and on.</p>\n<p dir=\"auto\">I think what aggravates the lack of this feature it he way Gson silently serializes those instances to <code class=\"notranslate\">null</code>, which is a source of silent bugs.</p>\n<p dir=\"auto\"><strong>NOTE:</strong><br>\n<em>Deserialization</em> of anonymous inner classes is problematic, I'm not asking for that to be supported. This feature request deals only with serialization.</p>\n<p dir=\"auto\"><strong>Possible workarounds</strong></p>\n<p dir=\"auto\">I've seen suggested workarounds like:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"gson.toJsonTree(union, TypeToken&lt;Set&lt;String&gt;&gt;(){}.getType());.\"><pre class=\"notranslate\"><code class=\"notranslate\">gson.toJsonTree(union, TypeToken&lt;Set&lt;String&gt;&gt;(){}.getType());.\n</code></pre></div>\n<p dir=\"auto\">But notice that only works in the most simple of cases, but it doesn't work in cases where we have a Map with values of different anonymous classes:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ImmutableMap.of(\n    &quot;key1&quot;, Sets.union(...),\n    &quot;key2&quot;, new HashSet(){},\n    &quot;key3&quot;, new MyRecord(){}\n);\"><pre class=\"notranslate\"><code class=\"notranslate\">ImmutableMap.of(\n    \"key1\", Sets.union(...),\n    \"key2\", new HashSet(){},\n    \"key3\", new MyRecord(){}\n);\n</code></pre></div>\n<p dir=\"auto\">As there is not a single TokenType I can accommodate for that disparity of values and that will behave as expected. Moreover, sometimes the values are not known at compile time (in designing APIs, the values can be anything the user passes to us, and its out of our control).</p>",
                "resourcePath": "/google/gson/issues/1510",
                "createdAt": "2019-04-11T05:27:21Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix DateFormat time zone is not restored and add Test.",
        "url": "https://github.com/google/gson/pull/2549",
        "resourcePath": "/google/gson/pull/2549",
        "createdAt": "2023-11-20T13:00:10Z",
        "number": 2549,
        "mergeCommit": {
          "oid": "58d1a9f0eb396ff64a622532e2ba5c5c726165e6",
          "message": "Fix DateFormat time zone is not restored and add Test. (#2549)\n\n* Fix DateFormat time zone is not restored and add Test.\r\n\r\n* delete the test and make sure mvn clean test -X can be SUCCESS\r\n\r\n* delete the test and make sure mvn clean test -X can be SUCCESS\r\n\r\n* add test\r\n\r\n* restore the DateFormat time zone in SqlDateTypeAdapter and SqlTimeTypeAdapter\r\n\r\n* Adjust the code according to the code review feedback.\r\n\r\n* Adjust the code according to the code review feedback.\r\n\r\n* Adjust the code according to the code review feedback.\r\n\r\n* Adjust the Test\r\n\r\n* fix Werror error\r\n\r\n* Adjust the DefaultDateTypeAdapterTest according to the code review feedback.\r\n\r\n---------\r\n\r\nCo-authored-by: Carpe-Wang <wangcarpe@126.com>",
          "commitUrl": "https://github.com/google/gson/commit/58d1a9f0eb396ff64a622532e2ba5c5c726165e6",
          "parents": {
            "nodes": [
              {
                "oid": "5471932375be4bb0c27a8a1d38f9f4566d6da7db",
                "message": "Bump com.diffplug.spotless:spotless-maven-plugin from 2.41.0 to 2.41.1 (#2566)\n\nBumps [com.diffplug.spotless:spotless-maven-plugin](https://github.com/diffplug/spotless) from 2.41.0 to 2.41.1.\r\n- [Changelog](https://github.com/diffplug/spotless/blob/main/CHANGES.md)\r\n- [Commits](https://github.com/diffplug/spotless/compare/lib/2.41.0...maven/2.41.1)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: com.diffplug.spotless:spotless-maven-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/DefaultDateTypeAdapter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/sql/SqlDateTypeAdapter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/sql/SqlTimeTypeAdapter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/internal/bind/DefaultDateTypeAdapterTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985f6FWK2gAoOTcyOTAwYWNhYjcwODgzNGQyNjc0NjY4M2Q3ZTM2NjJlMjI0NjY1YQ",
                "url": "https://github.com/google/gson/pull/2549/commits/972900acab708834d26746683d7e3662e224665a"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2547,
                "url": "https://github.com/google/gson/issues/2547",
                "title": "`DateFormat` time zone is not restored after parsing, affecting subsequent serialization",
                "bodyHTML": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.10.1</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">Java 17</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">When deserializing a <code class=\"notranslate\">java.util.Date</code> (and probably any of its subtypes) using a pattern with time zone, subsequent serialization using the same pattern is affected by it and uses the same time zone which was provided during deserialization. This can lead to undesired and unexpected behavior (e.g. one user can influence the date format of another user).</p>\n<p dir=\"auto\">The underlying issue is that <code class=\"notranslate\">DateFormat.parse</code> / <code class=\"notranslate\">SimpleDateFormat.parse</code> can change the time zone of the instance, but does not restore it afterwards, see <a href=\"https://bugs.openjdk.org/browse/JDK-6609675\" rel=\"nofollow\">JDK-6609675</a>. So before any <code class=\"notranslate\">parse</code> call it is necessary to obtain the time zone from the date format, then call <code class=\"notranslate\">parse</code> and in a <code class=\"notranslate\">finally</code> block restore the time zone again.<br>\nBased on the documentation it seems only the time zone is affected by this.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">A call to <code class=\"notranslate\">Gson.fromJson</code> should not affect subsequent <code class=\"notranslate\">Gson.toJson</code> calls.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">A call to <code class=\"notranslate\">Gson.fromJson</code> can affect the output of subsequent <code class=\"notranslate\">Gson.toJson</code> calls in case a date format which includes the time zone in the pattern is used.</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"TimeZone.setDefault(TimeZone.getTimeZone(&quot;UTC&quot;));\nGson gson = new GsonBuilder().setDateFormat(&quot;yyyy-MM-dd HH:mm z&quot;).create();\nDate date = new Date(0);\n\n// As expected: 1970-01-01 00:00 UTC\nSystem.out.println(gson.toJson(date));\n\ngson.fromJson(&quot;\\&quot;1970-01-01 00:00 PST\\&quot;&quot;, Date.class);\n\n// Unexpected: 1969-12-31 16:00 PST\nSystem.out.println(gson.toJson(date));\"><pre class=\"notranslate\"><span class=\"pl-smi\">TimeZone</span>.<span class=\"pl-en\">setDefault</span>(<span class=\"pl-smi\">TimeZone</span>.<span class=\"pl-en\">getTimeZone</span>(<span class=\"pl-s\">\"UTC\"</span>));\n<span class=\"pl-smi\">Gson</span> <span class=\"pl-s1\">gson</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>().<span class=\"pl-en\">setDateFormat</span>(<span class=\"pl-s\">\"yyyy-MM-dd HH:mm z\"</span>).<span class=\"pl-en\">create</span>();\n<span class=\"pl-smi\">Date</span> <span class=\"pl-s1\">date</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Date</span>(<span class=\"pl-c1\">0</span>);\n\n<span class=\"pl-c\">// As expected: 1970-01-01 00:00 UTC</span>\n<span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">date</span>));\n\n<span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">fromJson</span>(<span class=\"pl-s\">\"<span class=\"pl-cce\">\\\"</span>1970-01-01 00:00 PST<span class=\"pl-cce\">\\\"</span>\"</span>, <span class=\"pl-smi\">Date</span>.<span class=\"pl-k\">class</span>);\n\n<span class=\"pl-c\">// Unexpected: 1969-12-31 16:00 PST</span>\n<span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">date</span>));</pre></div>",
                "resourcePath": "/google/gson/issues/2547",
                "createdAt": "2023-11-19T01:29:05Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Fix `GsonBuilder.setDateFormat` ignoring partial DEFAULT; deprecate `setDateFormat(int)`",
        "url": "https://github.com/google/gson/pull/2556",
        "resourcePath": "/google/gson/pull/2556",
        "createdAt": "2023-11-26T13:44:04Z",
        "number": 2556,
        "mergeCommit": {
          "oid": "13be1d104d5a5d39a93ff8202de4e75adbfc40f6",
          "message": "Fix `GsonBuilder.setDateFormat` ignoring partial DEFAULT; deprecate `setDateFormat(int)` (#2556)\n\n* Fix `GsonBuilder.setDateFormat` ignoring partial DEFAULT; deprecate `setDateFormat(int)`\r\n\r\n* Remove date format methods not used by main code\r\n\r\n* Adjust example",
          "commitUrl": "https://github.com/google/gson/commit/13be1d104d5a5d39a93ff8202de4e75adbfc40f6",
          "parents": {
            "nodes": [
              {
                "oid": "df0165b1bc125ceca97eae5749122ff206bb4c04",
                "message": "Bump the maven group with 1 update (#2642)\n\nBumps the maven group with 1 update: [com.google.truth:truth](https://github.com/google/truth).\r\n\r\n\r\nUpdates `com.google.truth:truth` from 1.4.1 to 1.4.2\r\n- [Release notes](https://github.com/google/truth/releases)\r\n- [Commits](https://github.com/google/truth/compare/v1.4.1...v1.4.2)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: com.google.truth:truth\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n  dependency-group: maven\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/Gson.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/GsonBuilder.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/PreJava9DateFormatProvider.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/DefaultDateTypeAdapter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/GsonBuilderTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/internal/bind/DefaultDateTypeAdapterTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985gX_wQ2gAoMzFmNGZkZThlYjM0ZDAyOWNjMGEzODhmY2VmZGI2OWJjNzM0NGVlYw",
                "url": "https://github.com/google/gson/pull/2556/commits/31f4fde8eb34d029cc0a388fcefdb69bc7344eec"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1529,
                "url": "https://github.com/google/gson/issues/1529",
                "title": "GsonBuilder.setDateFormat(int) is ignored",
                "bodyHTML": "<p dir=\"auto\">As described in <a href=\"https://stackoverflow.com/questions/6873020/gson-date-format\" rel=\"nofollow\">https://stackoverflow.com/questions/6873020/gson-date-format</a>, calling <code class=\"notranslate\">Gson.setDateFormat(int)</code> has no effect, the created Gson object will not use the date format.</p>\n<p dir=\"auto\">It appears the reason for this is that the method only sets <code class=\"notranslate\">dateStyle</code>, but <code class=\"notranslate\">timeStyle</code> remains unchanged, i.e. if it has not been changed before, then it is still <code class=\"notranslate\">DateFormat.DEFAULT</code>.<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/63ee47cb642c8018e5cddd639aa2be143220ad4b/gson/src/main/java/com/google/gson/GsonBuilder.java#L451-L454\">gson/gson/src/main/java/com/google/gson/GsonBuilder.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 451 to 454\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/google/gson/commit/63ee47cb642c8018e5cddd639aa2be143220ad4b\">63ee47c</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L451\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"451\"></td>\n          <td id=\"LC451\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">public</span> <span class=\"pl-smi\">GsonBuilder</span> <span class=\"pl-en\">setDateFormat</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">style</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L452\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"452\"></td>\n          <td id=\"LC452\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">dateStyle</span> = <span class=\"pl-s1\">style</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L453\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"453\"></td>\n          <td id=\"LC453\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">datePattern</span> = <span class=\"pl-c1\">null</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L454\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"454\"></td>\n          <td id=\"LC454\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>\n<p dir=\"auto\">However <code class=\"notranslate\">addTypeAdaptersForDate</code> only uses the styles if <code class=\"notranslate\">timeStyle != DateFormat.DEFAULT</code>.<br>\n</p><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/63ee47cb642c8018e5cddd639aa2be143220ad4b/gson/src/main/java/com/google/gson/GsonBuilder.java#L615\">gson/gson/src/main/java/com/google/gson/GsonBuilder.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 615\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha Link--inTextBlock\" href=\"/google/gson/commit/63ee47cb642c8018e5cddd639aa2be143220ad4b\">63ee47c</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L615\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"615\"></td>\n          <td id=\"LC615\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">dateStyle</span> != <span class=\"pl-smi\">DateFormat</span>.<span class=\"pl-c1\">DEFAULT</span> &amp;&amp; <span class=\"pl-s1\">timeStyle</span> != <span class=\"pl-smi\">DateFormat</span>.<span class=\"pl-c1\">DEFAULT</span>) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<p></p>",
                "resourcePath": "/google/gson/issues/1529",
                "createdAt": "2019-05-06T19:41:27Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Issue/2563",
        "url": "https://github.com/google/gson/pull/2571",
        "resourcePath": "/google/gson/pull/2571",
        "createdAt": "2023-12-07T07:37:19Z",
        "number": 2571,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/Gson.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/$Gson$Types.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/test/java/com/google/gson/HandleRawEnumTest.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/test/java/com/google/gson/functional/InferenceFromTypeVariableTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985hYtzG2gAoYjlmOTZmNWZlYzdmOWY3MTg1ODlkYTUzNDkwM2IzYWUwYzdlZmRmOA",
                "url": "https://github.com/google/gson/pull/2571/commits/b9f96f5fec7f9f718589da534903b3ae0c7efdf8"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2563,
                "url": "https://github.com/google/gson/issues/2563",
                "title": "Generic deserializer should extract type information from generic boundary",
                "bodyHTML": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.10.1</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">17</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">If field is declared with static type, the type is correctly used during deserialization. If type is generic with boundary, the boundary information is not used, it is presumably deserialized as object, that is usually as map.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">Generic type with boundary should deserialize similarly as static type.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">Boundary type information is ignored</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\tpublic class Foo {\n\t\tprivate final String text;\n\n\t\tpublic Foo(String text) {\n\t\t\tthis.text = text;\n\t\t}\n\t\t\n\t\tpublic String getText() {\n\t\t\treturn text;\n\t\t}\n\t}\n\t\n\tpublic class BarStatic {\n\t\tprivate final Foo foo;\n\n\t\tpublic BarStatic(Foo foo) {\n\t\t\tthis.foo = foo;\n\t\t}\n\n\t\tpublic Foo getFoo() {\n\t\t\treturn foo;\n\t\t}\n\t\t\n\t}\n\n\tpublic class BarDynamic&lt;T extends Foo&gt; {\n\t\tprivate final T foo;\n\n\t\tpublic BarDynamic(T foo) {\n\t\t\tthis.foo = foo;\n\t\t}\n\n\t\tpublic T getFoo() {\n\t\t\treturn foo;\n\t\t}\n\t\t\n\t}\n\n\t@Test\n\tpublic void testSerialize() {\n\t\tGson gson = new GsonBuilder().create();\n\t\t\n\t\tBarStatic barStatic = new BarStatic(new Foo(&quot;foo&quot;));\n\t\tString barJsonStatic = gson.toJson(barStatic);\n\t\t\n\t\tBarDynamic&lt;Foo&gt; barDynamic = new BarDynamic&lt;&gt;(new Foo(&quot;foo&quot;));\n\t\tString barJsonDynamic = gson.toJson(barDynamic);\n\t\t\n\t\tAssert.assertEquals(barJsonStatic, barJsonDynamic);\n\n\t\tBarStatic barStaticDeserialized = gson.fromJson(barJsonStatic, BarStatic.class);\n\t\tAssert.assertEquals(barStaticDeserialized.getFoo().getText(), &quot;foo&quot;);\n\n\t\t// A problem!\n\t\tBarDynamic&lt;Foo&gt; barDeserialized = gson.fromJson(barJsonDynamic, BarDynamic.class);\n\t\t\n\t}\"><pre class=\"notranslate\"><code class=\"notranslate\">\tpublic class Foo {\n\t\tprivate final String text;\n\n\t\tpublic Foo(String text) {\n\t\t\tthis.text = text;\n\t\t}\n\t\t\n\t\tpublic String getText() {\n\t\t\treturn text;\n\t\t}\n\t}\n\t\n\tpublic class BarStatic {\n\t\tprivate final Foo foo;\n\n\t\tpublic BarStatic(Foo foo) {\n\t\t\tthis.foo = foo;\n\t\t}\n\n\t\tpublic Foo getFoo() {\n\t\t\treturn foo;\n\t\t}\n\t\t\n\t}\n\n\tpublic class BarDynamic&lt;T extends Foo&gt; {\n\t\tprivate final T foo;\n\n\t\tpublic BarDynamic(T foo) {\n\t\t\tthis.foo = foo;\n\t\t}\n\n\t\tpublic T getFoo() {\n\t\t\treturn foo;\n\t\t}\n\t\t\n\t}\n\n\t@Test\n\tpublic void testSerialize() {\n\t\tGson gson = new GsonBuilder().create();\n\t\t\n\t\tBarStatic barStatic = new BarStatic(new Foo(\"foo\"));\n\t\tString barJsonStatic = gson.toJson(barStatic);\n\t\t\n\t\tBarDynamic&lt;Foo&gt; barDynamic = new BarDynamic&lt;&gt;(new Foo(\"foo\"));\n\t\tString barJsonDynamic = gson.toJson(barDynamic);\n\t\t\n\t\tAssert.assertEquals(barJsonStatic, barJsonDynamic);\n\n\t\tBarStatic barStaticDeserialized = gson.fromJson(barJsonStatic, BarStatic.class);\n\t\tAssert.assertEquals(barStaticDeserialized.getFoo().getText(), \"foo\");\n\n\t\t// A problem!\n\t\tBarDynamic&lt;Foo&gt; barDeserialized = gson.fromJson(barJsonDynamic, BarDynamic.class);\n\t\t\n\t}\n</code></pre></div>",
                "resourcePath": "/google/gson/issues/2563",
                "createdAt": "2023-12-04T11:19:10Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Another approach to fix 2563",
        "url": "https://github.com/google/gson/pull/2573",
        "resourcePath": "/google/gson/pull/2573",
        "createdAt": "2023-12-11T10:08:31Z",
        "number": 2573,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/Gson.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java"
              }
            },
            {
              "node": {
                "changeType": "ADDED",
                "path": "gson/src/test/java/com/google/gson/functional/InferenceFromTypeVariableTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985hqWg12gAoMWY1ZmE3ZjEyYjdmZTg0YjUwMTIzMzI5NDFjZDVmMzkzY2Q5NjU3Mg",
                "url": "https://github.com/google/gson/pull/2573/commits/1f5fa7f12b7fe84b5012332941cd5f393cd96572"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2563,
                "url": "https://github.com/google/gson/issues/2563",
                "title": "Generic deserializer should extract type information from generic boundary",
                "bodyHTML": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.10.1</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">17</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">If field is declared with static type, the type is correctly used during deserialization. If type is generic with boundary, the boundary information is not used, it is presumably deserialized as object, that is usually as map.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">Generic type with boundary should deserialize similarly as static type.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">Boundary type information is ignored</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\tpublic class Foo {\n\t\tprivate final String text;\n\n\t\tpublic Foo(String text) {\n\t\t\tthis.text = text;\n\t\t}\n\t\t\n\t\tpublic String getText() {\n\t\t\treturn text;\n\t\t}\n\t}\n\t\n\tpublic class BarStatic {\n\t\tprivate final Foo foo;\n\n\t\tpublic BarStatic(Foo foo) {\n\t\t\tthis.foo = foo;\n\t\t}\n\n\t\tpublic Foo getFoo() {\n\t\t\treturn foo;\n\t\t}\n\t\t\n\t}\n\n\tpublic class BarDynamic&lt;T extends Foo&gt; {\n\t\tprivate final T foo;\n\n\t\tpublic BarDynamic(T foo) {\n\t\t\tthis.foo = foo;\n\t\t}\n\n\t\tpublic T getFoo() {\n\t\t\treturn foo;\n\t\t}\n\t\t\n\t}\n\n\t@Test\n\tpublic void testSerialize() {\n\t\tGson gson = new GsonBuilder().create();\n\t\t\n\t\tBarStatic barStatic = new BarStatic(new Foo(&quot;foo&quot;));\n\t\tString barJsonStatic = gson.toJson(barStatic);\n\t\t\n\t\tBarDynamic&lt;Foo&gt; barDynamic = new BarDynamic&lt;&gt;(new Foo(&quot;foo&quot;));\n\t\tString barJsonDynamic = gson.toJson(barDynamic);\n\t\t\n\t\tAssert.assertEquals(barJsonStatic, barJsonDynamic);\n\n\t\tBarStatic barStaticDeserialized = gson.fromJson(barJsonStatic, BarStatic.class);\n\t\tAssert.assertEquals(barStaticDeserialized.getFoo().getText(), &quot;foo&quot;);\n\n\t\t// A problem!\n\t\tBarDynamic&lt;Foo&gt; barDeserialized = gson.fromJson(barJsonDynamic, BarDynamic.class);\n\t\t\n\t}\"><pre class=\"notranslate\"><code class=\"notranslate\">\tpublic class Foo {\n\t\tprivate final String text;\n\n\t\tpublic Foo(String text) {\n\t\t\tthis.text = text;\n\t\t}\n\t\t\n\t\tpublic String getText() {\n\t\t\treturn text;\n\t\t}\n\t}\n\t\n\tpublic class BarStatic {\n\t\tprivate final Foo foo;\n\n\t\tpublic BarStatic(Foo foo) {\n\t\t\tthis.foo = foo;\n\t\t}\n\n\t\tpublic Foo getFoo() {\n\t\t\treturn foo;\n\t\t}\n\t\t\n\t}\n\n\tpublic class BarDynamic&lt;T extends Foo&gt; {\n\t\tprivate final T foo;\n\n\t\tpublic BarDynamic(T foo) {\n\t\t\tthis.foo = foo;\n\t\t}\n\n\t\tpublic T getFoo() {\n\t\t\treturn foo;\n\t\t}\n\t\t\n\t}\n\n\t@Test\n\tpublic void testSerialize() {\n\t\tGson gson = new GsonBuilder().create();\n\t\t\n\t\tBarStatic barStatic = new BarStatic(new Foo(\"foo\"));\n\t\tString barJsonStatic = gson.toJson(barStatic);\n\t\t\n\t\tBarDynamic&lt;Foo&gt; barDynamic = new BarDynamic&lt;&gt;(new Foo(\"foo\"));\n\t\tString barJsonDynamic = gson.toJson(barDynamic);\n\t\t\n\t\tAssert.assertEquals(barJsonStatic, barJsonDynamic);\n\n\t\tBarStatic barStaticDeserialized = gson.fromJson(barJsonStatic, BarStatic.class);\n\t\tAssert.assertEquals(barStaticDeserialized.getFoo().getText(), \"foo\");\n\n\t\t// A problem!\n\t\tBarDynamic&lt;Foo&gt; barDeserialized = gson.fromJson(barJsonDynamic, BarDynamic.class);\n\t\t\n\t}\n</code></pre></div>",
                "resourcePath": "/google/gson/issues/2563",
                "createdAt": "2023-12-04T11:19:10Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Improve location information for `JsonDeserializer` exceptions",
        "url": "https://github.com/google/gson/pull/2609",
        "resourcePath": "/google/gson/pull/2609",
        "createdAt": "2024-02-03T17:01:41Z",
        "number": 2609,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985l69ky2gAoMTNmMjM0NGEzMzcwMTdhODJmODVmNDY4MTBjZTVjMjg0NmFjMzRiMQ",
                "url": "https://github.com/google/gson/pull/2609/commits/13f2344a337017a82f85f46810ce5c2846ac34b1"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1135,
                "url": "https://github.com/google/gson/issues/1135",
                "title": "Path $ is not provided when there is JsonSyntaxException with Custom Deserializer",
                "bodyHTML": "<p dir=\"auto\">With the latest version of the Gson library I do get detailed path to the json node that is causing the error.<br>\nHowever, this path $ information seems be absent when there is JsonSyntaxException in the custom deserializer</p>\n<p dir=\"auto\">Following is the close representation of the deserializer i have implemented</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public class CustDeserializer implements JsonDeserializer&lt;Wrapper&gt; {\n\n    Map&lt;String, Type&gt; mapType;\n\n    public CustDeserializer() {\n\n        mapType = new HashMap&lt;&gt;();\n        mapType.put(&quot;a&quot;, A.class);\n        mapType.put(&quot;b&quot;, B.class);\n        mapType.put(&quot;c&quot;, C.class);\n\n    }\n\n    @Override\n    public Wrapper deserialize(JsonElement jsonElement,\n                                           Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {\n\n        JsonObject sJsonObj = jsonElement.getAsJsonObject();\n        String sTypeValue = sJsonObj.getAsJsonPrimitive(&quot;type&quot;).getAsString();\n        JsonElement sData = sJsonObj.get(&quot;data&quot;);\n\n        Type sType = mapType.get(sTypeValue);\n        if(sType == null || sData.isJsonNull()) {\n            return null;\n        }        \n        SType sTypeEnum = jsonDeserializationContext.deserialize(sJsonObj.get(&quot;sType&quot;), SType.class);\n        Object sDataObj = jsonDeserializationContext.deserialize(sData, sType);\n        return new Wrapper(sTypeEnum, sDataObj);\n    }\n}\n\n//Exception thrown when the Json string doesnt match with the object being constructed\njava.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at path $\n                                                            com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at path $\"><pre class=\"notranslate\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">CustDeserializer</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">JsonDeserializer</span>&lt;<span class=\"pl-smi\">Wrapper</span>&gt; {\n\n    <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Type</span>&gt; <span class=\"pl-s1\">mapType</span>;\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">CustDeserializer</span>() {\n\n        <span class=\"pl-s1\">mapType</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;&gt;();\n        <span class=\"pl-s1\">mapType</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"a\"</span>, <span class=\"pl-smi\">A</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-s1\">mapType</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"b\"</span>, <span class=\"pl-smi\">B</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-s1\">mapType</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"c\"</span>, <span class=\"pl-smi\">C</span>.<span class=\"pl-k\">class</span>);\n\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Wrapper</span> <span class=\"pl-en\">deserialize</span>(<span class=\"pl-smi\">JsonElement</span> <span class=\"pl-s1\">jsonElement</span>,\n                                           <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span>, <span class=\"pl-smi\">JsonDeserializationContext</span> <span class=\"pl-s1\">jsonDeserializationContext</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonParseException</span> {\n\n        <span class=\"pl-smi\">JsonObject</span> <span class=\"pl-s1\">sJsonObj</span> = <span class=\"pl-s1\">jsonElement</span>.<span class=\"pl-en\">getAsJsonObject</span>();\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">sTypeValue</span> = <span class=\"pl-s1\">sJsonObj</span>.<span class=\"pl-en\">getAsJsonPrimitive</span>(<span class=\"pl-s\">\"type\"</span>).<span class=\"pl-en\">getAsString</span>();\n        <span class=\"pl-smi\">JsonElement</span> <span class=\"pl-s1\">sData</span> = <span class=\"pl-s1\">sJsonObj</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"data\"</span>);\n\n        <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">sType</span> = <span class=\"pl-s1\">mapType</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s1\">sTypeValue</span>);\n        <span class=\"pl-k\">if</span>(<span class=\"pl-s1\">sType</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-s1\">sData</span>.<span class=\"pl-en\">isJsonNull</span>()) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;\n        }        \n        <span class=\"pl-smi\">SType</span> <span class=\"pl-s1\">sTypeEnum</span> = <span class=\"pl-s1\">jsonDeserializationContext</span>.<span class=\"pl-en\">deserialize</span>(<span class=\"pl-s1\">sJsonObj</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"sType\"</span>), <span class=\"pl-smi\">SType</span>.<span class=\"pl-k\">class</span>);\n        <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">sDataObj</span> = <span class=\"pl-s1\">jsonDeserializationContext</span>.<span class=\"pl-en\">deserialize</span>(<span class=\"pl-s1\">sData</span>, <span class=\"pl-s1\">sType</span>);\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Wrapper</span>(<span class=\"pl-s1\">sTypeEnum</span>, <span class=\"pl-s1\">sDataObj</span>);\n    }\n}\n\n<span class=\"pl-c\">//Exception thrown when the Json string doesnt match with the object being constructed</span>\n<span class=\"pl-smi\">java</span>.<span class=\"pl-smi\">lang</span>.<span class=\"pl-smi\">IllegalStateException</span>: <span class=\"pl-s1\">Expected</span> <span class=\"pl-c1\">BEGIN_ARRAY</span> <span class=\"pl-s1\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-c1\">BEGIN_OBJECT</span> <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">path</span> <span class=\"pl-s1\">$</span>\n                                                            <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">google</span>.<span class=\"pl-s1\">gson</span>.<span class=\"pl-s1\">JsonSyntaxException</span>: <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">IllegalStateException</span>: <span class=\"pl-s1\">Expected</span> <span class=\"pl-c1\">BEGIN_ARRAY</span> <span class=\"pl-s1\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-c1\">BEGIN_OBJECT</span> <span class=\"pl-s1\">at</span> <span class=\"pl-s1\">path</span> <span class=\"pl-s1\">$</span></pre></div>\n<p dir=\"auto\">Gson Version: 2.8.+</p>\n<p dir=\"auto\">Thanks in advance</p>",
                "resourcePath": "/google/gson/issues/1135",
                "createdAt": "2017-08-05T15:19:29Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Improve formatting of README maintenance note",
        "url": "https://github.com/google/gson/pull/2618",
        "resourcePath": "/google/gson/pull/2618",
        "createdAt": "2024-02-12T22:49:23Z",
        "number": 2618,
        "mergeCommit": {
          "oid": "2f48cc76cd2da6044ebdb7d1479c086d70786473",
          "message": "Improve formatting of README maintenance note (#2618)\n\nUses GitHub-specific Markdown syntax for displaying a \"Note\" section. See\r\nhttps://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#alerts",
          "commitUrl": "https://github.com/google/gson/commit/2f48cc76cd2da6044ebdb7d1479c086d70786473",
          "parents": {
            "nodes": [
              {
                "oid": "5c9fb1b39641a08b3a6881ebe1b2e8286f2884f0",
                "message": "Bump actions/upload-artifact from 4.3.0 to 4.3.1 (#2616)\n\nBumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 4.3.0 to 4.3.1.\r\n- [Release notes](https://github.com/actions/upload-artifact/releases)\r\n- [Commits](https://github.com/actions/upload-artifact/compare/26f96dfa697d77e81fd5907df203aa23a56210a8...5d5d22a31266ced268874388b861e4b58bb5c2f3)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: actions/upload-artifact\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "README.md"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985msF5F2gAoYTlkYzM4YzMwODZlMTE1YzFlZmE0NjgzZDEwYmQyNmJjNDIwNTIzNA",
                "url": "https://github.com/google/gson/pull/2618/commits/a9dc38c3086e115c1efa4683d10bd26bc4205234"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2617,
                "url": "https://github.com/google/gson/issues/2617",
                "title": "Possible typo at gson readme.md in main branch",
                "bodyHTML": "<h1 dir=\"auto\">Gson version</h1>\n\n<p dir=\"auto\">No</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n\n<p dir=\"auto\">No</p>\n<h1 dir=\"auto\">Used tools</h1>\n\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Maven; version:</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Gradle; version:</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ProGuard (attach the configuration file please); version:</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Nada</li>\n</ul>\n<h1 dir=\"auto\">Description</h1>\n\n<p dir=\"auto\">Gson main branch, readme.md third paragraph, there is an <code class=\"notranslate\">i</code> in the first letter</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n\n<p dir=\"auto\">First letter of third paragraph in readme.md having any sense at all</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n\n<p dir=\"auto\">First letter of third paragraph did not make any sense ;-;</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n\n\n<ol dir=\"auto\">\n<li>Open <a href=\"https://github.com/google/gson\">gson main branch</a></li>\n<li>Read readme.md file</li>\n<li>Look at first letter of third paragraph</li>\n</ol>\n<h1 dir=\"auto\">Exception stack trace</h1>\n\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Nop\"><pre class=\"notranslate\"><code class=\"notranslate\">Nop\n</code></pre></div>",
                "resourcePath": "/google/gson/issues/2617",
                "createdAt": "2024-02-12T22:10:37Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "bug"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add examples to the `JsonParser` documentation",
        "url": "https://github.com/google/gson/pull/2647",
        "resourcePath": "/google/gson/pull/2647",
        "createdAt": "2024-03-17T16:37:27Z",
        "number": 2647,
        "mergeCommit": {
          "oid": "20eea1e0f3b22c4a9fedad6852aa8301939b8c75",
          "message": "Add examples to the `JsonParser` documentation (#2647)\n\n* Add examples to the `JsonParser` documentation  (#1972)\r\n\r\n* Add examples of the three parse functions of `JsonParser`\r\n\r\n* Improve `JsonReader` documentation (#2647)\r\n\r\n* Change the filename parsed by`FileReader` and include the charset.\r\n\r\n* Remove unnecessary catch clauses.\r\n\r\n* Adjust the documentation format.\r\n\r\n* Include information about the parsing mode.",
          "commitUrl": "https://github.com/google/gson/commit/20eea1e0f3b22c4a9fedad6852aa8301939b8c75",
          "parents": {
            "nodes": [
              {
                "oid": "04eb52d11c40ce2830f2f38ffe604b32a7b16aff",
                "message": "Split `testWriteHtmlSafe` into Two Separate Test Cases for Improved Test Granularity (#2653)\n\n* Split testWriteHtmlSafe into two test case to improve the Test Granularity\r\n\r\n* Style violations fixed"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/JsonParser.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985p3WwU2gAoZDJhZTEwZTVmNzM2MTgxMDJkOTc5YWE2OGJmOTk3NmUzMzEwMDcwZg",
                "url": "https://github.com/google/gson/pull/2647/commits/d2ae10e5f73618102d979aa68bf9976e3310070f"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 1972,
                "url": "https://github.com/google/gson/issues/1972",
                "title": "No example in JsonParser/JsonElement specifications",
                "bodyHTML": "<p dir=\"auto\">I never used Gson, but it seems <code class=\"notranslate\">JsonParser</code> and <code class=\"notranslate\">JsonElement</code> would best mimic how <code class=\"notranslate\">org.json</code> works. It would be clearer if the specifications for at least one of these could include an example demonstrating their use though.</p>\n<p dir=\"auto\">An example of JsonParser is available at <a href=\"https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java\">https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java</a></p>",
                "resourcePath": "/google/gson/issues/1972",
                "createdAt": "2021-09-23T19:43:15Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Add Assertions to Validate `testWriterCloseIsIdempotent` Test for JsonWriter's Idempotency",
        "url": "https://github.com/google/gson/pull/2652",
        "resourcePath": "/google/gson/pull/2652",
        "createdAt": "2024-03-20T18:11:24Z",
        "number": 2652,
        "mergeCommit": {
          "oid": "8bc62cb85b0f876cfe160f77390c18adcd78ec4a",
          "message": "add value checking for the testWriterCloseIsIdempotent test case (#2652)",
          "commitUrl": "https://github.com/google/gson/commit/8bc62cb85b0f876cfe160f77390c18adcd78ec4a",
          "parents": {
            "nodes": [
              {
                "oid": "342d60015ffb2738820d4e49423dbb884533bae8",
                "message": "Support strict mode for `JsonParser` (#2648)\n\n* Support strict mode for `JsonParser`\r\n\r\n* Move comments"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985qQmmr2gAoNGE1YjhlZDQ5ODFkNTc5ZWIyNGEwMjZkYzU0MzM2OGYzNzViMTIyMg",
                "url": "https://github.com/google/gson/pull/2652/commits/4a5b8ed4981d579eb24a026dc543368f375b1222"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2650,
                "url": "https://github.com/google/gson/issues/2650",
                "title": "Assertion is Missed to Validate `testWriterCloseIsIdempotent` Test for JsonWriter's Idempotency",
                "bodyHTML": "<h1 dir=\"auto\">Problem solved by the feature</h1>\n<p dir=\"auto\">Hi, I'm relatively new to the project and while going through the unit tests for the JsonWriter class, I noticed something in the <a href=\"https://github.com/google/gson/blob/342d60015ffb2738820d4e49423dbb884533bae8/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java#L966-L974\"><code class=\"notranslate\">testWriterCloseIsIdempotent</code></a> method that I wanted to discuss. This test checks if calling the close method on JsonWriter multiple times doesn't cause any issues, indicating the method is idempotent. Currently, the test doesn't explicitly verify that the output remains the same after the second close call, which I think might be an area we could improve on for clarity and completeness.</p>\n<h2 dir=\"auto\">Current Implementation:</h2>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@Test\npublic void testWriterCloseIsIdempotent() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    writer.beginArray();\n    writer.endArray();\n    writer.close();\n    writer.close(); // Second call to close() to test idempotency\n}\"><pre class=\"notranslate\"><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testWriterCloseIsIdempotent</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">IOException</span> {\n    <span class=\"pl-smi\">StringWriter</span> <span class=\"pl-s1\">stringWriter</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-smi\">JsonWriter</span> <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">stringWriter</span>);\n    <span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">beginArray</span>();\n    <span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">endArray</span>();\n    <span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">close</span>();\n    <span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">close</span>(); <span class=\"pl-c\">// Second call to close() to test idempotency</span>\n}</pre></div>\n<h2 dir=\"auto\">Issue and Solution</h2>\n<p dir=\"auto\">The test as is runs smoothly, which suggests that the close method behaves as expected. However, without explicit assertions to check the StringWriter's content after the second close, it feels like we might be missing an opportunity to confirm the behavior explicitly.</p>\n<p dir=\"auto\">Would it be alright if we consider adding a couple of assertions to this test? I was thinking something along the lines of verifying that the StringWriter's content does not change after the second close call. This way, we could more clearly demonstrate the idempotency of the close method.</p>\n<h1 dir=\"auto\">Feature description</h1>\n\n<p dir=\"auto\">I would like to suggest adding the Assertions to the test case as following:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@Test\npublic void testWriterCloseIsIdempotent() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter writer = new JsonWriter(stringWriter);\n    writer.beginArray();\n    writer.endArray();\n    writer.close();\n    \n    // Verify output after first close\n    final String expectedOutput = &quot;[]&quot;;\n    assertEquals(expectedOutput, stringWriter.toString());\n    \n    writer.close(); // Second call to close()\n    \n    // Verify output remains unchanged after second close, confirming idempotency\n    assertEquals(expectedOutput, stringWriter.toString());\n}\"><pre class=\"notranslate\"><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testWriterCloseIsIdempotent</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">IOException</span> {\n    <span class=\"pl-smi\">StringWriter</span> <span class=\"pl-s1\">stringWriter</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-smi\">JsonWriter</span> <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">stringWriter</span>);\n    <span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">beginArray</span>();\n    <span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">endArray</span>();\n    <span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">close</span>();\n    \n    <span class=\"pl-c\">// Verify output after first close</span>\n    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">expectedOutput</span> = <span class=\"pl-s\">\"[]\"</span>;\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">expectedOutput</span>, <span class=\"pl-s1\">stringWriter</span>.<span class=\"pl-en\">toString</span>());\n    \n    <span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">close</span>(); <span class=\"pl-c\">// Second call to close()</span>\n    \n    <span class=\"pl-c\">// Verify output remains unchanged after second close, confirming idempotency</span>\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">expectedOutput</span>, <span class=\"pl-s1\">stringWriter</span>.<span class=\"pl-en\">toString</span>());\n}</pre></div>\n<p dir=\"auto\">And if adding the assert is helpful, I would be more than happy to try submit a PR. Thank you for considering my suggestion!</p>",
                "resourcePath": "/google/gson/issues/2650",
                "createdAt": "2024-03-20T03:56:02Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Split `testWriteHtmlSafe` into Two Separate Test Cases for Improved Test Granularity",
        "url": "https://github.com/google/gson/pull/2653",
        "resourcePath": "/google/gson/pull/2653",
        "createdAt": "2024-03-20T18:19:09Z",
        "number": 2653,
        "mergeCommit": {
          "oid": "04eb52d11c40ce2830f2f38ffe604b32a7b16aff",
          "message": "Split `testWriteHtmlSafe` into Two Separate Test Cases for Improved Test Granularity (#2653)\n\n* Split testWriteHtmlSafe into two test case to improve the Test Granularity\r\n\r\n* Style violations fixed",
          "commitUrl": "https://github.com/google/gson/commit/04eb52d11c40ce2830f2f38ffe604b32a7b16aff",
          "parents": {
            "nodes": [
              {
                "oid": "8bc62cb85b0f876cfe160f77390c18adcd78ec4a",
                "message": "add value checking for the testWriterCloseIsIdempotent test case (#2652)"
              }
            ]
          }
        },
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/MixedStreamTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985qQqE_2gAoN2EyM2MxYmNkZjM3YTNlYzM3YjkyMzRmYjdkZDgzZmI3ZmFkODEzZA",
                "url": "https://github.com/google/gson/pull/2653/commits/7a23c1bcdf37a3ec37b9234fb7dd83fb7fad813d"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 2651,
                "url": "https://github.com/google/gson/issues/2651",
                "title": "Split `testWriteHtmlSafe` into Two Separate Test Cases for Improved Test Granularity",
                "bodyHTML": "<h1 dir=\"auto\">Problem solved by the feature</h1>\n\n<p dir=\"auto\">I would like to propose a minor improvement for the <a href=\"https://github.com/google/gson/blob/342d60015ffb2738820d4e49423dbb884533bae8/gson/src/test/java/com/google/gson/MixedStreamTest.java#L199-L212\"><code class=\"notranslate\">MixedStreamTest.testWriteHtmlSafe</code></a> test case.</p>\n<p dir=\"auto\">Currently, the <a href=\"https://github.com/google/gson/blob/342d60015ffb2738820d4e49423dbb884533bae8/gson/src/test/java/com/google/gson/MixedStreamTest.java#L199-L212\"><code class=\"notranslate\">MixedStreamTest.testWriteHtmlSafe</code></a> unit test in Gson's suite checks both the behavior of Gson with HTML escaping enabled and disabled within a single test method.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void testWriteHtmlSafe() {\n    List&lt;String&gt; contents = Arrays.asList(&quot;&lt;&quot;, &quot;&gt;&quot;, &quot;&amp;&quot;, &quot;=&quot;, &quot;'&quot;);\n    Type type = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new Gson().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString())\n        .isEqualTo(&quot;[\\&quot;\\\\u003c\\&quot;,\\&quot;\\\\u003e\\&quot;,\\&quot;\\\\u0026\\&quot;,\\&quot;\\\\u003d\\&quot;,\\&quot;\\\\u0027\\&quot;]&quot;);\n\n    writer = new StringWriter();\n    new GsonBuilder().disableHtmlEscaping().create().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(&quot;[\\&quot;&lt;\\&quot;,\\&quot;&gt;\\&quot;,\\&quot;&amp;\\&quot;,\\&quot;=\\&quot;,\\&quot;'\\&quot;]&quot;);\n  }\"><pre class=\"notranslate\">  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testWriteHtmlSafe</span>() {\n    <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">contents</span> = <span class=\"pl-smi\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-s\">\"&lt;\"</span>, <span class=\"pl-s\">\"&gt;\"</span>, <span class=\"pl-s\">\"&amp;\"</span>, <span class=\"pl-s\">\"=\"</span>, <span class=\"pl-s\">\"'\"</span>);\n    <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeToken</span>&lt;<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt;&gt;() {}.<span class=\"pl-en\">getType</span>();\n\n    <span class=\"pl-smi\">StringWriter</span> <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">contents</span>, <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">writer</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">toString</span>())\n        .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"[<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003c<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003e<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u0026<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003d<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u0027<span class=\"pl-cce\">\\\"</span>]\"</span>);\n\n    <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>().<span class=\"pl-en\">disableHtmlEscaping</span>().<span class=\"pl-en\">create</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">contents</span>, <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">writer</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">toString</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"[<span class=\"pl-cce\">\\\"</span>&lt;<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>&gt;<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>&amp;<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>=<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>'<span class=\"pl-cce\">\\\"</span>]\"</span>);\n  }</pre></div>\n<p dir=\"auto\">This approach, while effective, combines two distinct scenarios into one test. When the first assertion fails, it prevents the subsequent assertions from running, which can obscure the presence of multiple issues under different scenarios. This can also make pinpointing the exact cause of failures slightly more challenging and may slightly increase the time taken to run the test due to combined scenarios</p>\n<h1 dir=\"auto\">Feature description</h1>\n\n<p dir=\"auto\">I propose splitting the testWriteHtmlSafe test case into two separate tests: <code class=\"notranslate\">testWriteHtmlSafeWithEscaping</code> for testing Gson's behavior with HTML escaping enabled and <code class=\"notranslate\">testWriteHtmlSafeWithoutEscaping</code> with it disabled.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@Test\npublic void testWriteHtmlSafeWithEscaping() {\n    List&lt;String&gt; contents = Arrays.asList(&quot;&lt;&quot;, &quot;&gt;&quot;, &quot;&amp;&quot;, &quot;=&quot;, &quot;'&quot;);\n    Type type = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new Gson().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(&quot;[\\&quot;\\\\u003c\\&quot;,\\&quot;\\\\u003e\\&quot;,\\&quot;\\\\u0026\\&quot;,\\&quot;\\\\u003d\\&quot;,\\&quot;\\\\u0027\\&quot;]&quot;);\n}\n\n@Test\npublic void testWriteHtmlSafeWithoutEscaping() {\n    List&lt;String&gt; contents = Arrays.asList(&quot;&lt;&quot;, &quot;&gt;&quot;, &quot;&amp;&quot;, &quot;=&quot;, &quot;'&quot;);\n    Type type = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n\n    StringWriter writer = new StringWriter();\n    new GsonBuilder().disableHtmlEscaping().create().toJson(contents, type, new JsonWriter(writer));\n    assertThat(writer.toString()).isEqualTo(&quot;[\\&quot;&lt;\\&quot;,\\&quot;&gt;\\&quot;,\\&quot;&amp;\\&quot;,\\&quot;=\\&quot;,\\&quot;'\\&quot;]&quot;);\n}\n\"><pre class=\"notranslate\"><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testWriteHtmlSafeWithEscaping</span>() {\n    <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">contents</span> = <span class=\"pl-smi\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-s\">\"&lt;\"</span>, <span class=\"pl-s\">\"&gt;\"</span>, <span class=\"pl-s\">\"&amp;\"</span>, <span class=\"pl-s\">\"=\"</span>, <span class=\"pl-s\">\"'\"</span>);\n    <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeToken</span>&lt;<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt;&gt;() {}.<span class=\"pl-en\">getType</span>();\n\n    <span class=\"pl-smi\">StringWriter</span> <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">contents</span>, <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">writer</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">toString</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"[<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003c<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003e<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u0026<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u003d<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span><span class=\"pl-cce\">\\\\</span>u0027<span class=\"pl-cce\">\\\"</span>]\"</span>);\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testWriteHtmlSafeWithoutEscaping</span>() {\n    <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">contents</span> = <span class=\"pl-smi\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-s\">\"&lt;\"</span>, <span class=\"pl-s\">\"&gt;\"</span>, <span class=\"pl-s\">\"&amp;\"</span>, <span class=\"pl-s\">\"=\"</span>, <span class=\"pl-s\">\"'\"</span>);\n    <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeToken</span>&lt;<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt;&gt;() {}.<span class=\"pl-en\">getType</span>();\n\n    <span class=\"pl-smi\">StringWriter</span> <span class=\"pl-s1\">writer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>().<span class=\"pl-en\">disableHtmlEscaping</span>().<span class=\"pl-en\">create</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">contents</span>, <span class=\"pl-s1\">type</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">writer</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">writer</span>.<span class=\"pl-en\">toString</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"[<span class=\"pl-cce\">\\\"</span>&lt;<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>&gt;<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>&amp;<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>=<span class=\"pl-cce\">\\\"</span>,<span class=\"pl-cce\">\\\"</span>'<span class=\"pl-cce\">\\\"</span>]\"</span>);\n}</pre></div>\n<p dir=\"auto\">This change will enhance the granularity of our testing by isolating each scenario into its own test. Such isolation ensures that a failure in one scenario does not prevent the execution of the other, allowing for clearer identification of issues across different scenarios.</p>\n<p dir=\"auto\">Additionally, having more granular tests could potentially reduce individual test running times, making the testing process more efficient, especially when debugging and running tests repeatedly during development.</p>\n<h1 dir=\"auto\">Alternatives / workarounds</h1>\n\n<hr>\n<p dir=\"auto\">Hope this suggestion is helpful, and if yes, I am more than happy to submit a PR to implement the changes.</p>",
                "resourcePath": "/google/gson/issues/2651",
                "createdAt": "2024-03-20T04:46:16Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "repository": {
      "pullRequest": {
        "title": "Guarantee that `JsonElement.toString()` produces JSON",
        "url": "https://github.com/google/gson/pull/2659",
        "resourcePath": "/google/gson/pull/2659",
        "createdAt": "2024-03-29T11:53:24Z",
        "number": 2659,
        "mergeCommit": null,
        "potentialMergeCommit": null,
        "files": {
          "edges": [
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/JsonArray.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/JsonElement.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/JsonObject.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/JsonParser.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/main/java/com/google/gson/JsonPrimitive.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/JsonArrayTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/JsonNullTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/JsonObjectTest.java"
              }
            },
            {
              "node": {
                "changeType": "MODIFIED",
                "path": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java"
              }
            }
          ]
        },
        "commits": {
          "edges": [
            {
              "node": {
                "id": "PURC_lADOAfCA985rKMSo2gAoNzkxZTBjODg4MTZkYzVkOWNiNDZjMjc1MzNkMjBkMzgyZmU5OTQxOQ",
                "url": "https://github.com/google/gson/pull/2659/commits/791e0c88816dc5d9cb46c27533d20d382fe99419"
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "edges": [
            {
              "node": {
                "number": 591,
                "url": "https://github.com/google/gson/issues/591",
                "title": "JsonElement.toString() output is unspecified",
                "bodyHTML": "<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"JsonElement.toString() Javadoc:\n\n  /**\n   * Returns a String representation of this element.\n   */\n\nThe actual format of JsonElement.toString() is unspecified, but some \napplications would break if the output format were changed to something that \nisn't a valid JSON representation of that object.\n\nSuggested fix:\n\nTo me it seems reasonable to expect toString() to produce valid JSON, not just \nsome arbitrary programmer-friendly string representation.\n\nThe toString() method should state that the return value is a valid JSON \nrepresentation of the object, and that details such as indentation are left \nunspecified. \n\nSubclasses like JsonArray and JsonObject should override toString() just to \nprovide improved documentation with example return values.\"><pre class=\"notranslate\"><code class=\"notranslate\">JsonElement.toString() Javadoc:\n\n  /**\n   * Returns a String representation of this element.\n   */\n\nThe actual format of JsonElement.toString() is unspecified, but some \napplications would break if the output format were changed to something that \nisn't a valid JSON representation of that object.\n\nSuggested fix:\n\nTo me it seems reasonable to expect toString() to produce valid JSON, not just \nsome arbitrary programmer-friendly string representation.\n\nThe toString() method should state that the return value is a valid JSON \nrepresentation of the object, and that details such as indentation are left \nunspecified. \n\nSubclasses like JsonArray and JsonObject should override toString() just to \nprovide improved documentation with example return values.\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">hussdl</code> on 22 Aug 2014 at 10:09</p>",
                "resourcePath": "/google/gson/issues/591",
                "createdAt": "2015-03-19T18:34:20Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "number": 1439,
                "url": "https://github.com/google/gson/issues/1439",
                "title": "About the difference between toString() and getAsString() in JsonPrimitive",
                "bodyHTML": "<p dir=\"auto\">Is the code output reasonable?</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def main(args: Array[String]): Unit = {\n    val e = new JsonPrimitive(&quot;zz&quot;)\n    println(e)\n    println(e.getAsString)\n    println(new JsonPrimitive(e.toString))\n    println(new JsonPrimitive(new JsonPrimitive(e.toString).toString))\n  }\nresult :\n&quot;zz&quot;\nzz\n&quot;\\&quot;zz\\&quot;&quot;\n&quot;\\&quot;\\\\\\&quot;zz\\\\\\&quot;\\&quot;&quot;\"><pre class=\"notranslate\"><code class=\"notranslate\">def main(args: Array[String]): Unit = {\n    val e = new JsonPrimitive(\"zz\")\n    println(e)\n    println(e.getAsString)\n    println(new JsonPrimitive(e.toString))\n    println(new JsonPrimitive(new JsonPrimitive(e.toString).toString))\n  }\nresult :\n\"zz\"\nzz\n\"\\\"zz\\\"\"\n\"\\\"\\\\\\\"zz\\\\\\\"\\\"\"\n</code></pre></div>\n<p dir=\"auto\">I think the com.google.gson.streamJsonWrite.string(value:String)  is fine as a child element, but it's worth pondering when we use toString() for an independent JsonPrimitive object.</p>",
                "resourcePath": "/google/gson/issues/1439",
                "createdAt": "2018-11-30T11:05:46Z",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "enhancement"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  }
]