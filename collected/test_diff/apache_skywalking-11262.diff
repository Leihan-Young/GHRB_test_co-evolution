diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatterTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatterTest.java
index d22cf0190d..b1a4622880 100644
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatterTest.java
+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatterTest.java
@@ -18,7 +18,6 @@
 
 package org.apache.skywalking.oap.server.core.alarm.provider;
 
-import org.apache.skywalking.oap.server.core.alarm.MetaInAlarm;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -26,38 +25,7 @@ public class AlarmMessageFormatterTest {
     @Test
     public void testStringFormatWithNoArg() {
         AlarmMessageFormatter formatter = new AlarmMessageFormatter("abc words {sdf");
-        String message = formatter.format(new MetaInAlarm() {
-
-            @Override
-            public String getScope() {
-                return "SERVICE";
-            }
-
-            @Override
-            public int getScopeId() {
-                return -1;
-            }
-
-            @Override
-            public String getName() {
-                return null;
-            }
-
-            @Override
-            public String getMetricsName() {
-                return null;
-            }
-
-            @Override
-            public String getId0() {
-                return "";
-            }
-
-            @Override
-            public String getId1() {
-                return "";
-            }
-        });
+        String message = formatter.format(new AlarmEntity("SERVICE", -1, null, "", ""));
 
         Assertions.assertEquals("abc words {sdf", message);
     }
@@ -65,38 +33,7 @@ public class AlarmMessageFormatterTest {
     @Test
     public void testStringFormatWithArg() {
         AlarmMessageFormatter formatter = new AlarmMessageFormatter("abc} words {name} - {id} .. {");
-        String message = formatter.format(new MetaInAlarm() {
-
-            @Override
-            public String getScope() {
-                return "SERVICE";
-            }
-
-            @Override
-            public int getScopeId() {
-                return -1;
-            }
-
-            @Override
-            public String getName() {
-                return "service";
-            }
-
-            @Override
-            public String getMetricsName() {
-                return null;
-            }
-
-            @Override
-            public String getId0() {
-                return "1290";
-            }
-
-            @Override
-            public String getId1() {
-                return "";
-            }
-        });
+        String message = formatter.format(new AlarmEntity("SERVICE", -1, "service", "1290", ""));
         Assertions.assertEquals("abc} words service - 1290 .. {", message);
     }
 }
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProviderTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProviderTest.java
index 7b85106aec..f63d6b167a 100644
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProviderTest.java
+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProviderTest.java
@@ -23,6 +23,10 @@ import java.util.ServiceLoader;
 import org.apache.skywalking.oap.server.configuration.api.ConfigurationModule;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.alarm.AlarmModule;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
+import org.apache.skywalking.oap.server.core.query.sql.Function;
+import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;
 import org.apache.skywalking.oap.server.library.module.ModuleProvider;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -49,6 +53,10 @@ public class AlarmModuleProviderTest {
         moduleProvider.newConfigCreator();
 
         moduleProvider.prepare();
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "service_percent", "testColumn", Column.ValueDataType.COMMON_VALUE, Function.Avg, 0, Scope.Service.getScopeId());
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "endpoint_percent", "testColumn", Column.ValueDataType.COMMON_VALUE, Function.Avg, 0, Scope.Endpoint.getScopeId());
     }
 
     @Test
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcherTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcherTest.java
index bc0acc0d0b..ab9d6c8a1c 100644
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcherTest.java
+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcherTest.java
@@ -19,6 +19,10 @@
 package org.apache.skywalking.oap.server.core.alarm.provider;
 
 import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
+import org.apache.skywalking.oap.server.core.query.sql.Function;
+import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
 import org.apache.skywalking.oap.server.library.util.ResourceUtils;
 import org.junit.jupiter.api.BeforeEach;
@@ -43,34 +47,13 @@ public class AlarmRulesWatcherTest {
     @Spy
     private AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(new Rules(), null);
 
-    private AlarmRule.AlarmRuleBuilder rulePrototypeBuilder = AlarmRule.builder()
-                                                                       .alarmRuleName("name1")
-                                                                       .count(1)
-                                                                       .includeNames(new ArrayList<String>() {
-                                                                           {
-                                                                               add("1");
-                                                                               add("2");
-                                                                           }
-                                                                       })
-                                                                       .excludeNames(new ArrayList<String>() {
-                                                                           {
-                                                                               add("3");
-                                                                               add("4");
-                                                                           }
-                                                                       })
-                                                                       .message("test")
-                                                                       .metricsName("metrics1")
-                                                                       .op(">")
-                                                                       .period(1)
-                                                                       .silencePeriod(2)
-                                                                       .tags(new HashMap<String, String>() {{
-                                                                           put("key", "value");
-                                                                       }})
-                                                                       .threshold("2");
-
     @BeforeEach
     public void setUp() {
         MockitoAnnotations.initMocks(this);
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "service_percent", "testColumn", Column.ValueDataType.COMMON_VALUE, Function.Avg, 0, Scope.Service.getScopeId());
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "endpoint_percent", "testColumn", Column.ValueDataType.COMMON_VALUE, Function.Avg, 0, Scope.Endpoint.getScopeId());
     }
 
     @Test
@@ -83,11 +66,11 @@ public class AlarmRulesWatcherTest {
 
         alarmRulesWatcher.notify(new ConfigChangeWatcher.ConfigChangeEvent(new String(chars, 0, length), ConfigChangeWatcher.EventType.MODIFY));
 
-        assertEquals(3, alarmRulesWatcher.getRules().size());
+        assertEquals(5, alarmRulesWatcher.getRules().size());
         assertEquals(2, alarmRulesWatcher.getWebHooks().get(AlarmHooksType.webhook.name() + ".default").getUrls().size());
         assertNotNull(alarmRulesWatcher.getGrpchookSetting());
         assertEquals(9888, alarmRulesWatcher.getGrpchookSetting().get(AlarmHooksType.gRPC.name() + ".default").getTargetPort());
-        assertEquals(2, alarmRulesWatcher.getRunningContext().size());
+        assertEquals(4, alarmRulesWatcher.getRunningContext().size());
         assertNotNull(alarmRulesWatcher.getDingtalkSettings());
         assertNotNull(alarmRulesWatcher.getWechatSettings());
         assertEquals(2, alarmRulesWatcher.getSlackSettings().size());
@@ -111,82 +94,100 @@ public class AlarmRulesWatcherTest {
 
     @Test
     public void shouldKeepExistedRunningRuleIfAlarmRuleExists() {
-        AlarmRule.AlarmRuleBuilder ruleBuilder = rulePrototypeBuilder;
-
-        AlarmRule rule = ruleBuilder.build();
+        AlarmRule rule = newAlarmRule("name1", "avg(service_percent) < 80");
         Rules rules = new Rules();
         rules.getRules().add(rule);
 
         alarmRulesWatcher = spy(new AlarmRulesWatcher(rules, null));
         assertEquals(1, alarmRulesWatcher.getRunningContext().size());
-        assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getMetricsName()).size());
+        assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());
 
-        RunningRule runningRule = alarmRulesWatcher.getRunningContext().get(rule.getMetricsName()).get(0);
+        RunningRule runningRule = alarmRulesWatcher.getRunningContext().get(rule.getExpression()).get(0);
 
         Rules updatedRules = new Rules();
-        updatedRules.getRules().addAll(Arrays.asList(rule, ruleBuilder.alarmRuleName("name2").build()));
+        updatedRules.getRules().addAll(Arrays.asList(rule, newAlarmRule("name2", "avg(service_percent) < 80")));
 
         alarmRulesWatcher.notify(updatedRules);
 
         assertEquals(1, alarmRulesWatcher.getRunningContext().size());
-        assertEquals(2, alarmRulesWatcher.getRunningContext().get(rule.getMetricsName()).size());
+        assertEquals(2, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());
         assertEquals(
-                runningRule, alarmRulesWatcher.getRunningContext().get(rule.getMetricsName()).get(0),
+                runningRule, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).get(0),
                 "The same alarm rule should map to the same existed running rule");
     }
 
     @Test
     public void shouldRemoveRunningRuleIfAlarmRuleIsRemoved() {
-        AlarmRule.AlarmRuleBuilder ruleBuilder = rulePrototypeBuilder;
-
-        AlarmRule rule = ruleBuilder.build();
+        AlarmRule rule = newAlarmRule("name1", "avg(service_percent) < 80");
         Rules rules = new Rules();
         rules.getRules().add(rule);
 
         alarmRulesWatcher = spy(new AlarmRulesWatcher(rules, null));
         assertEquals(1, alarmRulesWatcher.getRunningContext().size());
-        assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getMetricsName()).size());
+        assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());
 
-        RunningRule runningRule = alarmRulesWatcher.getRunningContext().get(rule.getMetricsName()).get(0);
+        RunningRule runningRule = alarmRulesWatcher.getRunningContext().get(rule.getExpression()).get(0);
 
         Rules updatedRules = new Rules();
-        updatedRules.getRules().add(ruleBuilder.alarmRuleName("name2").build());
+        updatedRules.getRules().add(newAlarmRule("name2", "avg(service_percent) < 80"));
 
         alarmRulesWatcher.notify(updatedRules);
 
         assertEquals(1, alarmRulesWatcher.getRunningContext().size());
-        assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getMetricsName()).size());
+        assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());
         assertNotEquals(
-                runningRule, alarmRulesWatcher.getRunningContext().get(rule.getMetricsName()).get(0),
+                runningRule, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).get(0),
                 "The new alarm rule should map to a different running rule");
     }
 
     @Test
     public void shouldReplaceRunningRuleIfAlarmRulesAreReplaced() {
-        AlarmRule.AlarmRuleBuilder ruleBuilder = rulePrototypeBuilder;
-
-        AlarmRule rule = ruleBuilder.build();
+        AlarmRule rule = newAlarmRule("name1", "avg(service_percent) < 80");
         Rules rules = new Rules();
         rules.getRules().add(rule);
 
         alarmRulesWatcher = spy(new AlarmRulesWatcher(rules, null));
         assertEquals(1, alarmRulesWatcher.getRunningContext().size());
-        assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getMetricsName()).size());
+        assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());
 
         Rules updatedRules = new Rules();
         // replace the original alarm rules
         updatedRules.getRules()
-                    .addAll(Arrays.asList(ruleBuilder.alarmRuleName("name2")
-                                                     .metricsName("metrics2")
-                                                     .build(), ruleBuilder.alarmRuleName("name3")
-                                                                          .metricsName("metrics3")
-                                                                          .build()));
+                    .addAll(Arrays.asList(
+                        newAlarmRule("name2", "avg(service_percent) < 90"),
+                        newAlarmRule("name3", "avg(service_percent) < 99")
+                    ));
 
         alarmRulesWatcher.notify(updatedRules);
 
         assertEquals(2, alarmRulesWatcher.getRunningContext().size());
-        assertNull(alarmRulesWatcher.getRunningContext().get("metrics1"));
-        assertEquals(1, alarmRulesWatcher.getRunningContext().get("metrics2").size());
-        assertEquals(1, alarmRulesWatcher.getRunningContext().get("metrics3").size());
+        assertNull(alarmRulesWatcher.getRunningContext().get("avg(service_percent) < 80"));
+        assertEquals(1, alarmRulesWatcher.getRunningContext().get("avg(service_percent) < 90").size());
+        assertEquals(1, alarmRulesWatcher.getRunningContext().get("avg(service_percent) < 99").size());
+    }
+
+    private AlarmRule newAlarmRule(String name, String expression) {
+       AlarmRule alarmRule = new AlarmRule();
+        alarmRule.setAlarmRuleName(name);
+        alarmRule.setIncludeNames(new ArrayList<String>() {
+            {
+                add("1");
+                add("2");
+            }
+        });
+        alarmRule.setExcludeNames(new ArrayList<String>() {
+            {
+                add("3");
+                add("4");
+            }
+        });
+        alarmRule.setMessage("test");
+        alarmRule.setExpression(expression);
+        alarmRule.setPeriod(1);
+        alarmRule.setSilencePeriod(2);
+        alarmRule.setTags(new HashMap<String, String>() {{
+            put("key", "value");
+        }});
+        return alarmRule;
     }
 }
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluatorTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluatorTest.java
deleted file mode 100644
index 9ccddc0747..0000000000
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluatorTest.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.skywalking.oap.server.core.alarm.provider;
-
-import java.util.HashSet;
-import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;
-import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;
-import org.apache.skywalking.oap.server.core.alarm.provider.expression.ExpressionContext;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
-
-public class CompositeRuleEvaluatorTest {
-
-    private CompositeRuleEvaluator ruleEvaluate;
-
-    @BeforeEach
-    public void init() {
-        Expression expression = new Expression(new ExpressionContext());
-        ruleEvaluate = new CompositeRuleEvaluator(expression);
-    }
-
-    @Test
-    public void testEvaluateMessageWithAndOp() {
-        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();
-        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule("dummy", "a_rule && b_rule", "composite rule {name},{id} triggered!", new HashMap<String, String>() {{
-            put("key", "value");
-        }}, new HashSet<>());
-        compositeAlarmRules.add(compositeAlarmRule);
-        List<AlarmMessage> alarmMessages = getAlarmMessages();
-        List<AlarmMessage> compositeMsgs = ruleEvaluate.evaluate(compositeAlarmRules, alarmMessages);
-        assertThat(compositeMsgs.size()).isEqualTo(1);
-        assertThat(compositeMsgs.get(0).getAlarmMessage()).isEqualTo("composite rule demo service,id0 triggered!");
-        assertThat(compositeMsgs.get(0).getRuleName()).isEqualTo("dummy");
-        assertThat(compositeMsgs.get(0).getId0()).isEqualTo("id0");
-        assertThat(compositeMsgs.get(0).getId1()).isEqualTo("id1");
-        assertThat(compositeMsgs.get(0).getTags().get(0).getKey()).isEqualTo("key");
-        assertThat(compositeMsgs.get(0).getTags().get(0).getValue()).isEqualTo("value");
-        assertThat(compositeMsgs.get(0).isOnlyAsCondition()).isEqualTo(false);
-    }
-
-    @Test
-    public void testEvaluateMessageWithFormatMessage() {
-        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();
-        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule("dummy", "a_rule && b_rule", "composite rule {name} triggered!", new HashMap<String, String>() {{
-            put("key", "value");
-        }}, new HashSet<>());
-        compositeAlarmRules.add(compositeAlarmRule);
-        List<AlarmMessage> alarmMessages = getAlarmMessages();
-        List<AlarmMessage> compositeMsgs = ruleEvaluate.evaluate(compositeAlarmRules, alarmMessages);
-        assertThat(compositeMsgs.size()).isEqualTo(1);
-        assertThat(compositeMsgs.get(0).getAlarmMessage()).isEqualTo("composite rule demo service triggered!");
-        assertThat(compositeMsgs.get(0).getRuleName()).isEqualTo("dummy");
-        assertThat(compositeMsgs.get(0).getId0()).isEqualTo("id0");
-        assertThat(compositeMsgs.get(0).getId1()).isEqualTo("id1");
-        assertThat(compositeMsgs.get(0).getTags().get(0).getKey()).isEqualTo("key");
-        assertThat(compositeMsgs.get(0).getTags().get(0).getValue()).isEqualTo("value");
-        assertThat(compositeMsgs.get(0).isOnlyAsCondition()).isEqualTo(false);
-    }
-
-    @Test
-    public void testEvaluateMessageWithNotExistsRule() {
-        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();
-        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule("dummy", "a_rule && not_exist_rule", "composite rule triggered!", new HashMap<>(), new HashSet<>());
-        compositeAlarmRules.add(compositeAlarmRule);
-        List<AlarmMessage> alarmMessages = getAlarmMessages();
-        List<AlarmMessage> compositeMsgs = ruleEvaluate.evaluate(compositeAlarmRules, alarmMessages);
-        assertThat(compositeMsgs.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void testEvaluateMessageWithException() {
-        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();
-        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule("dummy", "a_rule + b_rule", "composite rule triggered!", new HashMap<>(), new HashSet<>());
-        compositeAlarmRules.add(compositeAlarmRule);
-        List<AlarmMessage> alarmMessages = getAlarmMessages();
-        List<AlarmMessage> compositeMsgs = ruleEvaluate.evaluate(compositeAlarmRules, alarmMessages);
-        assertThat(compositeMsgs.size()).isEqualTo(0);
-    }
-
-    private List<AlarmMessage> getAlarmMessages() {
-        List<AlarmMessage> alarmMessages = new ArrayList<>();
-        AlarmMessage alarmMessage = new AlarmMessage();
-        alarmMessage.setRuleName("a_rule");
-        alarmMessage.setOnlyAsCondition(true);
-        alarmMessage.setId0("id0");
-        alarmMessage.setId1("id1");
-        alarmMessage.setName("demo service");
-        alarmMessage.setScope("");
-        alarmMessage.setScopeId(1);
-        alarmMessages.add(alarmMessage);
-        alarmMessage = new AlarmMessage();
-        alarmMessage.setRuleName("b_rule");
-        alarmMessage.setOnlyAsCondition(true);
-        alarmMessage.setId0("id0");
-        alarmMessage.setId1("id1");
-        alarmMessage.setName("demo service");
-        alarmMessage.setScope("");
-        alarmMessage.setScopeId(1);
-        alarmMessages.add(alarmMessage);
-        alarmMessage = new AlarmMessage();
-        alarmMessage.setRuleName("c_rule");
-        alarmMessage.setOnlyAsCondition(true);
-        alarmMessage.setId0("id0");
-        alarmMessage.setId1("id1");
-        alarmMessage.setName("demo service");
-        alarmMessage.setScope("");
-        alarmMessage.setScopeId(1);
-        alarmMessages.add(alarmMessage);
-        return alarmMessages;
-    }
-
-    @Test
-    public void testEvaluateMessageWithOrOp() {
-        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();
-        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule("dummy", "a_rule || b_rule", "composite rule triggered!", new HashMap<String, String>() {{
-            put("key", "value");
-        }}, new HashSet<>());
-        compositeAlarmRules.add(compositeAlarmRule);
-        List<AlarmMessage> alarmMessages = getAlarmMessages();
-        alarmMessages.remove(0);
-        List<AlarmMessage> compositeMsgs = ruleEvaluate.evaluate(compositeAlarmRules, alarmMessages);
-        assertThat(compositeMsgs.size()).isEqualTo(1);
-        assertThat(compositeMsgs.get(0).getAlarmMessage()).isEqualTo("composite rule triggered!");
-        assertThat(compositeMsgs.get(0).getRuleName()).isEqualTo("dummy");
-        assertThat(compositeMsgs.get(0).getId0()).isEqualTo("id0");
-        assertThat(compositeMsgs.get(0).getId1()).isEqualTo("id1");
-        assertThat(compositeMsgs.get(0).getTags().get(0).getKey()).isEqualTo("key");
-        assertThat(compositeMsgs.get(0).getTags().get(0).getValue()).isEqualTo("value");
-        assertThat(compositeMsgs.get(0).isOnlyAsCondition()).isEqualTo(false);
-    }
-
-    @Test
-    public void testEvaluateMessageWithParenthesisAndOp() {
-        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();
-        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule("dummy", "(a_rule || b_rule) && c_rule", "composite rule triggered!", new HashMap<>(), new HashSet<>());
-        compositeAlarmRules.add(compositeAlarmRule);
-        List<AlarmMessage> alarmMessages = getAlarmMessages();
-        alarmMessages.remove(alarmMessages.size() - 1);
-        List<AlarmMessage> compositeMsgs = ruleEvaluate.evaluate(compositeAlarmRules, alarmMessages);
-        assertThat(compositeMsgs.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void testEvaluateMessageWithParenthesisAndOrOp() {
-        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();
-        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule("dummy", "(a_rule && b_rule) || c_rule", "composite rule triggered!", new HashMap<>(), new HashSet<>());
-        compositeAlarmRules.add(compositeAlarmRule);
-        List<AlarmMessage> alarmMessages = getAlarmMessages();
-        List<AlarmMessage> compositeMsgs = ruleEvaluate.evaluate(compositeAlarmRules, alarmMessages);
-        assertThat(compositeMsgs.size()).isEqualTo(1);
-        assertThat(compositeMsgs.get(0).getAlarmMessage()).isEqualTo("composite rule triggered!");
-        assertThat(compositeMsgs.get(0).getRuleName()).isEqualTo("dummy");
-        assertThat(compositeMsgs.get(0).getId0()).isEqualTo("id0");
-        assertThat(compositeMsgs.get(0).getId1()).isEqualTo("id1");
-        assertThat(compositeMsgs.get(0).isOnlyAsCondition()).isEqualTo(false);
-    }
-}
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java
index 234c134de5..784828295e 100644
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java
+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java
@@ -109,7 +109,6 @@ public class NotifyHandlerTest {
         assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);
         assertEquals("c2VydmljZS1pbnZlbnRvcnktbmFtZQ==.1_ZW5kcG9pbnQtaW52ZW50b3J5LW5hbWU=", metaInAlarm.getId0());
         assertEquals(DefaultScopeDefine.ENDPOINT_CATALOG_NAME, metaInAlarm.getScope());
-        assertEquals(metricsName, metaInAlarm.getMetricsName());
         assertEquals(endpointInventoryName + " in " + serviceInventoryName, metaInAlarm.getName());
         assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());
 
@@ -135,7 +134,6 @@ public class NotifyHandlerTest {
         MetaInAlarm metaInAlarm = metaCaptor.getValue();
 
         assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);
-        assertEquals(metricsName, metaInAlarm.getMetricsName());
         assertEquals("c2VydmljZQ==.1_aW5zdGFuY2UtaW52ZW50b3J5LW5hbWU=", metaInAlarm.getId0());
         assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME, metaInAlarm.getScope());
         assertEquals("instance-inventory-name of service", metaInAlarm.getName());
@@ -158,7 +156,6 @@ public class NotifyHandlerTest {
         MetaInAlarm metaInAlarm = metaCaptor.getValue();
 
         assertTrue(metaInAlarm instanceof ServiceMetaInAlarm);
-        assertEquals(metricsName, metaInAlarm.getMetricsName());
         assertEquals("c2VydmljZQ==.1", metaInAlarm.getId0());
         assertEquals(DefaultScopeDefine.SERVICE_CATALOG_NAME, metaInAlarm.getScope());
         assertEquals("service", metaInAlarm.getName());
@@ -184,7 +181,6 @@ public class NotifyHandlerTest {
         MetaInAlarm metaInAlarm = metaCaptor.getValue();
 
         assertTrue(metaInAlarm instanceof ServiceRelationMetaInAlarm);
-        assertEquals(metricsName, metaInAlarm.getMetricsName());
         assertEquals("ZnJvbS1zZXJ2aWNl.1", metaInAlarm.getId0());
         assertEquals("ZGVzdC1zZXJ2aWNl.1", metaInAlarm.getId1());
         assertEquals(DefaultScopeDefine.SERVICE_RELATION_CATALOG_NAME, metaInAlarm.getScope());
@@ -211,7 +207,6 @@ public class NotifyHandlerTest {
         MetaInAlarm metaInAlarm = metaCaptor.getValue();
 
         assertTrue(metaInAlarm instanceof ServiceInstanceRelationMetaInAlarm);
-        assertEquals(metricsName, metaInAlarm.getMetricsName());
         assertEquals("ZnJvbS1zZXJ2aWNl.1_ZnJvbS1zZXJ2aWNlLWluc3RhbmNl", metaInAlarm.getId0());
         assertEquals("ZGVzdC1zZXJ2aWNl.1_ZGVzdC1zZXJ2aWNlLWluc3RhbmNl", metaInAlarm.getId1());
         assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_RELATION_CATALOG_NAME, metaInAlarm.getScope());
@@ -238,7 +233,6 @@ public class NotifyHandlerTest {
         MetaInAlarm metaInAlarm = metaCaptor.getValue();
 
         assertTrue(metaInAlarm instanceof EndpointRelationMetaInAlarm);
-        assertEquals(metricsName, metaInAlarm.getMetricsName());
         assertEquals("ZnJvbS1zZXJ2aWNl.1_L3NvdXJjZS1wYXRo", metaInAlarm.getId0());
         assertEquals("ZGVzdC1zZXJ2aWNl.1_L2Rlc3QtcGF0aA==", metaInAlarm.getId1());
         assertEquals(DefaultScopeDefine.ENDPOINT_RELATION_CATALOG_NAME, metaInAlarm.getScope());
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/OPTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/OPTest.java
deleted file mode 100644
index 8051f344e6..0000000000
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/OPTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.skywalking.oap.server.core.alarm.provider;
-
-import org.junit.jupiter.api.Test;
-
-import static org.junit.jupiter.api.Assertions.assertTrue;
-
-public class OPTest {
-    @Test
-    public void test() {
-        assertTrue(OP.EQ.test(123, 123));
-        assertTrue(OP.EQ.test(123L, 123L));
-        assertTrue(OP.EQ.test(123.0D, 123.0D));
-
-        assertTrue(OP.NEQ.test(124, 123));
-        assertTrue(OP.NEQ.test(124L, 123L));
-        assertTrue(OP.NEQ.test(124.0D, 123.0D));
-
-        assertTrue(OP.GT.test(122, 123));
-        assertTrue(OP.GT.test(122L, 123L));
-        assertTrue(OP.GT.test(122.0D, 123.0D));
-
-        assertTrue(OP.GTE.test(122, 123));
-        assertTrue(OP.GTE.test(122L, 123L));
-        assertTrue(OP.GTE.test(122.0D, 123.0D));
-        assertTrue(OP.GTE.test(122, 122));
-        assertTrue(OP.GTE.test(122L, 122L));
-        assertTrue(OP.GTE.test(122.0D, 122.0D));
-
-        assertTrue(OP.LT.test(124, 123));
-        assertTrue(OP.LT.test(124L, 123L));
-        assertTrue(OP.LT.test(124.0D, 123.0D));
-
-        assertTrue(OP.LTE.test(124, 124));
-        assertTrue(OP.LTE.test(124L, 124L));
-        assertTrue(OP.LTE.test(124.0D, 124.0D));
-        assertTrue(OP.LTE.test(124, 123));
-        assertTrue(OP.LTE.test(124L, 123L));
-        assertTrue(OP.LTE.test(124.0D, 123.0D));
-    }
-}
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java
index 2a757c5406..6c0e6a84fe 100644
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java
+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java
@@ -26,17 +26,28 @@ import org.apache.skywalking.oap.server.core.alarm.provider.slack.SlackSettings;
 import org.apache.skywalking.oap.server.core.alarm.provider.webhook.WebhookSettings;
 import org.apache.skywalking.oap.server.core.alarm.provider.wechat.WechatSettings;
 import org.apache.skywalking.oap.server.core.alarm.provider.welink.WeLinkSettings;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
+import org.apache.skywalking.oap.server.core.query.sql.Function;
+import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-
 import java.util.List;
-
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class RulesReaderTest {
+    @BeforeEach
+    public void setUp() {
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "service_percent", "testColumn", Column.ValueDataType.COMMON_VALUE, Function.Avg, 0, Scope.Service.getScopeId());
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "endpoint_percent", "testColumn", Column.ValueDataType.COMMON_VALUE, Function.Avg, 0, Scope.Endpoint.getScopeId());
+    }
+
     @Test
     public void testReadRules() {
         RulesReader reader = new RulesReader(this.getClass()
@@ -45,8 +56,8 @@ public class RulesReaderTest {
         Rules rules = reader.readRules();
 
         List<AlarmRule> ruleList = rules.getRules();
-        Assertions.assertEquals(3, ruleList.size());
-        Assertions.assertEquals("85", ruleList.get(1).getThreshold());
+        Assertions.assertEquals(5, ruleList.size());
+        Assertions.assertEquals("sum(service_percent < 85) >= 4", ruleList.get(1).getExpression());
         Assertions.assertEquals("endpoint_percent_rule", ruleList.get(0).getAlarmRuleName());
         Assertions.assertEquals(0, ruleList.get(0).getIncludeNames().size());
         Assertions.assertEquals(0, ruleList.get(0).getExcludeNames().size());
@@ -82,14 +93,6 @@ public class RulesReaderTest {
         assertThat(wechatSettings.getWebhooks().get(0)).isEqualTo("https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=dummy_key");
         assertThat(slackSettings.getTextTemplate()).isInstanceOfAny(String.class);
 
-        List<CompositeAlarmRule> compositeRules = rules.getCompositeRules();
-        Assertions.assertEquals(2, compositeRules.size());
-        Assertions.assertEquals("endpoint_percent_more_rule && endpoint_percent_rule", compositeRules.get(0).getExpression());
-        //comp1_rule's hooks
-        Assertions.assertEquals(8, compositeRules.get(0).getHooks().size());
-        //comp2_rule's hooks
-        Assertions.assertEquals(3, compositeRules.get(1).getHooks().size());
-
         DingtalkSettings dingtalkSettings = rules.getDingtalkSettingsMap().get(AlarmHooksType.dingtalk.name() + ".default");
         assertThat(dingtalkSettings.getTextTemplate()).isInstanceOfAny(String.class);
         List<DingtalkSettings.WebHookUrl> webHookUrls = dingtalkSettings.getWebhooks();
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRuleTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRuleTest.java
index a272d2279f..43dbe96fc7 100644
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRuleTest.java
+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRuleTest.java
@@ -30,13 +30,18 @@ import org.apache.skywalking.oap.server.core.analysis.metrics.IntValueHolder;
 import org.apache.skywalking.oap.server.core.analysis.metrics.LabeledValueHolder;
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.analysis.metrics.MultiIntValuesHolder;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
+import org.apache.skywalking.oap.server.core.query.sql.Function;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
+import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;
 import org.joda.time.LocalDateTime;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.powermock.reflect.Whitebox;
 
@@ -54,14 +59,22 @@ import java.util.Objects;
 public class RunningRuleTest {
     private static DateTimeFormatter TIME_BUCKET_FORMATTER = DateTimeFormat.forPattern("yyyyMMddHHmm");
 
+    @BeforeEach
+    public void setup() {
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "endpoint_percent", "testColumn", Column.ValueDataType.COMMON_VALUE, Function.Avg, 0, Scope.Endpoint.getScopeId());
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "endpoint_multiple_values", "testColumn", Column.ValueDataType.LABELED_VALUE, Function.Avg, 0, Scope.Endpoint.getScopeId());
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "endpoint_cpm", "testColumn", Column.ValueDataType.COMMON_VALUE, Function.Avg, 0, Scope.Endpoint.getScopeId());
+    }
+
     @Test
     public void testInitAndStart() {
         AlarmRule alarmRule = new AlarmRule();
         alarmRule.setAlarmRuleName("endpoint_percent_rule");
-        alarmRule.setMetricsName("endpoint_percent");
-        alarmRule.setOp("<");
-        alarmRule.setThreshold("75");
-        alarmRule.setCount(3);
+        alarmRule.setExpression("sum(endpoint_percent < 75) >= 3");
+        alarmRule.getIncludeMetrics().add("endpoint_percent");
         alarmRule.setPeriod(15);
         alarmRule.setTags(new HashMap<String, String>() {{
             put("key", "value");
@@ -71,9 +84,9 @@ public class RunningRuleTest {
         long timeInPeriod1 = 201808301434L;
         runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));
 
-        Map<MetaInAlarm, RunningRule.Window> windows = Whitebox.getInternalState(runningRule, "windows");
+        Map<AlarmEntity, RunningRule.Window> windows = Whitebox.getInternalState(runningRule, "windows");
 
-        RunningRule.Window window = windows.get(getMetaInAlarm(123));
+        RunningRule.Window window = windows.get(getAlarmEntity(123));
         LocalDateTime endTime = Whitebox.getInternalState(window, "endTime");
         int period = Whitebox.getInternalState(window, "period");
         LinkedList<Metrics> metricsBuffer = Whitebox.getInternalState(window, "values");
@@ -87,10 +100,8 @@ public class RunningRuleTest {
     public void testAlarm() {
         AlarmRule alarmRule = new AlarmRule();
         alarmRule.setAlarmRuleName("endpoint_percent_rule");
-        alarmRule.setMetricsName("endpoint_percent");
-        alarmRule.setOp("<");
-        alarmRule.setThreshold("75");
-        alarmRule.setCount(3);
+        alarmRule.setExpression("sum(endpoint_percent < 75) >= 3");
+        alarmRule.getIncludeMetrics().add("endpoint_percent");
         alarmRule.setPeriod(15);
         alarmRule.setMessage("Successful rate of endpoint {name} is lower than 75%");
         alarmRule.setTags(new HashMap<String, String>() {{
@@ -121,10 +132,8 @@ public class RunningRuleTest {
     public void testMultipleValuesAlarm() {
         AlarmRule alarmRule = new AlarmRule();
         alarmRule.setAlarmRuleName("endpoint_multiple_values_rule");
-        alarmRule.setMetricsName("endpoint_percent");
-        alarmRule.setOp(">");
-        alarmRule.setThreshold("50,60,70,-, 100");
-        alarmRule.setCount(3);
+        alarmRule.setExpression("sum(endpoint_multiple_values > 50) >= 3");
+        alarmRule.getIncludeMetrics().add("endpoint_multiple_values");
         alarmRule.setPeriod(15);
         alarmRule.setMessage("response percentile of endpoint {name} is lower than expected values");
         alarmRule.setTags(new HashMap<String, String>() {{
@@ -137,15 +146,15 @@ public class RunningRuleTest {
         long timeInPeriod2 = 201808301436L;
         long timeInPeriod3 = 201808301438L;
 
-        runningRule.in(getMetaInAlarm(123), getMultipleValueMetrics(timeInPeriod1, 70, 60, 40, 40, 40));
-        runningRule.in(getMetaInAlarm(123), getMultipleValueMetrics(timeInPeriod2, 60, 60, 40, 40, 40));
+        runningRule.in(getMetaInAlarm(123, "endpoint_multiple_values"), getMultipleValueMetrics(timeInPeriod1, 70, 60, 40, 40, 40));
+        runningRule.in(getMetaInAlarm(123, "endpoint_multiple_values"), getMultipleValueMetrics(timeInPeriod2, 60, 60, 40, 40, 40));
 
         // check at 201808301440
         List<AlarmMessage> alarmMessages = runningRule.check();
         Assertions.assertEquals(0, alarmMessages.size());
         runningRule.moveTo(TIME_BUCKET_FORMATTER.parseLocalDateTime("201808301441"));
 
-        runningRule.in(getMetaInAlarm(123), getMultipleValueMetrics(timeInPeriod3, 74, 60, 40, 40, 40));
+        runningRule.in(getMetaInAlarm(123, "endpoint_multiple_values"), getMultipleValueMetrics(timeInPeriod3, 74, 60, 40, 40, 40));
 
         // check at 201808301440
         alarmMessages = runningRule.check();
@@ -155,28 +164,67 @@ public class RunningRuleTest {
 
     @Test
     public void testLabeledAlarm() {
+        ValueColumnMetadata.INSTANCE.putIfAbsent(
+            "endpoint_labeled", "testColumn", Column.ValueDataType.LABELED_VALUE, Function.Avg, 0, Scope.Endpoint.getScopeId());
         AlarmRule alarmRule = new AlarmRule();
-        alarmRule.setIncludeLabels(Lists.newArrayList("95", "99"));
-        assertLabeled(alarmRule);
-        alarmRule = new AlarmRule();
-        alarmRule.setIncludeLabelsRegex("9\\d{1}");
-        assertLabeled(alarmRule);
-        alarmRule = new AlarmRule();
-        alarmRule.setExcludeLabels(Lists.newArrayList("50", "75"));
-        assertLabeled(alarmRule);
-        alarmRule = new AlarmRule();
-        alarmRule.setExcludeLabelsRegex("^[5-7][0-9]$");
-        assertLabeled(alarmRule);
+        alarmRule.setExpression("sum(endpoint_labeled{_='95,99'} > 10) >= 3");
+        alarmRule.getIncludeMetrics().add("endpoint_labeled");
+        assertLabeled(alarmRule, "50,17|99,11", "75,15|95,12|99,12", "90,1|99,20", 1);
+        alarmRule.setExpression("sum(endpoint_labeled > 10) >= 3");
+        assertLabeled(alarmRule, "50,17|99,11", "75,15|95,12|99,12", "90,1|99,20", 1);
+        alarmRule.setExpression("sum(endpoint_labeled{_='50'} > 10) >= 3");
+        assertLabeled(alarmRule, "50,17|99,11", "75,15|95,12|99,12", "90,1|99,20", 0);
+    }
+
+    @Test
+    public void testMultipleMetricsAlarm() {
+        multipleMetricsAlarm("sum((endpoint_percent < 75) * (endpoint_cpm < 100)) >= 3", 1);
+    }
+
+    @Test
+    public void testMultipleMetricsNoAlarm() {
+        multipleMetricsAlarm("sum((endpoint_percent < 75) * (endpoint_cpm < 99)) >= 3", 0);
+    }
+
+    private void multipleMetricsAlarm(String expression, int alarmMsgSize) {
+        AlarmRule alarmRule = new AlarmRule();
+        alarmRule.setAlarmRuleName("endpoint_percent_rule");
+        alarmRule.setExpression(expression);
+        alarmRule.getIncludeMetrics().add("endpoint_percent");
+        alarmRule.getIncludeMetrics().add("endpoint_cpm");
+        alarmRule.setPeriod(15);
+        alarmRule.setMessage("Successful rate of endpoint {name} is lower than 75% and cpm is lower than 100");
+        alarmRule.setTags(new HashMap<String, String>() {{
+            put("key", "value");
+        }});
+        RunningRule runningRule = new RunningRule(alarmRule);
+        LocalDateTime startTime = TIME_BUCKET_FORMATTER.parseLocalDateTime("201808301440");
+
+        long timeInPeriod1 = 201808301434L;
+        long timeInPeriod2 = 201808301436L;
+        long timeInPeriod3 = 201808301438L;
+
+        runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));
+        runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod2, 71));
+        runningRule.in(getMetaInAlarm(123, "endpoint_cpm"), getMetrics(timeInPeriod1, 50));
+        runningRule.in(getMetaInAlarm(123, "endpoint_cpm"), getMetrics(timeInPeriod2, 99));
+
+        List<AlarmMessage> alarmMessages = runningRule.check();
+        Assertions.assertEquals(0, alarmMessages.size());
+
+        runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod3, 74));
+        runningRule.in(getMetaInAlarm(123, "endpoint_cpm"), getMetrics(timeInPeriod3, 60));
+
+        alarmMessages = runningRule.check();
+        Assertions.assertEquals(alarmMsgSize, alarmMessages.size());
     }
 
     @Test
     public void testNoAlarm() {
         AlarmRule alarmRule = new AlarmRule();
         alarmRule.setAlarmRuleName("endpoint_percent_rule");
-        alarmRule.setMetricsName("endpoint_percent");
-        alarmRule.setOp(">");
-        alarmRule.setThreshold("75");
-        alarmRule.setCount(3);
+        alarmRule.setExpression("sum(endpoint_percent > 75) >= 3");
+        alarmRule.getIncludeMetrics().add("endpoint_percent");
         alarmRule.setPeriod(15);
         //alarmRule.setSilencePeriod(0);
         alarmRule.setTags(new HashMap<String, String>() {{
@@ -220,10 +268,8 @@ public class RunningRuleTest {
     public void testSilence() {
         AlarmRule alarmRule = new AlarmRule();
         alarmRule.setAlarmRuleName("endpoint_percent_rule");
-        alarmRule.setMetricsName("endpoint_percent");
-        alarmRule.setOp("<");
-        alarmRule.setThreshold("75");
-        alarmRule.setCount(3);
+        alarmRule.setExpression("sum(endpoint_percent < 75) >= 3");
+        alarmRule.getIncludeMetrics().add("endpoint_percent");
         alarmRule.setPeriod(15);
         alarmRule.setSilencePeriod(2);
         alarmRule.setTags(new HashMap<String, String>() {{
@@ -260,10 +306,8 @@ public class RunningRuleTest {
     public void testExclude() {
         AlarmRule alarmRule = new AlarmRule();
         alarmRule.setAlarmRuleName("endpoint_percent_rule");
-        alarmRule.setMetricsName("endpoint_percent");
-        alarmRule.setOp("<");
-        alarmRule.setThreshold("75");
-        alarmRule.setCount(3);
+        alarmRule.setExpression("sum(endpoint_percent < 75) >= 3");
+        alarmRule.getIncludeMetrics().add("endpoint_percent");
         alarmRule.setPeriod(15);
         alarmRule.setMessage("Successful rate of endpoint {name} is lower than 75%");
         alarmRule.setExcludeNames(Lists.newArrayList("Service_123"));
@@ -294,10 +338,8 @@ public class RunningRuleTest {
     public void testIncludeNamesRegex() {
         AlarmRule alarmRule = new AlarmRule();
         alarmRule.setAlarmRuleName("endpoint_percent_rule");
-        alarmRule.setMetricsName("endpoint_percent");
-        alarmRule.setOp("<");
-        alarmRule.setThreshold("1000");
-        alarmRule.setCount(1);
+        alarmRule.setExpression("sum(endpoint_percent < 1000) >= 1");
+        alarmRule.getIncludeMetrics().add("endpoint_percent");
         alarmRule.setPeriod(10);
         alarmRule.setMessage(
             "Response time of service instance {name} is more than 1000ms in 2 minutes of last 10 minutes");
@@ -329,10 +371,8 @@ public class RunningRuleTest {
     public void testExcludeNamesRegex() {
         AlarmRule alarmRule = new AlarmRule();
         alarmRule.setAlarmRuleName("endpoint_percent_rule");
-        alarmRule.setMetricsName("endpoint_percent");
-        alarmRule.setOp("<");
-        alarmRule.setThreshold("1000");
-        alarmRule.setCount(1);
+        alarmRule.setExpression("sum(endpoint_percent < 1000) >= 1");
+        alarmRule.getIncludeMetrics().add("endpoint_percent");
         alarmRule.setPeriod(10);
         alarmRule.setMessage(
             "Response time of service instance {name} is more than 1000ms in 2 minutes of last 10 minutes");
@@ -361,6 +401,10 @@ public class RunningRuleTest {
     }
 
     private MetaInAlarm getMetaInAlarm(int id) {
+        return getMetaInAlarm(id, "endpoint_percent");
+    }
+
+    private MetaInAlarm getMetaInAlarm(int id, String metricName) {
         return new MetaInAlarm() {
             @Override
             public String getScope() {
@@ -379,7 +423,7 @@ public class RunningRuleTest {
 
             @Override
             public String getMetricsName() {
-                return "endpoint_percent";
+                return metricName;
             }
 
             @Override
@@ -427,6 +471,13 @@ public class RunningRuleTest {
         return mockLabeledValueMetrics;
     }
 
+    private AlarmEntity getAlarmEntity(int id) {
+        MetaInAlarm metaInAlarm = getMetaInAlarm(id);
+        return new AlarmEntity(metaInAlarm.getScope(), metaInAlarm.getScopeId(), metaInAlarm.getName(),
+                               metaInAlarm.getId0(), metaInAlarm.getId1()
+        );
+    }
+
     private class MockMetrics extends Metrics implements IntValueHolder {
         private int value;
 
@@ -580,12 +631,8 @@ public class RunningRuleTest {
         }
     }
 
-    private void assertLabeled(AlarmRule alarmRule) {
-        alarmRule.setAlarmRuleName("endpoint_percent_alarm_rule");
-        alarmRule.setMetricsName("endpoint_percent");
-        alarmRule.setOp(">");
-        alarmRule.setThreshold("10");
-        alarmRule.setCount(3);
+    private void assertLabeled(AlarmRule alarmRule, String value1, String value2, String value3, int alarmMsgSize) {
+        alarmRule.setAlarmRuleName("endpoint_labeled_alarm_rule");
         alarmRule.setPeriod(15);
         alarmRule.setMessage("response percentile of endpoint {name} is lower than expected value");
         alarmRule.setTags(new HashMap<String, String>() {{
@@ -598,18 +645,18 @@ public class RunningRuleTest {
         long timeInPeriod2 = 201808301436L;
         long timeInPeriod3 = 201808301438L;
 
-        runningRule.in(getMetaInAlarm(123), getLabeledValueMetrics(timeInPeriod1, "50,17|99,11"));
-        runningRule.in(getMetaInAlarm(123), getLabeledValueMetrics(timeInPeriod2, "75,15|95,12"));
+        runningRule.in(getMetaInAlarm(123, "endpoint_labeled"), getLabeledValueMetrics(timeInPeriod1, value1));
+        runningRule.in(getMetaInAlarm(123, "endpoint_labeled"), getLabeledValueMetrics(timeInPeriod2, value2));
 
         List<AlarmMessage> alarmMessages = runningRule.check();
         Assertions.assertEquals(0, alarmMessages.size());
         runningRule.moveTo(TIME_BUCKET_FORMATTER.parseLocalDateTime("201808301441"));
 
-        runningRule.in(getMetaInAlarm(123), getLabeledValueMetrics(timeInPeriod3, "90,1|99,20"));
+        runningRule.in(getMetaInAlarm(123, "endpoint_labeled"), getLabeledValueMetrics(timeInPeriod3, value3));
 
         // check at 201808301440
         alarmMessages = runningRule.check();
-        Assertions.assertEquals(1, alarmMessages.size());
+        Assertions.assertEquals(alarmMsgSize, alarmMessages.size());
         runningRule.moveTo(TIME_BUCKET_FORMATTER.parseLocalDateTime("201808301441"));
     }
 }
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/ThresholdTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/ThresholdTest.java
deleted file mode 100644
index 053154e26e..0000000000
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/ThresholdTest.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.skywalking.oap.server.core.alarm.provider;
-
-import org.junit.jupiter.api.Test;
-
-import static org.junit.jupiter.api.Assertions.assertArrayEquals;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
-public class ThresholdTest {
-
-    @Test
-    public void setType() {
-        Threshold threshold = new Threshold("my-rule", "75");
-        threshold.setType(MetricsValueType.DOUBLE);
-        assertEquals(0, Double.compare(75, threshold.getDoubleThreshold()));
-
-        threshold.setType(MetricsValueType.INT);
-        assertEquals(75, threshold.getIntThreshold());
-
-        threshold.setType(MetricsValueType.LONG);
-        assertEquals(75L, threshold.getLongThreshold());
-    }
-
-    @Test
-    public void setTypeMultipleValues() {
-        Threshold threshold = new Threshold("my-rule", "75,80, 90, -");
-        threshold.setType(MetricsValueType.MULTI_INTS);
-        assertArrayEquals(new Object[] {
-            75,
-            80,
-            90,
-            null
-        }, threshold.getIntValuesThreshold());
-
-    }
-
-    @Test
-    public void setTypeWithWrong() {
-        Threshold threshold = new Threshold("my-rule", "wrong");
-        threshold.setType(MetricsValueType.INT);
-        assertEquals(0, threshold.getIntThreshold());
-    }
-}
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/ExpressionContextTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/ExpressionContextTest.java
deleted file mode 100644
index 1ff05a0caa..0000000000
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/ExpressionContextTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.skywalking.oap.server.core.alarm.provider.expression;
-
-import org.junit.jupiter.api.Test;
-
-import java.lang.reflect.Method;
-import java.util.Arrays;
-
-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
-
-public class ExpressionContextTest {
-
-    @Test
-    public void testRegisterFuncWithMethod() throws NoSuchMethodException {
-        ExpressionContext expressionContext = new ExpressionContext();
-        Method[] methods = Math.class.getMethods();
-        Arrays.stream(methods).forEach(method -> {
-            if (method.getName().equalsIgnoreCase("sqrt")) {
-                expressionContext.registerFunc("sqrt", method);
-            }
-        });
-        Expression expression = new Expression(expressionContext);
-        Number number = (Number) expression.eval("sqrt(16)");
-        assertThat(number).isEqualTo(4.0);
-    }
-
-    @Test
-    public void testRegisterFuncWithClazz() throws NoSuchMethodException {
-        ExpressionContext expressionContext = new ExpressionContext();
-        expressionContext.registerFunc(Math.class);
-        Expression expression = new Expression(expressionContext);
-        Number number = (Number) expression.eval("sqrt(16)");
-        assertThat(number).isEqualTo(4.0);
-        number = (Number) expression.eval("abs(-12)");
-        assertThat(number).isEqualTo(12);
-    }
-}
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/ExpressionTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/ExpressionTest.java
deleted file mode 100644
index 3f81b0af2a..0000000000
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/ExpressionTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.skywalking.oap.server.core.alarm.provider.expression;
-
-import com.google.common.collect.Sets;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.mvel2.CompileException;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
-import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertNull;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
-public class ExpressionTest {
-    private Expression expression;
-
-    @BeforeEach
-    public void init() {
-        expression = new Expression(new ExpressionContext());
-    }
-
-    @Test
-    public void testEval() {
-        String expr = " a && b ";
-        Map<String, Object> dataMap = new HashMap();
-        dataMap.put("a", Boolean.TRUE);
-        Object flag = expression.eval(expr, dataMap);
-        assertNull(flag);
-        dataMap.put("b", Boolean.TRUE);
-        flag = expression.eval(expr, dataMap);
-        assertThat(flag).isEqualTo(true);
-    }
-
-    @Test
-    public void testAnalysisInputs() {
-        String expr = " a && b ";
-        Set<String> inputs = expression.analysisInputs(expr);
-        assertThat(inputs.size()).isEqualTo(2);
-        assertThat(inputs).isEqualTo(Sets.newHashSet("a", "b"));
-    }
-
-    @Test
-    public void testEvalWithEmptyContext() {
-        String expr = " a && b ";
-        Object flag = expression.eval(expr);
-        assertNull(flag);
-        flag = expression.eval(" 1 > 0");
-        assertThat(flag).isEqualTo(true);
-    }
-
-    @Test
-    public void testCompile() {
-        String expr = " a && b ";
-        ExpressionContext context = new ExpressionContext();
-        Object compiledExpression = expression.compile(expr, context);
-        assertNotNull(compiledExpression);
-        Object sameExpression = expression.compile(expr, context);
-        assertThat(compiledExpression).isEqualTo(sameExpression);
-    }
-
-    @Test
-    public void testCompileWithException() {
-        assertThrows(CompileException.class, () -> {
-            String expr = " a && * b ";
-            ExpressionContext context = new ExpressionContext();
-            expression.compile(expr, context);
-        });
-    }
-}
