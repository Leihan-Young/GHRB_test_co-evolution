diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java
index b935c7c..d90bcf3 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java
@@ -1597,6 +1597,91 @@ class SSLFactoryShould {
                 .containsExactlyInAnyOrder("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384");
     }
 
+    @Test
+    void returnWithExcludedCiphers() {
+        SSLFactory sslFactory = SSLFactory.builder()
+                .withDummyTrustMaterial()
+                .build();
+
+        assertThat(sslFactory.getCiphers()).contains("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
+
+        sslFactory = SSLFactory.builder()
+                .withDummyTrustMaterial()
+                .withExcludedCiphers("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384")
+                .build();
+
+        assertThat(sslFactory.getCiphers())
+                .isNotEmpty()
+                .doesNotContainSequence("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
+    }
+
+    @Test
+    void returnWithDefaultCiphersWhenAllIsExcluded() {
+        SSLFactory sslFactory = SSLFactory.builder()
+                .withDummyTrustMaterial()
+                .build();
+
+        assertThat(sslFactory.getCiphers()).contains("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
+
+        sslFactory = SSLFactory.builder()
+                .withDummyTrustMaterial()
+                .withExcludedCiphers(
+                        "TLS_AES_256_GCM_SHA384",
+                        "TLS_AES_128_GCM_SHA256",
+                        "TLS_CHACHA20_POLY1305_SHA256",
+                        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
+                        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
+                        "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
+                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
+                        "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
+                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
+                        "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
+                        "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
+                        "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384",
+                        "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
+                        "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256",
+                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
+                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
+                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
+                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
+                        "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
+                        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
+                        "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
+                        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
+                        "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
+                        "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384",
+                        "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
+                        "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
+                        "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
+                        "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
+                        "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
+                        "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
+                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
+                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
+                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
+                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
+                        "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
+                        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
+                        "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
+                        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
+                        "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
+                        "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
+                        "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
+                        "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
+                        "TLS_RSA_WITH_AES_256_GCM_SHA384",
+                        "TLS_RSA_WITH_AES_128_GCM_SHA256",
+                        "TLS_RSA_WITH_AES_256_CBC_SHA256",
+                        "TLS_RSA_WITH_AES_128_CBC_SHA256",
+                        "TLS_RSA_WITH_AES_256_CBC_SHA",
+                        "TLS_RSA_WITH_AES_128_CBC_SHA",
+                        "TLS_EMPTY_RENEGOTIATION_INFO_SCSV"
+                ).build();
+
+        assertThat(sslFactory.getCiphers())
+                .isNotEmpty()
+                .contains("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
+    }
+
     @Test
     void returnSpecifiedCiphersAndProtocolsWithinSslParameters() {
         SSLFactory sslFactory = SSLFactory.builder()
@@ -1635,6 +1720,42 @@ class SSLFactoryShould {
         assertThat(sslFactory.getProtocols()).contains("TLSv1.2");
     }
 
+    @Test
+    void returnWithExcludedProtocols() {
+        SSLFactory sslFactory = SSLFactory.builder()
+                .withDummyTrustMaterial()
+                .build();
+
+        assertThat(sslFactory.getProtocols()).contains("TLSv1.2");
+
+        sslFactory = SSLFactory.builder()
+                .withDummyTrustMaterial()
+                .withExcludedProtocols("TLSv1.2")
+                .build();
+
+        assertThat(sslFactory.getProtocols())
+                .isNotEmpty()
+                .doesNotContainSequence("TLSv1.2");
+    }
+
+    @Test
+    void returnWithDefaultProtocolsWhenAllIsExcluded() {
+        SSLFactory sslFactory = SSLFactory.builder()
+                .withDummyTrustMaterial()
+                .build();
+
+        assertThat(sslFactory.getProtocols()).contains("TLSv1.2");
+
+        sslFactory = SSLFactory.builder()
+                .withDummyTrustMaterial()
+                .withExcludedProtocols("TLSv1.2", "TLSv1.3", "TLSv1.1")
+                .build();
+
+        assertThat(sslFactory.getProtocols())
+                .isNotEmpty()
+                .contains("TLSv1.2");
+    }
+
     @Test
     void returnSpecifiedNeedClientAuthenticationWithoutOptions() {
         SSLFactory sslFactory = SSLFactory.builder()
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/SSLParametersUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/SSLParametersUtilsShould.java
new file mode 100644
index 0000000..1b0386d
--- /dev/null
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/SSLParametersUtilsShould.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright 2019 Thunderberry.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package nl.altindag.ssl.util;
+
+import nl.altindag.ssl.SSLFactory;
+import org.assertj.core.api.Assertions;
+import org.junit.jupiter.api.Test;
+
+import javax.net.ssl.SSLParameters;
+
+import static org.mockito.Mockito.spy;
+
+/**
+ * @author Hakan Altindag
+ */
+class SSLParametersUtilsShould {
+
+    @Test
+    void useBaseSslParametersIfItIsFilledWithData() {
+        SSLParameters baseSslParameters = spy(
+                new SSLParameters(
+                        new String[]{"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"},
+                        new String[]{"TLSv1.2"}
+                )
+        );
+
+        SSLFactory sslFactory = SSLFactory.builder()
+                .withDummyTrustMaterial()
+                .build();
+
+        SSLParameters mergedParameters = SSLParametersUtils.merge(baseSslParameters, sslFactory.getSslParameters());
+
+        Assertions.assertThat(mergedParameters.getCipherSuites()).containsExactly("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
+        Assertions.assertThat(mergedParameters.getProtocols()).containsExactly("TLSv1.2");
+    }
+
+}
