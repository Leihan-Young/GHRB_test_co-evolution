diff --git a/dubbo-common/src/test/java/org/apache/dubbo/metadata/definition/DefaultTypeBuilderTest.java b/dubbo-common/src/test/java/org/apache/dubbo/metadata/definition/DefaultTypeBuilderTest.java
new file mode 100644
index 0000000000..74a691227c
--- /dev/null
+++ b/dubbo-common/src/test/java/org/apache/dubbo/metadata/definition/DefaultTypeBuilderTest.java
@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.metadata.definition;
+
+import org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder;
+import org.apache.dubbo.rpc.model.FrameworkModel;
+
+import java.util.HashMap;
+
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
+
+public class DefaultTypeBuilderTest {
+    @Test
+    void testInnerClass() {
+        TypeDefinitionBuilder.initBuilders(FrameworkModel.defaultModel());
+
+        Assertions.assertEquals(
+                String.class.getName(),
+                DefaultTypeBuilder.build(String.class, new HashMap<>()).getType());
+
+        DefaultTypeBuilderTest innerObject = new DefaultTypeBuilderTest() {};
+        Assertions.assertEquals(
+                DefaultTypeBuilderTest.class.getName() + "$1",
+                DefaultTypeBuilder.build(innerObject.getClass(), new HashMap<>())
+                        .getType());
+
+        TypeDefinitionBuilder.BUILDERS = null;
+    }
+}
