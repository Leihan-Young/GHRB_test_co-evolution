diff --git a/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveCauseInstance_create_Test.java b/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveCauseInstance_create_Test.java
index e3bf679af..29e8fa42e 100644
--- a/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveCauseInstance_create_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveCauseInstance_create_Test.java
@@ -31,7 +31,8 @@ class ShouldHaveCauseInstance_create_Test {
     // THEN
     then(message).isEqualTo("%nExpecting a throwable with cause being an instance of:%n" +
                             "  %s%n" +
-                            "but current throwable has no cause.", expected);
+                            "but current throwable has no cause." +
+                            "%nThrowable that failed the check:%n%s", expected, getStackTrace(actual));
   }
 
   @Test
diff --git a/assertj-core/src/test/java/org/assertj/core/internal/throwables/Throwables_assertHasCauseInstanceOf_Test.java b/assertj-core/src/test/java/org/assertj/core/internal/throwables/Throwables_assertHasCauseInstanceOf_Test.java
index 74dd404a3..369859393 100644
--- a/assertj-core/src/test/java/org/assertj/core/internal/throwables/Throwables_assertHasCauseInstanceOf_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/internal/throwables/Throwables_assertHasCauseInstanceOf_Test.java
@@ -12,16 +12,13 @@
  */
 package org.assertj.core.internal.throwables;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
-import static org.assertj.core.api.Assertions.assertThatNullPointerException;
 import static org.assertj.core.api.Assertions.catchThrowable;
+import static org.assertj.core.api.BDDAssertions.then;
 import static org.assertj.core.error.ShouldHaveCauseInstance.shouldHaveCauseInstance;
-import static org.assertj.core.test.TestData.someInfo;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
 import static org.assertj.core.util.FailureMessages.actualIsNull;
 import static org.mockito.Mockito.verify;
 
-import org.assertj.core.api.AssertionInfo;
 import org.assertj.core.internal.ThrowablesBaseTest;
 import org.junit.jupiter.api.Test;
 
@@ -38,47 +35,53 @@ class Throwables_assertHasCauseInstanceOf_Test extends ThrowablesBaseTest {
 
   @Test
   void should_pass_if_cause_is_exactly_instance_of_expected_type() {
-    throwables.assertHasCauseInstanceOf(someInfo(), throwableWithCause, IllegalArgumentException.class);
+    throwables.assertHasCauseInstanceOf(INFO, throwableWithCause, IllegalArgumentException.class);
   }
 
   @Test
   void should_pass_if_cause_is_instance_of_expected_type() {
-    throwables.assertHasCauseInstanceOf(someInfo(), throwableWithCause, RuntimeException.class);
+    throwables.assertHasCauseInstanceOf(INFO, throwableWithCause, RuntimeException.class);
   }
 
   @Test
   void should_fail_if_actual_is_null() {
-    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> throwables.assertHasCauseInstanceOf(someInfo(), null,
-                                                                                                         IllegalArgumentException.class))
-                                                   .withMessage(actualIsNull());
+    // GIVEN
+    Throwable actual = null;
+    // WHEN
+    AssertionError error = expectAssertionError(() -> throwables.assertHasCauseInstanceOf(INFO, actual,
+                                                                                          IllegalArgumentException.class));
+    // THEN
+    then(error).hasMessage(actualIsNull());
   }
 
   @Test
   void should_throw_NullPointerException_if_given_type_is_null() {
-    assertThatNullPointerException().isThrownBy(() -> throwables.assertHasCauseInstanceOf(someInfo(),
-                                                                                          throwableWithCause, null))
-                                    .withMessage("The given type should not be null");
+    // GIVEN
+    Class<? extends Throwable> type = null;
+    // WHEN
+    Throwable throwable = catchThrowable(() -> throwables.assertHasCauseInstanceOf(INFO, throwableWithCause, type));
+    // THEN
+    then(throwable).isInstanceOf(NullPointerException.class)
+                   .hasMessage("The given type should not be null");
   }
 
   @Test
   void should_fail_if_actual_has_no_cause() {
-    AssertionInfo info = someInfo();
+    // GIVEN
     Class<NullPointerException> expectedCauseType = NullPointerException.class;
-
-    Throwable error = catchThrowable(() -> throwables.assertHasCauseInstanceOf(info, actual, expectedCauseType));
-
-    assertThat(error).isInstanceOf(AssertionError.class);
-    verify(failures).failure(info, shouldHaveCauseInstance(actual, expectedCauseType));
+    // WHEN
+    expectAssertionError(() -> throwables.assertHasCauseInstanceOf(INFO, actual, expectedCauseType));
+    // THEN
+    verify(failures).failure(INFO, shouldHaveCauseInstance(actual, expectedCauseType));
   }
 
   @Test
   void should_fail_if_cause_is_not_instance_of_expected_type() {
-    AssertionInfo info = someInfo();
+    // GIVEN
     Class<NullPointerException> expectedCauseType = NullPointerException.class;
-
-    Throwable error = catchThrowable(() -> throwables.assertHasCauseInstanceOf(info, throwableWithCause, expectedCauseType));
-
-    assertThat(error).isInstanceOf(AssertionError.class);
-    verify(failures).failure(info, shouldHaveCauseInstance(throwableWithCause, expectedCauseType));
+    // WHEN
+    expectAssertionError(() -> throwables.assertHasCauseInstanceOf(INFO, throwableWithCause, expectedCauseType));
+    // THEN
+    verify(failures).failure(INFO, shouldHaveCauseInstance(throwableWithCause, expectedCauseType));
   }
 }
