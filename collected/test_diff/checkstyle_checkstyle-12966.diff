diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
index 51423c013..0d2f9d62f 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
@@ -124,8 +124,6 @@ public class FallThroughCheckTest extends AbstractModuleTestSupport {
             "432:9: " + getCheckMessage(MSG_FALL_THROUGH),
             "444:9: " + getCheckMessage(MSG_FALL_THROUGH),
             "454:9: " + getCheckMessage(MSG_FALL_THROUGH),
-            // line 490 violation expected till https://github.com/checkstyle/checkstyle/pull/12966
-            "490:9: " + getCheckMessage(MSG_FALL_THROUGH),
             "491:9: " + getCheckMessage(MSG_FALL_THROUGH),
             "492:9: " + getCheckMessage(MSG_FALL_THROUGH),
         };
@@ -254,6 +252,7 @@ public class FallThroughCheckTest extends AbstractModuleTestSupport {
         final String[] expected = {
             "48:11: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
             "83:11: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
+            "112:11: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
         };
         verifyWithInlineConfigParser(
                 getPath("InputFallThrough4.java"),
@@ -273,13 +272,8 @@ public class FallThroughCheckTest extends AbstractModuleTestSupport {
     @Test
     public void testFallThrough() throws Exception {
         final String[] expected = {
-            "16:13: " + getCheckMessage(MSG_FALL_THROUGH),
-            "18:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "23:13: " + getCheckMessage(MSG_FALL_THROUGH),
-            "25:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "27:13: " + getCheckMessage(MSG_FALL_THROUGH),
-            // line 37 needs consideration https://github.com/checkstyle/checkstyle/pull/12966
-            "37:10: " + getCheckMessage(MSG_FALL_THROUGH),
             "52:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "65:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "80:13: " + getCheckMessage(MSG_FALL_THROUGH),
@@ -337,7 +331,11 @@ public class FallThroughCheckTest extends AbstractModuleTestSupport {
     public void testLastLine() throws Exception {
         final String[] expected = {
             "21:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            // until https://github.com/checkstyle/checkstyle/issues/13553
+            "33:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "99:39: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
+            // until https://github.com/checkstyle/checkstyle/issues/13553
+            "107:11: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
         };
         verifyWithInlineConfigParser(
                 getPath("InputFallThroughLastLineCommentCheck.java"),
@@ -349,10 +347,22 @@ public class FallThroughCheckTest extends AbstractModuleTestSupport {
         final String[] expected = {
             "19:13: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
             "22:13: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
-            "25:13: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
         };
         verifyWithInlineConfigParser(
                 getNonCompilablePath("InputFallThrough5.java"),
                 expected);
     }
+
+    @Test
+    public void testReliefCommentBetweenMultipleComment() throws Exception {
+        final String[] expected = {
+            // until https://github.com/checkstyle/checkstyle/issues/13553
+            "25:17: " + getCheckMessage(MSG_FALL_THROUGH),
+            // until https://github.com/checkstyle/checkstyle/issues/13553
+            "34:13: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
+        };
+        verifyWithInlineConfigParser(
+                getPath("InputFallThrough8.java"),
+                expected);
+    }
 }
