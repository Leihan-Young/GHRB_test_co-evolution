diff --git a/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/SpanTags.java b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/SpanTags.java
index 62643c878a..b20e3e2198 100644
--- a/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/SpanTags.java
+++ b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/SpanTags.java
@@ -45,6 +45,12 @@ public class SpanTags {
 
     public static final String CACHE_KEY = "cache.key";
 
+    public static final String MQ_QUEUE = "mq.queue";
+
+    public static final String MQ_TOPIC = "mq.topic";
+
+    public static final String TRANSMISSION_LATENCY = "transmission.latency";
+
     /**
      * Tag, x-le(extension logic endpoint) series tag. Value is JSON format.
      * <pre>
diff --git a/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/VirtualServiceAnalysisListener.java b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/VirtualServiceAnalysisListener.java
index 54e59502ad..95c0ac47fc 100644
--- a/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/VirtualServiceAnalysisListener.java
+++ b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/VirtualServiceAnalysisListener.java
@@ -18,27 +18,27 @@
 
 package org.apache.skywalking.oap.server.analyzer.provider.trace.parser.listener;
 
+import java.util.Arrays;
+import java.util.List;
 import lombok.RequiredArgsConstructor;
 import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;
 import org.apache.skywalking.apm.network.language.agent.v3.SpanObject;
 import org.apache.skywalking.oap.server.analyzer.provider.AnalyzerModuleConfig;
 import org.apache.skywalking.oap.server.analyzer.provider.trace.parser.listener.vservice.VirtualCacheProcessor;
 import org.apache.skywalking.oap.server.analyzer.provider.trace.parser.listener.vservice.VirtualDatabaseProcessor;
+import org.apache.skywalking.oap.server.analyzer.provider.trace.parser.listener.vservice.VirtualMQProcessor;
 import org.apache.skywalking.oap.server.analyzer.provider.trace.parser.listener.vservice.VirtualServiceProcessor;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.config.NamingControl;
 import org.apache.skywalking.oap.server.core.source.SourceReceiver;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 
-import java.util.Arrays;
-import java.util.List;
-
 /**
  * Virtual Service represent remote service
  */
 
 @RequiredArgsConstructor
-public class VirtualServiceAnalysisListener implements ExitAnalysisListener, LocalAnalysisListener {
+public class VirtualServiceAnalysisListener implements ExitAnalysisListener, LocalAnalysisListener, EntryAnalysisListener {
 
     private final SourceReceiver sourceReceiver;
     private final List<VirtualServiceProcessor> virtualServiceProcessors;
@@ -50,7 +50,7 @@ public class VirtualServiceAnalysisListener implements ExitAnalysisListener, Loc
 
     @Override
     public boolean containsPoint(Point point) {
-        return point == Point.Local || point == Point.Exit;
+        return point == Point.Local || point == Point.Exit || point == Point.Entry;
     }
 
     @Override
@@ -63,6 +63,11 @@ public class VirtualServiceAnalysisListener implements ExitAnalysisListener, Loc
         virtualServiceProcessors.forEach(p -> p.prepareVSIfNecessary(span, segmentObject));
     }
 
+    @Override
+    public void parseEntry(final SpanObject span, final SegmentObject segmentObject) {
+        virtualServiceProcessors.forEach(p -> p.prepareVSIfNecessary(span, segmentObject));
+    }
+
     public static class Factory implements AnalysisListenerFactory {
         private final SourceReceiver sourceReceiver;
         private final NamingControl namingControl;
@@ -76,11 +81,13 @@ public class VirtualServiceAnalysisListener implements ExitAnalysisListener, Loc
 
         @Override
         public AnalysisListener create(ModuleManager moduleManager, AnalyzerModuleConfig config) {
-            return new VirtualServiceAnalysisListener(sourceReceiver,
-                    Arrays.asList(
-                            new VirtualCacheProcessor(namingControl, config),
-                            new VirtualDatabaseProcessor(namingControl, config)
-                    )
+            return new VirtualServiceAnalysisListener(
+                sourceReceiver,
+                Arrays.asList(
+                    new VirtualCacheProcessor(namingControl, config),
+                    new VirtualDatabaseProcessor(namingControl, config),
+                    new VirtualMQProcessor(namingControl)
+                )
             );
         }
     }
diff --git a/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/vservice/VirtualMQProcessor.java b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/vservice/VirtualMQProcessor.java
new file mode 100644
index 0000000000..4721aa577c
--- /dev/null
+++ b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/vservice/VirtualMQProcessor.java
@@ -0,0 +1,146 @@
+/*
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements.  See the NOTICE file distributed with
+ *   this work for additional information regarding copyright ownership.
+ *   The ASF licenses this file to You under the Apache License, Version 2.0
+ *   (the "License"); you may not use this file except in compliance with
+ *   the License.  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ */
+
+package org.apache.skywalking.oap.server.analyzer.provider.trace.parser.listener.vservice;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Consumer;
+import java.util.stream.Stream;
+import lombok.RequiredArgsConstructor;
+import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;
+import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;
+import org.apache.skywalking.apm.network.language.agent.v3.SegmentReference;
+import org.apache.skywalking.apm.network.language.agent.v3.SpanLayer;
+import org.apache.skywalking.apm.network.language.agent.v3.SpanObject;
+import org.apache.skywalking.apm.network.language.agent.v3.SpanType;
+import org.apache.skywalking.oap.server.analyzer.provider.trace.parser.SpanTags;
+import org.apache.skywalking.oap.server.core.analysis.Layer;
+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
+import org.apache.skywalking.oap.server.core.config.NamingControl;
+import org.apache.skywalking.oap.server.core.source.EndpointMeta;
+import org.apache.skywalking.oap.server.core.source.MQAccess;
+import org.apache.skywalking.oap.server.core.source.MQEndpointAccess;
+import org.apache.skywalking.oap.server.core.source.MQOperation;
+import org.apache.skywalking.oap.server.core.source.ServiceMeta;
+import org.apache.skywalking.oap.server.core.source.Source;
+import org.apache.skywalking.oap.server.library.util.StringUtil;
+
+@RequiredArgsConstructor
+public class VirtualMQProcessor implements VirtualServiceProcessor {
+
+    private final NamingControl namingControl;
+    private final List<Source> sourceList = new ArrayList<>();
+
+    @Override
+    public void prepareVSIfNecessary(final SpanObject span, final SegmentObject segmentObject) {
+        if (span.getSpanLayer() != SpanLayer.MQ) {
+            return;
+        }
+        if (!(span.getSpanType() == SpanType.Exit || span.getSpanType() == SpanType.Entry)) {
+            return;
+        }
+        MQTags mqTags = collectTags(span.getTagsList());
+        final MQOperation mqOperation;
+        final String serviceName;
+        if (span.getSpanType() == SpanType.Entry) {
+            mqOperation = MQOperation.Consume;
+            final String peer = span.getRefsList()
+                                    .stream()
+                                    .findFirst()
+                                    .map(SegmentReference::getNetworkAddressUsedAtPeer)
+                                    .orElse(null);
+            serviceName = namingControl.formatServiceName(peer);
+        } else {
+            mqOperation = MQOperation.Produce;
+            serviceName = namingControl.formatServiceName(span.getPeer());
+        }
+        long timeBucket = TimeBucket.getMinuteTimeBucket(span.getStartTime());
+        sourceList.add(toServiceMeta(serviceName, timeBucket));
+        String endpoint = buildEndpointName(mqTags.topic, mqTags.queue);
+        String endpointName = namingControl.formatEndpointName(serviceName, endpoint);
+        sourceList.add(toEndpointMeta(serviceName, endpointName, timeBucket));
+        MQAccess access = new MQAccess();
+        access.setTypeId(span.getComponentId());
+        access.setTransmissionLatency(mqTags.transmissionLatency);
+        access.setName(serviceName);
+        access.setStatus(!span.getIsError());
+        access.setTimeBucket(timeBucket);
+        access.setOperation(mqOperation);
+        sourceList.add(access);
+
+        MQEndpointAccess endpointAccess = new MQEndpointAccess();
+        endpointAccess.setTypeId(span.getComponentId());
+        endpointAccess.setTransmissionLatency(mqTags.transmissionLatency);
+        endpointAccess.setStatus(!span.getIsError());
+        endpointAccess.setTimeBucket(timeBucket);
+        endpointAccess.setOperation(mqOperation);
+        endpointAccess.setServiceName(serviceName);
+        endpointAccess.setEndpoint(endpointName);
+        sourceList.add(endpointAccess);
+    }
+
+    private String buildEndpointName(String topic, String queue) {
+        return Stream.of(topic, queue)
+                     .filter(StringUtil::isNotBlank)
+                     .reduce((a, b) -> a + "/" + b).orElse("");
+    }
+
+    private MQTags collectTags(final List<KeyStringValuePair> tagsList) {
+        MQTags mqTags = new MQTags();
+        for (KeyStringValuePair keyStringValuePair : tagsList) {
+            if (SpanTags.MQ_TOPIC.equals(keyStringValuePair.getKey())) {
+                mqTags.topic = keyStringValuePair.getValue();
+            } else if (SpanTags.MQ_QUEUE.equals(keyStringValuePair.getKey())) {
+                mqTags.queue = keyStringValuePair.getValue();
+            } else if (SpanTags.TRANSMISSION_LATENCY.equals(keyStringValuePair.getKey())) {
+                mqTags.transmissionLatency = StringUtil.isBlank(keyStringValuePair.getValue()) ? 0L : Long.parseLong(
+                    keyStringValuePair.getValue());
+            }
+        }
+        return mqTags;
+    }
+
+    private ServiceMeta toServiceMeta(String serviceName, Long timeBucket) {
+        ServiceMeta service = new ServiceMeta();
+        service.setName(serviceName);
+        service.setLayer(Layer.VIRTUAL_MQ);
+        service.setTimeBucket(timeBucket);
+        return service;
+    }
+
+    private EndpointMeta toEndpointMeta(String serviceName, String endpoint, Long timeBucket) {
+        EndpointMeta endpointMeta = new EndpointMeta();
+        endpointMeta.setServiceName(serviceName);
+        endpointMeta.setServiceNormal(false);
+        endpointMeta.setEndpoint(endpoint);
+        endpointMeta.setTimeBucket(timeBucket);
+        return endpointMeta;
+    }
+
+    @Override
+    public void emitTo(final Consumer<Source> consumer) {
+        sourceList.forEach(consumer);
+    }
+
+    private static class MQTags {
+        private String topic;
+        private String queue;
+        private long transmissionLatency;
+    }
+
+}
diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateInitializer.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateInitializer.java
index f5e77f3fc0..2f62be0f3a 100644
--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateInitializer.java
+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateInitializer.java
@@ -59,6 +59,7 @@ public class UITemplateInitializer {
         Layer.SO11Y_SATELLITE.name(),
         Layer.FAAS.name(),
         Layer.APISIX.name(),
+        Layer.VIRTUAL_MQ.name(),
         "custom"
     };
     private final UITemplateManagementService uiTemplateManagementService;
diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/CacheAccess.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/CacheAccess.java
index 0f292db4db..270cdeaf2d 100644
--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/CacheAccess.java
+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/CacheAccess.java
@@ -36,9 +36,14 @@ public class CacheAccess extends Source {
 
     @Override
     public String getEntityId() {
-        return IDManager.ServiceID.buildId(name, false);
+        if (entityId == null) {
+            entityId = IDManager.ServiceID.buildId(name, false);
+        }
+        return entityId;
     }
 
+    private String entityId;
+
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DatabaseAccess.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DatabaseAccess.java
index 05a5126ec7..edf7a38fcf 100644
--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DatabaseAccess.java
+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DatabaseAccess.java
@@ -36,9 +36,14 @@ public class DatabaseAccess extends Source {
 
     @Override
     public String getEntityId() {
-        return IDManager.ServiceID.buildId(name, false);
+        if (entityId == null) {
+            entityId = IDManager.ServiceID.buildId(name, false);
+        }
+        return entityId;
     }
 
+    private String entityId;
+
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
index 7f7d00f635..bac4bf180c 100644
--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
@@ -116,6 +116,9 @@ public class DefaultScopeDefine {
     public static final int TCP_SERVICE_INSTANCE_UPDATE = 61;
     public static final int SAMPLED_SLOW_TRACE = 62;
 
+    public static final int MESSAGE_QUEUE_ACCESS = 63;
+    public static final int MESSAGE_QUEUE_ENDPOINT_ACCESS = 64;
+
     /**
      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.
      */
diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/MQAccess.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/MQAccess.java
new file mode 100644
index 0000000000..c0da447a91
--- /dev/null
+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/MQAccess.java
@@ -0,0 +1,62 @@
+/*
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements.  See the NOTICE file distributed with
+ *   this work for additional information regarding copyright ownership.
+ *   The ASF licenses this file to You under the Apache License, Version 2.0
+ *   (the "License"); you may not use this file except in compliance with
+ *   the License.  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ */
+
+package org.apache.skywalking.oap.server.core.source;
+
+import lombok.Getter;
+import lombok.Setter;
+import org.apache.skywalking.oap.server.core.analysis.IDManager;
+
+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.MESSAGE_QUEUE_ACCESS;
+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;
+
+@ScopeDeclaration(id = MESSAGE_QUEUE_ACCESS, name = "MQAccess", catalog = SERVICE_CATALOG_NAME)
+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
+public class MQAccess extends Source {
+    @Override
+    public int scope() {
+        return MESSAGE_QUEUE_ACCESS;
+    }
+
+    @Override
+    public String getEntityId() {
+        if (entityId == null) {
+            entityId = IDManager.ServiceID.buildId(name, false);
+        }
+        return entityId;
+    }
+
+    private String entityId;
+
+    @Getter
+    @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
+    private String name;
+    @Getter
+    @Setter
+    private int typeId;
+    @Getter
+    @Setter
+    private long transmissionLatency;
+    @Getter
+    @Setter
+    private boolean status;
+
+    @Getter
+    @Setter
+    private MQOperation operation;
+}
diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/MQEndpointAccess.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/MQEndpointAccess.java
new file mode 100644
index 0000000000..8e34d82e7a
--- /dev/null
+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/MQEndpointAccess.java
@@ -0,0 +1,77 @@
+/*
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements.  See the NOTICE file distributed with
+ *   this work for additional information regarding copyright ownership.
+ *   The ASF licenses this file to You under the Apache License, Version 2.0
+ *   (the "License"); you may not use this file except in compliance with
+ *   the License.  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ */
+
+package org.apache.skywalking.oap.server.core.source;
+
+import lombok.Getter;
+import lombok.Setter;
+import org.apache.skywalking.oap.server.core.analysis.IDManager;
+
+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_CATALOG_NAME;
+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.MESSAGE_QUEUE_ENDPOINT_ACCESS;
+
+@ScopeDeclaration(id = MESSAGE_QUEUE_ENDPOINT_ACCESS, name = "MQEndpointAccess", catalog = ENDPOINT_CATALOG_NAME)
+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
+public class MQEndpointAccess extends Source {
+    @Override
+    public int scope() {
+        return MESSAGE_QUEUE_ENDPOINT_ACCESS;
+    }
+
+    @Override
+    public String getEntityId() {
+        if (entityId == null) {
+            entityId = IDManager.EndpointID.buildId(serviceId, endpoint);
+        }
+        return entityId;
+    }
+
+    private String entityId;
+
+    @Getter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
+    private String serviceId;
+
+    @Getter
+    @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
+    private String serviceName;
+
+    @Getter
+    @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "endpoint", requireDynamicActive = true)
+    private String endpoint;
+
+    @Getter
+    @Setter
+    private int typeId;
+    @Getter
+    @Setter
+    private long transmissionLatency;
+    @Getter
+    @Setter
+    private boolean status;
+
+    @Getter
+    @Setter
+    private MQOperation operation;
+
+    @Override
+    public void prepare() {
+        this.serviceId = IDManager.ServiceID.buildId(serviceName, false);
+    }
+}
diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/MQOperation.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/MQOperation.java
new file mode 100644
index 0000000000..fc5d288df1
--- /dev/null
+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/MQOperation.java
@@ -0,0 +1,23 @@
+/*
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements.  See the NOTICE file distributed with
+ *   this work for additional information regarding copyright ownership.
+ *   The ASF licenses this file to You under the Apache License, Version 2.0
+ *   (the "License"); you may not use this file except in compliance with
+ *   the License.  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ */
+
+package org.apache.skywalking.oap.server.core.source;
+
+public enum MQOperation {
+    Consume,
+    Produce
+}
