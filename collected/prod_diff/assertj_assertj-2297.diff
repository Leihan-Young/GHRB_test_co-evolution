diff --git a/src/main/java/org/assertj/core/api/AbstractAssert.java b/src/main/java/org/assertj/core/api/AbstractAssert.java
index dfa42db17..c04bc4622 100644
--- a/src/main/java/org/assertj/core/api/AbstractAssert.java
+++ b/src/main/java/org/assertj/core/api/AbstractAssert.java
@@ -817,6 +817,37 @@ public abstract class AbstractAssert<SELF extends AbstractAssert<SELF, ACTUAL>,
    * @throws NullPointerException if given Consumer is null
    */
   public SELF satisfies(Consumer<ACTUAL> requirements) {
+    return internalSatisfies(requirements);
+  }
+
+  /**
+   * Verifies that the actual object satisfied the given requirements expressed as a {@link ThrowingConsumer}.
+   * <p>
+   * This is the same assertion as {@link #satisfies(java.util.function.Consumer)} except that a {@link ThrowingConsumer} rethrows checked exceptions as {@link RuntimeException}.
+   * More precisely, {@link RuntimeException} and {@link AssertionError} are rethrown as they are while any other {@link Throwable} are rethrown as {@link RuntimeException}. 
+   * <p>
+   * Example:
+   * <pre><code class='java'> // read() throws IOException
+   * ThrowingConsumer&lt;Reader&gt; hasReachedEOF = reader -&gt; assertThat(reader.read()).isEqualTo(-1);
+   *
+   * // assertion succeeds as the file is empty (note that if hasReachedEOF was declared as Consumer&lt;Reader&gt; the following line would not compile): 
+   * assertThat(new FileReader("empty.txt")).satisfies(hasReachedEOF);
+   *
+   * // assertion fails as the file is not empty:
+   * assertThat(new FileReader("nonEmpty.txt")).satisfies(hasReachedEOF);</code></pre>
+   *
+   * @param throwingConsumer requirements to assert on the actual object - must not be null..
+   * @return this assertion object.
+   *
+   * @throws NullPointerException if given {@link ThrowingConsumer} is null
+   * @throws RuntimeException rethrown as is by given {@link ThrowingConsumer} or wrapping any {@link Throwable}.    
+   * @throws AssertionError rethrown as is by given {@link ThrowingConsumer}  
+   */
+  public SELF satisfies(ThrowingConsumer<ACTUAL> throwingConsumer) {
+    return internalSatisfies(throwingConsumer);
+  }
+  
+  private SELF internalSatisfies(Consumer<ACTUAL> requirements) {
     requireNonNull(requirements, "The Consumer<T> expressing the assertions requirements must not be null");
     requirements.accept(actual);
     return myself;
diff --git a/src/main/java/org/assertj/core/api/ThrowingConsumer.java b/src/main/java/org/assertj/core/api/ThrowingConsumer.java
new file mode 100644
index 000000000..74c91943e
--- /dev/null
+++ b/src/main/java/org/assertj/core/api/ThrowingConsumer.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import java.util.function.Consumer;
+
+/**
+ * {@link Consumer} that deals with checked exceptions by rethrowing them as {@link RuntimeException}.
+ * <p>
+ * More precisely, {@link RuntimeException} and {@link AssertionError} are rethrown as they are while any other {@link Throwable} are rethrown as {@link RuntimeException}. 
+ *
+ * @param <T> consumed type
+ */
+@FunctionalInterface
+public interface ThrowingConsumer<T> extends Consumer<T> {
+
+  @Override
+  default void accept(final T input) {
+    try {
+      acceptThrows(input);
+    } catch (final RuntimeException | AssertionError e) {
+      throw e;
+    } catch (Throwable e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  void acceptThrows(T input) throws Throwable;
+}
