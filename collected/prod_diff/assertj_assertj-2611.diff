diff --git a/src/main/java/org/assertj/core/api/AbstractClassAssert.java b/src/main/java/org/assertj/core/api/AbstractClassAssert.java
index 57808dc93..dd6fe7031 100644
--- a/src/main/java/org/assertj/core/api/AbstractClassAssert.java
+++ b/src/main/java/org/assertj/core/api/AbstractClassAssert.java
@@ -12,9 +12,12 @@
  */
 package org.assertj.core.api;
 
+import static org.assertj.core.error.ShouldBeAssignableTo.shouldBeAssignableTo;
+import static org.assertj.core.error.ShouldNotBeNull.shouldNotBeNull;
 import static org.assertj.core.util.Arrays.array;
 
 import java.lang.annotation.Annotation;
+import java.util.Objects;
 
 import org.assertj.core.internal.Classes;
 
@@ -62,6 +65,40 @@ public abstract class AbstractClassAssert<SELF extends AbstractClassAssert<SELF>
     return myself;
   }
 
+  /**
+   * Verifies that the actual {@code Class} is assignable to other {@code Class}
+   * <p>
+   * Example:
+   * <pre><code class='java'> class Jedi {}
+   * class HumanJedi extends Jedi {}
+   *
+   * // this assertion succeeds:
+   * assertThat(HumanJedi.class).isAssignableTo(Jedi.class);
+   *
+   * // this assertion fails
+   * assertThat(Jedi.class).isAssignableTo(HumanJedi.class);</code></pre>
+   *
+   * @see Class#isAssignableFrom(Class)
+   * @param other {@code Class} who can be assignable to.
+   * @return {@code this} assertions object
+   * @throws AssertionError if the actual {@code Class} is {@code null}.
+   * @throws IllegalArgumentException if {@code other} is null.
+   * @throws AssertionError if the actual {@code Class} is not assignable to the {@code others} class.
+   *
+   * @since 3.24.0
+   */
+  public SELF isAssignableTo(Class<?> other) {
+    isNotNull();
+    assertIsAssignableTo(other);
+    return myself;
+  }
+
+  private void assertIsAssignableTo(Class<?> other) {
+    Objects.requireNonNull(other, shouldNotBeNull("other")::create);
+
+    if (!other.isAssignableFrom(actual)) throw assertionError(shouldBeAssignableTo(actual, other));
+  }
+
   /**
    * Verifies that the actual {@code Class} is not an interface.
    * <p>
diff --git a/src/main/java/org/assertj/core/error/ShouldBeAssignableTo.java b/src/main/java/org/assertj/core/error/ShouldBeAssignableTo.java
new file mode 100644
index 000000000..f5ade7173
--- /dev/null
+++ b/src/main/java/org/assertj/core/error/ShouldBeAssignableTo.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import java.util.StringJoiner;
+
+/**
+ * Creates an error message indicating that an assertion that verifies that a class is assignable to.
+ *
+ * @author Vikram Nithyanandam
+ * @author Jessica Hamilton
+ */
+public class ShouldBeAssignableTo extends BasicErrorMessageFactory {
+
+  private static final String SHOULD_BE_ASSIGNABLE_TO = new StringJoiner("%n", "%n", "").add("Expecting")
+                                                                                        .add("  %s")
+                                                                                        .add("to be assignable to:")
+                                                                                        .add("  %s")
+                                                                                        .toString();
+
+  /**
+   * Creates a new <code>{@link ShouldBeAssignableTo}</code>.
+   *
+   * @param actual the actual value in the failed assertion.
+   * @param other the type {@code actual} should be assignable to.
+   * @return the created {@code ErrorMessageFactory}.
+   */
+  public static ErrorMessageFactory shouldBeAssignableTo(Class<?> actual, Class<?> other) {
+    return new ShouldBeAssignableTo(actual, other);
+  }
+
+  private ShouldBeAssignableTo(Class<?> actual, Class<?> other) {
+    super(SHOULD_BE_ASSIGNABLE_TO, actual, other);
+  }
+
+}
