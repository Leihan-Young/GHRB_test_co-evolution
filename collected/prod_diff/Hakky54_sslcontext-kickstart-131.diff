diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java
index 41590af..6559a90 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java
@@ -176,7 +176,7 @@ public final class SSLFactory {
         private final List<X509ExtendedKeyManager> identityManagers = new ArrayList<>();
         private final List<X509ExtendedTrustManager> trustManagers = new ArrayList<>();
         private final SSLParameters sslParameters = new SSLParameters();
-        private final Map<String, List<URI>> preferredClientAliasToHost = new HashMap<>();
+        private final Map<String, List<URI>> preferredAliasToHost = new HashMap<>();
 
         private boolean swappableKeyManagerEnabled = false;
         private boolean swappableTrustManagerEnabled = false;
@@ -504,42 +504,52 @@ public final class SSLFactory {
             }
         }
 
+        @Deprecated
         public Builder withClientIdentityRoute(String clientAlias, String... hosts) {
-            return withClientIdentityRoute(
-                    clientAlias,
+            return withIdentityRoute(clientAlias, hosts);
+        }
+
+        @Deprecated
+        public Builder withClientIdentityRoute(Map<String, List<String>> clientAliasesToHosts) {
+            return withIdentityRoute(clientAliasesToHosts);
+        }
+
+        public Builder withIdentityRoute(String alias, String... hosts) {
+            return withIdentityRoute(
+                    alias,
                     Arrays.stream(hosts)
                             .map(URI::create)
                             .collect(Collectors.toList())
             );
         }
 
-        public Builder withClientIdentityRoute(Map<String, List<String>> clientAliasesToHosts) {
-            clientAliasesToHosts.entrySet().stream()
-                    .map(clientAliasToHosts -> new AbstractMap.SimpleEntry<>(
-                            clientAliasToHosts.getKey(),
-                            clientAliasToHosts.getValue().stream()
+        public Builder withIdentityRoute(Map<String, List<String>> aliasesToHosts) {
+            aliasesToHosts.entrySet().stream()
+                    .map(aliasToHosts -> new AbstractMap.SimpleEntry<>(
+                            aliasToHosts.getKey(),
+                            aliasToHosts.getValue().stream()
                                     .map(URI::create)
                                     .collect(Collectors.toList())))
-                    .forEach(clientAliasToHosts -> withClientIdentityRoute(clientAliasToHosts.getKey(), clientAliasToHosts.getValue()));
+                    .forEach(aliasToHosts -> withIdentityRoute(aliasToHosts.getKey(), aliasToHosts.getValue()));
             return this;
         }
 
-        private Builder withClientIdentityRoute(String clientAlias, List<URI> hosts) {
-            if (StringUtils.isBlank(clientAlias)) {
-                throw new IllegalArgumentException("clientAlias should be present");
+        private Builder withIdentityRoute(String alias, List<URI> hosts) {
+            if (StringUtils.isBlank(alias)) {
+                throw new IllegalArgumentException("alias should be present");
             }
 
             if (hosts.isEmpty()) {
-                throw new IllegalArgumentException(String.format("At least one host should be present. No host(s) found for the given alias: [%s]", clientAlias));
+                throw new IllegalArgumentException(String.format("At least one host should be present. No host(s) found for the given alias: [%s]", alias));
             }
 
             for (URI host : hosts) {
                 UriUtils.validate(host);
 
-                if (preferredClientAliasToHost.containsKey(clientAlias)) {
-                    preferredClientAliasToHost.get(clientAlias).add(host);
+                if (preferredAliasToHost.containsKey(alias)) {
+                    preferredAliasToHost.get(alias).add(host);
                 } else {
-                    preferredClientAliasToHost.put(clientAlias, new ArrayList<>(Collections.singletonList(host)));
+                    preferredAliasToHost.put(alias, new ArrayList<>(Collections.singletonList(host)));
                 }
             }
             return this;
@@ -673,7 +683,7 @@ public final class SSLFactory {
                     .withKeyManagers(identityManagers)
                     .withIdentities(identities)
                     .withSwappableKeyManager(swappableKeyManagerEnabled)
-                    .withClientAliasToHost(preferredClientAliasToHost)
+                    .withAliasToHost(preferredAliasToHost)
                     .build();
         }
 
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/keymanager/CompositeX509ExtendedKeyManager.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/keymanager/CompositeX509ExtendedKeyManager.java
index d7cc945..06fe64d 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/keymanager/CompositeX509ExtendedKeyManager.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/keymanager/CompositeX509ExtendedKeyManager.java
@@ -16,7 +16,11 @@
 
 package nl.altindag.ssl.keymanager;
 
+import javax.net.ssl.ExtendedSSLSession;
+import javax.net.ssl.SNIServerName;
 import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.SSLSocket;
 import javax.net.ssl.X509ExtendedKeyManager;
 import java.net.InetSocketAddress;
 import java.net.Socket;
@@ -24,6 +28,7 @@ import java.net.URI;
 import java.security.Principal;
 import java.security.PrivateKey;
 import java.security.cert.X509Certificate;
+import java.util.AbstractMap.SimpleImmutableEntry;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
@@ -31,13 +36,14 @@ import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.Set;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
 /**
  * Represents an ordered list of {@link X509ExtendedKeyManager} with most-preferred managers first.
- *
+ * <p>
  * This is necessary because of the fine-print on {@link javax.net.ssl.SSLContext#init}:
  * Only the first instance of a particular key and/or key manager implementation type in the
  * array is used. (For example, only the first javax.net.ssl.X509KeyManager in the array will be used.)
@@ -64,14 +70,14 @@ import java.util.stream.Collectors;
  *     </a>
  *
  * @author Cody Ray
- * @author Hakan Altinda
+ * @author Hakan Altindag
  */
 public final class CompositeX509ExtendedKeyManager extends X509ExtendedKeyManager {
 
     private static final Predicate<String> NON_NULL = Objects::nonNull;
 
     private final List<X509ExtendedKeyManager> keyManagers;
-    private final Map<String, List<URI>> preferredClientAliasToHost;
+    private final Map<String, List<URI>> preferredAliasToHost;
 
     /**
      * Creates a new {@link CompositeX509ExtendedKeyManager}.
@@ -85,13 +91,13 @@ public final class CompositeX509ExtendedKeyManager extends X509ExtendedKeyManage
     /**
      * Creates a new {@link CompositeX509ExtendedKeyManager}.
      *
-     * @param keyManagers                the {@link X509ExtendedKeyManager}, ordered with the most-preferred managers first.
-     * @param preferredClientAliasToHost the preferred client alias to be used for the given host
+     * @param keyManagers          the {@link X509ExtendedKeyManager}, ordered with the most-preferred managers first.
+     * @param preferredAliasToHost the preferred client alias to be used for the given host
      */
     public CompositeX509ExtendedKeyManager(List<? extends X509ExtendedKeyManager> keyManagers,
-                                           Map<String, List<URI>> preferredClientAliasToHost) {
+                                           Map<String, List<URI>> preferredAliasToHost) {
         this.keyManagers = Collections.unmodifiableList(keyManagers);
-        this.preferredClientAliasToHost = new HashMap<>(preferredClientAliasToHost);
+        this.preferredAliasToHost = new HashMap<>(preferredAliasToHost);
     }
 
     /**
@@ -100,16 +106,15 @@ public final class CompositeX509ExtendedKeyManager extends X509ExtendedKeyManage
      */
     @Override
     public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {
-        Optional<String> preferredAlias = getPreferredClientAlias(socket);
-
-        if (preferredAlias.isPresent()) {
-            return extractInnerField(
-                    keyManager -> keyManager.chooseClientAlias(keyType, issuers, socket),
-                    NON_NULL.and(alias -> preferredAlias.get().equals(alias))
-            );
-        } else {
-            return extractInnerField(keyManager -> keyManager.chooseClientAlias(keyType, issuers, socket), NON_NULL);
-        }
+        return chooseClientAlias(
+                socket,
+                aSocket -> aSocket != null && aSocket.getRemoteSocketAddress() instanceof InetSocketAddress,
+                aSocket -> {
+                    InetSocketAddress socketAddress = (InetSocketAddress) aSocket.getRemoteSocketAddress();
+                    return new SimpleImmutableEntry<>(socketAddress.getHostName(), socketAddress.getPort());
+                },
+                keyManager -> keyManager.chooseClientAlias(keyType, issuers, socket)
+        );
     }
 
     /**
@@ -118,38 +123,40 @@ public final class CompositeX509ExtendedKeyManager extends X509ExtendedKeyManage
      */
     @Override
     public String chooseEngineClientAlias(String[] keyTypes, Principal[] issuers, SSLEngine sslEngine) {
-        Optional<String> preferredAlias = getPreferredClientAlias(sslEngine);
-
-        if (preferredAlias.isPresent()) {
-            return extractInnerField(
-                    keyManager -> keyManager.chooseEngineClientAlias(keyTypes, issuers, sslEngine),
-                    NON_NULL.and(alias -> preferredAlias.get().equals(alias))
-            );
-        } else {
-            return extractInnerField(keyManager -> keyManager.chooseEngineClientAlias(keyTypes, issuers, sslEngine), NON_NULL);
-        }
+        return chooseClientAlias(
+                sslEngine,
+                Objects::nonNull,
+                aSslEngine -> new SimpleImmutableEntry<>(aSslEngine.getPeerHost(), aSslEngine.getPeerPort()),
+                keyManager -> keyManager.chooseEngineClientAlias(keyTypes, issuers, sslEngine)
+        );
     }
 
-    private Optional<String> getPreferredClientAlias(Socket socket) {
-        if (!preferredClientAliasToHost.isEmpty() && socket != null && socket.getRemoteSocketAddress() instanceof InetSocketAddress) {
-            InetSocketAddress address = (InetSocketAddress) socket.getRemoteSocketAddress();
-            return getPreferredClientAlias(address.getHostName(), address.getPort());
-        } else {
-            return Optional.empty();
-        }
+    private <T> String chooseClientAlias(T object,
+                                         Predicate<T> predicate,
+                                         Function<T, SimpleImmutableEntry<String, Integer>> hostToPortExtractor,
+                                         Function<X509ExtendedKeyManager, String> aliasExtractor) {
+
+        return getPreferredClientAlias(object, predicate, hostToPortExtractor)
+                .map(preferredAlias -> extractInnerField(aliasExtractor, NON_NULL.and(preferredAlias::equals)))
+                .orElseGet(() -> extractInnerField(aliasExtractor, NON_NULL));
     }
 
-    private Optional<String> getPreferredClientAlias(SSLEngine sslEngine) {
-        if (!preferredClientAliasToHost.isEmpty() && sslEngine != null) {
-            return getPreferredClientAlias(sslEngine.getPeerHost(), sslEngine.getPeerPort());
-        } else {
+    private <T> Optional<String> getPreferredClientAlias(T object, Predicate<T> predicate, Function<T, SimpleImmutableEntry<String, Integer>> hostToPortExtractor) {
+        if (preferredAliasToHost.isEmpty()) {
             return Optional.empty();
         }
+
+        if (predicate.test(object)) {
+            SimpleImmutableEntry<String, Integer> hostToPort = hostToPortExtractor.apply(object);
+            return getPreferredClientAlias(hostToPort.getKey(), hostToPort.getValue());
+        }
+
+        return Optional.empty();
     }
 
     private Optional<String> getPreferredClientAlias(String peerHost, int peerPort) {
-        return preferredClientAliasToHost.entrySet().stream()
-                .filter(entry -> entry.getValue().stream().anyMatch(uri -> uri.getHost().equals(peerHost)))
+        return preferredAliasToHost.entrySet().stream()
+                .filter(entry -> entry.getValue().stream().anyMatch(uri -> uri.getHost().contains(peerHost)))
                 .filter(entry -> entry.getValue().stream().anyMatch(uri -> uri.getPort() == peerPort))
                 .findFirst()
                 .map(Map.Entry::getKey);
@@ -161,9 +168,11 @@ public final class CompositeX509ExtendedKeyManager extends X509ExtendedKeyManage
      */
     @Override
     public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
-        return extractInnerField(
-                keyManager -> keyManager.chooseServerAlias(keyType, issuers, socket),
-                Objects::nonNull
+        return chooseServerAlias(
+                socket,
+                SSLSocket.class::isInstance,
+                aSocket -> ((SSLSocket) aSocket).getHandshakeSession(),
+                keyManager -> keyManager.chooseServerAlias(keyType, issuers, socket)
         );
     }
 
@@ -173,12 +182,51 @@ public final class CompositeX509ExtendedKeyManager extends X509ExtendedKeyManage
      */
     @Override
     public String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine sslEngine) {
-        return extractInnerField(
-                keyManager -> keyManager.chooseEngineServerAlias(keyType, issuers, sslEngine),
-                Objects::nonNull
+        return chooseServerAlias(
+                sslEngine,
+                Objects::nonNull,
+                SSLEngine::getHandshakeSession,
+                keyManager -> keyManager.chooseEngineServerAlias(keyType, issuers, sslEngine)
         );
     }
 
+    private <T> String chooseServerAlias(T object,
+                                         Predicate<T> predicate,
+                                         Function<T, SSLSession> sslSessionExtractor,
+                                         Function<X509ExtendedKeyManager, String> aliasExtractor) {
+
+        return getPreferredServerAlias(object, predicate, sslSessionExtractor)
+                .map(preferredAlias -> extractInnerField(aliasExtractor, NON_NULL.and(preferredAlias::equals)))
+                .orElseGet(() -> extractInnerField(aliasExtractor, NON_NULL));
+    }
+
+    private <T> Optional<String> getPreferredServerAlias(T object, Predicate<T> predicate, Function<T, SSLSession> sslSessionExtractor) {
+        if (preferredAliasToHost.isEmpty()) {
+            return Optional.empty();
+        }
+
+        if (predicate.test(object)) {
+            SSLSession sslSession = sslSessionExtractor.apply(object);
+            if (sslSession instanceof ExtendedSSLSession) {
+                List<SNIServerName> requestedServerNames = ((ExtendedSSLSession) sslSession).getRequestedServerNames();
+                Set<String> hostnames = requestedServerNames.stream()
+                        .map(sniServerName -> new String(sniServerName.getEncoded()))
+                        .collect(Collectors.toSet());
+
+                return getPreferredServerAlias(hostnames);
+            }
+        }
+
+        return Optional.empty();
+    }
+
+    private Optional<String> getPreferredServerAlias(Set<String> hostnames) {
+        return preferredAliasToHost.entrySet().stream()
+                .filter(entry -> entry.getValue().stream().anyMatch(uri -> hostnames.stream().anyMatch(hostname -> uri.getHost().contains(hostname))))
+                .findFirst()
+                .map(Map.Entry::getKey);
+    }
+
     /**
      * Returns the first non-null private key associated with the
      * given alias, or {@code null} if the alias can't be found.
@@ -249,8 +297,13 @@ public final class CompositeX509ExtendedKeyManager extends X509ExtendedKeyManage
         return keyManagers;
     }
 
+    @Deprecated
     public Map<String, List<URI>> getPreferredClientAliasToHosts() {
-        return preferredClientAliasToHost;
+        return preferredAliasToHost;
+    }
+
+    public Map<String, List<URI>> getPreferredAliasToHosts() {
+        return preferredAliasToHost;
     }
 
 }
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/KeyManagerUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/KeyManagerUtils.java
index fc65a97..9b481c4 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/KeyManagerUtils.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/KeyManagerUtils.java
@@ -202,26 +202,36 @@ public final class KeyManagerUtils {
         }
     }
 
+    @Deprecated
     public static void addClientIdentityRoute(X509ExtendedKeyManager keyManager, String clientAlias, String... hosts) {
-        addClientIdentityRoute(keyManager, clientAlias, hosts, false);
+        addIdentityRoute(keyManager, clientAlias, hosts, false);
     }
 
+    @Deprecated
     public static void overrideClientIdentityRoute(X509ExtendedKeyManager keyManager, String clientAlias, String... hosts) {
-        addClientIdentityRoute(keyManager, clientAlias, hosts, true);
+        addIdentityRoute(keyManager, clientAlias, hosts, true);
     }
 
-    private static void addClientIdentityRoute(X509ExtendedKeyManager keyManager,
-                                               String clientAlias,
-                                               String[] hosts,
-                                               boolean overrideExistingRouteEnabled) {
+    public static void addIdentityRoute(X509ExtendedKeyManager keyManager, String alias, String... hosts) {
+        addIdentityRoute(keyManager, alias, hosts, false);
+    }
+
+    public static void overrideIdentityRoute(X509ExtendedKeyManager keyManager, String alias, String... hosts) {
+        addIdentityRoute(keyManager, alias, hosts, true);
+    }
+
+    private static void addIdentityRoute(X509ExtendedKeyManager keyManager,
+                                         String alias,
+                                         String[] hosts,
+                                         boolean overrideExistingRouteEnabled) {
 
         requireNotNull(keyManager, GENERIC_EXCEPTION_MESSAGE.apply("KeyManager"));
-        requireNotNull(clientAlias, GENERIC_EXCEPTION_MESSAGE.apply("Client Alias"));
+        requireNotNull(alias, GENERIC_EXCEPTION_MESSAGE.apply("Alias"));
         requireNotNull(keyManager, GENERIC_EXCEPTION_MESSAGE.apply("Host"));
 
         if (keyManager instanceof CompositeX509ExtendedKeyManager) {
             CompositeX509ExtendedKeyManager compositeX509ExtendedKeyManager = (CompositeX509ExtendedKeyManager) keyManager;
-            Map<String, List<URI>> clientAliasToHosts = compositeX509ExtendedKeyManager.getPreferredClientAliasToHosts();
+            Map<String, List<URI>> aliasToHosts = compositeX509ExtendedKeyManager.getPreferredAliasToHosts();
 
             List<URI> uris = new ArrayList<>();
             for (String host : hosts) {
@@ -230,15 +240,15 @@ public final class KeyManagerUtils {
                 uris.add(uri);
             }
 
-            if (overrideExistingRouteEnabled && clientAliasToHosts.containsKey(clientAlias)) {
-                clientAliasToHosts.get(clientAlias).clear();
+            if (overrideExistingRouteEnabled && aliasToHosts.containsKey(alias)) {
+                aliasToHosts.get(alias).clear();
             }
 
             for (URI uri : uris) {
-                if (clientAliasToHosts.containsKey(clientAlias)) {
-                    clientAliasToHosts.get(clientAlias).add(uri);
+                if (aliasToHosts.containsKey(alias)) {
+                    aliasToHosts.get(alias).add(uri);
                 } else {
-                    clientAliasToHosts.put(clientAlias, new ArrayList<>(Collections.singleton(uri)));
+                    aliasToHosts.put(alias, new ArrayList<>(Collections.singleton(uri)));
                 }
             }
         } else {
@@ -249,12 +259,17 @@ public final class KeyManagerUtils {
         }
     }
 
+    @Deprecated
     public static Map<String, List<String>> getClientIdentityRoute(X509ExtendedKeyManager keyManager) {
+        return getIdentityRoute(keyManager);
+    }
+
+    public static Map<String, List<String>> getIdentityRoute(X509ExtendedKeyManager keyManager) {
         requireNotNull(keyManager, GENERIC_EXCEPTION_MESSAGE.apply("KeyManager"));
 
         if (keyManager instanceof CompositeX509ExtendedKeyManager) {
             return ((CompositeX509ExtendedKeyManager) keyManager)
-                    .getPreferredClientAliasToHosts()
+                    .getPreferredAliasToHosts()
                     .entrySet().stream()
                     .collect(Collectors.collectingAndThen(
                             Collectors.toMap(
@@ -294,7 +309,7 @@ public final class KeyManagerUtils {
         private static final String EMPTY_KEY_MANAGER_EXCEPTION = "Input does not contain KeyManagers";
 
         private final List<X509ExtendedKeyManager> keyManagers = new ArrayList<>();
-        private final Map<String, List<URI>> clientAliasToHost = new HashMap<>();
+        private final Map<String, List<URI>> aliasToHost = new HashMap<>();
         private boolean swappableKeyManagerEnabled = false;
 
         private KeyManagerBuilder() {}
@@ -339,8 +354,13 @@ public final class KeyManagerUtils {
             return this;
         }
 
+        @Deprecated
         public KeyManagerBuilder withClientAliasToHost(Map<String, List<URI>> clientAliasToHost) {
-            this.clientAliasToHost.putAll(clientAliasToHost);
+            return withAliasToHost(clientAliasToHost);
+        }
+
+        public KeyManagerBuilder withAliasToHost(Map<String, List<URI>> serverAliasToHost) {
+            this.aliasToHost.putAll(serverAliasToHost);
             return this;
         }
 
@@ -358,7 +378,7 @@ public final class KeyManagerUtils {
                         .flatMap(Collection::stream)
                         .collect(Collectors.collectingAndThen(
                                 Collectors.toList(),
-                                extendedKeyManagers -> new CompositeX509ExtendedKeyManager(extendedKeyManagers, clientAliasToHost)
+                                extendedKeyManagers -> new CompositeX509ExtendedKeyManager(extendedKeyManagers, aliasToHost)
                         ));
             }
 
