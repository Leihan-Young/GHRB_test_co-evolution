diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java
index 633e2ace2..1d2fa2971 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java
@@ -73,11 +73,25 @@ public class AsDeductionTypeDeserializer extends AsPropertyTypeDeserializer
             BitSet fingerprint = new BitSet(nextField + properties.size());
             for (BeanPropertyDefinition property : properties) {
                 String name = property.getName();
-                if (ignoreCase) name = name.toLowerCase();
+                if (ignoreCase) {
+                    name = name.toLowerCase();
+                }
                 Integer bitIndex = fieldBitIndex.get(name);
                 if (bitIndex == null) {
-                    bitIndex = nextField;
-                    fieldBitIndex.put(name, nextField++);
+                    bitIndex = nextField++;
+                    fieldBitIndex.put(name, bitIndex);
+                }
+                // [databind#4327] 2.17 @JsonAlias should be respected by polymorphic deduction
+                for (PropertyName alias : property.findAliases()) {
+                    String simpleName = alias.getSimpleName();
+                    if (ignoreCase) {
+                        simpleName = simpleName.toLowerCase();
+                    }
+                    // but do not override entries (in case alias overlaps a regular name;
+                    // is this even legal?)
+                    if (!fieldBitIndex.containsKey(simpleName)) {
+                        fieldBitIndex.put(simpleName, bitIndex);
+                    }
                 }
                 fingerprint.set(bitIndex);
             }
diff --git a/src/test-jdk17/java/com/fasterxml/jackson/databind/records/JsonAliasWithDeduction4327RecordTest.java b/src/test-jdk17/java/com/fasterxml/jackson/databind/records/JsonAliasWithDeduction4327RecordTest.java
new file mode 100644
index 000000000..344bd9536
--- /dev/null
+++ b/src/test-jdk17/java/com/fasterxml/jackson/databind/records/JsonAliasWithDeduction4327RecordTest.java
@@ -0,0 +1,44 @@
+package com.fasterxml.jackson.databind.records;
+
+import com.fasterxml.jackson.annotation.JsonAlias;
+import com.fasterxml.jackson.annotation.JsonSubTypes;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ValueSource;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import static com.fasterxml.jackson.databind.testutil.DatabindTestUtil.a2q;
+import static com.fasterxml.jackson.databind.testutil.DatabindTestUtil.jsonMapperBuilder;
+
+// [databind#4327] JsonAlias should respsect with Polymorphic Deduction
+public class JsonAliasWithDeduction4327RecordTest
+{
+    @JsonTypeInfo(use = JsonTypeInfo.Id.DEDUCTION)
+    @JsonSubTypes({
+        @JsonSubTypes.Type(value = DeductionBean1.class),
+        @JsonSubTypes.Type(value = DeductionBean2.class)
+    })
+    interface Deduction { }
+
+    record DeductionBean1(int x) implements Deduction { }
+
+    record DeductionBean2(
+        @JsonAlias(value = {"Y", "yy", "ff", "X"}) int y
+    ) implements Deduction { }
+
+
+    private final ObjectMapper mapper = jsonMapperBuilder().build();
+
+    @ParameterizedTest
+    @ValueSource(strings = {"Y", "yy", "ff", "X"})
+    public void testAliasWithPolymorphicDeduction(String field) throws Exception {
+        String json = a2q(String.format("{'%s': 2 }", field));
+        Deduction value = mapper.readValue(json, Deduction.class);
+        assertNotNull(value);
+        assertEquals(2, ((DeductionBean2) value).y());
+    }
+}
