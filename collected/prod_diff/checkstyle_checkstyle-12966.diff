diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 33d856759..fa8f02d63 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -19,14 +19,14 @@
 
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
-import java.util.regex.Matcher;
+import java.util.Optional;
 import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import com.puppycrawl.tools.checkstyle.utils.CodePointUtil;
+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
 
 /**
  * <p>
@@ -116,6 +116,11 @@ public class FallThroughCheck extends AbstractCheck {
         return getRequiredTokens();
     }
 
+    @Override
+    public boolean isCommentNodesRequired() {
+        return true;
+    }
+
     /**
      * Setter to define the RegExp to match the relief comment that suppresses
      * the warning about a fall through.
@@ -146,7 +151,7 @@ public class FallThroughCheck extends AbstractCheck {
             final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
 
             if (slist != null && !isTerminated(slist, true, true)
-                && !hasFallThroughComment(ast, nextGroup)) {
+                && !hasFallThroughComment(ast)) {
                 if (isLastGroup) {
                     log(ast, MSG_FALL_THROUGH_LAST);
                 }
@@ -225,6 +230,11 @@ public class FallThroughCheck extends AbstractCheck {
             lastStmt = lastStmt.getPreviousSibling();
         }
 
+        while (TokenUtil.isOfType(lastStmt, TokenTypes.SINGLE_LINE_COMMENT,
+                TokenTypes.BLOCK_COMMENT_BEGIN)) {
+            lastStmt = lastStmt.getPreviousSibling();
+        }
+
         return lastStmt != null
             && isTerminated(lastStmt, useBreak, useContinue);
     }
@@ -240,13 +250,28 @@ public class FallThroughCheck extends AbstractCheck {
      */
     private boolean checkIf(final DetailAST ast, boolean useBreak,
                             boolean useContinue) {
-        final DetailAST thenStmt = ast.findFirstToken(TokenTypes.RPAREN)
-                .getNextSibling();
-        final DetailAST elseStmt = thenStmt.getNextSibling();
+        final DetailAST thenStmt = getNextNonCommentAst(ast.findFirstToken(TokenTypes.RPAREN));
+
+        final DetailAST elseStmt = getNextNonCommentAst(thenStmt);
 
         return elseStmt != null
                 && isTerminated(thenStmt, useBreak, useContinue)
-                && isTerminated(elseStmt.getFirstChild(), useBreak, useContinue);
+                && isTerminated(elseStmt.getLastChild(), useBreak, useContinue);
+    }
+
+    /**
+     * This method will skip the comment content while finding the next ast of current ast.
+     *
+     * @param ast current ast
+     * @return next ast after skipping comment
+     */
+    private static DetailAST getNextNonCommentAst(DetailAST ast) {
+        DetailAST nextSibling = ast.getNextSibling();
+        while (TokenUtil.isOfType(nextSibling, TokenTypes.SINGLE_LINE_COMMENT,
+                TokenTypes.BLOCK_COMMENT_BEGIN)) {
+            nextSibling = nextSibling.getNextSibling();
+        }
+        return nextSibling;
     }
 
     /**
@@ -365,46 +390,32 @@ public class FallThroughCheck extends AbstractCheck {
      * </pre>
      *
      * @param currentCase AST of the case that falls through to the next case.
-     * @param nextCase AST of the next case.
      * @return True if a relief comment was found
      */
-    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {
-        boolean allThroughComment = false;
-        final int endLineNo = nextCase.getLineNo();
-
-        if (matchesComment(reliefPattern, endLineNo)) {
-            allThroughComment = true;
+    private boolean hasFallThroughComment(DetailAST currentCase) {
+        final DetailAST nextSibling = currentCase.getNextSibling();
+        final DetailAST ast;
+        if (nextSibling.getType() == TokenTypes.CASE_GROUP) {
+            ast = nextSibling.getFirstChild();
         }
         else {
-            final int startLineNo = currentCase.getLineNo();
-            for (int i = endLineNo - 2; i > startLineNo - 1; i--) {
-                final int[] line = getLineCodePoints(i);
-                if (!CodePointUtil.isBlank(line)) {
-                    allThroughComment = matchesComment(reliefPattern, i + 1);
-                    break;
-                }
-            }
+            ast = currentCase;
         }
-        return allThroughComment;
+        return hasReliefComment(ast);
     }
 
     /**
-     * Does a regular expression match on the given line and checks that a
-     * possible match is within a comment.
+     * Check if there is any fall through comment.
      *
-     * @param pattern The regular expression pattern to use.
-     * @param lineNo The line number in the file.
-     * @return True if a match was found inside a comment.
+     * @param ast ast to check
+     * @return true if relief comment found
      */
-    // suppress deprecation until https://github.com/checkstyle/checkstyle/issues/11166
-    @SuppressWarnings("deprecation")
-    private boolean matchesComment(Pattern pattern, int lineNo) {
-        final String line = getLine(lineNo - 1);
-
-        final Matcher matcher = pattern.matcher(line);
-        return matcher.find()
-                && getFileContents().hasIntersectionWithComment(
-                        lineNo, matcher.start(), lineNo, matcher.end());
+    private boolean hasReliefComment(DetailAST ast) {
+        return Optional.ofNullable(getNextNonCommentAst(ast))
+                .map(DetailAST::getPreviousSibling)
+                .map(previous -> previous.getFirstChild().getText())
+                .map(text -> reliefPattern.matcher(text).find())
+                .orElse(Boolean.FALSE);
     }
 
 }
