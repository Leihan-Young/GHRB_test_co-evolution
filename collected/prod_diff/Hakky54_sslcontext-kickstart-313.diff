diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/exception/GenericException.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/exception/GenericException.java
new file mode 100644
index 0000000..24fa684
--- /dev/null
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/exception/GenericException.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright 2019 Thunderberry.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package nl.altindag.ssl.exception;
+
+/**
+ * @author Hakan Altindag
+ */
+public class GenericException extends RuntimeException {
+
+    public GenericException(String message) {
+        super(message);
+    }
+
+    public GenericException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public GenericException(Throwable cause) {
+        super(cause);
+    }
+
+}
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/exception/GenericSecurityException.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/exception/GenericSecurityException.java
index 4dad1d4..62d6fbd 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/exception/GenericSecurityException.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/exception/GenericSecurityException.java
@@ -18,7 +18,7 @@ package nl.altindag.ssl.exception;
 /**
  * @author Hakan Altindag
  */
-public class GenericSecurityException extends RuntimeException {
+public class GenericSecurityException extends GenericException {
 
     public GenericSecurityException(String message) {
         super(message);
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/CertificateUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/CertificateUtils.java
index 0244405..2b12688 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/CertificateUtils.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/CertificateUtils.java
@@ -243,12 +243,19 @@ public final class CertificateUtils {
         return Collections.unmodifiableList(certificates);
     }
 
+    /**
+     * PKIX/RFC 5280 states that duplicate extensions are not allowed. See section 4.2 of it.
+     * A certificate which contains a duplicate extension is not parseable. Instead of throwing an exception, it will be ignored.
+     */
     public static List<Certificate> parseDerCertificate(InputStream certificateStream) {
         try(BufferedInputStream bufferedCertificateStream = new BufferedInputStream(certificateStream)) {
             return CertificateFactory.getInstance(CERTIFICATE_TYPE)
                     .generateCertificates(bufferedCertificateStream).stream()
                     .collect(toUnmodifiableList());
         } catch (CertificateException | IOException e) {
+            if (e.getMessage().contains("Duplicate extensions not allowed")) {
+                return Collections.emptyList();
+            }
             throw new GenericCertificateException("There is no valid certificate present to parse. Please make sure to supply a valid der formatted certificate", e);
         }
     }
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/KeyStoreUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/KeyStoreUtils.java
index 12b75d2..013a77e 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/KeyStoreUtils.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/KeyStoreUtils.java
@@ -207,8 +207,12 @@ public final class KeyStoreUtils {
         }
 
         if (operatingSystem.contains("mac")) {
-            KeyStore macKeyStore = createKeyStore("KeychainStore", null);
-            keyStores.add(macKeyStore);
+            KeyStore keychainStore = createKeyStore("KeychainStore", null);
+            keyStores.add(keychainStore);
+
+            List<Certificate> systemTrustedCertificates = MacCertificateUtils.getCertificates();
+            KeyStore systemTrustStore = createTrustStore(systemTrustedCertificates);
+            keyStores.add(systemTrustStore);
         }
 
         if (operatingSystem.contains("linux")) {
@@ -222,6 +226,10 @@ public final class KeyStoreUtils {
 
                 KeyStore androidCAStore = createKeyStore("AndroidCAStore", null);
                 keyStores.add(androidCAStore);
+            } else {
+                List<Certificate> certificates = LinuxCertificateUtils.getCertificates();
+                KeyStore linuxTrustStore = createTrustStore(certificates);
+                keyStores.add(linuxTrustStore);
             }
         }
 
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/LinuxCertificateUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/LinuxCertificateUtils.java
new file mode 100644
index 0000000..2d52e52
--- /dev/null
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/LinuxCertificateUtils.java
@@ -0,0 +1,88 @@
+/*
+ * Copyright 2019 Thunderberry.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package nl.altindag.ssl.util;
+
+import nl.altindag.ssl.exception.GenericIOException;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.security.cert.Certificate;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import static nl.altindag.ssl.util.CollectorsUtils.toUnmodifiableList;
+
+public final class LinuxCertificateUtils {
+
+    private static final String HOME_DIRECTORY = System.getProperty("user.home");
+    private static final List<Path> LINUX_CERTIFICATE_PATHS = Stream.of(
+                    "/etc/ssl/certs",
+                    "/etc/pki/nssdb",
+                    "/usr/local/share/ca-certificates",
+                    "/usr/share/ca-certificates",
+                    "/etc/pki/tls/certs/ca-bundle.crt",
+                    "/etc/pki/ca-trust/source/anchors",
+                    "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem",
+                    HOME_DIRECTORY + "/.pki/nssdb")
+            .map(Paths::get)
+            .collect(Collectors.toList());
+
+    private LinuxCertificateUtils() {
+    }
+
+    public static List<Certificate> getCertificates() {
+        List<Certificate> certificates = new ArrayList<>();
+        try {
+            for (Path path : LINUX_CERTIFICATE_PATHS) {
+                if (Files.exists(path)) {
+                    if (Files.isRegularFile(path)) {
+                        List<Certificate> certs = loadCertificate(path);
+                        certificates.addAll(certs);
+                    } else if (Files.isDirectory(path)) {
+                        try(Stream<Path> files = Files.walk(path, 1)) {
+                            List<Certificate> certs = files
+                                    .filter(Files::isRegularFile)
+                                    .flatMap(file -> loadCertificate(file).stream())
+                                    .collect(Collectors.toList());
+                            certificates.addAll(certs);
+                        }
+                    }
+                }
+            }
+            return certificates.stream()
+                    .distinct()
+                    .collect(toUnmodifiableList());
+        } catch (IOException e) {
+            throw new GenericIOException(e);
+        }
+    }
+
+    static List<Certificate> loadCertificate(Path path) {
+        try {
+            return CertificateUtils.loadCertificate(path);
+        } catch (Exception e) {
+            // Ignore exception and skip trying to parse the file as it is most likely
+            // not a (supported) certificate at all. It might be a regular text file maybe containing random text?
+            return Collections.emptyList();
+        }
+    }
+
+}
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/MacCertificateUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/MacCertificateUtils.java
new file mode 100644
index 0000000..9fcdb0b
--- /dev/null
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/MacCertificateUtils.java
@@ -0,0 +1,145 @@
+/*
+ * Copyright 2019 Thunderberry.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package nl.altindag.ssl.util;
+
+import nl.altindag.ssl.exception.GenericException;
+import nl.altindag.ssl.exception.GenericIOException;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.security.cert.Certificate;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.function.Consumer;
+import java.util.stream.Stream;
+
+import static nl.altindag.ssl.util.CollectorsUtils.toUnmodifiableList;
+
+public final class MacCertificateUtils {
+
+    private static final Path HOME_DIRECTORY = Paths.get(System.getProperty("user.home"));
+    private static final String SYSTEM_ROOT_KEYCHAIN_FILE = "/System/Library/Keychains/SystemRootCertificates.keychain";
+    private static final List<String> KEYCHAIN_LOOKUP_COMMANDS = Arrays.asList("list-keychains", "default-keychain");
+
+    private MacCertificateUtils() {
+    }
+
+    public static List<Certificate> getCertificates() {
+        ExecutorService executorService = Executors.newSingleThreadExecutor();
+        StringBuilder stringBuilder = new StringBuilder();
+        getKeychainFiles(executorService).stream()
+                .distinct()
+                .map(MacCertificateUtils::createProcessForGettingCertificates)
+                .map(process -> new StringInputStreamRunnable(process.getInputStream(), content -> stringBuilder.append(content).append(System.lineSeparator())))
+                .map(executorService::submit)
+                .forEach(MacCertificateUtils::waitAtMostTillTimeout);
+
+        executorService.shutdownNow();
+
+        String certificateContent = stringBuilder.toString();
+        return CertificateUtils.parsePemCertificate(certificateContent).stream()
+                .distinct()
+                .collect(toUnmodifiableList());
+    }
+
+    private static List<String> getKeychainFiles(ExecutorService executorService) {
+        List<String> keychainFiles = new ArrayList<>();
+        keychainFiles.add(SYSTEM_ROOT_KEYCHAIN_FILE);
+
+        KEYCHAIN_LOOKUP_COMMANDS.stream()
+                .map(MacCertificateUtils::createProcessForGettingKeychainFile)
+                .map(process -> new StringInputStreamRunnable(process.getInputStream(), content ->
+                        Stream.of(content.split(System.lineSeparator()))
+                                .map(line -> line.replace("\"", ""))
+                                .map(String::trim)
+                                .forEach(keychainFiles::add)))
+                .map(executorService::submit)
+                .forEach(MacCertificateUtils::waitAtMostTillTimeout);
+
+        return keychainFiles;
+    }
+
+    private static Process createProcessForGettingKeychainFile(String command) {
+        return createProcess("security " + command);
+    }
+
+    /**
+     * Uses a mac command while using bash to get the certificates from keychain with: security find-certificate
+     * <p>
+     * <pre>
+     * It uses the following CLI options:
+     *     -a Find all matching certificates, not just the first one
+     *     -p Output certificate in pem format
+     * </pre>
+     */
+    private static Process createProcessForGettingCertificates(String keychainFilePath) {
+        return createProcess("security find-certificate -a -p " + keychainFilePath);
+    }
+
+    private static Process createProcess(String command) {
+        try {
+            return createProcess()
+                    .command("sh", "-c", command)
+                    .directory(HOME_DIRECTORY.toFile())
+                    .start();
+        } catch (IOException e) {
+            throw new GenericIOException(e);
+        }
+    }
+
+    /**
+     * Added to make {@link MacCertificateUtils#createProcess(String)} testable
+     */
+    static ProcessBuilder createProcess() {
+        return new ProcessBuilder();
+    }
+
+    static void waitAtMostTillTimeout(Future<?> future) {
+        try {
+            future.get(10, TimeUnit.SECONDS);
+        } catch (ExecutionException | InterruptedException | TimeoutException e) {
+            Thread.currentThread().interrupt();
+            throw new GenericException(e);
+        }
+    }
+
+    private static class StringInputStreamRunnable implements Runnable {
+        private final InputStream inputStream;
+        private final Consumer<String> consumer;
+
+        public StringInputStreamRunnable(InputStream inputStream, Consumer<String> consumer) {
+            this.inputStream = inputStream;
+            this.consumer = consumer;
+        }
+
+        @Override
+        public void run() {
+            String content = IOUtils.getContent(inputStream);
+            consumer.accept(content);
+        }
+
+    }
+
+}
