diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/DryRunTemplateManager.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/DryRunTemplateManager.java
index aa8f8ef56ec..eb8f05d3dab 100644
--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/DryRunTemplateManager.java
+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/DryRunTemplateManager.java
@@ -5,7 +5,9 @@ import org.openapitools.codegen.templating.TemplateManagerOptions;
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -45,29 +47,35 @@ public class DryRunTemplateManager implements TemplateProcessor {
      */
     @Override
     public File write(Map<String, Object> data, String template, File target) throws IOException {
-        if (this.options.isSkipOverwrite() && target.exists()) {
-            dryRunStatusMap.put(target.toString(),
-                    new DryRunStatus(
-                            target.toPath(),
-                            DryRunStatus.State.SkippedOverwrite,
-                            "File exists and skip overwrite option is enabled."
-                    ));
-        }
-
-        return target;
+        return writeToFile(target.getAbsolutePath(), "dummy".getBytes(StandardCharsets.UTF_8));
     }
 
     @Override
     public File writeToFile(String filename, byte[] contents) throws IOException {
-        Path path = java.nio.file.Paths.get(filename);
+        final Path path = Paths.get(filename);
+        final File outputFile = path.toFile();
         DryRunStatus status = new DryRunStatus(path);
-        if (this.options.isMinimalUpdate()) {
+
+        if (outputFile.exists()) {
+            if (this.options.isSkipOverwrite()) {
+                status = new DryRunStatus(
+                    path,
+                    DryRunStatus.State.SkippedOverwrite,
+                    "File exists and skip overwrite option is enabled."
+                );
+            } else if (this.options.isMinimalUpdate()) {
+                status.setState(DryRunStatus.State.WriteIfNewer);
+            } else {
+                status.setState(DryRunStatus.State.Write);
+            }
+        } else if (this.options.isMinimalUpdate()) {
             status.setState(DryRunStatus.State.WriteIfNewer);
         } else {
             status.setState(DryRunStatus.State.Write);
         }
         dryRunStatusMap.put(filename, status);
-        return path.toFile();
+
+        return outputFile;
     }
 
     @Override
@@ -82,26 +90,15 @@ public class DryRunTemplateManager implements TemplateProcessor {
 
     @Override
     public void skip(Path path, String context) {
+        final DryRunStatus status = new DryRunStatus(path, DryRunStatus.State.Skipped, context);
         if (this.options.isSkipOverwrite() && path.toFile().exists()) {
-            dryRunStatusMap.put(path.toString(),
-                    new DryRunStatus(
-                            path,
-                            DryRunStatus.State.SkippedOverwrite,
-                            context
-                    ));
-            return;
+            status.setState(DryRunStatus.State.SkippedOverwrite);
         }
-
-        dryRunStatusMap.put(path.toString(),
-                new DryRunStatus(
-                        path,
-                        DryRunStatus.State.Skipped,
-                        context
-                ));
+        dryRunStatusMap.put(path.toString(), status);
     }
 
     @Override
     public void error(Path path, String context) {
-        dryRunStatusMap.put(path.toString(), new DryRunStatus(path, DryRunStatus.State.Error));
+        dryRunStatusMap.put(path.toString(), new DryRunStatus(path, DryRunStatus.State.Error, context));
     }
 }
