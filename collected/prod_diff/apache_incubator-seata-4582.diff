diff --git a/server/src/main/java/io/seata/server/session/SessionCondition.java b/server/src/main/java/io/seata/server/session/SessionCondition.java
index 3b946ea7f..6542a72c3 100644
--- a/server/src/main/java/io/seata/server/session/SessionCondition.java
+++ b/server/src/main/java/io/seata/server/session/SessionCondition.java
@@ -89,6 +89,7 @@ public class SessionCondition {
      */
     public void setStatus(GlobalStatus status) {
         this.status = status;
+        this.statuses = new GlobalStatus[] {status};
     }
 
     /**
diff --git a/server/src/main/java/io/seata/server/storage/db/store/DataBaseTransactionStoreManager.java b/server/src/main/java/io/seata/server/storage/db/store/DataBaseTransactionStoreManager.java
index 16fac553f..2889b851a 100644
--- a/server/src/main/java/io/seata/server/storage/db/store/DataBaseTransactionStoreManager.java
+++ b/server/src/main/java/io/seata/server/storage/db/store/DataBaseTransactionStoreManager.java
@@ -165,6 +165,11 @@ public class DataBaseTransactionStoreManager extends AbstractTransactionStoreMan
         return getGlobalSession(globalTransactionDO, branchTransactionDOs);
     }
 
+    @Override
+    public List<GlobalSession> readSortByTimeoutBeginSessions(boolean withBranchSessions) {
+        return readSession(new GlobalStatus[] {GlobalStatus.Begin}, withBranchSessions);
+    }
+
     /**
      * Read session list.
      *
diff --git a/server/src/main/java/io/seata/server/storage/redis/lock/RedisDistributedLocker.java b/server/src/main/java/io/seata/server/storage/redis/lock/RedisDistributedLocker.java
index 3d2f98c3f..ecd60cacd 100644
--- a/server/src/main/java/io/seata/server/storage/redis/lock/RedisDistributedLocker.java
+++ b/server/src/main/java/io/seata/server/storage/redis/lock/RedisDistributedLocker.java
@@ -47,10 +47,7 @@ public class RedisDistributedLocker implements DistributedLocker {
         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {
             //Don't need retry,if can't acquire the lock,let the other get the lock
             String result = jedis.set(distributedLockDO.getLockKey(), distributedLockDO.getLockValue(), SetParams.setParams().nx().px(distributedLockDO.getExpireTime()));
-            if (SUCCESS.equalsIgnoreCase(result)) {
-                return true;
-            }
-            return false;
+            return SUCCESS.equalsIgnoreCase(result);
         } catch (Exception ex) {
             LOGGER.error("The {} acquired the {} distributed lock failed.", distributedLockDO.getLockValue(), distributedLockDO.getLockKey(), ex);
             return false;
diff --git a/server/src/main/java/io/seata/server/storage/redis/session/RedisSessionManager.java b/server/src/main/java/io/seata/server/storage/redis/session/RedisSessionManager.java
index 7eecafd40..c2b2dfc39 100644
--- a/server/src/main/java/io/seata/server/storage/redis/session/RedisSessionManager.java
+++ b/server/src/main/java/io/seata/server/storage/redis/session/RedisSessionManager.java
@@ -167,16 +167,15 @@ public class RedisSessionManager extends AbstractSessionManager
         if (SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
             return findGlobalSessions(new SessionCondition(GlobalStatus.AsyncCommitting));
         } else if (SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
-            return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.CommitRetrying, GlobalStatus.Committing}));
+            return findGlobalSessions(new SessionCondition(GlobalStatus.CommitRetrying, GlobalStatus.Committing));
         } else if (SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME.equalsIgnoreCase(taskName)) {
-            return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.RollbackRetrying,
-                GlobalStatus.Rollbacking, GlobalStatus.TimeoutRollbacking, GlobalStatus.TimeoutRollbackRetrying}));
+            return findGlobalSessions(new SessionCondition(GlobalStatus.RollbackRetrying, GlobalStatus.Rollbacking,
+                    GlobalStatus.TimeoutRollbacking, GlobalStatus.TimeoutRollbackRetrying));
         } else {
             // all data
-            return findGlobalSessions(new SessionCondition(new GlobalStatus[] {GlobalStatus.UnKnown, GlobalStatus.Begin,
-                GlobalStatus.Committing, GlobalStatus.CommitRetrying, GlobalStatus.Rollbacking,
-                GlobalStatus.RollbackRetrying, GlobalStatus.TimeoutRollbacking, GlobalStatus.TimeoutRollbackRetrying,
-                GlobalStatus.AsyncCommitting}));
+            return findGlobalSessions(new SessionCondition(GlobalStatus.UnKnown, GlobalStatus.Begin, GlobalStatus.Committing,
+                    GlobalStatus.CommitRetrying, GlobalStatus.Rollbacking, GlobalStatus.RollbackRetrying, GlobalStatus.TimeoutRollbacking,
+                    GlobalStatus.TimeoutRollbackRetrying, GlobalStatus.AsyncCommitting));
         }
     }
 
diff --git a/server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java b/server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java
index b426cf46a..b4b23a79d 100644
--- a/server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java
+++ b/server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java
@@ -23,8 +23,10 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Date;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Collections;
+import java.util.Set;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import io.seata.config.Configuration;
@@ -86,6 +88,9 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
     /**the prefix of the global transaction status*/
     private static final String REDIS_SEATA_STATUS_PREFIX = "SEATA_STATUS_";
 
+    /**the key of global transaction status for begin*/
+    private static final String REDIS_SEATA_BEGIN_TRANSACTIONS_KEY = "SEATA_BEGIN_TRANSACTIONS";
+
     private static volatile RedisTransactionStoreManager instance;
 
     private static final String OK = "OK";
@@ -257,7 +262,10 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
             globalTransactionDO.setGmtCreate(now);
             globalTransactionDO.setGmtModified(now);
             pipelined.hmset(globalKey, BeanUtils.objectToMap(globalTransactionDO));
-            pipelined.rpush(buildGlobalStatus(globalTransactionDO.getStatus()), globalTransactionDO.getXid());
+            String xid = globalTransactionDO.getXid();
+            pipelined.rpush(buildGlobalStatus(globalTransactionDO.getStatus()), xid);
+            pipelined.zadd(REDIS_SEATA_BEGIN_TRANSACTIONS_KEY,
+                globalTransactionDO.getBeginTime() + globalTransactionDO.getTimeout(), globalKey);
             pipelined.sync();
             return true;
         } catch (Exception ex) {
@@ -286,6 +294,10 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
             try (Pipeline pipelined = jedis.pipelined()) {
                 pipelined.lrem(buildGlobalStatus(globalTransactionDO.getStatus()), 0, globalTransactionDO.getXid());
                 pipelined.del(globalKey);
+                if (GlobalStatus.Begin.getCode() == globalTransactionDO.getStatus()
+                    || GlobalStatus.UnKnown.getCode() == globalTransactionDO.getStatus()) {
+                    pipelined.zrem(REDIS_SEATA_BEGIN_TRANSACTIONS_KEY, globalKey);
+                }
                 pipelined.sync();
             }
             return true;
@@ -331,9 +343,10 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
             Map<String,String> map = new HashMap<>(2);
             map.put(REDIS_KEY_GLOBAL_STATUS,String.valueOf(globalTransactionDO.getStatus()));
             map.put(REDIS_KEY_GLOBAL_GMT_MODIFIED,String.valueOf((new Date()).getTime()));
-            multi.hmset(globalKey,map);
-            multi.lrem(buildGlobalStatus(Integer.valueOf(previousStatus)),0, xid);
+            multi.hmset(globalKey, map);
+            multi.lrem(buildGlobalStatus(Integer.valueOf(previousStatus)), 0, xid);
             multi.rpush(buildGlobalStatus(globalTransactionDO.getStatus()), xid);
+            multi.zrem(REDIS_SEATA_BEGIN_TRANSACTIONS_KEY, globalKey);
             List<Object> exec = multi.exec();
             if (CollectionUtils.isEmpty(exec)) {
                 //The data has changed by another tc, so we still think the modification is successful.
@@ -361,10 +374,10 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
                     }
                 }
                 if (lrem > 0) {
-                    jedis.rpush(buildGlobalStatus(Integer.valueOf(previousStatus)),xid);
+                    jedis.rpush(buildGlobalStatus(Integer.valueOf(previousStatus)), xid);
                 }
                 if (rpush > 0) {
-                    jedis.lrem(buildGlobalStatus(globalTransactionDO.getStatus()),0,xid);
+                    jedis.lrem(buildGlobalStatus(globalTransactionDO.getStatus()), 0, xid);
                 }
                 return false;
             }
@@ -419,10 +432,8 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
      */
     @Override
     public List<GlobalSession> readSession(GlobalStatus[] statuses, boolean withBranchSessions) {
-
         List<GlobalSession> globalSessions = Collections.synchronizedList(new ArrayList<>());
         List<String> statusKeys = convertStatusKeys(statuses);
-
         Map<String, Integer> targetMap = calculateStatuskeysHasData(statusKeys);
         if (targetMap.size() == 0 || logQueryLimit <= 0) {
             return globalSessions;
@@ -445,6 +456,45 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
         return globalSessions;
     }
 
+    @Override
+    public List<GlobalSession> readSortByTimeoutBeginSessions(boolean withBranchSessions) {
+        List<GlobalSession> list = Collections.emptyList();
+        List<String> statusKeys = convertStatusKeys(GlobalStatus.Begin);
+        Map<String, Integer> targetMap = calculateStatuskeysHasData(statusKeys);
+        if (targetMap.size() == 0 || logQueryLimit <= 0) {
+            return list;
+        }
+        final long countGlobalSessions = targetMap.values().stream().collect(Collectors.summarizingInt(Integer::intValue)).getSum();
+        // queryCount
+        final long queryCount = Math.min(logQueryLimit, countGlobalSessions);
+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {
+            Set<String> values =
+                jedis.zrangeByScore(REDIS_SEATA_BEGIN_TRANSACTIONS_KEY, 0, System.currentTimeMillis(), 0,
+                        (int) queryCount);
+            List<Map<String, String>> rep;
+            try (Pipeline pipeline = jedis.pipelined()) {
+                for (String value : values) {
+                    pipeline.hgetAll(value);
+                }
+                rep = (List<Map<String, String>>) (List) pipeline.syncAndReturnAll();
+            }
+            list = rep.stream().map(map -> {
+                GlobalTransactionDO globalTransactionDO = (GlobalTransactionDO) BeanUtils.mapToObject(map,
+                        GlobalTransactionDO.class);
+                if (globalTransactionDO != null) {
+                    String xid = globalTransactionDO.getXid();
+                    List<BranchTransactionDO> branchTransactionDOs = new ArrayList<>();
+                    if (withBranchSessions) {
+                        branchTransactionDOs = this.readBranchSessionByXid(jedis, xid);
+                    }
+                    return getGlobalSession(globalTransactionDO, branchTransactionDOs, withBranchSessions);
+                }
+                return null;
+            }).filter(Objects::nonNull).collect(Collectors.toList());
+        }
+        return list;
+    }
+
     /**
      * get everyone keys limit
      *
@@ -482,9 +532,11 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
             }
             return globalSessions;
         } else if (CollectionUtils.isNotEmpty(sessionCondition.getStatuses())) {
-            return readSession(sessionCondition.getStatuses(), !sessionCondition.isLazyLoadBranch());
-        } else if (sessionCondition.getStatus() != null) {
-            return readSession(new GlobalStatus[] {sessionCondition.getStatus()}, !sessionCondition.isLazyLoadBranch());
+            if (sessionCondition.getStatuses().length == 1 && sessionCondition.getStatuses()[0] == GlobalStatus.Begin) {
+                return this.readSortByTimeoutBeginSessions(!sessionCondition.isLazyLoadBranch());
+            } else {
+                return readSession(sessionCondition.getStatuses(), !sessionCondition.isLazyLoadBranch());
+            }
         }
         return null;
     }
@@ -698,7 +750,7 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
         }
     }
 
-    private List<String> convertStatusKeys(GlobalStatus[] statuses) {
+    private List<String> convertStatusKeys(GlobalStatus... statuses) {
         List<String> statusKeys = new ArrayList<>();
         for (int i = 0; i < statuses.length; i++) {
             statusKeys.add(buildGlobalStatus(statuses[i].getCode()));
@@ -743,9 +795,7 @@ public class RedisTransactionStoreManager extends AbstractTransactionStoreManage
                 if (list.size() > 0) {
                     listList.add(list);
                 } else {
-                    if (list.size() == 0) {
-                        iterator.remove();
-                    }
+                    iterator.remove();
                 }
             }
         }
diff --git a/server/src/main/java/io/seata/server/store/AbstractTransactionStoreManager.java b/server/src/main/java/io/seata/server/store/AbstractTransactionStoreManager.java
index a4b019f52..3595a72c4 100644
--- a/server/src/main/java/io/seata/server/store/AbstractTransactionStoreManager.java
+++ b/server/src/main/java/io/seata/server/store/AbstractTransactionStoreManager.java
@@ -19,6 +19,7 @@ import io.seata.core.model.GlobalStatus;
 import io.seata.server.session.GlobalSession;
 import io.seata.server.session.SessionCondition;
 
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -38,14 +39,19 @@ public abstract class AbstractTransactionStoreManager implements TransactionStor
         return null;
     }
 
+    @Override
+    public List<GlobalSession> readSortByTimeoutBeginSessions(boolean withBranchSessions) {
+        return Collections.emptyList();
+    }
+
     @Override
     public List<GlobalSession> readSession(GlobalStatus[] statuses, boolean withBranchSessions) {
-        return null;
+        return Collections.emptyList();
     }
 
     @Override
     public List<GlobalSession> readSession(SessionCondition sessionCondition) {
-        return null;
+        return Collections.emptyList();
     }
 
     @Override
diff --git a/server/src/main/java/io/seata/server/store/TransactionStoreManager.java b/server/src/main/java/io/seata/server/store/TransactionStoreManager.java
index b71d70544..2fb6473bc 100644
--- a/server/src/main/java/io/seata/server/store/TransactionStoreManager.java
+++ b/server/src/main/java/io/seata/server/store/TransactionStoreManager.java
@@ -55,6 +55,13 @@ public interface TransactionStoreManager {
      */
     GlobalSession readSession(String xid, boolean withBranchSessions);
 
+    /**
+     * Read session global session by sort by timeout begin status.
+     *
+     * @param withBranchSessions the withBranchSessions
+     * @return the global session
+     */
+    List<GlobalSession> readSortByTimeoutBeginSessions(boolean withBranchSessions);
     /**
      * Read session global session.
      *
