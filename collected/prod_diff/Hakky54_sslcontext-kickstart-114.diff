diff --git a/sslcontext-kickstart-for-pem/src/main/java/nl/altindag/ssl/util/PemUtils.java b/sslcontext-kickstart-for-pem/src/main/java/nl/altindag/ssl/util/PemUtils.java
index 4f49ce1..d27e2f1 100644
--- a/sslcontext-kickstart-for-pem/src/main/java/nl/altindag/ssl/util/PemUtils.java
+++ b/sslcontext-kickstart-for-pem/src/main/java/nl/altindag/ssl/util/PemUtils.java
@@ -88,8 +88,10 @@ public final class PemUtils {
     private static final JcaX509CertificateConverter CERTIFICATE_CONVERTER = new JcaX509CertificateConverter().setProvider(BOUNCY_CASTLE_PROVIDER);
     private static final JceOpenSSLPKCS8DecryptorProviderBuilder OPEN_SSL_PKCS8_DECRYPTOR_PROVIDER_BUILDER = new JceOpenSSLPKCS8DecryptorProviderBuilder().setProvider(BOUNCY_CASTLE_PROVIDER);
     private static final JcePEMDecryptorProviderBuilder PEM_DECRYPTOR_PROVIDER_BUILDER = new JcePEMDecryptorProviderBuilder().setProvider(BOUNCY_CASTLE_PROVIDER);
-    private static final BouncyFunction<char[], InputDecryptorProvider> INPUT_DECRYPTOR_PROVIDER = password -> OPEN_SSL_PKCS8_DECRYPTOR_PROVIDER_BUILDER.build(Objects.requireNonNull(password));
-    private static final BouncyFunction<char[], PEMDecryptorProvider> PEM_DECRYPTOR_PROVIDER = password -> PEM_DECRYPTOR_PROVIDER_BUILDER.build(Objects.requireNonNull(password));
+    private static final BouncyFunction<char[], InputDecryptorProvider> INPUT_DECRYPTOR_PROVIDER = password -> OPEN_SSL_PKCS8_DECRYPTOR_PROVIDER_BUILDER.build(
+        ValidationUtils.requireNotNull(password, () -> new IllegalArgumentException("A password is mandatory with encrypted private key informations")));
+    private static final BouncyFunction<char[], PEMDecryptorProvider> PEM_DECRYPTOR_PROVIDER = password -> PEM_DECRYPTOR_PROVIDER_BUILDER.build(
+        ValidationUtils.requireNotNull(password, () -> new IllegalArgumentException("A password is mandatory with an encrypted key")));
 
     private PemUtils() {}
 
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/ValidationUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/ValidationUtils.java
new file mode 100644
index 0000000..f1912ee
--- /dev/null
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/ValidationUtils.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright 2019-2021 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package nl.altindag.ssl.util;
+
+import java.util.function.Supplier;
+
+public class ValidationUtils {
+    static <T> T requireNotNull(T maybeNull, Supplier<RuntimeException> exceptionSupplier) {
+        if (maybeNull == null) {
+            throw exceptionSupplier.get();
+        }
+        return maybeNull;
+    }
+}
