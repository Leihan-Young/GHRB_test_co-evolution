diff --git a/common/src/main/java/io/seata/common/DefaultValues.java b/common/src/main/java/io/seata/common/DefaultValues.java
index c98223026..bebf18256 100644
--- a/common/src/main/java/io/seata/common/DefaultValues.java
+++ b/common/src/main/java/io/seata/common/DefaultValues.java
@@ -114,7 +114,7 @@ public interface DefaultValues {
 
     boolean DEFAULT_SERVER_ENABLE_CHECK_AUTH = true;
 
-    String DEFAULT_LOAD_BALANCE = "RandomLoadBalance";
+    String DEFAULT_LOAD_BALANCE = "XID";
     int VIRTUAL_NODES_DEFAULT = 10;
 
     /**
diff --git a/discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/LoadBalanceFactory.java b/discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/LoadBalanceFactory.java
index d9489c32f..2256a20e7 100644
--- a/discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/LoadBalanceFactory.java
+++ b/discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/LoadBalanceFactory.java
@@ -35,7 +35,9 @@ public class LoadBalanceFactory {
 
     public static final String LOAD_BALANCE_TYPE = LOAD_BALANCE_PREFIX + "type";
 
-    public static final String RANDOM_LOAD_BALANCE = DEFAULT_LOAD_BALANCE;
+    public static final String RANDOM_LOAD_BALANCE = "RandomLoadBalance";
+
+    public static final String XID_LOAD_BALANCE = "XID";
 
     public static final String ROUND_ROBIN_LOAD_BALANCE = "RoundRobinLoadBalance";
 
diff --git a/discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/XIDLoadBalance.java b/discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/XIDLoadBalance.java
new file mode 100644
index 000000000..1d210d0a5
--- /dev/null
+++ b/discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/XIDLoadBalance.java
@@ -0,0 +1,68 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package io.seata.discovery.loadbalance;
+
+import static io.seata.discovery.loadbalance.LoadBalanceFactory.XID_LOAD_BALANCE;
+
+
+import java.net.InetSocketAddress;
+import java.util.List;
+import java.util.Objects;
+
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.common.loader.LoadLevel;
+import io.seata.common.util.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * The type xid load balance.
+ *
+ * @author funkye
+ */
+@LoadLevel(name = XID_LOAD_BALANCE)
+public class XIDLoadBalance implements LoadBalance {
+    
+    private static final Logger LOGGER = LoggerFactory.getLogger(XIDLoadBalance.class);
+
+    private static final LoadBalance RANDOM_LOAD_BALANCE = EnhancedServiceLoader.load(LoadBalance.class,
+        LoadBalanceFactory.RANDOM_LOAD_BALANCE);
+
+    private static final String SPLIT = ":";
+
+    @Override
+    public <T> T select(List<T> invokers, String xid) throws Exception {
+        if (StringUtils.isNotBlank(xid) && xid.contains(SPLIT)) {
+            // ip:port:transactionId -> ip:port
+            String serverAddress = xid.substring(0, xid.lastIndexOf(SPLIT));
+            // ip:port -> port
+            int index = serverAddress.lastIndexOf(SPLIT);
+            int port = Integer.parseInt(serverAddress.substring(index + 1));
+            // ipv4/v6
+            String ip = serverAddress.substring(0, index);
+            InetSocketAddress xidInetSocketAddress = new InetSocketAddress(ip, port);
+            for (T invoker : invokers) {
+                InetSocketAddress inetSocketAddress = (InetSocketAddress)invoker;
+                if (Objects.equals(xidInetSocketAddress, inetSocketAddress)) {
+                    return (T)inetSocketAddress;
+                }
+            }
+            LOGGER.error("not found seata-server channel,xid: {}, try use random load balance", xid);
+        }
+        return RANDOM_LOAD_BALANCE.select(invokers, xid);
+    }
+
+}
