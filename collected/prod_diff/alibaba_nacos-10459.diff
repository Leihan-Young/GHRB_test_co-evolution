diff --git a/config/src/main/java/com/alibaba/nacos/config/server/configuration/NacosConfigConfiguration.java b/config/src/main/java/com/alibaba/nacos/config/server/configuration/NacosConfigConfiguration.java
index 4250f29ce2..c08031d966 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/configuration/NacosConfigConfiguration.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/configuration/NacosConfigConfiguration.java
@@ -18,6 +18,7 @@ package com.alibaba.nacos.config.server.configuration;
 
 import com.alibaba.nacos.config.server.filter.NacosWebFilter;
 import com.alibaba.nacos.config.server.filter.CircuitFilter;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionDistributedEmbedStorage;
 import org.springframework.boot.web.servlet.FilterRegistrationBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Conditional;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/constant/ConfigModuleStateBuilder.java b/config/src/main/java/com/alibaba/nacos/config/server/constant/ConfigModuleStateBuilder.java
index 7f9cb1f420..197638c6ef 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/constant/ConfigModuleStateBuilder.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/constant/ConfigModuleStateBuilder.java
@@ -16,8 +16,9 @@
 
 package com.alibaba.nacos.config.server.constant;
 
-import com.alibaba.nacos.config.server.utils.DatasourcePlatformUtil;
 import com.alibaba.nacos.config.server.utils.PropertyUtil;
+import com.alibaba.nacos.persistence.utils.DatasourcePlatformUtil;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import com.alibaba.nacos.sys.module.ModuleState;
 import com.alibaba.nacos.sys.module.ModuleStateBuilder;
@@ -31,11 +32,11 @@ public class ConfigModuleStateBuilder implements ModuleStateBuilder {
     
     @Override
     public ModuleState build() {
-        ModuleState moduleState = new ModuleState(Constants.CONFIG_MODULE);
+        ModuleState moduleState = new ModuleState(com.alibaba.nacos.api.common.Constants.Config.CONFIG_MODULE);
         
         moduleState.newState(Constants.DATASOURCE_PLATFORM_PROPERTY_STATE, DatasourcePlatformUtil.getDatasourcePlatform(""));
         moduleState.newState(Constants.NACOS_PLUGIN_DATASOURCE_LOG_STATE,
-                EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class, false));
+                EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class, false));
         
         moduleState.newState(PropertiesConstant.NOTIFY_CONNECT_TIMEOUT, PropertyUtil.getNotifyConnectTimeout());
         moduleState.newState(PropertiesConstant.NOTIFY_SOCKET_TIMEOUT, PropertyUtil.getNotifySocketTimeout());
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/constant/Constants.java b/config/src/main/java/com/alibaba/nacos/config/server/constant/Constants.java
index 3453f2cf1c..660b246823 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/constant/Constants.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/constant/Constants.java
@@ -25,8 +25,6 @@ import com.alibaba.nacos.config.server.model.event.ConfigDumpEvent;
  */
 public class Constants {
     
-    public static final String CONFIG_MODULE = "config";
-    
     public static final String CLIENT_VERSION_HEADER = "Client-Version";
     
     public static final String CLIENT_VERSION = "3.0.0";
@@ -41,11 +39,6 @@ public class Constants {
      */
     public static final String BASE_DIR = "config-data";
     
-    /**
-     * The derby base dir.
-     */
-    public static final String DERBY_BASE_DIR = "derby-data";
-    
     /**
      * Back up file directory in server side.
      *
@@ -266,8 +259,6 @@ public class Constants {
     
     public static final int ATOMIC_MAX_SIZE = 1000;
     
-    public static final String CONFIG_MODEL_RAFT_GROUP = "nacos_config";
-    
     public static final int DATA_IN_BODY_VERSION = 204;
     
     /**
@@ -280,11 +271,6 @@ public class Constants {
      */
     public static final String EXTEND_INFOS_CONFIG_DUMP_EVENT = ConfigDumpEvent.class.getName() + "@@many";
     
-    /**
-     * Specifies that reads wait without timeout.
-     */
-    public static final String EXTEND_NEED_READ_UNTIL_HAVE_DATA = "00--0-read-join-0--00";
-
     public static final String CONFIG_EXPORT_ITEM_FILE_SEPARATOR = "/";
     
     public static final String CONFIG_EXPORT_METADATA = ".meta.yml";
@@ -293,8 +279,6 @@ public class Constants {
     
     public static final int LIMIT_ERROR_CODE = 429;
     
-    public static final String NACOS_PLUGIN_DATASOURCE_LOG = "nacos.plugin.datasource.log.enabled";
-    
     public static final String NACOS_PLUGIN_DATASOURCE_LOG_STATE = "plugin_datasource_log_enabled";
     
     public static final String CONFIG_SEARCH_BLUR = "blur";
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/constant/PropertiesConstant.java b/config/src/main/java/com/alibaba/nacos/config/server/constant/PropertiesConstant.java
index 9100d70db1..41a80e4c5a 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/constant/PropertiesConstant.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/constant/PropertiesConstant.java
@@ -53,21 +53,6 @@ public class PropertiesConstant {
     
     public static final String INITIAL_EXPANSION_PERCENT = "initialExpansionPercent";
     
-    /**
-     * May be removed with the upgrade of springboot version.
-     */
-    public static final String DATASOURCE_PLATFORM_PROPERTY_OLD = "spring.datasource.platform";
-    
-    public static final String DATASOURCE_PLATFORM_PROPERTY = "spring.sql.init.platform";
-    
-    public static final String MYSQL = "mysql";
-    
-    public static final String DERBY = "derby";
-    
-    public static final String EMPTY_DATASOURCE_PLATFORM = "";
-    
-    public static final String EMBEDDED_STORAGE = "embeddedStorage";
-    
     public static final String SEARCH_MAX_CAPACITY = "nacos.config.search.max_capacity";
     
     public static final String SEARCH_MAX_THREAD = "nacos.config.search.max_thread";
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigController.java b/config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigController.java
index 189b1bfcfb..abb2e1641c 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigController.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigController.java
@@ -33,7 +33,7 @@ import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfo4Beta;
 import com.alibaba.nacos.config.server.model.ConfigMetadata;
 import com.alibaba.nacos.config.server.model.GroupkeyListenserStatus;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.model.SameConfigPolicy;
 import com.alibaba.nacos.config.server.model.SampleResult;
 import com.alibaba.nacos.config.server.model.event.ConfigDataChangeEvent;
@@ -44,7 +44,7 @@ import com.alibaba.nacos.config.server.result.code.ResultCodeEnum;
 import com.alibaba.nacos.config.server.service.ConfigChangePublisher;
 import com.alibaba.nacos.config.server.service.ConfigOperationService;
 import com.alibaba.nacos.config.server.service.ConfigSubService;
-import com.alibaba.nacos.config.server.service.repository.CommonPersistService;
+import com.alibaba.nacos.core.namespace.repository.NamespacePersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoBetaPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
 import com.alibaba.nacos.config.server.service.trace.ConfigTraceService;
@@ -114,7 +114,7 @@ public class ConfigController {
     
     private ConfigInfoBetaPersistService configInfoBetaPersistService;
     
-    private CommonPersistService commonPersistService;
+    private NamespacePersistService namespacePersistService;
     
     private final ConfigOperationService configOperationService;
     
@@ -122,12 +122,12 @@ public class ConfigController {
     
     public ConfigController(ConfigServletInner inner, ConfigOperationService configOperationService,
             ConfigSubService configSubService, ConfigInfoPersistService configInfoPersistService,
-            CommonPersistService commonPersistService, ConfigInfoBetaPersistService configInfoBetaPersistService) {
+            NamespacePersistService namespacePersistService, ConfigInfoBetaPersistService configInfoBetaPersistService) {
         this.inner = inner;
         this.configOperationService = configOperationService;
         this.configSubService = configSubService;
         this.configInfoPersistService = configInfoPersistService;
-        this.commonPersistService = commonPersistService;
+        this.namespacePersistService = namespacePersistService;
         this.configInfoBetaPersistService = configInfoBetaPersistService;
     }
     
@@ -595,7 +595,7 @@ public class ConfigController {
         }
         
         namespace = NamespaceUtil.processNamespaceParameter(namespace);
-        if (StringUtils.isNotBlank(namespace) && commonPersistService.tenantInfoCountByTenantId(namespace) <= 0) {
+        if (StringUtils.isNotBlank(namespace) && namespacePersistService.tenantInfoCountByTenantId(namespace) <= 0) {
             failedData.put("succCount", 0);
             return RestResultUtils.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
         }
@@ -830,7 +830,7 @@ public class ConfigController {
         configBeansList.removeAll(Collections.singleton(null));
         
         namespace = NamespaceUtil.processNamespaceParameter(namespace);
-        if (StringUtils.isNotBlank(namespace) && commonPersistService.tenantInfoCountByTenantId(namespace) <= 0) {
+        if (StringUtils.isNotBlank(namespace) && namespacePersistService.tenantInfoCountByTenantId(namespace) <= 0) {
             failedData.put("succCount", 0);
             return RestResultUtils.buildResult(ResultCodeEnum.NAMESPACE_NOT_EXIST, failedData);
         }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigOpsController.java b/config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigOpsController.java
index 9ed73805ca..ff7c1fc8cf 100755
--- a/config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigOpsController.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigOpsController.java
@@ -17,18 +17,18 @@
 package com.alibaba.nacos.config.server.controller;
 
 import com.alibaba.nacos.auth.annotation.Secured;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
 import com.alibaba.nacos.plugin.auth.constant.ActionTypes;
 import com.alibaba.nacos.common.model.RestResult;
 import com.alibaba.nacos.common.model.RestResultUtils;
 import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.config.server.constant.Constants;
-import com.alibaba.nacos.config.server.model.event.DerbyImportEvent;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
-import com.alibaba.nacos.config.server.service.datasource.LocalDataSourceServiceImpl;
+import com.alibaba.nacos.persistence.model.event.DerbyImportEvent;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.datasource.LocalDataSourceServiceImpl;
 import com.alibaba.nacos.config.server.service.dump.DumpService;
-import com.alibaba.nacos.config.server.service.repository.embedded.DatabaseOperate;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
 import com.alibaba.nacos.config.server.utils.LogUtil;
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
 import com.alibaba.nacos.core.utils.WebUtils;
 import com.alibaba.nacos.sys.utils.ApplicationUtils;
 import com.alibaba.nacos.common.utils.StringUtils;
@@ -97,7 +97,7 @@ public class ConfigOpsController {
         String limitSign = "ROWS FETCH NEXT";
         String limit = " OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY";
         try {
-            if (!PropertyUtil.isEmbeddedStorage()) {
+            if (!DatasourceConfiguration.isEmbeddedStorage()) {
                 return RestResultUtils.failed("The current storage mode is not Derby");
             }
             LocalDataSourceServiceImpl dataSourceService = (LocalDataSourceServiceImpl) DynamicDataSource
@@ -129,7 +129,7 @@ public class ConfigOpsController {
     @Secured(action = ActionTypes.WRITE, resource = "nacos/admin")
     public DeferredResult<RestResult<String>> importDerby(@RequestParam(value = "file") MultipartFile multipartFile) {
         DeferredResult<RestResult<String>> response = new DeferredResult<>();
-        if (!PropertyUtil.isEmbeddedStorage()) {
+        if (!DatasourceConfiguration.isEmbeddedStorage()) {
             response.setResult(RestResultUtils.failed("Limited to embedded storage mode"));
             return response;
         }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/controller/HealthController.java b/config/src/main/java/com/alibaba/nacos/config/server/controller/HealthController.java
index 23477379d4..0fd1c4684d 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/controller/HealthController.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/controller/HealthController.java
@@ -17,8 +17,8 @@
 package com.alibaba.nacos.config.server.controller;
 
 import com.alibaba.nacos.config.server.constant.Constants;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.core.cluster.ServerMemberManager;
 import com.alibaba.nacos.sys.utils.InetUtils;
 import org.springframework.web.bind.annotation.GetMapping;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/controller/HistoryController.java b/config/src/main/java/com/alibaba/nacos/config/server/controller/HistoryController.java
index d47b2c4dac..b640f3b602 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/controller/HistoryController.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/controller/HistoryController.java
@@ -22,7 +22,7 @@ import com.alibaba.nacos.common.utils.StringUtils;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.ConfigHistoryInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.service.HistoryService;
 import com.alibaba.nacos.config.server.utils.ParamUtils;
 import com.alibaba.nacos.plugin.auth.constant.ActionTypes;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/controller/v2/ConfigControllerV2.java b/config/src/main/java/com/alibaba/nacos/config/server/controller/v2/ConfigControllerV2.java
index 9d56d8e463..11554b1a23 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/controller/v2/ConfigControllerV2.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/controller/v2/ConfigControllerV2.java
@@ -29,7 +29,7 @@ import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.controller.ConfigServletInner;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigRequestInfo;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.model.form.ConfigForm;
 import com.alibaba.nacos.config.server.service.ConfigDetailService;
 import com.alibaba.nacos.config.server.service.ConfigOperationService;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/controller/v2/HistoryControllerV2.java b/config/src/main/java/com/alibaba/nacos/config/server/controller/v2/HistoryControllerV2.java
index a065050698..1af2352d0f 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/controller/v2/HistoryControllerV2.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/controller/v2/HistoryControllerV2.java
@@ -26,7 +26,7 @@ import com.alibaba.nacos.common.utils.StringUtils;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.ConfigHistoryInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.service.HistoryService;
 import com.alibaba.nacos.config.server.utils.ParamUtils;
 import com.alibaba.nacos.plugin.auth.constant.ActionTypes;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/exception/GlobalExceptionHandler.java b/config/src/main/java/com/alibaba/nacos/config/server/exception/GlobalExceptionHandler.java
index f3d4b59ef3..95bab292cf 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/exception/GlobalExceptionHandler.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/exception/GlobalExceptionHandler.java
@@ -19,6 +19,7 @@ package com.alibaba.nacos.config.server.exception;
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.common.utils.ExceptionUtil;
 import com.alibaba.nacos.config.server.monitor.MetricsMonitor;
+import com.alibaba.nacos.persistence.monitor.DatasourceMetrics;
 import org.springframework.dao.DataAccessException;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.ControllerAdvice;
@@ -64,7 +65,7 @@ public class GlobalExceptionHandler {
      */
     @ExceptionHandler(DataAccessException.class)
     public ResponseEntity<String> handleDataAccessException(DataAccessException ex) throws DataAccessException {
-        MetricsMonitor.getDbException().increment();
+        DatasourceMetrics.getDbException().increment();
         return ResponseEntity.status(500).body(ExceptionUtil.getAllExceptionMsg(ex));
     }
 }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/filter/CircuitFilter.java b/config/src/main/java/com/alibaba/nacos/config/server/filter/CircuitFilter.java
index 0fa1f1019a..918bd9e709 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/filter/CircuitFilter.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/filter/CircuitFilter.java
@@ -21,8 +21,7 @@ import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.common.notify.listener.SmartSubscriber;
 import com.alibaba.nacos.common.utils.CollectionUtils;
 import com.alibaba.nacos.common.utils.ExceptionUtil;
-import com.alibaba.nacos.config.server.constant.Constants;
-import com.alibaba.nacos.config.server.model.event.RaftDbErrorEvent;
+import com.alibaba.nacos.persistence.model.event.RaftDbErrorEvent;
 import com.alibaba.nacos.config.server.model.event.RaftDbErrorRecoverEvent;
 import com.alibaba.nacos.consistency.ProtocolMetaData;
 import com.alibaba.nacos.consistency.cp.CPProtocol;
@@ -30,6 +29,7 @@ import com.alibaba.nacos.consistency.cp.MetadataKey;
 import com.alibaba.nacos.core.cluster.Member;
 import com.alibaba.nacos.core.cluster.MemberMetaDataConstants;
 import com.alibaba.nacos.core.cluster.ServerMemberManager;
+import com.alibaba.nacos.persistence.constants.PersistenceConstant;
 import org.springframework.beans.factory.annotation.Autowired;
 
 import javax.annotation.PostConstruct;
@@ -108,7 +108,7 @@ public class CircuitFilter implements Filter {
     }
     
     private void listenerSelfInCluster() {
-        protocol.protocolMetaData().subscribe(Constants.CONFIG_MODEL_RAFT_GROUP, MetadataKey.RAFT_GROUP_MEMBER, o -> {
+        protocol.protocolMetaData().subscribe(PersistenceConstant.CONFIG_MODEL_RAFT_GROUP, MetadataKey.RAFT_GROUP_MEMBER, o -> {
             if (!(o instanceof ProtocolMetaData.ValueItem)) {
                 return;
             }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/filter/ConfigEnabledFilter.java b/config/src/main/java/com/alibaba/nacos/config/server/filter/ConfigEnabledFilter.java
new file mode 100644
index 0000000000..78f8922f76
--- /dev/null
+++ b/config/src/main/java/com/alibaba/nacos/config/server/filter/ConfigEnabledFilter.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.config.server.filter;
+
+import com.alibaba.nacos.common.utils.StringUtils;
+import com.alibaba.nacos.config.server.Config;
+import com.alibaba.nacos.sys.env.EnvUtil;
+import com.alibaba.nacos.sys.filter.NacosPackageExcludeFilter;
+
+import java.util.Set;
+
+import static com.alibaba.nacos.sys.env.EnvUtil.FUNCTION_MODE_CONFIG;
+
+/**
+ * Config module enabled filter by spring packages scan.
+ *
+ * @author xiweng.yy
+ */
+public class ConfigEnabledFilter implements NacosPackageExcludeFilter {
+    
+    @Override
+    public String getResponsiblePackagePrefix() {
+        return Config.class.getPackage().getName();
+    }
+    
+    @Override
+    public boolean isExcluded(String className, Set<String> annotationNames) {
+        String functionMode = EnvUtil.getFunctionMode();
+        // When not specified config mode or specified all mode, the config module not start and load.
+        if (StringUtils.isEmpty(functionMode)) {
+            return false;
+        }
+        return !FUNCTION_MODE_CONFIG.equals(functionMode);
+    }
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/model/HistoryContext.java b/config/src/main/java/com/alibaba/nacos/config/server/model/HistoryContext.java
index 0cd289c389..75b5132768 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/model/HistoryContext.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/model/HistoryContext.java
@@ -16,6 +16,8 @@
 
 package com.alibaba.nacos.config.server.model;
 
+import com.alibaba.nacos.persistence.model.Page;
+
 import java.io.Serializable;
 
 /**
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/monitor/MetricsMonitor.java b/config/src/main/java/com/alibaba/nacos/config/server/monitor/MetricsMonitor.java
index 9c0a080810..2cc9f734e2 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/monitor/MetricsMonitor.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/monitor/MetricsMonitor.java
@@ -102,7 +102,7 @@ public class MetricsMonitor {
         tags.add(immutableTag);
         tags.add(new ImmutableTag("name", "notifyTask"));
         NacosMeterRegistryCenter.gauge(METER_REGISTRY, "nacos_monitor", tags, notifyTask);
-    
+        
         tags = new ArrayList<>();
         tags.add(immutableTag);
         tags.add(new ImmutableTag("name", "notifyClientTask"));
@@ -112,7 +112,7 @@ public class MetricsMonitor {
         tags.add(immutableTag);
         tags.add(new ImmutableTag("name", "dumpTask"));
         NacosMeterRegistryCenter.gauge(METER_REGISTRY, "nacos_monitor", tags, dumpTask);
-    
+        
         tags = new ArrayList<>();
         tags.add(immutableTag);
         tags.add(new ImmutableTag("name", "fuzzySearch"));
@@ -124,7 +124,7 @@ public class MetricsMonitor {
         tags = new ArrayList<>();
         tags.add(new ImmutableTag("version", "v1"));
         NacosMeterRegistryCenter.gauge(METER_REGISTRY, "nacos_config_subscriber", tags, configSubscriber.get("v1"));
-    
+        
         tags = new ArrayList<>();
         tags.add(new ImmutableTag("version", "v2"));
         NacosMeterRegistryCenter.gauge(METER_REGISTRY, "nacos_config_subscriber", tags, configSubscriber.get("v2"));
@@ -171,19 +171,23 @@ public class MetricsMonitor {
     }
     
     public static Timer getReadConfigRtTimer() {
-        return NacosMeterRegistryCenter.timer(METER_REGISTRY, "nacos_timer", "module", "config", "name", "readConfigRt");
+        return NacosMeterRegistryCenter
+                .timer(METER_REGISTRY, "nacos_timer", "module", "config", "name", "readConfigRt");
     }
     
     public static Timer getReadConfigRpcRtTimer() {
-        return NacosMeterRegistryCenter.timer(METER_REGISTRY, "nacos_timer", "module", "config", "name", "readConfigRpcRt");
+        return NacosMeterRegistryCenter
+                .timer(METER_REGISTRY, "nacos_timer", "module", "config", "name", "readConfigRpcRt");
     }
     
     public static Timer getWriteConfigRtTimer() {
-        return NacosMeterRegistryCenter.timer(METER_REGISTRY, "nacos_timer", "module", "config", "name", "writeConfigRt");
+        return NacosMeterRegistryCenter
+                .timer(METER_REGISTRY, "nacos_timer", "module", "config", "name", "writeConfigRt");
     }
     
     public static Timer getWriteConfigRpcRtTimer() {
-        return NacosMeterRegistryCenter.timer(METER_REGISTRY, "nacos_timer", "module", "config", "name", "writeConfigRpcRt");
+        return NacosMeterRegistryCenter
+                .timer(METER_REGISTRY, "nacos_timer", "module", "config", "name", "writeConfigRpcRt");
     }
     
     public static Timer getNotifyRtTimer() {
@@ -191,23 +195,22 @@ public class MetricsMonitor {
     }
     
     public static Counter getIllegalArgumentException() {
-        return NacosMeterRegistryCenter.counter(METER_REGISTRY, "nacos_exception", "module", "config", "name", "illegalArgument");
+        return NacosMeterRegistryCenter
+                .counter(METER_REGISTRY, "nacos_exception", "module", "config", "name", "illegalArgument");
     }
     
     public static Counter getNacosException() {
         return NacosMeterRegistryCenter.counter(METER_REGISTRY, "nacos_exception", "module", "config", "name", "nacos");
     }
     
-    public static Counter getDbException() {
-        return NacosMeterRegistryCenter.counter(METER_REGISTRY, "nacos_exception", "module", "config", "name", "db");
-    }
-    
     public static Counter getConfigNotifyException() {
-        return NacosMeterRegistryCenter.counter(METER_REGISTRY, "nacos_exception", "module", "config", "name", "configNotify");
+        return NacosMeterRegistryCenter
+                .counter(METER_REGISTRY, "nacos_exception", "module", "config", "name", "configNotify");
     }
     
     public static Counter getUnhealthException() {
-        return NacosMeterRegistryCenter.counter(METER_REGISTRY, "nacos_exception", "module", "config", "name", "unhealth");
+        return NacosMeterRegistryCenter
+                .counter(METER_REGISTRY, "nacos_exception", "module", "config", "name", "unhealth");
     }
     
     public static void incrementConfigChangeCount(String tenant, String group, String dataId) {
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java
index dad932f24d..77eedd2662 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigCacheService.java
@@ -28,6 +28,7 @@ import com.alibaba.nacos.config.server.utils.GroupKey;
 import com.alibaba.nacos.config.server.utils.GroupKey2;
 import com.alibaba.nacos.config.server.utils.PropertyUtil;
 import com.alibaba.nacos.common.utils.StringUtils;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -295,7 +296,7 @@ public class ConfigCacheService {
     public static void reloadConfig() {
         String aggreds = null;
         try {
-            if (PropertyUtil.isEmbeddedStorage()) {
+            if (DatasourceConfiguration.isEmbeddedStorage()) {
                 ConfigInfoBase config = configInfoPersistService
                         .findConfigInfoBase(AggrWhitelist.AGGRIDS_METADATA, "DEFAULT_GROUP");
                 if (config != null) {
@@ -313,7 +314,7 @@ public class ConfigCacheService {
         
         String clientIpWhitelist = null;
         try {
-            if (PropertyUtil.isEmbeddedStorage()) {
+            if (DatasourceConfiguration.isEmbeddedStorage()) {
                 ConfigInfoBase config = configInfoPersistService
                         .findConfigInfoBase(ClientIpWhiteList.CLIENT_IP_WHITELIST_METADATA, "DEFAULT_GROUP");
                 if (config != null) {
@@ -332,7 +333,7 @@ public class ConfigCacheService {
         
         String switchContent = null;
         try {
-            if (PropertyUtil.isEmbeddedStorage()) {
+            if (DatasourceConfiguration.isEmbeddedStorage()) {
                 ConfigInfoBase config = configInfoPersistService
                         .findConfigInfoBase(SwitchService.SWITCH_META_DATAID, "DEFAULT_GROUP");
                 if (config != null) {
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigChangePublisher.java b/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigChangePublisher.java
index b7fc85c2e3..3677ff6a61 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigChangePublisher.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigChangePublisher.java
@@ -18,7 +18,7 @@ package com.alibaba.nacos.config.server.service;
 
 import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.config.server.model.event.ConfigDataChangeEvent;
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
 import com.alibaba.nacos.sys.env.EnvUtil;
 
 /**
@@ -34,7 +34,7 @@ public class ConfigChangePublisher {
      * @param event ConfigDataChangeEvent instance.
      */
     public static void notifyConfigChange(ConfigDataChangeEvent event) {
-        if (PropertyUtil.isEmbeddedStorage() && !EnvUtil.getStandaloneMode()) {
+        if (DatasourceConfiguration.isEmbeddedStorage() && !EnvUtil.getStandaloneMode()) {
             return;
         }
         NotifyCenter.publishEvent(event);
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigDetailService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigDetailService.java
index 9f6a2c72a9..b89816ee90 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigDetailService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigDetailService.java
@@ -20,7 +20,7 @@ import com.alibaba.nacos.api.exception.runtime.NacosRuntimeException;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.constant.PropertiesConstant;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import org.slf4j.Logger;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigReadinessCheckService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigReadinessCheckService.java
new file mode 100644
index 0000000000..87090ab28a
--- /dev/null
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/ConfigReadinessCheckService.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.config.server.service;
+
+import com.alibaba.nacos.api.common.Constants;
+import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
+import com.alibaba.nacos.core.cluster.health.AbstractModuleHealthChecker;
+import com.alibaba.nacos.core.utils.Loggers;
+import org.springframework.stereotype.Service;
+
+/**
+ * Readiness check service for config module.
+ *
+ * @author xiweng.yy
+ */
+@Service
+public class ConfigReadinessCheckService extends AbstractModuleHealthChecker {
+    
+    private final ConfigInfoPersistService configInfoPersistService;
+    
+    public ConfigReadinessCheckService(ConfigInfoPersistService configInfoPersistService) {
+        this.configInfoPersistService = configInfoPersistService;
+    }
+    
+    @Override
+    public boolean readiness() {
+        // check db
+        try {
+            configInfoPersistService.configInfoCount("");
+            return true;
+        } catch (Exception e) {
+            Loggers.CLUSTER.error("Config health check fail.", e);
+        }
+        return false;
+    }
+    
+    @Override
+    public String getModuleName() {
+        return Constants.Config.CONFIG_MODULE;
+    }
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/HistoryService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/HistoryService.java
index 11d700657d..00dcc34e3b 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/HistoryService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/HistoryService.java
@@ -19,7 +19,7 @@ package com.alibaba.nacos.config.server.service;
 import com.alibaba.nacos.common.utils.Pair;
 import com.alibaba.nacos.config.server.model.ConfigHistoryInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
 import com.alibaba.nacos.config.server.service.repository.HistoryConfigInfoPersistService;
 import com.alibaba.nacos.plugin.auth.exception.AccessException;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/NamespaceConfigInfoService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/NamespaceConfigInfoService.java
new file mode 100644
index 0000000000..6a77fa9c13
--- /dev/null
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/NamespaceConfigInfoService.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.config.server.service;
+
+import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
+import com.alibaba.nacos.core.namespace.injector.AbstractNamespaceDetailInjector;
+import com.alibaba.nacos.core.namespace.model.Namespace;
+import org.springframework.stereotype.Service;
+
+/**
+ * Namespace detail for config info.
+ *
+ * @author xiweng.yy
+ */
+@Service
+public class NamespaceConfigInfoService extends AbstractNamespaceDetailInjector {
+    
+    private final ConfigInfoPersistService configInfoPersistService;
+    
+    public NamespaceConfigInfoService(ConfigInfoPersistService configInfoPersistService) {
+        this.configInfoPersistService = configInfoPersistService;
+    }
+    
+    @Override
+    public void injectDetail(Namespace namespace) {
+        int configCount = configInfoPersistService.configInfoCount(namespace.getNamespace());
+        namespace.setConfigCount(configCount);
+    }
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/capacity/GroupCapacityPersistService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/capacity/GroupCapacityPersistService.java
index 94a454e959..7da005929a 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/capacity/GroupCapacityPersistService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/capacity/GroupCapacityPersistService.java
@@ -17,13 +17,13 @@
 package com.alibaba.nacos.config.server.service.capacity;
 
 import com.alibaba.nacos.common.utils.CollectionUtils;
-import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.capacity.Capacity;
 import com.alibaba.nacos.config.server.model.capacity.GroupCapacity;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.utils.TimeUtils;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoMapper;
@@ -73,7 +73,7 @@ public class GroupCapacityPersistService {
     public void init() {
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
         this.jdbcTemplate = dataSourceService.getJdbcTemplate();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
     }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/capacity/TenantCapacityPersistService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/capacity/TenantCapacityPersistService.java
index 6e3824ce16..ead400c68f 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/capacity/TenantCapacityPersistService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/capacity/TenantCapacityPersistService.java
@@ -17,12 +17,12 @@
 package com.alibaba.nacos.config.server.service.capacity;
 
 import com.alibaba.nacos.common.utils.CollectionUtils;
-import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.capacity.TenantCapacity;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.utils.TimeUtils;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.TenantCapacityMapper;
@@ -71,7 +71,7 @@ public class TenantCapacityPersistService {
     public void init() {
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
         this.jdbcTemplate = dataSourceService.getJdbcTemplate();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
     }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java
index 2c374a6cb5..6ce9f159bf 100755
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java
@@ -26,9 +26,10 @@ import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoAggr;
 import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.core.namespace.repository.NamespacePersistService;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.service.ConfigCacheService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.dump.processor.DumpAllBetaProcessor;
 import com.alibaba.nacos.config.server.service.dump.processor.DumpAllProcessor;
 import com.alibaba.nacos.config.server.service.dump.processor.DumpAllTagProcessor;
@@ -40,7 +41,6 @@ import com.alibaba.nacos.config.server.service.dump.task.DumpAllTask;
 import com.alibaba.nacos.config.server.service.dump.task.DumpChangeTask;
 import com.alibaba.nacos.config.server.service.dump.task.DumpTask;
 import com.alibaba.nacos.config.server.service.merge.MergeTaskProcessor;
-import com.alibaba.nacos.config.server.service.repository.CommonPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoAggrPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoBetaPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
@@ -56,7 +56,7 @@ import com.alibaba.nacos.config.server.utils.TimeUtils;
 import com.alibaba.nacos.core.cluster.ServerMemberManager;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import com.alibaba.nacos.sys.utils.InetUtils;
-import com.alibaba.nacos.core.utils.TimerContext;
+import com.alibaba.nacos.sys.utils.TimerContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -95,7 +95,7 @@ public abstract class DumpService {
     
     protected ConfigInfoPersistService configInfoPersistService;
     
-    protected CommonPersistService commonPersistService;
+    protected NamespacePersistService namespacePersistService;
     
     protected HistoryConfigInfoPersistService historyConfigInfoPersistService;
     
@@ -143,13 +143,13 @@ public abstract class DumpService {
      *
      * @param memberManager  {@link ServerMemberManager}
      */
-    public DumpService(ConfigInfoPersistService configInfoPersistService, CommonPersistService commonPersistService,
+    public DumpService(ConfigInfoPersistService configInfoPersistService, NamespacePersistService namespacePersistService,
             HistoryConfigInfoPersistService historyConfigInfoPersistService,
             ConfigInfoAggrPersistService configInfoAggrPersistService,
             ConfigInfoBetaPersistService configInfoBetaPersistService,
             ConfigInfoTagPersistService configInfoTagPersistService, ServerMemberManager memberManager) {
         this.configInfoPersistService = configInfoPersistService;
-        this.commonPersistService = commonPersistService;
+        this.namespacePersistService = namespacePersistService;
         this.historyConfigInfoPersistService = historyConfigInfoPersistService;
         this.configInfoAggrPersistService = configInfoAggrPersistService;
         this.configInfoBetaPersistService = configInfoBetaPersistService;
@@ -232,13 +232,13 @@ public abstract class DumpService {
                 // update Beta cache
                 LogUtil.DEFAULT_LOG.info("start clear all config-info-beta.");
                 DiskUtil.clearAllBeta();
-                if (commonPersistService.isExistTable(BETA_TABLE_NAME)) {
+                if (namespacePersistService.isExistTable(BETA_TABLE_NAME)) {
                     dumpAllBetaProcessor.process(new DumpAllBetaTask());
                 }
                 // update Tag cache
                 LogUtil.DEFAULT_LOG.info("start clear all config-info-tag.");
                 DiskUtil.clearAllTag();
-                if (commonPersistService.isExistTable(TAG_TABLE_NAME)) {
+                if (namespacePersistService.isExistTable(TAG_TABLE_NAME)) {
                     dumpAllTagProcessor.process(new DumpAllTagTask());
                 }
                 
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/EmbeddedDumpService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/EmbeddedDumpService.java
index 5ba0b8c574..a26a072c8d 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/EmbeddedDumpService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/EmbeddedDumpService.java
@@ -20,21 +20,21 @@ import com.alibaba.nacos.common.utils.Observable;
 import com.alibaba.nacos.common.utils.Observer;
 import com.alibaba.nacos.common.utils.StringUtils;
 import com.alibaba.nacos.common.utils.ThreadUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
-import com.alibaba.nacos.config.server.constant.Constants;
-import com.alibaba.nacos.config.server.service.repository.CommonPersistService;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.core.namespace.repository.NamespacePersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoAggrPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoBetaPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoTagPersistService;
 import com.alibaba.nacos.config.server.service.repository.HistoryConfigInfoPersistService;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
 import com.alibaba.nacos.consistency.ProtocolMetaData;
 import com.alibaba.nacos.consistency.cp.CPProtocol;
 import com.alibaba.nacos.consistency.cp.MetadataKey;
 import com.alibaba.nacos.core.cluster.ServerMemberManager;
 import com.alibaba.nacos.core.distributed.ProtocolManager;
 import com.alibaba.nacos.core.utils.GlobalExecutor;
+import com.alibaba.nacos.persistence.constants.PersistenceConstant;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.stereotype.Component;
@@ -73,12 +73,12 @@ public class EmbeddedDumpService extends DumpService {
      * @param protocolManager {@link ProtocolManager}
      */
     public EmbeddedDumpService(ConfigInfoPersistService configInfoPersistService,
-            CommonPersistService commonPersistService, HistoryConfigInfoPersistService historyConfigInfoPersistService,
+            NamespacePersistService namespacePersistService, HistoryConfigInfoPersistService historyConfigInfoPersistService,
             ConfigInfoAggrPersistService configInfoAggrPersistService,
             ConfigInfoBetaPersistService configInfoBetaPersistService,
             ConfigInfoTagPersistService configInfoTagPersistService, ServerMemberManager memberManager,
             ProtocolManager protocolManager) {
-        super(configInfoPersistService, commonPersistService, historyConfigInfoPersistService,
+        super(configInfoPersistService, namespacePersistService, historyConfigInfoPersistService,
                 configInfoAggrPersistService, configInfoBetaPersistService, configInfoTagPersistService, memberManager);
         this.protocolManager = protocolManager;
     }
@@ -110,14 +110,14 @@ public class EmbeddedDumpService extends DumpService {
                         return;
                     }
                     // Identify without a timeout mechanism
-                    EmbeddedStorageContextUtils.putExtendInfo(Constants.EXTEND_NEED_READ_UNTIL_HAVE_DATA, "true");
+                    EmbeddedStorageContextHolder.putExtendInfo(PersistenceConstant.EXTEND_NEED_READ_UNTIL_HAVE_DATA, "true");
                     // Remove your own listening to avoid task accumulation
                     boolean canEnd = false;
                     for (; ; ) {
                         try {
                             dumpOperate(processor, dumpAllProcessor, dumpAllBetaProcessor, dumpAllTagProcessor);
                             protocol.protocolMetaData()
-                                    .unSubscribe(Constants.CONFIG_MODEL_RAFT_GROUP, MetadataKey.LEADER_META_DATA, this);
+                                    .unSubscribe(PersistenceConstant.CONFIG_MODEL_RAFT_GROUP, MetadataKey.LEADER_META_DATA, this);
                             canEnd = true;
                         } catch (Throwable ex) {
                             if (!shouldRetry(ex)) {
@@ -131,13 +131,13 @@ public class EmbeddedDumpService extends DumpService {
                         }
                         ThreadUtils.sleep(500L);
                     }
-                    EmbeddedStorageContextUtils.cleanAllContext();
+                    EmbeddedStorageContextHolder.cleanAllContext();
                 });
             }
         };
         
         protocol.protocolMetaData()
-                .subscribe(Constants.CONFIG_MODEL_RAFT_GROUP, MetadataKey.LEADER_META_DATA, observer);
+                .subscribe(PersistenceConstant.CONFIG_MODEL_RAFT_GROUP, MetadataKey.LEADER_META_DATA, observer);
         
         // We must wait for the dump task to complete the callback operation before
         // continuing with the initialization
@@ -174,6 +174,6 @@ public class EmbeddedDumpService extends DumpService {
         }
         // if is derby + raft mode, only leader can execute
         CPProtocol protocol = protocolManager.getCpProtocol();
-        return protocol.isLeader(Constants.CONFIG_MODEL_RAFT_GROUP);
+        return protocol.isLeader(PersistenceConstant.CONFIG_MODEL_RAFT_GROUP);
     }
 }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/ExternalDumpService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/ExternalDumpService.java
index 2c163f147d..74afaa74bf 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/ExternalDumpService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/ExternalDumpService.java
@@ -16,8 +16,8 @@
 
 package com.alibaba.nacos.config.server.service.dump;
 
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
-import com.alibaba.nacos.config.server.service.repository.CommonPersistService;
+import com.alibaba.nacos.core.namespace.repository.NamespacePersistService;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoAggrPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoBetaPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
@@ -47,11 +47,11 @@ public class ExternalDumpService extends DumpService {
      * @param memberManager {@link ServerMemberManager}
      */
     public ExternalDumpService(ConfigInfoPersistService configInfoPersistService,
-            CommonPersistService commonPersistService, HistoryConfigInfoPersistService historyConfigInfoPersistService,
+            NamespacePersistService namespacePersistService, HistoryConfigInfoPersistService historyConfigInfoPersistService,
             ConfigInfoAggrPersistService configInfoAggrPersistService,
             ConfigInfoBetaPersistService configInfoBetaPersistService,
             ConfigInfoTagPersistService configInfoTagPersistService, ServerMemberManager memberManager) {
-        super(configInfoPersistService, commonPersistService, historyConfigInfoPersistService,
+        super(configInfoPersistService, namespacePersistService, historyConfigInfoPersistService,
                 configInfoAggrPersistService, configInfoBetaPersistService, configInfoTagPersistService, memberManager);
     }
     
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllBetaProcessor.java b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllBetaProcessor.java
index c2eadb26bb..bc87962ed5 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllBetaProcessor.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllBetaProcessor.java
@@ -19,7 +19,7 @@ package com.alibaba.nacos.config.server.service.dump.processor;
 import com.alibaba.nacos.common.task.NacosTask;
 import com.alibaba.nacos.common.task.NacosTaskProcessor;
 import com.alibaba.nacos.config.server.model.ConfigInfoBetaWrapper;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.service.ConfigCacheService;
 import com.alibaba.nacos.config.server.service.dump.DumpService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoBetaPersistService;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllProcessor.java b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllProcessor.java
index 86ca2bda70..310478d34c 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllProcessor.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllProcessor.java
@@ -21,7 +21,7 @@ import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.common.task.NacosTaskProcessor;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.service.AggrWhitelist;
 import com.alibaba.nacos.config.server.service.ClientIpWhiteList;
 import com.alibaba.nacos.config.server.service.ConfigCacheService;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllTagProcessor.java b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllTagProcessor.java
index e3125180a1..515541f2c1 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllTagProcessor.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/dump/processor/DumpAllTagProcessor.java
@@ -19,7 +19,7 @@ package com.alibaba.nacos.config.server.service.dump.processor;
 import com.alibaba.nacos.common.task.NacosTask;
 import com.alibaba.nacos.common.task.NacosTaskProcessor;
 import com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.service.ConfigCacheService;
 import com.alibaba.nacos.config.server.service.dump.DumpService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoTagPersistService;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java
index 4731a95b16..4d53d32c69 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeDatumService.java
@@ -16,17 +16,17 @@
 
 package com.alibaba.nacos.config.server.service.merge;
 
-import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.manager.TaskManager;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoAggr;
 import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
+import com.alibaba.nacos.persistence.constants.PersistenceConstant;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoAggrPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoTagPersistService;
 import com.alibaba.nacos.config.server.utils.ContentUtils;
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
 import com.alibaba.nacos.config.server.utils.TimeUtils;
 import com.alibaba.nacos.core.distributed.ProtocolManager;
 import com.alibaba.nacos.sys.env.EnvUtil;
@@ -125,14 +125,14 @@ public class MergeDatumService {
     }
     
     private boolean canExecute() {
-        if (!PropertyUtil.isEmbeddedStorage()) {
+        if (!DatasourceConfiguration.isEmbeddedStorage()) {
             return true;
         }
         if (EnvUtil.getStandaloneMode()) {
             return true;
         }
         ProtocolManager protocolManager = ApplicationUtils.getBean(ProtocolManager.class);
-        return protocolManager.getCpProtocol().isLeader(Constants.CONFIG_MODEL_RAFT_GROUP);
+        return protocolManager.getCpProtocol().isLeader(PersistenceConstant.CONFIG_MODEL_RAFT_GROUP);
     }
     
     class MergeAllDataWorker extends Thread {
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java b/config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java
index b4e24e6e1d..2464bf3012 100755
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/merge/MergeTaskProcessor.java
@@ -22,7 +22,7 @@ import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.common.task.NacosTaskProcessor;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoAggr;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.model.event.ConfigDataChangeEvent;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoAggrPersistService;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoAggrPersistService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoAggrPersistService.java
index 50a355cd81..fcef7f2857 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoAggrPersistService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoAggrPersistService.java
@@ -19,7 +19,8 @@ package com.alibaba.nacos.config.server.service.repository;
 import com.alibaba.nacos.config.server.model.ConfigInfoAggr;
 import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 
 import java.util.List;
 import java.util.Map;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoBetaPersistService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoBetaPersistService.java
index 62b689fefd..705a6b56ad 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoBetaPersistService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoBetaPersistService.java
@@ -20,7 +20,8 @@ import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfo4Beta;
 import com.alibaba.nacos.config.server.model.ConfigInfoBetaWrapper;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 
 import java.sql.Timestamp;
 
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoPersistService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoPersistService.java
index e0379af652..9661e079b2 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoPersistService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoPersistService.java
@@ -23,8 +23,9 @@ import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoBase;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.model.SameConfigPolicy;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 
 import java.io.IOException;
 import java.sql.Timestamp;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoTagPersistService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoTagPersistService.java
index 7233158385..ea6087255a 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoTagPersistService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigInfoTagPersistService.java
@@ -20,7 +20,8 @@ import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfo4Tag;
 import com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 
 import java.sql.Timestamp;
 
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/RowMapperManager.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigRowMapperInjector.java
similarity index 79%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/RowMapperManager.java
rename to config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigRowMapperInjector.java
index 970bbc24b8..8785efe5f1 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/RowMapperManager.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/ConfigRowMapperInjector.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,25 +29,20 @@ import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
 import com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.TenantInfo;
-import com.alibaba.nacos.config.server.utils.LogUtil;
+import com.alibaba.nacos.persistence.repository.RowMapperManager;
 import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Component;
 
 import java.sql.ResultSet;
-import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
- * Manager RowMapper {@link RowMapper} for database object mapping.
+ * Config row mapper injector.
  *
- * @author <a href="mailto:liaochuntao@live.com">liaochuntao</a>
+ * @author xiweng.yy
  */
-public final class RowMapperManager {
-    
-    public static final RowMapper<TenantInfo> TENANT_INFO_ROW_MAPPER = new TenantInfoRowMapper();
+@Component
+public class ConfigRowMapperInjector {
     
     public static final RowMapper<ConfigInfoWrapper> CONFIG_INFO_WRAPPER_ROW_MAPPER = new ConfigInfoWrapperRowMapper();
     
@@ -77,111 +72,92 @@ public final class RowMapperManager {
     
     public static final ConfigHistoryDetailRowMapper HISTORY_DETAIL_ROW_MAPPER = new ConfigHistoryDetailRowMapper();
     
-    public static final MapRowMapper MAP_ROW_MAPPER = new MapRowMapper();
-    
-    public static Map<String, RowMapper> mapperMap = new HashMap<>(16);
+    public ConfigRowMapperInjector() {
+        injectConfigRowMapper();
+    }
     
-    static {
-        
-        // TENANT_INFO_ROW_MAPPER
-        
-        mapperMap.put(TENANT_INFO_ROW_MAPPER.getClass().getCanonicalName(), TENANT_INFO_ROW_MAPPER);
-        
+    private void injectConfigRowMapper() {
         // CONFIG_INFO_WRAPPER_ROW_MAPPER
         
-        mapperMap.put(CONFIG_INFO_WRAPPER_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_INFO_WRAPPER_ROW_MAPPER);
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER);
         
         // CONFIG_KEY_ROW_MAPPER
         
-        mapperMap.put(CONFIG_KEY_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_KEY_ROW_MAPPER);
+        RowMapperManager.registerRowMapper(ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER.getClass().getCanonicalName(),
+                ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER);
         
         // CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER
         
-        mapperMap.put(CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER.getClass().getCanonicalName(),
-                CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER);
+        RowMapperManager.registerRowMapper(
+                ConfigRowMapperInjector.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER.getClass().getCanonicalName(),
+                ConfigRowMapperInjector.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER);
         
         // CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER
         
-        mapperMap.put(CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER.getClass().getCanonicalName(),
-                CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER);
+        RowMapperManager.registerRowMapper(
+                ConfigRowMapperInjector.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER.getClass().getCanonicalName(),
+                ConfigRowMapperInjector.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER);
         
         // CONFIG_INFO_ROW_MAPPER
         
-        mapperMap.put(CONFIG_INFO_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_INFO_ROW_MAPPER);
+        RowMapperManager.registerRowMapper(ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER.getClass().getCanonicalName(),
+                ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER);
         
         // CONFIG_ADVANCE_INFO_ROW_MAPPER
         
-        mapperMap.put(CONFIG_ADVANCE_INFO_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_ADVANCE_INFO_ROW_MAPPER);
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER);
         
         // CONFIG_ALL_INFO_ROW_MAPPER
         
-        mapperMap.put(CONFIG_ALL_INFO_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_ALL_INFO_ROW_MAPPER);
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER);
         
         // CONFIG_INFO4BETA_ROW_MAPPER
         
-        mapperMap.put(CONFIG_INFO4BETA_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_INFO4BETA_ROW_MAPPER);
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.CONFIG_INFO4BETA_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.CONFIG_INFO4BETA_ROW_MAPPER);
         
         // CONFIG_INFO4TAG_ROW_MAPPER
         
-        mapperMap.put(CONFIG_INFO4TAG_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_INFO4TAG_ROW_MAPPER);
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.CONFIG_INFO4TAG_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.CONFIG_INFO4TAG_ROW_MAPPER);
         
         // CONFIG_INFO_BASE_ROW_MAPPER
         
-        mapperMap.put(CONFIG_INFO_BASE_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_INFO_BASE_ROW_MAPPER);
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER);
         
         // CONFIG_INFO_AGGR_ROW_MAPPER
         
-        mapperMap.put(CONFIG_INFO_AGGR_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_INFO_AGGR_ROW_MAPPER);
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.CONFIG_INFO_AGGR_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.CONFIG_INFO_AGGR_ROW_MAPPER);
         
         // CONFIG_INFO_CHANGED_ROW_MAPPER
         
-        mapperMap.put(CONFIG_INFO_CHANGED_ROW_MAPPER.getClass().getCanonicalName(), CONFIG_INFO_CHANGED_ROW_MAPPER);
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.CONFIG_INFO_CHANGED_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.CONFIG_INFO_CHANGED_ROW_MAPPER);
         
         // HISTORY_LIST_ROW_MAPPER
         
-        mapperMap.put(HISTORY_LIST_ROW_MAPPER.getClass().getCanonicalName(), HISTORY_LIST_ROW_MAPPER);
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.HISTORY_LIST_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.HISTORY_LIST_ROW_MAPPER);
         
         // HISTORY_DETAIL_ROW_MAPPER
         
-        mapperMap.put(HISTORY_DETAIL_ROW_MAPPER.getClass().getCanonicalName(), HISTORY_DETAIL_ROW_MAPPER);
-        
-        // MAP_ROW_MAPPER
-        
-        mapperMap.put(MAP_ROW_MAPPER.getClass().getCanonicalName(), MAP_ROW_MAPPER);
-    }
-    
-    public static <D> RowMapper<D> getRowMapper(String classFullName) {
-        return (RowMapper<D>) mapperMap.get(classFullName);
-    }
-    
-    /**
-     * Register custom row mapper to manager.
-     *
-     * @param classFullName full class name of row mapper handled.
-     * @param rowMapper     row mapper
-     * @param <D>           class of row mapper handled
-     */
-    public static synchronized <D> void registerRowMapper(String classFullName, RowMapper<D> rowMapper) {
-        if (mapperMap.containsKey(classFullName)) {
-            LogUtil.DEFAULT_LOG.warn("row mapper {} conflicts, {} will be replaced by {}", classFullName,
-                    mapperMap.get(classFullName).getClass().getCanonicalName(),
-                    rowMapper.getClass().getCanonicalName());
-        }
-        mapperMap.put(classFullName, rowMapper);
-    }
-    
-    public static final class MapRowMapper implements RowMapper<Map<String, Object>> {
-        
-        @Override
-        public Map<String, Object> mapRow(ResultSet resultSet, int rowNum) throws SQLException {
-            ResultSetMetaData metaData = resultSet.getMetaData();
-            int columnCount = metaData.getColumnCount();
-            Map<String, Object> map = new LinkedHashMap<>(columnCount);
-            for (int i = 1; i <= columnCount; i++) {
-                map.put(metaData.getColumnLabel(i), resultSet.getObject(i));
-            }
-            return map;
-        }
+        RowMapperManager
+                .registerRowMapper(ConfigRowMapperInjector.HISTORY_DETAIL_ROW_MAPPER.getClass().getCanonicalName(),
+                        ConfigRowMapperInjector.HISTORY_DETAIL_ROW_MAPPER);
     }
     
     public static final class ConfigInfoWrapperRowMapper implements RowMapper<ConfigInfoWrapper> {
@@ -215,7 +191,7 @@ public final class RowMapperManager {
             try {
                 info.setEncryptedDataKey(rs.getString("encrypted_data_key"));
             } catch (SQLException ignore) {
-        
+            
             }
             return info;
         }
@@ -389,7 +365,7 @@ public final class RowMapperManager {
             try {
                 info.setEncryptedDataKey(rs.getString("encrypted_data_key"));
             } catch (SQLException ignore) {
-        
+            
             }
             return info;
         }
@@ -538,22 +514,9 @@ public final class RowMapperManager {
             try {
                 configHistoryInfo.setEncryptedDataKey(rs.getString("encrypted_data_key"));
             } catch (SQLException ignore) {
-        
+            
             }
             return configHistoryInfo;
         }
     }
-    
-    public static final class TenantInfoRowMapper implements RowMapper<TenantInfo> {
-        
-        @Override
-        public TenantInfo mapRow(ResultSet rs, int rowNum) throws SQLException {
-            TenantInfo info = new TenantInfo();
-            info.setTenantId(rs.getString("tenant_id"));
-            info.setTenantName(rs.getString("tenant_name"));
-            info.setTenantDesc(rs.getString("tenant_desc"));
-            return info;
-        }
-    }
-    
 }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/HistoryConfigInfoPersistService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/HistoryConfigInfoPersistService.java
index 1ac166c2ce..29c238942d 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/HistoryConfigInfoPersistService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/HistoryConfigInfoPersistService.java
@@ -18,7 +18,8 @@ package com.alibaba.nacos.config.server.service.repository;
 
 import com.alibaba.nacos.config.server.model.ConfigHistoryInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 
 import java.sql.Timestamp;
 import java.util.List;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/PersistService.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/PersistService.java
index bf5a49c8bd..70ff8b4b70 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/PersistService.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/PersistService.java
@@ -30,9 +30,10 @@ import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
 import com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.model.SameConfigPolicy;
-import com.alibaba.nacos.config.server.model.TenantInfo;
+import com.alibaba.nacos.core.namespace.model.TenantInfo;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 
 import java.io.IOException;
 import java.sql.Timestamp;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigDumpApplyHook.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigDumpApplyHook.java
new file mode 100644
index 0000000000..b6e042af9a
--- /dev/null
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigDumpApplyHook.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.config.server.service.repository.embedded;
+
+import com.alibaba.nacos.common.notify.NotifyCenter;
+import com.alibaba.nacos.common.utils.JacksonUtils;
+import com.alibaba.nacos.common.utils.StringUtils;
+import com.alibaba.nacos.config.server.constant.Constants;
+import com.alibaba.nacos.config.server.model.event.ConfigDumpEvent;
+import com.alibaba.nacos.config.server.service.dump.DumpConfigHandler;
+import com.alibaba.nacos.consistency.entity.WriteRequest;
+import com.alibaba.nacos.core.utils.GenericType;
+import com.alibaba.nacos.persistence.repository.embedded.hook.EmbeddedApplyHook;
+import org.springframework.stereotype.Component;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+/**
+ * Embedded apply hook for config dump.
+ *
+ * @author xiweng.yy
+ */
+@Component
+public class EmbeddedConfigDumpApplyHook extends EmbeddedApplyHook {
+    
+    public EmbeddedConfigDumpApplyHook() {
+        NotifyCenter.registerToPublisher(ConfigDumpEvent.class, NotifyCenter.ringBufferSize);
+        NotifyCenter.registerSubscriber(new DumpConfigHandler());
+    }
+    
+    @Override
+    public void afterApply(WriteRequest log) {
+        handleExtendInfo(log.getExtendInfoMap());
+    }
+    
+    private void handleExtendInfo(Map<String, String> extendInfo) {
+        if (extendInfo.containsKey(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT)) {
+            String jsonVal = extendInfo.get(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT);
+            if (StringUtils.isNotBlank(jsonVal)) {
+                NotifyCenter.publishEvent(JacksonUtils.toObj(jsonVal, ConfigDumpEvent.class));
+            }
+            return;
+        }
+        if (extendInfo.containsKey(Constants.EXTEND_INFOS_CONFIG_DUMP_EVENT)) {
+            String jsonVal = extendInfo.get(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT);
+            if (StringUtils.isNotBlank(jsonVal)) {
+                List<ConfigDumpEvent> list = JacksonUtils.toObj(jsonVal, new GenericType<List<ConfigDumpEvent>>() {
+                }.getType());
+                list.stream().filter(Objects::nonNull).forEach(NotifyCenter::publishEvent);
+            }
+        }
+    }
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoAggrPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoAggrPersistServiceImpl.java
index c64c42aac7..792ce7935f 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoAggrPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoAggrPersistServiceImpl.java
@@ -18,20 +18,22 @@ package com.alibaba.nacos.config.server.service.repository.embedded;
 
 import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
-import com.alibaba.nacos.config.server.constant.Constants;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
 import com.alibaba.nacos.config.server.exception.NacosConfigException;
 import com.alibaba.nacos.config.server.model.ConfigInfoAggr;
 import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.model.event.DerbyImportEvent;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.model.event.DerbyImportEvent;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoAggrPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoAggrMapper;
@@ -49,8 +51,8 @@ import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_AGGR_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_CHANGED_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_AGGR_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_CHANGED_ROW_MAPPER;
 
 /**
  * EmbeddedConfigInfoAggrPersistServiceImpl.
@@ -76,7 +78,7 @@ public class EmbeddedConfigInfoAggrPersistServiceImpl implements ConfigInfoAggrP
     public EmbeddedConfigInfoAggrPersistServiceImpl(DatabaseOperate databaseOperate) {
         this.databaseOperate = databaseOperate;
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
         NotifyCenter.registerToSharePublisher(DerbyImportEvent.class);
@@ -120,20 +122,20 @@ public class EmbeddedConfigInfoAggrPersistServiceImpl implements ConfigInfoAggrP
         
         if (Objects.isNull(dbContent)) {
             final Object[] args = new Object[] {dataId, group, tenantTmp, datumId, appNameTmp, contentTmp, now};
-            EmbeddedStorageContextUtils.addSqlContext(insert, args);
+            EmbeddedStorageContextHolder.addSqlContext(insert, args);
         } else if (!dbContent.equals(content)) {
             final Object[] args = new Object[] {contentTmp, now, dataId, group, tenantTmp, datumId};
-            EmbeddedStorageContextUtils.addSqlContext(update, args);
+            EmbeddedStorageContextHolder.addSqlContext(update, args);
         }
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("[Merge] Configuration release failed");
             }
             return true;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -146,14 +148,14 @@ public class EmbeddedConfigInfoAggrPersistServiceImpl implements ConfigInfoAggrP
                 addAggrConfigInfo(dataId, group, tenant, entry.getKey(), appName, entry.getValue());
             }
             
-            isPublishOk = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            isPublishOk = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             
             if (isPublishOk == null) {
                 return false;
             }
             return isPublishOk;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -173,17 +175,17 @@ public class EmbeddedConfigInfoAggrPersistServiceImpl implements ConfigInfoAggrP
         for (Map.Entry<String, String> datumEntry : datumMap.entrySet()) {
             final Object[] args = new Object[] {dataId, group, tenantTmp, datumEntry.getKey(), appNameTmp,
                     datumEntry.getValue(), new Timestamp(System.currentTimeMillis())};
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
         }
         try {
-            isReplaceOk = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            isReplaceOk = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             
             if (isReplaceOk == null) {
                 return false;
             }
             return isReplaceOk;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
         
     }
@@ -197,15 +199,15 @@ public class EmbeddedConfigInfoAggrPersistServiceImpl implements ConfigInfoAggrP
                 TableConstant.CONFIG_INFO_AGGR);
         final String sql = configInfoAggrMapper.delete(Arrays.asList("data_id", "group_id", "tenant_id", "datum_id"));
         final Object[] args = new Object[] {dataId, group, tenantTmp, datumId};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("[aggregation with single] Configuration deletion failed");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -217,15 +219,15 @@ public class EmbeddedConfigInfoAggrPersistServiceImpl implements ConfigInfoAggrP
                 TableConstant.CONFIG_INFO_AGGR);
         final String sql = configInfoAggrMapper.delete(Arrays.asList("data_id", "group_id", "tenant_id"));
         final Object[] args = new Object[] {dataId, group, tenantTmp};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("[aggregation with all] Configuration deletion failed");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -246,16 +248,16 @@ public class EmbeddedConfigInfoAggrPersistServiceImpl implements ConfigInfoAggrP
         
         final String sql = mapperResult.getSql();
         final Object[] args = mapperResult.getParamList().toArray();
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("[aggregation] Failed to configure batch deletion");
             }
             return true;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoBetaPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoBetaPersistServiceImpl.java
index fc8f3d4327..42320b55c2 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoBetaPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoBetaPersistServiceImpl.java
@@ -19,19 +19,23 @@ package com.alibaba.nacos.config.server.service.repository.embedded;
 import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.exception.NacosConfigException;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoBetaWrapper;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.model.event.DerbyImportEvent;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.model.event.DerbyImportEvent;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoBetaPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoBetaMapper;
@@ -45,7 +49,7 @@ import java.sql.Timestamp;
 import java.util.Arrays;
 import java.util.List;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;
 
 /**
  * EmbeddedConfigInfoBetaPersistServiceImpl.
@@ -71,7 +75,7 @@ public class EmbeddedConfigInfoBetaPersistServiceImpl implements ConfigInfoBetaP
     public EmbeddedConfigInfoBetaPersistServiceImpl(DatabaseOperate databaseOperate) {
         this.databaseOperate = databaseOperate;
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
         NotifyCenter.registerToSharePublisher(DerbyImportEvent.class);
@@ -102,11 +106,11 @@ public class EmbeddedConfigInfoBetaPersistServiceImpl implements ConfigInfoBetaP
                     configInfo.getContent(), md5, betaIps, srcIp, srcUser, time, time, encryptedDataKey};
             
             EmbeddedStorageContextUtils.onModifyConfigBetaInfo(configInfo, betaIps, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -145,14 +149,14 @@ public class EmbeddedConfigInfoBetaPersistServiceImpl implements ConfigInfoBetaP
                 
                 EmbeddedStorageContextUtils.onDeleteConfigBetaInfo(tenantTmp, group, dataId,
                         System.currentTimeMillis());
-                EmbeddedStorageContextUtils.addSqlContext(sql, args);
+                EmbeddedStorageContextHolder.addSqlContext(sql, args);
                 
-                boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+                boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
                 if (!result) {
                     throw new NacosConfigException("[Tag] Configuration deletion failed");
                 }
             } finally {
-                EmbeddedStorageContextUtils.cleanAllContext();
+                EmbeddedStorageContextHolder.cleanAllContext();
             }
             
         }
@@ -179,11 +183,11 @@ public class EmbeddedConfigInfoBetaPersistServiceImpl implements ConfigInfoBetaP
                     encryptedDataKey, configInfo.getDataId(), configInfo.getGroup(), tenantTmp};
             
             EmbeddedStorageContextUtils.onModifyConfigBetaInfo(configInfo, betaIps, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -220,11 +224,11 @@ public class EmbeddedConfigInfoBetaPersistServiceImpl implements ConfigInfoBetaP
             final Object[] args = paramList.toArray();
             
             EmbeddedStorageContextUtils.onModifyConfigBetaInfo(configInfo, betaIps, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             return databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java
index 7f861869e1..6ad326f799 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoPersistServiceImpl.java
@@ -22,7 +22,7 @@ import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.Pair;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.enums.FileTypeEnum;
 import com.alibaba.nacos.config.server.exception.NacosConfigException;
@@ -32,18 +32,22 @@ import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoBase;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.model.SameConfigPolicy;
-import com.alibaba.nacos.config.server.model.event.DerbyImportEvent;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.event.DerbyImportEvent;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
 import com.alibaba.nacos.config.server.service.repository.HistoryConfigInfoPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
 import com.alibaba.nacos.config.server.utils.ParamUtils;
 import com.alibaba.nacos.core.distributed.id.IdGeneratorManager;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoMapper;
@@ -70,13 +74,13 @@ import java.util.Optional;
 import java.util.function.BiConsumer;
 import java.util.stream.Collectors;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_ADVANCE_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_ALL_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_BASE_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_WRAPPER_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_KEY_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.MAP_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER;
+import static com.alibaba.nacos.persistence.repository.RowMapperManager.MAP_ROW_MAPPER;
 import static com.alibaba.nacos.config.server.utils.LogUtil.DEFAULT_LOG;
 
 /**
@@ -143,7 +147,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
                 RESOURCE_CONFIG_TAG_RELATION_ID, RESOURCE_APP_CONFIGDATA_RELATION_SUBS, RESOURCE_CONFIG_BETA_ID,
                 RESOURCE_NAMESPACE_ID, RESOURCE_USER_ID, RESOURCE_ROLE_ID, RESOURCE_PERMISSIONS_ID);
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
         this.historyConfigInfoPersistService = historyConfigInfoPersistService;
@@ -194,7 +198,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
             EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);
             databaseOperate.blockUpdate(consumer);
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -255,7 +259,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
         final Object[] args = new Object[] {id, configInfo.getDataId(), configInfo.getGroup(), tenantTmp, appNameTmp,
                 configInfo.getContent(), md5Tmp, srcIp, srcUser, time, time, desc, use, effect, type, schema,
                 encryptedDataKey};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         return id;
     }
     
@@ -266,7 +270,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
         final String sql = configTagsRelationMapper.insert(
                 Arrays.asList("id", "tag_name", "tag_type", "data_id", "group_id", "tenant_id"));
         final Object[] args = new Object[] {configId, tagName, StringUtils.EMPTY, dataId, group, tenant};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     @Override
@@ -394,12 +398,12 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
                 
                 EmbeddedStorageContextUtils.onDeleteConfigInfo(tenantTmp, group, dataId, srcIp, time);
                 
-                boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+                boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
                 if (!result) {
                     throw new NacosConfigException("config deletion failed");
                 }
             } finally {
-                EmbeddedStorageContextUtils.cleanAllContext();
+                EmbeddedStorageContextHolder.cleanAllContext();
             }
         }
     }
@@ -424,14 +428,14 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
             }
             
             EmbeddedStorageContextUtils.onBatchDeleteConfigInfo(configInfoList);
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("Failed to config batch deletion");
             }
             
             return configInfoList;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -441,7 +445,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
                 dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);
         final String sql = configTagsRelationMapper.delete(Arrays.asList("id"));
         final Object[] args = new Object[] {id};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     @Override
@@ -453,7 +457,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
         final String sql = configInfoMapper.delete(Arrays.asList("data_id", "group_id", "tenant_id"));
         final Object[] args = new Object[] {dataId, group, tenantTmp};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     @Override
@@ -471,7 +475,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
         MapperContext context = new MapperContext();
         context.putWhereParameter(FieldConstant.IDS, paramList);
         MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);
-        EmbeddedStorageContextUtils.addSqlContext(result.getSql(), result.getParamList());
+        EmbeddedStorageContextHolder.addSqlContext(result.getSql(), result.getParamList());
     }
     
     @Override
@@ -509,7 +513,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
             EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -548,7 +552,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
             EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);
             return databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -586,7 +590,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
         context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());
         MapperResult mapperResult = configInfoMapper.updateConfigInfoAtomicCas(context);
         
-        EmbeddedStorageContextUtils.addSqlContext(mapperResult.getSql(), mapperResult.getParamList().toArray());
+        EmbeddedStorageContextHolder.addSqlContext(mapperResult.getSql(), mapperResult.getParamList().toArray());
     }
     
     @Override
@@ -614,7 +618,7 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
         final Object[] args = new Object[] {configInfo.getContent(), md5Tmp, srcIp, srcUser, time, appNameTmp, desc,
                 use, effect, type, schema, encryptedDataKey, configInfo.getDataId(), configInfo.getGroup(), tenantTmp};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     @Override
@@ -627,14 +631,14 @@ public class EmbeddedConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
                     Arrays.asList("data_id", "group_id", "tenant_id", "gmt_modified"));
             final Object[] args = new Object[] {md5, dataId, group, tenantTmp, lastTime};
             
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("Failed to config the MD5 modification");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoTagPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoTagPersistServiceImpl.java
index c381102931..b5704eb638 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoTagPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoTagPersistServiceImpl.java
@@ -19,18 +19,22 @@ package com.alibaba.nacos.config.server.service.repository.embedded;
 import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.model.event.DerbyImportEvent;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.model.event.DerbyImportEvent;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoTagPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoTagMapper;
@@ -43,7 +47,7 @@ import org.springframework.stereotype.Service;
 import java.sql.Timestamp;
 import java.util.Arrays;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;
 
 /**
  * EmbeddedConfigInfoTagPersistServiceImpl.
@@ -69,7 +73,7 @@ public class EmbeddedConfigInfoTagPersistServiceImpl implements ConfigInfoTagPer
     public EmbeddedConfigInfoTagPersistServiceImpl(DatabaseOperate databaseOperate) {
         this.databaseOperate = databaseOperate;
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
         NotifyCenter.registerToSharePublisher(DerbyImportEvent.class);
@@ -100,11 +104,11 @@ public class EmbeddedConfigInfoTagPersistServiceImpl implements ConfigInfoTagPer
                     appNameTmp, configInfo.getContent(), md5, srcIp, srcUser, time, time};
             
             EmbeddedStorageContextUtils.onModifyConfigTagInfo(configInfo, tagTmp, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -141,11 +145,11 @@ public class EmbeddedConfigInfoTagPersistServiceImpl implements ConfigInfoTagPer
         final Object[] args = new Object[] {dataId, group, tenantTmp, tagTmp};
         
         EmbeddedStorageContextUtils.onDeleteConfigTagInfo(tenantTmp, group, dataId, tagTmp, srcIp);
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         try {
-            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -170,11 +174,11 @@ public class EmbeddedConfigInfoTagPersistServiceImpl implements ConfigInfoTagPer
                     configInfo.getDataId(), configInfo.getGroup(), tenantTmp, tagTmp};
             
             EmbeddedStorageContextUtils.onModifyConfigTagInfo(configInfo, tagTmp, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -208,11 +212,11 @@ public class EmbeddedConfigInfoTagPersistServiceImpl implements ConfigInfoTagPer
             final MapperResult mapperResult = configInfoTagMapper.updateConfigInfo4TagCas(context);
             
             EmbeddedStorageContextUtils.onModifyConfigTagInfo(configInfo, tagTmp, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(mapperResult.getSql(), mapperResult.getParamList());
+            EmbeddedStorageContextHolder.addSqlContext(mapperResult.getSql(), mapperResult.getParamList());
             
             return databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedHistoryConfigInfoPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedHistoryConfigInfoPersistServiceImpl.java
index a297de73dc..f89bdea112 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedHistoryConfigInfoPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedHistoryConfigInfoPersistServiceImpl.java
@@ -19,18 +19,21 @@ package com.alibaba.nacos.config.server.service.repository.embedded;
 import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.ConfigHistoryInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.model.event.DerbyImportEvent;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.model.event.DerbyImportEvent;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.HistoryConfigInfoPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.HistoryConfigInfoMapper;
@@ -47,8 +50,8 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.HISTORY_DETAIL_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.HISTORY_LIST_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_DETAIL_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_LIST_ROW_MAPPER;
 
 /**
  * EmbeddedHistoryConfigInfoPersistServiceImpl.
@@ -74,7 +77,7 @@ public class EmbeddedHistoryConfigInfoPersistServiceImpl implements HistoryConfi
     public EmbeddedHistoryConfigInfoPersistServiceImpl(DatabaseOperate databaseOperate) {
         this.databaseOperate = databaseOperate;
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
         NotifyCenter.registerToSharePublisher(DerbyImportEvent.class);
@@ -118,7 +121,7 @@ public class EmbeddedHistoryConfigInfoPersistServiceImpl implements HistoryConfi
         final Object[] args = new Object[] {configHistoryId, configInfo.getDataId(), configInfo.getGroup(), tenantTmp,
                 appNameTmp, configInfo.getContent(), md5Tmp, srcIp, srcUser, time, ops, encryptedDataKey};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     @Override
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java
index 73b4a1315f..3ea8b05b59 100755
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedStoragePersistServiceImpl.java
@@ -22,7 +22,7 @@ import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.Pair;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.enums.FileTypeEnum;
 import com.alibaba.nacos.config.server.exception.NacosConfigException;
@@ -37,19 +37,23 @@ import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
 import com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.model.SameConfigPolicy;
 import com.alibaba.nacos.config.server.model.SubInfo;
-import com.alibaba.nacos.config.server.model.TenantInfo;
-import com.alibaba.nacos.config.server.model.event.DerbyImportEvent;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.core.namespace.model.TenantInfo;
+import com.alibaba.nacos.persistence.model.event.DerbyImportEvent;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.service.repository.PersistService;
 import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
 import com.alibaba.nacos.config.server.utils.ParamUtils;
 import com.alibaba.nacos.core.distributed.id.IdGeneratorManager;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoAggrMapper;
@@ -84,20 +88,20 @@ import java.util.Optional;
 import java.util.function.BiConsumer;
 import java.util.stream.Collectors;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_ADVANCE_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_ALL_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_AGGR_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_BASE_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_CHANGED_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_WRAPPER_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_KEY_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.HISTORY_DETAIL_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.HISTORY_LIST_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.MAP_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.TENANT_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_AGGR_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_CHANGED_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_DETAIL_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_LIST_ROW_MAPPER;
+import static com.alibaba.nacos.persistence.repository.RowMapperManager.MAP_ROW_MAPPER;
+import static com.alibaba.nacos.core.namespace.repository.NamespaceRowMapperInjector.TENANT_INFO_ROW_MAPPER;
 import static com.alibaba.nacos.config.server.utils.LogUtil.DEFAULT_LOG;
 
 /**
@@ -156,7 +160,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
     public EmbeddedStoragePersistServiceImpl(DatabaseOperate databaseOperate, IdGeneratorManager idGeneratorManager) {
         this.databaseOperate = databaseOperate;
         this.idGeneratorManager = idGeneratorManager;
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         NotifyCenter.registerToSharePublisher(DerbyImportEvent.class);
         mapperManager = MapperManager.instance(isDataSourceLogEnable);
@@ -239,7 +243,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
             EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);
             databaseOperate.blockUpdate(consumer);
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -263,11 +267,11 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                     configInfo.getContent(), md5, betaIps, srcIp, srcUser, time, time, encryptedDataKey};
             
             EmbeddedStorageContextUtils.onModifyConfigBetaInfo(configInfo, betaIps, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -291,11 +295,11 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                     appNameTmp, configInfo.getContent(), md5, srcIp, srcUser, time, time};
             
             EmbeddedStorageContextUtils.onModifyConfigTagInfo(configInfo, tagTmp, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -333,7 +337,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
             EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -371,7 +375,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
             EmbeddedStorageContextUtils.onModifyConfigInfo(configInfo, srcIp, time);
             return databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -396,11 +400,11 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                     encryptedDataKey, configInfo.getDataId(), configInfo.getGroup(), tenantTmp};
             
             EmbeddedStorageContextUtils.onModifyConfigBetaInfo(configInfo, betaIps, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -438,11 +442,11 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
             final Object[] args = paramList.toArray();
             
             EmbeddedStorageContextUtils.onModifyConfigBetaInfo(configInfo, betaIps, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             return databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -467,11 +471,11 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                     configInfo.getDataId(), configInfo.getGroup(), tenantTmp, tagTmp};
             
             EmbeddedStorageContextUtils.onModifyConfigTagInfo(configInfo, tagTmp, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -505,11 +509,11 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
             final MapperResult mapperResult = configInfoTagMapper.updateConfigInfo4TagCas(context);
             
             EmbeddedStorageContextUtils.onModifyConfigTagInfo(configInfo, tagTmp, srcIp, time);
-            EmbeddedStorageContextUtils.addSqlContext(mapperResult.getSql(), mapperResult.getParamList());
+            EmbeddedStorageContextHolder.addSqlContext(mapperResult.getSql(), mapperResult.getParamList());
             
             return databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -566,14 +570,14 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                     Arrays.asList("data_id", "group_id", "tenant_id", "gmt_modified"));
             final Object[] args = new Object[] {md5, dataId, group, tenantTmp, lastTime};
             
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
             
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("Failed to config the MD5 modification");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -632,12 +636,12 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                 
                 EmbeddedStorageContextUtils.onDeleteConfigInfo(tenantTmp, group, dataId, srcIp, time);
                 
-                boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+                boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
                 if (!result) {
                     throw new NacosConfigException("config deletion failed");
                 }
             } finally {
-                EmbeddedStorageContextUtils.cleanAllContext();
+                EmbeddedStorageContextHolder.cleanAllContext();
             }
         }
     }
@@ -661,14 +665,14 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
             }
             
             EmbeddedStorageContextUtils.onBatchDeleteConfigInfo(configInfoList);
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("Failed to config batch deletion");
             }
             
             return configInfoList;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -685,14 +689,14 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                 
                 EmbeddedStorageContextUtils.onDeleteConfigBetaInfo(tenantTmp, group, dataId,
                         System.currentTimeMillis());
-                EmbeddedStorageContextUtils.addSqlContext(sql, args);
+                EmbeddedStorageContextHolder.addSqlContext(sql, args);
                 
-                boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+                boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
                 if (!result) {
                     throw new NacosConfigException("[Tag] Configuration deletion failed");
                 }
             } finally {
-                EmbeddedStorageContextUtils.cleanAllContext();
+                EmbeddedStorageContextHolder.cleanAllContext();
             }
             
         }
@@ -720,20 +724,20 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         
         if (Objects.isNull(dbContent)) {
             final Object[] args = new Object[] {dataId, group, tenantTmp, datumId, appNameTmp, contentTmp, now};
-            EmbeddedStorageContextUtils.addSqlContext(insert, args);
+            EmbeddedStorageContextHolder.addSqlContext(insert, args);
         } else if (!dbContent.equals(content)) {
             final Object[] args = new Object[] {contentTmp, now, dataId, group, tenantTmp, datumId};
-            EmbeddedStorageContextUtils.addSqlContext(update, args);
+            EmbeddedStorageContextHolder.addSqlContext(update, args);
         }
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("[Merge] Configuration release failed");
             }
             return true;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -746,15 +750,15 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                 TableConstant.CONFIG_INFO_AGGR);
         final String sql = configInfoAggrMapper.delete(Arrays.asList("data_id", "group_id", "tenant_id", "datum_id"));
         final Object[] args = new Object[] {dataId, group, tenantTmp, datumId};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("[aggregation with single] Configuration deletion failed");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -766,15 +770,15 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                 TableConstant.CONFIG_INFO_AGGR);
         final String sql = configInfoAggrMapper.delete(Arrays.asList("data_id", "group_id", "tenant_id"));
         final Object[] args = new Object[] {dataId, group, tenantTmp};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("[aggregation with all] Configuration deletion failed");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -796,16 +800,16 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         List<Object> paramList = mapperResult.getParamList();
         Object[] args = paramList.toArray();
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("[aggregation] Failed to configure batch deletion");
             }
             return true;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -853,14 +857,14 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                 addAggrConfigInfo(dataId, group, tenant, entry.getKey(), appName, entry.getValue());
             }
             
-            isPublishOk = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            isPublishOk = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             
             if (isPublishOk == null) {
                 return false;
             }
             return isPublishOk;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -880,17 +884,17 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         for (Entry<String, String> datumEntry : datumMap.entrySet()) {
             final Object[] args = new Object[] {dataId, group, tenantTmp, datumEntry.getKey(), appNameTmp,
                     datumEntry.getValue(), new Timestamp(System.currentTimeMillis())};
-            EmbeddedStorageContextUtils.addSqlContext(sql, args);
+            EmbeddedStorageContextHolder.addSqlContext(sql, args);
         }
         try {
-            isReplaceOk = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            isReplaceOk = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             
             if (isReplaceOk == null) {
                 return false;
             }
             return isReplaceOk;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
         
     }
@@ -1721,7 +1725,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         final Object[] args = new Object[] {id, configInfo.getDataId(), configInfo.getGroup(), tenantTmp, appNameTmp,
                 configInfo.getContent(), md5Tmp, srcIp, srcUser, time, time, desc, use, effect, type, schema,
                 encryptedDataKey};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         return id;
     }
     
@@ -1732,7 +1736,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         final String sql = configTagsRelationMapper.insert(
                 Arrays.asList("id", "tag_name", "tag_type", "data_id", "group_id", "tenant_id"));
         final Object[] args = new Object[] {configId, tagName, StringUtils.EMPTY, dataId, group, tenant};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     @Override
@@ -1751,7 +1755,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                 dataSourceService.getDataSourceType(), TableConstant.CONFIG_TAGS_RELATION);
         final String sql = configTagsRelationMapper.delete(Arrays.asList("id"));
         final Object[] args = new Object[] {id};
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     @Override
@@ -1772,7 +1776,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         final String sql = configInfoMapper.delete(Arrays.asList("data_id", "group_id", "tenant_id"));
         final Object[] args = new Object[] {dataId, group, tenantTmp};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     @Override
@@ -1790,7 +1794,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         MapperContext context = new MapperContext();
         context.putWhereParameter(FieldConstant.IDS, paramList);
         MapperResult result = configInfoMapper.removeConfigInfoByIdsAtomic(context);
-        EmbeddedStorageContextUtils.addSqlContext(result.getSql(), result.getParamList());
+        EmbeddedStorageContextHolder.addSqlContext(result.getSql(), result.getParamList());
     }
     
     @Override
@@ -1805,11 +1809,11 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         final Object[] args = new Object[] {dataId, group, tenantTmp, tagTmp};
         
         EmbeddedStorageContextUtils.onDeleteConfigTagInfo(tenantTmp, group, dataId, tagTmp, srcIp);
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         try {
-            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -1838,7 +1842,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         final Object[] args = new Object[] {configInfo.getContent(), md5Tmp, srcIp, srcUser, time, appNameTmp, desc,
                 use, effect, type, schema, encryptedDataKey, configInfo.getDataId(), configInfo.getGroup(), tenantTmp};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     private void updateConfigInfoAtomicCas(final ConfigInfo configInfo, final String srcIp, final String srcUser,
@@ -1875,7 +1879,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());
         final MapperResult mapperResult = configInfoMapper.updateConfigInfoAtomicCas(context);
         
-        EmbeddedStorageContextUtils.addSqlContext(true, mapperResult.getSql(), mapperResult.getParamList().toArray());
+        EmbeddedStorageContextHolder.addSqlContext(true, mapperResult.getSql(), mapperResult.getParamList().toArray());
     }
     
     @Override
@@ -1971,7 +1975,7 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         final Object[] args = new Object[] {configHistoryId, configInfo.getDataId(), configInfo.getGroup(), tenantTmp,
                 appNameTmp, configInfo.getContent(), md5Tmp, srcIp, srcUser, time, ops, encryptedDataKey};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
     }
     
     @Override
@@ -2027,15 +2031,15 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                         "gmt_modified"));
         final Object[] args = new Object[] {kp, tenantId, tenantName, tenantDesc, createResoure, time, time};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("Namespace creation failed");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -2048,15 +2052,15 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
                 Arrays.asList("kp", "tenant_id"));
         final Object[] args = new Object[] {tenantName, tenantDesc, System.currentTimeMillis(), kp, tenantId};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
                 throw new NacosConfigException("Namespace update failed");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -2085,12 +2089,12 @@ public class EmbeddedStoragePersistServiceImpl implements PersistService {
         TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
                 TableConstant.TENANT_INFO);
         
-        EmbeddedStorageContextUtils.addSqlContext(tenantInfoMapper.delete(Arrays.asList("kp", "tenant_id")), kp,
+        EmbeddedStorageContextHolder.addSqlContext(tenantInfoMapper.delete(Arrays.asList("kp", "tenant_id")), kp,
                 tenantId);
         try {
-            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoAggrPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoAggrPersistServiceImpl.java
index 66f83e1866..071e54118d 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoAggrPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoAggrPersistServiceImpl.java
@@ -17,18 +17,19 @@
 package com.alibaba.nacos.config.server.service.repository.extrnal;
 
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
-import com.alibaba.nacos.config.server.constant.Constants;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
 import com.alibaba.nacos.config.server.model.ConfigInfoAggr;
 import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoAggrPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.utils.LogUtil;
+import com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoAggrMapper;
@@ -53,8 +54,8 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_AGGR_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_CHANGED_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_AGGR_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_CHANGED_ROW_MAPPER;
 
 /**
  * ExternalConfigInfoAggrPersistServiceImpl.
@@ -78,7 +79,7 @@ public class ExternalConfigInfoAggrPersistServiceImpl implements ConfigInfoAggrP
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
         this.jt = dataSourceService.getJdbcTemplate();
         this.tjt = dataSourceService.getTransactionTemplate();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
     }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoBetaPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoBetaPersistServiceImpl.java
index dc5714d12b..28fc164654 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoBetaPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoBetaPersistServiceImpl.java
@@ -18,17 +18,19 @@ package com.alibaba.nacos.config.server.service.repository.extrnal;
 
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoBetaWrapper;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoBetaPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.utils.LogUtil;
+import com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoBetaMapper;
@@ -47,7 +49,7 @@ import java.sql.Timestamp;
 import java.util.Arrays;
 import java.util.List;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;
 
 /**
  * ExternalConfigInfoBetaPersistServiceImpl.
@@ -71,7 +73,7 @@ public class ExternalConfigInfoBetaPersistServiceImpl implements ConfigInfoBetaP
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
         this.jt = dataSourceService.getJdbcTemplate();
         this.tjt = dataSourceService.getTransactionTemplate();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
     }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java
index db312ac269..6dec4fbac3 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoPersistServiceImpl.java
@@ -20,7 +20,7 @@ import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.Pair;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.enums.FileTypeEnum;
 import com.alibaba.nacos.config.server.model.ConfigAdvanceInfo;
@@ -29,16 +29,18 @@ import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoBase;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.model.SameConfigPolicy;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
 import com.alibaba.nacos.config.server.service.repository.HistoryConfigInfoPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.utils.LogUtil;
 import com.alibaba.nacos.config.server.utils.ParamUtils;
+import com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoMapper;
@@ -78,12 +80,12 @@ import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_ADVANCE_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_ALL_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_BASE_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_WRAPPER_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_KEY_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER;
 
 /**
  * ExternalConfigInfoPersistServiceImpl.
@@ -125,7 +127,7 @@ public class ExternalConfigInfoPersistServiceImpl implements ConfigInfoPersistSe
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
         this.jt = dataSourceService.getJdbcTemplate();
         this.tjt = dataSourceService.getTransactionTemplate();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
         this.historyConfigInfoPersistService = historyConfigInfoPersistService;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoTagPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoTagPersistServiceImpl.java
index fb35bf98c5..558a28c084 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoTagPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalConfigInfoTagPersistServiceImpl.java
@@ -18,17 +18,19 @@ package com.alibaba.nacos.config.server.service.repository.extrnal;
 
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.ConfigInfoTagPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.utils.LogUtil;
+import com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoTagMapper;
@@ -46,7 +48,7 @@ import org.springframework.transaction.support.TransactionTemplate;
 import java.sql.Timestamp;
 import java.util.Arrays;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;
 
 /**
  * ExternalConfigInfoTagPersistServiceImpl.
@@ -70,7 +72,7 @@ public class ExternalConfigInfoTagPersistServiceImpl implements ConfigInfoTagPer
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
         this.jt = dataSourceService.getJdbcTemplate();
         this.tjt = dataSourceService.getTransactionTemplate();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
     }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalHistoryConfigInfoPersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalHistoryConfigInfoPersistServiceImpl.java
index 9734865c87..76f53ed5c0 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalHistoryConfigInfoPersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalHistoryConfigInfoPersistServiceImpl.java
@@ -18,17 +18,19 @@ package com.alibaba.nacos.config.server.service.repository.extrnal;
 
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.ConfigHistoryInfo;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.config.server.service.repository.HistoryConfigInfoPersistService;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.utils.LogUtil;
+import com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.HistoryConfigInfoMapper;
@@ -48,8 +50,8 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.HISTORY_DETAIL_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.HISTORY_LIST_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_DETAIL_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_LIST_ROW_MAPPER;
 
 /**
  * ExternalHistoryConfigInfoPersistServiceImpl.
@@ -73,7 +75,7 @@ public class ExternalHistoryConfigInfoPersistServiceImpl implements HistoryConfi
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
         this.jt = dataSourceService.getJdbcTemplate();
         this.tjt = dataSourceService.getTransactionTemplate();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
     }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java
index e26091844e..707b2cf49b 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePersistServiceImpl.java
@@ -20,7 +20,7 @@ import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.Pair;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.enums.FileTypeEnum;
 import com.alibaba.nacos.config.server.model.ConfigAdvanceInfo;
@@ -34,16 +34,18 @@ import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
 import com.alibaba.nacos.config.server.model.ConfigInfoTagWrapper;
 import com.alibaba.nacos.config.server.model.ConfigInfoWrapper;
 import com.alibaba.nacos.config.server.model.ConfigKey;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.config.server.model.SameConfigPolicy;
-import com.alibaba.nacos.config.server.model.TenantInfo;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
+import com.alibaba.nacos.core.namespace.model.TenantInfo;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 import com.alibaba.nacos.config.server.service.repository.PersistService;
 import com.alibaba.nacos.config.server.utils.LogUtil;
 import com.alibaba.nacos.config.server.utils.ParamUtils;
+import com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.FieldConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.ConfigInfoAggrMapper;
@@ -89,19 +91,19 @@ import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_ADVANCE_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_ALL_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_AGGR_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_BASE_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_CHANGED_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO_WRAPPER_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_KEY_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.HISTORY_DETAIL_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.HISTORY_LIST_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.TENANT_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ADVANCE_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_ALL_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_AGGR_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BASE_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_BETA_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_CHANGED_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_TAG_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_INFO_WRAPPER_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.CONFIG_KEY_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_DETAIL_ROW_MAPPER;
+import static com.alibaba.nacos.config.server.service.repository.ConfigRowMapperInjector.HISTORY_LIST_ROW_MAPPER;
+import static com.alibaba.nacos.core.namespace.repository.NamespaceRowMapperInjector.TENANT_INFO_ROW_MAPPER;
 
 /**
  * External Storage Persist Service.
@@ -151,7 +153,7 @@ public class ExternalStoragePersistServiceImpl implements PersistService {
         
         jt = getJdbcTemplate();
         tjt = getTransactionTemplate();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
+        Boolean isDataSourceLogEnable = EnvUtil.getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
                 false);
         mapperManager = MapperManager.instance(isDataSourceLogEnable);
     }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/sql/EmbeddedStorageContextUtils.java b/config/src/main/java/com/alibaba/nacos/config/server/service/sql/EmbeddedStorageContextUtils.java
index 00db0622ec..dac6777617 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/sql/EmbeddedStorageContextUtils.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/sql/EmbeddedStorageContextUtils.java
@@ -21,6 +21,7 @@ import com.alibaba.nacos.common.utils.StringUtils;
 import com.alibaba.nacos.config.server.constant.Constants;
 import com.alibaba.nacos.config.server.model.ConfigInfo;
 import com.alibaba.nacos.config.server.model.event.ConfigDumpEvent;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
 import com.alibaba.nacos.sys.env.EnvUtil;
 
 import java.sql.Timestamp;
@@ -36,67 +37,6 @@ import java.util.Map;
  */
 public class EmbeddedStorageContextUtils {
     
-    private static final ThreadLocal<ArrayList<ModifyRequest>> SQL_CONTEXT = ThreadLocal.withInitial(ArrayList::new);
-    
-    private static final ThreadLocal<Map<String, String>> EXTEND_INFO_CONTEXT = ThreadLocal.withInitial(HashMap::new);
-    
-    /**
-     * Add sql context.
-     *
-     * @param sql  sql
-     * @param args argument list
-     */
-    public static void addSqlContext(String sql, Object... args) {
-        ArrayList<ModifyRequest> requests = SQL_CONTEXT.get();
-        ModifyRequest context = new ModifyRequest();
-        context.setExecuteNo(requests.size());
-        context.setSql(sql);
-        context.setArgs(args);
-        requests.add(context);
-        SQL_CONTEXT.set(requests);
-    }
-    
-    /**
-     * Add sql context.
-     *
-     * @param rollbackOnUpdateFail  roll back when update fail
-     * @param sql  sql
-     * @param args argument list
-     */
-    public static void addSqlContext(boolean rollbackOnUpdateFail, String sql, Object... args) {
-        ArrayList<ModifyRequest> requests = SQL_CONTEXT.get();
-        ModifyRequest context = new ModifyRequest();
-        context.setExecuteNo(requests.size());
-        context.setSql(sql);
-        context.setArgs(args);
-        context.setRollBackOnUpdateFail(rollbackOnUpdateFail);
-        requests.add(context);
-        SQL_CONTEXT.set(requests);
-    }
-    
-    /**
-     * Put extend info.
-     *
-     * @param key   key
-     * @param value value
-     */
-    public static void putExtendInfo(String key, String value) {
-        Map<String, String> old = EXTEND_INFO_CONTEXT.get();
-        old.put(key, value);
-        EXTEND_INFO_CONTEXT.set(old);
-    }
-    
-    /**
-     * Put all extend info.
-     *
-     * @param map all extend info
-     */
-    public static void putAllExtendInfo(Map<String, String> map) {
-        Map<String, String> old = EXTEND_INFO_CONTEXT.get();
-        old.putAll(map);
-        EXTEND_INFO_CONTEXT.set(old);
-    }
-    
     /**
      * In the case of the in-cluster storage mode, the logic of horizontal notification is implemented asynchronously
      * via the raft state machine, along with the information.
@@ -114,7 +54,7 @@ public class EmbeddedStorageContextUtils {
             
             Map<String, String> extendInfo = new HashMap<>(2);
             extendInfo.put(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT, JacksonUtils.toJson(event));
-            EmbeddedStorageContextUtils.putAllExtendInfo(extendInfo);
+            EmbeddedStorageContextHolder.putAllExtendInfo(extendInfo);
         }
     }
     
@@ -136,7 +76,7 @@ public class EmbeddedStorageContextUtils {
             
             Map<String, String> extendInfo = new HashMap<>(2);
             extendInfo.put(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT, JacksonUtils.toJson(event));
-            EmbeddedStorageContextUtils.putAllExtendInfo(extendInfo);
+            EmbeddedStorageContextHolder.putAllExtendInfo(extendInfo);
         }
     }
     
@@ -158,7 +98,7 @@ public class EmbeddedStorageContextUtils {
             
             Map<String, String> extendInfo = new HashMap<>(2);
             extendInfo.put(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT, JacksonUtils.toJson(event));
-            EmbeddedStorageContextUtils.putAllExtendInfo(extendInfo);
+            EmbeddedStorageContextHolder.putAllExtendInfo(extendInfo);
         }
     }
     
@@ -180,7 +120,7 @@ public class EmbeddedStorageContextUtils {
             
             Map<String, String> extendInfo = new HashMap<>(2);
             extendInfo.put(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT, JacksonUtils.toJson(event));
-            EmbeddedStorageContextUtils.putAllExtendInfo(extendInfo);
+            EmbeddedStorageContextHolder.putAllExtendInfo(extendInfo);
         }
     }
     
@@ -204,7 +144,7 @@ public class EmbeddedStorageContextUtils {
             
             Map<String, String> extendInfo = new HashMap<>(2);
             extendInfo.put(Constants.EXTEND_INFOS_CONFIG_DUMP_EVENT, JacksonUtils.toJson(events));
-            EmbeddedStorageContextUtils.putAllExtendInfo(extendInfo);
+            EmbeddedStorageContextHolder.putAllExtendInfo(extendInfo);
         }
     }
     
@@ -224,7 +164,7 @@ public class EmbeddedStorageContextUtils {
             
             Map<String, String> extendInfo = new HashMap<>(2);
             extendInfo.put(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT, JacksonUtils.toJson(event));
-            EmbeddedStorageContextUtils.putAllExtendInfo(extendInfo);
+            EmbeddedStorageContextHolder.putAllExtendInfo(extendInfo);
         }
     }
     
@@ -246,34 +186,8 @@ public class EmbeddedStorageContextUtils {
             
             Map<String, String> extendInfo = new HashMap<>(2);
             extendInfo.put(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT, JacksonUtils.toJson(event));
-            EmbeddedStorageContextUtils.putAllExtendInfo(extendInfo);
+            EmbeddedStorageContextHolder.putAllExtendInfo(extendInfo);
         }
     }
     
-    /**
-     * Determine if key is included.
-     *
-     * @param key key
-     * @return {@code true} if contains key
-     */
-    public static boolean containsExtendInfo(String key) {
-        Map<String, String> extendInfo = EXTEND_INFO_CONTEXT.get();
-        boolean exist = extendInfo.containsKey(key);
-        EXTEND_INFO_CONTEXT.set(extendInfo);
-        return exist;
-    }
-    
-    public static List<ModifyRequest> getCurrentSqlContext() {
-        return SQL_CONTEXT.get();
-    }
-    
-    public static Map<String, String> getCurrentExtendInfo() {
-        return EXTEND_INFO_CONTEXT.get();
-    }
-    
-    public static void cleanAllContext() {
-        SQL_CONTEXT.remove();
-        EXTEND_INFO_CONTEXT.remove();
-    }
-    
 }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/utils/ConfigExecutor.java b/config/src/main/java/com/alibaba/nacos/config/server/utils/ConfigExecutor.java
index 1418725b5f..c05504f0a8 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/utils/ConfigExecutor.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/utils/ConfigExecutor.java
@@ -22,7 +22,6 @@ import com.alibaba.nacos.common.utils.ThreadUtils;
 import com.alibaba.nacos.config.server.Config;
 import com.alibaba.nacos.core.utils.ClassUtils;
 
-import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
@@ -35,12 +34,8 @@ import java.util.concurrent.TimeUnit;
  */
 public final class ConfigExecutor {
     
-    private static final Executor DUMP_EXECUTOR = ExecutorFactory.Managed
-            .newSingleExecutorService(ClassUtils.getCanonicalName(Config.class),
-                    new NameThreadFactory("com.alibaba.nacos.config.embedded.dump"));
-    
     private static final ScheduledExecutorService TIMER_EXECUTOR = ExecutorFactory.Managed
-            .newScheduledExecutorService(ClassUtils.getCanonicalName(Config.class), 10,
+            .newScheduledExecutorService(ClassUtils.getCanonicalName(Config.class), 8,
                     new NameThreadFactory("com.alibaba.nacos.config.server.timer"));
     
     private static final ScheduledExecutorService CAPACITY_MANAGEMENT_EXECUTOR = ExecutorFactory.Managed
@@ -69,10 +64,6 @@ public final class ConfigExecutor {
         TIMER_EXECUTOR.scheduleWithFixedDelay(command, initialDelay, delay, unit);
     }
     
-    public static void executeEmbeddedDump(Runnable runnable) {
-        DUMP_EXECUTOR.execute(runnable);
-    }
-    
     public static void scheduleCorrectUsageTask(Runnable runnable, long initialDelay, long delay, TimeUnit unit) {
         CAPACITY_MANAGEMENT_EXECUTOR.scheduleWithFixedDelay(runnable, initialDelay, delay, unit);
     }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/utils/PropertyUtil.java b/config/src/main/java/com/alibaba/nacos/config/server/utils/PropertyUtil.java
index 7b2a9cb9c6..58a236bcfe 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/utils/PropertyUtil.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/utils/PropertyUtil.java
@@ -17,6 +17,7 @@
 package com.alibaba.nacos.config.server.utils;
 
 import com.alibaba.nacos.config.server.constant.PropertiesConstant;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import org.slf4j.Logger;
 import org.springframework.context.ApplicationContextInitializer;
@@ -92,16 +93,6 @@ public class PropertyUtil implements ApplicationContextInitializer<ConfigurableA
      */
     private static int correctUsageDelay = 10 * 60;
     
-    /**
-     * Standalone mode uses DB.
-     */
-    private static boolean useExternalDB = false;
-    
-    /**
-     * Inline storage value = ${nacos.standalone}.
-     */
-    private static boolean embeddedStorage = EnvUtil.getStandaloneMode();
-    
     public static int getNotifyConnectTimeout() {
         return notifyConnectTimeout;
     }
@@ -226,28 +217,12 @@ public class PropertyUtil implements ApplicationContextInitializer<ConfigurableA
         return EnvUtil.getStandaloneMode();
     }
     
-    public static boolean isUseExternalDB() {
-        return useExternalDB;
-    }
-    
-    public static void setUseExternalDB(boolean useExternalDB) {
-        PropertyUtil.useExternalDB = useExternalDB;
-    }
-    
-    public static boolean isEmbeddedStorage() {
-        return embeddedStorage;
-    }
-    
     // Determines whether to read the data directly
     // if use mysql, Reduce database read pressure
     // if use raft+derby, Reduce leader read pressure
     
     public static boolean isDirectRead() {
-        return EnvUtil.getStandaloneMode() && isEmbeddedStorage();
-    }
-    
-    public static void setEmbeddedStorage(boolean embeddedStorage) {
-        PropertyUtil.embeddedStorage = embeddedStorage;
+        return EnvUtil.getStandaloneMode() && DatasourceConfiguration.isEmbeddedStorage();
     }
     
     private void loadSetting() {
@@ -279,31 +254,6 @@ public class PropertyUtil implements ApplicationContextInitializer<ConfigurableA
             setDefaultMaxAggrSize(getInt(PropertiesConstant.DEFAULT_MAX_AGGR_SIZE, defaultMaxAggrSize));
             setCorrectUsageDelay(getInt(PropertiesConstant.CORRECT_USAGE_DELAY, correctUsageDelay));
             setInitialExpansionPercent(getInt(PropertiesConstant.INITIAL_EXPANSION_PERCENT, initialExpansionPercent));
-    
-            // External data sources are used by default in cluster mode
-            String platform = DatasourcePlatformUtil.getDatasourcePlatform("");
-            boolean useExternalStorage = !PropertiesConstant.EMPTY_DATASOURCE_PLATFORM.equalsIgnoreCase(platform)
-                    && !PropertiesConstant.DERBY.equalsIgnoreCase(platform);
-            setUseExternalDB(useExternalStorage);
-            
-            // must initialize after setUseExternalDB
-            // This value is true in stand-alone mode and false in cluster mode
-            // If this value is set to true in cluster mode, nacos's distributed storage engine is turned on
-            // default value is depend on ${nacos.standalone}
-            
-            if (isUseExternalDB()) {
-                setEmbeddedStorage(false);
-            } else {
-                boolean embeddedStorage =
-                        PropertyUtil.embeddedStorage || Boolean.getBoolean(PropertiesConstant.EMBEDDED_STORAGE);
-                setEmbeddedStorage(embeddedStorage);
-                
-                // If the embedded data source storage is not turned on, it is automatically
-                // upgraded to the external data source storage, as before
-                if (!embeddedStorage) {
-                    setUseExternalDB(true);
-                }
-            }
         } catch (Exception e) {
             LOGGER.error("read application.properties failed", e);
             throw e;
diff --git a/console/src/main/java/com/alibaba/nacos/Nacos.java b/console/src/main/java/com/alibaba/nacos/Nacos.java
index c407d108bb..f0d222e600 100644
--- a/console/src/main/java/com/alibaba/nacos/Nacos.java
+++ b/console/src/main/java/com/alibaba/nacos/Nacos.java
@@ -16,17 +16,30 @@
 
 package com.alibaba.nacos;
 
+import com.alibaba.nacos.sys.filter.NacosTypeExcludeFilter;
 import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.AutoConfigurationExcludeFilter;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.context.TypeExcludeFilter;
 import org.springframework.boot.web.servlet.ServletComponentScan;
+import org.springframework.context.annotation.ComponentScan;
+import org.springframework.context.annotation.ComponentScan.Filter;
+import org.springframework.context.annotation.FilterType;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
 /**
  * Nacos starter.
+ * <p>
+ * Use @SpringBootApplication and @ComponentScan at the same time, using CUSTOM type filter to control module enabled.
+ * </p>
  *
  * @author nacos
  */
-@SpringBootApplication(scanBasePackages = "com.alibaba.nacos")
+@SpringBootApplication
+@ComponentScan(basePackages = "com.alibaba.nacos", excludeFilters = {
+        @Filter(type = FilterType.CUSTOM, classes = {NacosTypeExcludeFilter.class}),
+        @Filter(type = FilterType.CUSTOM, classes = {TypeExcludeFilter.class}),
+        @Filter(type = FilterType.CUSTOM, classes = {AutoConfigurationExcludeFilter.class})})
 @ServletComponentScan
 @EnableScheduling
 public class Nacos {
diff --git a/console/src/main/java/com/alibaba/nacos/console/controller/HealthController.java b/console/src/main/java/com/alibaba/nacos/console/controller/HealthController.java
index f5b0e98136..8a601b66c3 100644
--- a/console/src/main/java/com/alibaba/nacos/console/controller/HealthController.java
+++ b/console/src/main/java/com/alibaba/nacos/console/controller/HealthController.java
@@ -16,11 +16,8 @@
 
 package com.alibaba.nacos.console.controller;
 
-import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
-import com.alibaba.nacos.naming.controllers.OperatorController;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
+import com.alibaba.nacos.core.cluster.health.ModuleHealthCheckerHolder;
+import com.alibaba.nacos.core.cluster.health.ReadinessResult;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -38,18 +35,6 @@ import javax.servlet.http.HttpServletRequest;
 @RequestMapping("/v1/console/health")
 public class HealthController {
     
-    private static final Logger LOGGER = LoggerFactory.getLogger(HealthController.class);
-    
-    private final ConfigInfoPersistService configInfoPersistService;
-    
-    private final OperatorController apiCommands;
-    
-    @Autowired
-    public HealthController(ConfigInfoPersistService configInfoPersistService, OperatorController apiCommands) {
-        this.configInfoPersistService = configInfoPersistService;
-        this.apiCommands = apiCommands;
-    }
-    
     /**
      * Whether the Nacos is in broken states or not, and cannot recover except by being restarted.
      *
@@ -69,42 +54,11 @@ public class HealthController {
      */
     @GetMapping("/readiness")
     public ResponseEntity<String> readiness(HttpServletRequest request) {
-        boolean isConfigReadiness = isConfigReadiness();
-        boolean isNamingReadiness = isNamingReadiness(request);
-        
-        if (isConfigReadiness && isNamingReadiness) {
+        ReadinessResult result = ModuleHealthCheckerHolder.getInstance().checkReadiness();
+        if (result.isSuccess()) {
             return ResponseEntity.ok().body("OK");
         }
-        
-        if (!isConfigReadiness && !isNamingReadiness) {
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Config and Naming are not in readiness");
-        }
-        
-        if (!isConfigReadiness) {
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Config is not in readiness");
-        }
-        
-        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Naming is not in readiness");
-    }
-    
-    private boolean isConfigReadiness() {
-        // check db
-        try {
-            configInfoPersistService.configInfoCount("");
-            return true;
-        } catch (Exception e) {
-            LOGGER.error("Config health check fail.", e);
-        }
-        return false;
+        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(result.getResultMessage());
     }
     
-    private boolean isNamingReadiness(HttpServletRequest request) {
-        try {
-            apiCommands.metrics(request);
-            return true;
-        } catch (Exception e) {
-            LOGGER.error("Naming health check fail.", e);
-        }
-        return false;
-    }
 }
diff --git a/console/src/main/java/com/alibaba/nacos/console/controller/NamespaceController.java b/console/src/main/java/com/alibaba/nacos/console/controller/NamespaceController.java
index ffe1e31de6..e254a153ff 100644
--- a/console/src/main/java/com/alibaba/nacos/console/controller/NamespaceController.java
+++ b/console/src/main/java/com/alibaba/nacos/console/controller/NamespaceController.java
@@ -21,10 +21,9 @@ import com.alibaba.nacos.auth.annotation.Secured;
 import com.alibaba.nacos.common.model.RestResult;
 import com.alibaba.nacos.common.model.RestResultUtils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.service.repository.CommonPersistService;
-import com.alibaba.nacos.console.model.Namespace;
-import com.alibaba.nacos.console.model.NamespaceAllInfo;
-import com.alibaba.nacos.console.service.NamespaceOperationService;
+import com.alibaba.nacos.core.namespace.repository.NamespacePersistService;
+import com.alibaba.nacos.core.namespace.model.Namespace;
+import com.alibaba.nacos.core.service.NamespaceOperationService;
 import com.alibaba.nacos.plugin.auth.constant.ActionTypes;
 import com.alibaba.nacos.plugin.auth.impl.constant.AuthConstants;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -50,7 +49,7 @@ import java.util.regex.Pattern;
 public class NamespaceController {
     
     @Autowired
-    private CommonPersistService commonPersistService;
+    private NamespacePersistService namespacePersistService;
     
     @Autowired
     private NamespaceOperationService namespaceOperationService;
@@ -76,7 +75,7 @@ public class NamespaceController {
      * @return namespace all info
      */
     @GetMapping(params = "show=all")
-    public NamespaceAllInfo getNamespace(@RequestParam("namespaceId") String namespaceId) throws NacosException {
+    public Namespace getNamespace(@RequestParam("namespaceId") String namespaceId) throws NacosException {
         return namespaceOperationService.getNamespace(namespaceId);
     }
     
@@ -121,7 +120,7 @@ public class NamespaceController {
         if (StringUtils.isBlank(namespaceId)) {
             return false;
         }
-        return (commonPersistService.tenantInfoCountByTenantId(namespaceId) > 0);
+        return (namespacePersistService.tenantInfoCountByTenantId(namespaceId) > 0);
     }
     
     /**
diff --git a/console/src/main/java/com/alibaba/nacos/console/controller/v2/NamespaceControllerV2.java b/console/src/main/java/com/alibaba/nacos/console/controller/v2/NamespaceControllerV2.java
index c01325d5a0..0ca2b76af3 100644
--- a/console/src/main/java/com/alibaba/nacos/console/controller/v2/NamespaceControllerV2.java
+++ b/console/src/main/java/com/alibaba/nacos/console/controller/v2/NamespaceControllerV2.java
@@ -23,10 +23,9 @@ import com.alibaba.nacos.api.model.v2.ErrorCode;
 import com.alibaba.nacos.api.model.v2.Result;
 import com.alibaba.nacos.auth.annotation.Secured;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.console.model.Namespace;
-import com.alibaba.nacos.console.model.NamespaceAllInfo;
-import com.alibaba.nacos.console.model.form.NamespaceForm;
-import com.alibaba.nacos.console.service.NamespaceOperationService;
+import com.alibaba.nacos.core.namespace.model.Namespace;
+import com.alibaba.nacos.core.namespace.model.form.NamespaceForm;
+import com.alibaba.nacos.core.service.NamespaceOperationService;
 import com.alibaba.nacos.plugin.auth.constant.ActionTypes;
 import com.alibaba.nacos.plugin.auth.constant.SignType;
 import com.alibaba.nacos.plugin.auth.impl.constant.AuthConstants;
@@ -83,8 +82,7 @@ public class NamespaceControllerV2 {
     @GetMapping()
     @Secured(resource = AuthConstants.CONSOLE_RESOURCE_NAME_PREFIX
             + "namespaces", action = ActionTypes.READ, signType = SignType.CONSOLE)
-    public Result<NamespaceAllInfo> getNamespace(@RequestParam("namespaceId") String namespaceId)
-            throws NacosException {
+    public Result<Namespace> getNamespace(@RequestParam("namespaceId") String namespaceId) throws NacosException {
         return Result.success(namespaceOperationService.getNamespace(namespaceId));
     }
     
diff --git a/core/src/main/java/com/alibaba/nacos/core/cluster/health/AbstractModuleHealthChecker.java b/core/src/main/java/com/alibaba/nacos/core/cluster/health/AbstractModuleHealthChecker.java
new file mode 100644
index 0000000000..d124c8e8a8
--- /dev/null
+++ b/core/src/main/java/com/alibaba/nacos/core/cluster/health/AbstractModuleHealthChecker.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.core.cluster.health;
+
+/**
+ * Health checker.
+ *
+ * @author xiweng.yy
+ */
+public abstract class AbstractModuleHealthChecker {
+    
+    protected AbstractModuleHealthChecker() {
+        ModuleHealthCheckerHolder.getInstance().registerChecker(this);
+    }
+    
+    /**
+     * Check readiness.
+     *
+     * @return {@code true} if readiness, otherwise {@code false}
+     */
+    public abstract boolean readiness();
+    
+    /**
+     * Module name.
+     *
+     * @return module name
+     */
+    public abstract String getModuleName();
+}
diff --git a/core/src/main/java/com/alibaba/nacos/core/cluster/health/ModuleHealthCheckerHolder.java b/core/src/main/java/com/alibaba/nacos/core/cluster/health/ModuleHealthCheckerHolder.java
new file mode 100644
index 0000000000..1986eb87e2
--- /dev/null
+++ b/core/src/main/java/com/alibaba/nacos/core/cluster/health/ModuleHealthCheckerHolder.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.core.cluster.health;
+
+import com.alibaba.nacos.common.utils.StringUtils;
+
+import java.util.LinkedList;
+import java.util.List;
+
+/**
+ * Holder of namespace detail injector.
+ *
+ * @author xiweng.yy
+ */
+public class ModuleHealthCheckerHolder {
+    
+    private static final ModuleHealthCheckerHolder INSTANCE = new ModuleHealthCheckerHolder();
+    
+    private final List<AbstractModuleHealthChecker> moduleHealthCheckers;
+    
+    private ModuleHealthCheckerHolder() {
+        this.moduleHealthCheckers = new LinkedList<>();
+    }
+    
+    public static ModuleHealthCheckerHolder getInstance() {
+        return INSTANCE;
+    }
+    
+    public void registerChecker(AbstractModuleHealthChecker checker) {
+        this.moduleHealthCheckers.add(checker);
+    }
+    
+    /**
+     * Do check readiness for modules.
+     *
+     * @return readiness result
+     */
+    public ReadinessResult checkReadiness() {
+        List<String> readinessFailedModule = new LinkedList<>();
+        for (AbstractModuleHealthChecker each : this.moduleHealthCheckers) {
+            boolean moduleReadiness = each.readiness();
+            if (!moduleReadiness) {
+                readinessFailedModule.add(each.getModuleName());
+            }
+        }
+        if (readinessFailedModule.isEmpty()) {
+            return new ReadinessResult(true, "OK");
+        } else {
+            String modules = StringUtils.join(readinessFailedModule, " and ");
+            return new ReadinessResult(false, String.format("%s not in readiness", modules));
+        }
+    }
+}
diff --git a/core/src/main/java/com/alibaba/nacos/core/cluster/health/ReadinessResult.java b/core/src/main/java/com/alibaba/nacos/core/cluster/health/ReadinessResult.java
new file mode 100644
index 0000000000..6b66a4169c
--- /dev/null
+++ b/core/src/main/java/com/alibaba/nacos/core/cluster/health/ReadinessResult.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.core.cluster.health;
+
+/**
+ * Readiness result.
+ *
+ * @author xiweng.yy
+ */
+public class ReadinessResult {
+    
+    private final boolean success;
+    
+    private final String resultMessage;
+    
+    public ReadinessResult(boolean success, String resultMessage) {
+        this.success = success;
+        this.resultMessage = resultMessage;
+    }
+    
+    public boolean isSuccess() {
+        return success;
+    }
+    
+    public String getResultMessage() {
+        return resultMessage;
+    }
+}
diff --git a/core/src/main/java/com/alibaba/nacos/core/monitor/NacosMeterRegistryCenter.java b/core/src/main/java/com/alibaba/nacos/core/monitor/NacosMeterRegistryCenter.java
index 2cf6471553..3b042576a9 100644
--- a/core/src/main/java/com/alibaba/nacos/core/monitor/NacosMeterRegistryCenter.java
+++ b/core/src/main/java/com/alibaba/nacos/core/monitor/NacosMeterRegistryCenter.java
@@ -30,6 +30,12 @@ import java.util.concurrent.ConcurrentHashMap;
 /**
  * Metrics unified usage center.
  *
+ * <p>
+ * FIXME: Bad implemetation, force depend prometheus. No need to new {@link CompositeMeterRegistry}, only should use
+ * {@link io.micrometer.core.instrument.Metrics#globalRegistry}. If need to distinguish different scope or module, use
+ * name of meters is enough.
+ * </p>
+ *
  * @author <a href="mailto:liuyixiao0821@gmail.com">liuyixiao</a>
  */
 @SuppressWarnings("all")
diff --git a/core/src/main/java/com/alibaba/nacos/core/namespace/injector/AbstractNamespaceDetailInjector.java b/core/src/main/java/com/alibaba/nacos/core/namespace/injector/AbstractNamespaceDetailInjector.java
new file mode 100644
index 0000000000..19e136147f
--- /dev/null
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/injector/AbstractNamespaceDetailInjector.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.core.namespace.injector;
+
+import com.alibaba.nacos.core.namespace.model.Namespace;
+
+/**
+ * Namespace detail injector.
+ *
+ * @author xiweng.yy
+ */
+public abstract class AbstractNamespaceDetailInjector {
+    
+    protected AbstractNamespaceDetailInjector() {
+        NamespaceDetailInjectorHolder.getInstance().registerInjector(this);
+    }
+    
+    /**
+     * Inject namespace detail, like config count, service count.
+     *
+     * @param namespace namespace
+     */
+    public abstract void injectDetail(Namespace namespace);
+}
diff --git a/core/src/main/java/com/alibaba/nacos/core/namespace/injector/NamespaceDetailInjectorHolder.java b/core/src/main/java/com/alibaba/nacos/core/namespace/injector/NamespaceDetailInjectorHolder.java
new file mode 100644
index 0000000000..a56dddbddd
--- /dev/null
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/injector/NamespaceDetailInjectorHolder.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.core.namespace.injector;
+
+import com.alibaba.nacos.core.namespace.model.Namespace;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Holder of namespace detail injector.
+ *
+ * @author xiweng.yy
+ */
+public class NamespaceDetailInjectorHolder {
+    
+    private static final NamespaceDetailInjectorHolder INSTANCE = new NamespaceDetailInjectorHolder();
+    
+    private final Set<AbstractNamespaceDetailInjector> namespaceDetailInjectors;
+    
+    private NamespaceDetailInjectorHolder() {
+        this.namespaceDetailInjectors = new HashSet<>();
+    }
+    
+    public static NamespaceDetailInjectorHolder getInstance() {
+        return INSTANCE;
+    }
+    
+    public void registerInjector(AbstractNamespaceDetailInjector injector) {
+        this.namespaceDetailInjectors.add(injector);
+    }
+    
+    /**
+     * Inject detail from all injectors.
+     *
+     * @param namespace namespace
+     */
+    public void injectDetail(Namespace namespace) {
+        for (AbstractNamespaceDetailInjector each : this.namespaceDetailInjectors) {
+            each.injectDetail(namespace);
+        }
+    }
+}
diff --git a/console/src/main/java/com/alibaba/nacos/console/model/Namespace.java b/core/src/main/java/com/alibaba/nacos/core/namespace/model/Namespace.java
similarity index 94%
rename from console/src/main/java/com/alibaba/nacos/console/model/Namespace.java
rename to core/src/main/java/com/alibaba/nacos/core/namespace/model/Namespace.java
index 0a13166f63..65d9e62339 100644
--- a/console/src/main/java/com/alibaba/nacos/console/model/Namespace.java
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/model/Namespace.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.console.model;
+package com.alibaba.nacos.core.namespace.model;
 
 /**
  * Namespace.
@@ -34,7 +34,7 @@ public class Namespace {
     private int configCount;
     
     /**
-     * see {@link com.alibaba.nacos.console.enums.NamespaceTypeEnum}.
+     * see {@link NamespaceTypeEnum}.
      */
     private int type;
     
diff --git a/console/src/main/java/com/alibaba/nacos/console/enums/NamespaceTypeEnum.java b/core/src/main/java/com/alibaba/nacos/core/namespace/model/NamespaceTypeEnum.java
similarity index 86%
rename from console/src/main/java/com/alibaba/nacos/console/enums/NamespaceTypeEnum.java
rename to core/src/main/java/com/alibaba/nacos/core/namespace/model/NamespaceTypeEnum.java
index 8674ce8aeb..2a1109f09d 100644
--- a/console/src/main/java/com/alibaba/nacos/console/enums/NamespaceTypeEnum.java
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/model/NamespaceTypeEnum.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2021 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.console.enums;
+package com.alibaba.nacos.core.namespace.model;
 
 /**
- * the enum of namespace.
- * 0 : Global configuration， 1 : Default private namespace ，2 : Custom namespace.
+ * the enum of namespace. 0 : Global configuration， 1 : Default private namespace ，2 : Custom namespace.
  *
  * @author chenglu
  * @date 2021-05-25 17:01
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/model/TenantInfo.java b/core/src/main/java/com/alibaba/nacos/core/namespace/model/TenantInfo.java
similarity index 90%
rename from config/src/main/java/com/alibaba/nacos/config/server/model/TenantInfo.java
rename to core/src/main/java/com/alibaba/nacos/core/namespace/model/TenantInfo.java
index 08e9c9cfda..e12b343a87 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/model/TenantInfo.java
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/model/TenantInfo.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,13 +14,15 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.model;
+package com.alibaba.nacos.core.namespace.model;
 
 import java.io.Serializable;
 
 /**
  * TenantInfo.
  *
+ * <p>Old name of {@link Namespace}</p>
+ *
  * @author Nacos
  */
 public class TenantInfo implements Serializable {
diff --git a/console/src/main/java/com/alibaba/nacos/console/model/form/NamespaceForm.java b/core/src/main/java/com/alibaba/nacos/core/namespace/model/form/NamespaceForm.java
similarity index 97%
rename from console/src/main/java/com/alibaba/nacos/console/model/form/NamespaceForm.java
rename to core/src/main/java/com/alibaba/nacos/core/namespace/model/form/NamespaceForm.java
index 851429a3d8..5e5af37377 100644
--- a/console/src/main/java/com/alibaba/nacos/console/model/form/NamespaceForm.java
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/model/form/NamespaceForm.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2022 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.console.model.form;
+package com.alibaba.nacos.core.namespace.model.form;
 
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.exception.api.NacosApiException;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedCommonPersistServiceImpl.java b/core/src/main/java/com/alibaba/nacos/core/namespace/repository/EmbeddedNamespacePersistServiceImpl.java
similarity index 54%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedCommonPersistServiceImpl.java
rename to core/src/main/java/com/alibaba/nacos/core/namespace/repository/EmbeddedNamespacePersistServiceImpl.java
index d56c4783fd..361a5e8d2a 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedCommonPersistServiceImpl.java
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/repository/EmbeddedNamespacePersistServiceImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2022 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,19 +14,20 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository.embedded;
+package com.alibaba.nacos.core.namespace.repository;
 
+import com.alibaba.nacos.api.exception.NacosException;
+import com.alibaba.nacos.api.exception.runtime.NacosRuntimeException;
 import com.alibaba.nacos.common.notify.NotifyCenter;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
-import com.alibaba.nacos.config.server.constant.Constants;
-import com.alibaba.nacos.config.server.exception.NacosConfigException;
-import com.alibaba.nacos.config.server.model.TenantInfo;
-import com.alibaba.nacos.config.server.model.event.DerbyImportEvent;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
-import com.alibaba.nacos.config.server.service.repository.CommonPersistService;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
+import com.alibaba.nacos.core.namespace.model.TenantInfo;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.event.DerbyImportEvent;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.TenantInfoMapper;
 import com.alibaba.nacos.sys.env.EnvUtil;
@@ -38,7 +39,7 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.TENANT_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.core.namespace.repository.NamespaceRowMapperInjector.TENANT_INFO_ROW_MAPPER;
 
 /**
  * EmbeddedOtherPersistServiceImpl.
@@ -48,7 +49,7 @@ import static com.alibaba.nacos.config.server.service.repository.RowMapperManage
 @SuppressWarnings({"PMD.MethodReturnWrapperTypeRule", "checkstyle:linelength"})
 @Conditional(value = ConditionOnEmbeddedStorage.class)
 @Service("embeddedOtherPersistServiceImpl")
-public class EmbeddedCommonPersistServiceImpl implements CommonPersistService {
+public class EmbeddedNamespacePersistServiceImpl implements NamespacePersistService {
     
     private DataSourceService dataSourceService;
     
@@ -59,13 +60,13 @@ public class EmbeddedCommonPersistServiceImpl implements CommonPersistService {
     /**
      * The constructor sets the dependency injection order.
      *
-     * @param databaseOperate {@link EmbeddedStoragePersistServiceImpl}
+     * @param databaseOperate databaseOperate
      */
-    public EmbeddedCommonPersistServiceImpl(DatabaseOperate databaseOperate) {
+    public EmbeddedNamespacePersistServiceImpl(DatabaseOperate databaseOperate) {
         this.databaseOperate = databaseOperate;
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
-                false);
+        Boolean isDataSourceLogEnable = EnvUtil
+                .getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class, false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
         NotifyCenter.registerToSharePublisher(DerbyImportEvent.class);
     }
@@ -74,76 +75,76 @@ public class EmbeddedCommonPersistServiceImpl implements CommonPersistService {
     public void insertTenantInfoAtomic(String kp, String tenantId, String tenantName, String tenantDesc,
             String createResoure, final long time) {
         
-        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                TableConstant.TENANT_INFO);
-        final String sql = tenantInfoMapper.insert(
-                Arrays.asList("kp", "tenant_id", "tenant_name", "tenant_desc", "create_source", "gmt_create",
+        TenantInfoMapper tenantInfoMapper = mapperManager
+                .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
+        final String sql = tenantInfoMapper.insert(Arrays
+                .asList("kp", "tenant_id", "tenant_name", "tenant_desc", "create_source", "gmt_create",
                         "gmt_modified"));
         final Object[] args = new Object[] {kp, tenantId, tenantName, tenantDesc, createResoure, time, time};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
-                throw new NacosConfigException("Namespace creation failed");
+                throw new NacosRuntimeException(NacosException.SERVER_ERROR, "Namespace creation failed");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
     @Override
     public void removeTenantInfoAtomic(final String kp, final String tenantId) {
-        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                TableConstant.TENANT_INFO);
+        TenantInfoMapper tenantInfoMapper = mapperManager
+                .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
         
-        EmbeddedStorageContextUtils.addSqlContext(tenantInfoMapper.delete(Arrays.asList("kp", "tenant_id")), kp,
-                tenantId);
+        EmbeddedStorageContextHolder
+                .addSqlContext(tenantInfoMapper.delete(Arrays.asList("kp", "tenant_id")), kp, tenantId);
         try {
-            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
     @Override
     public void updateTenantNameAtomic(String kp, String tenantId, String tenantName, String tenantDesc) {
         
-        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                TableConstant.TENANT_INFO);
-        final String sql = tenantInfoMapper.update(Arrays.asList("tenant_name", "tenant_desc", "gmt_modified"),
-                Arrays.asList("kp", "tenant_id"));
+        TenantInfoMapper tenantInfoMapper = mapperManager
+                .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
+        final String sql = tenantInfoMapper
+                .update(Arrays.asList("tenant_name", "tenant_desc", "gmt_modified"), Arrays.asList("kp", "tenant_id"));
         final Object[] args = new Object[] {tenantName, tenantDesc, System.currentTimeMillis(), kp, tenantId};
         
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         
         try {
-            boolean result = databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            boolean result = databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
             if (!result) {
-                throw new NacosConfigException("Namespace update failed");
+                throw new NacosRuntimeException(NacosException.SERVER_ERROR, "Namespace update failed");
             }
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
     @Override
     public List<TenantInfo> findTenantByKp(String kp) {
-        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                TableConstant.TENANT_INFO);
-        String sql = tenantInfoMapper.select(Arrays.asList("tenant_id", "tenant_name", "tenant_desc"),
-                Collections.singletonList("kp"));
+        TenantInfoMapper tenantInfoMapper = mapperManager
+                .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
+        String sql = tenantInfoMapper
+                .select(Arrays.asList("tenant_id", "tenant_name", "tenant_desc"), Collections.singletonList("kp"));
         return databaseOperate.queryMany(sql, new Object[] {kp}, TENANT_INFO_ROW_MAPPER);
         
     }
     
     @Override
     public TenantInfo findTenantByKp(String kp, String tenantId) {
-        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                TableConstant.TENANT_INFO);
-        String sql = tenantInfoMapper.select(Arrays.asList("tenant_id", "tenant_name", "tenant_desc"),
-                Arrays.asList("kp", "tenant_id"));
+        TenantInfoMapper tenantInfoMapper = mapperManager
+                .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
+        String sql = tenantInfoMapper
+                .select(Arrays.asList("tenant_id", "tenant_name", "tenant_desc"), Arrays.asList("kp", "tenant_id"));
         return databaseOperate.queryOne(sql, new Object[] {kp, tenantId}, TENANT_INFO_ROW_MAPPER);
         
     }
@@ -175,8 +176,8 @@ public class EmbeddedCommonPersistServiceImpl implements CommonPersistService {
         if (Objects.isNull(tenantId)) {
             throw new IllegalArgumentException("tenantId can not be null");
         }
-        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                TableConstant.TENANT_INFO);
+        TenantInfoMapper tenantInfoMapper = mapperManager
+                .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
         String sql = tenantInfoMapper.count(Arrays.asList("tenant_id"));
         Integer result = databaseOperate.queryOne(sql, new String[] {tenantId}, Integer.class);
         if (result == null) {
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalCommonPersistServiceImpl.java b/core/src/main/java/com/alibaba/nacos/core/namespace/repository/ExternalNamespacePersistServiceImpl.java
similarity index 62%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalCommonPersistServiceImpl.java
rename to core/src/main/java/com/alibaba/nacos/core/namespace/repository/ExternalNamespacePersistServiceImpl.java
index d67d32933b..0a13a5c53d 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalCommonPersistServiceImpl.java
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/repository/ExternalNamespacePersistServiceImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2022 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,16 +14,15 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository.extrnal;
+package com.alibaba.nacos.core.namespace.repository;
 
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
-import com.alibaba.nacos.config.server.constant.Constants;
-import com.alibaba.nacos.config.server.model.TenantInfo;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
-import com.alibaba.nacos.config.server.service.repository.CommonPersistService;
-import com.alibaba.nacos.config.server.utils.LogUtil;
+import com.alibaba.nacos.core.namespace.model.TenantInfo;
+import com.alibaba.nacos.core.utils.Loggers;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
 import com.alibaba.nacos.plugin.datasource.MapperManager;
+import com.alibaba.nacos.plugin.datasource.constants.CommonConstant;
 import com.alibaba.nacos.plugin.datasource.constants.TableConstant;
 import com.alibaba.nacos.plugin.datasource.mapper.TenantInfoMapper;
 import com.alibaba.nacos.sys.env.EnvUtil;
@@ -40,7 +39,7 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.TENANT_INFO_ROW_MAPPER;
+import static com.alibaba.nacos.core.namespace.repository.NamespaceRowMapperInjector.TENANT_INFO_ROW_MAPPER;
 
 /**
  * ExternalOtherPersistServiceImpl.
@@ -50,22 +49,22 @@ import static com.alibaba.nacos.config.server.service.repository.RowMapperManage
 @SuppressWarnings(value = {"PMD.MethodReturnWrapperTypeRule", "checkstyle:linelength"})
 @Conditional(value = ConditionOnExternalStorage.class)
 @Service("externalOtherPersistServiceImpl")
-public class ExternalCommonPersistServiceImpl implements CommonPersistService {
+public class ExternalNamespacePersistServiceImpl implements NamespacePersistService {
     
-    private DataSourceService dataSourceService;
+    private final DataSourceService dataSourceService;
     
     protected JdbcTemplate jt;
     
     protected TransactionTemplate tjt;
     
-    private MapperManager mapperManager;
+    private final MapperManager mapperManager;
     
-    public ExternalCommonPersistServiceImpl() {
+    public ExternalNamespacePersistServiceImpl() {
         this.dataSourceService = DynamicDataSource.getInstance().getDataSource();
         this.jt = dataSourceService.getJdbcTemplate();
         this.tjt = dataSourceService.getTransactionTemplate();
-        Boolean isDataSourceLogEnable = EnvUtil.getProperty(Constants.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class,
-                false);
+        Boolean isDataSourceLogEnable = EnvUtil
+                .getProperty(CommonConstant.NACOS_PLUGIN_DATASOURCE_LOG, Boolean.class, false);
         this.mapperManager = MapperManager.instance(isDataSourceLogEnable);
     }
     
@@ -73,13 +72,13 @@ public class ExternalCommonPersistServiceImpl implements CommonPersistService {
     public void insertTenantInfoAtomic(String kp, String tenantId, String tenantName, String tenantDesc,
             String createResoure, final long time) {
         try {
-            TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                    TableConstant.TENANT_INFO);
-            jt.update(tenantInfoMapper.insert(
-                    Arrays.asList("kp", "tenant_id", "tenant_name", "tenant_desc", "create_source", "gmt_create",
+            TenantInfoMapper tenantInfoMapper = mapperManager
+                    .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
+            jt.update(tenantInfoMapper.insert(Arrays
+                    .asList("kp", "tenant_id", "tenant_name", "tenant_desc", "create_source", "gmt_create",
                             "gmt_modified")), kp, tenantId, tenantName, tenantDesc, createResoure, time, time);
         } catch (DataAccessException e) {
-            LogUtil.FATAL_LOG.error("[db-error] " + e, e);
+            Loggers.CLUSTER.error("[db-error] " + e, e);
             throw e;
         }
     }
@@ -87,11 +86,11 @@ public class ExternalCommonPersistServiceImpl implements CommonPersistService {
     @Override
     public void removeTenantInfoAtomic(final String kp, final String tenantId) {
         try {
-            TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                    TableConstant.TENANT_INFO);
+            TenantInfoMapper tenantInfoMapper = mapperManager
+                    .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
             jt.update(tenantInfoMapper.delete(Arrays.asList("kp", "tenant_id")), kp, tenantId);
         } catch (CannotGetJdbcConnectionException e) {
-            LogUtil.FATAL_LOG.error("[db-error] " + e, e);
+            Loggers.CLUSTER.error("[db-error] " + e, e);
             throw e;
         }
     }
@@ -99,51 +98,51 @@ public class ExternalCommonPersistServiceImpl implements CommonPersistService {
     @Override
     public void updateTenantNameAtomic(String kp, String tenantId, String tenantName, String tenantDesc) {
         try {
-            TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                    TableConstant.TENANT_INFO);
+            TenantInfoMapper tenantInfoMapper = mapperManager
+                    .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
             jt.update(tenantInfoMapper.update(Arrays.asList("tenant_name", "tenant_desc", "gmt_modified"),
-                            Arrays.asList("kp", "tenant_id")), tenantName, tenantDesc, System.currentTimeMillis(), kp,
+                    Arrays.asList("kp", "tenant_id")), tenantName, tenantDesc, System.currentTimeMillis(), kp,
                     tenantId);
         } catch (DataAccessException e) {
-            LogUtil.FATAL_LOG.error("[db-error] " + e, e);
+            Loggers.CLUSTER.error("[db-error] " + e, e);
             throw e;
         }
     }
     
     @Override
     public List<TenantInfo> findTenantByKp(String kp) {
-        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                TableConstant.TENANT_INFO);
-        String sql = tenantInfoMapper.select(Arrays.asList("tenant_id", "tenant_name", "tenant_desc"),
-                Collections.singletonList("kp"));
+        TenantInfoMapper tenantInfoMapper = mapperManager
+                .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
+        String sql = tenantInfoMapper
+                .select(Arrays.asList("tenant_id", "tenant_name", "tenant_desc"), Collections.singletonList("kp"));
         try {
             return this.jt.query(sql, new Object[] {kp}, TENANT_INFO_ROW_MAPPER);
         } catch (CannotGetJdbcConnectionException e) {
-            LogUtil.FATAL_LOG.error("[db-error] " + e, e);
+            Loggers.CLUSTER.error("[db-error] " + e, e);
             throw e;
         } catch (EmptyResultDataAccessException e) {
             return Collections.emptyList();
         } catch (Exception e) {
-            LogUtil.FATAL_LOG.error("[db-other-error]" + e.getMessage(), e);
+            Loggers.CLUSTER.error("[db-other-error]" + e.getMessage(), e);
             throw new RuntimeException(e);
         }
     }
     
     @Override
     public TenantInfo findTenantByKp(String kp, String tenantId) {
-        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                TableConstant.TENANT_INFO);
-        String sql = tenantInfoMapper.select(Arrays.asList("tenant_id", "tenant_name", "tenant_desc"),
-                Arrays.asList("kp", "tenant_id"));
+        TenantInfoMapper tenantInfoMapper = mapperManager
+                .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
+        String sql = tenantInfoMapper
+                .select(Arrays.asList("tenant_id", "tenant_name", "tenant_desc"), Arrays.asList("kp", "tenant_id"));
         try {
             return jt.queryForObject(sql, new Object[] {kp, tenantId}, TENANT_INFO_ROW_MAPPER);
         } catch (CannotGetJdbcConnectionException e) {
-            LogUtil.FATAL_LOG.error("[db-error] " + e, e);
+            Loggers.CLUSTER.error("[db-error] " + e, e);
             throw e;
         } catch (EmptyResultDataAccessException e) {
             return null;
         } catch (Exception e) {
-            LogUtil.FATAL_LOG.error("[db-other-error]" + e.getMessage(), e);
+            Loggers.CLUSTER.error("[db-other-error]" + e.getMessage(), e);
             throw new RuntimeException(e);
         }
     }
@@ -175,8 +174,8 @@ public class ExternalCommonPersistServiceImpl implements CommonPersistService {
         if (Objects.isNull(tenantId)) {
             throw new IllegalArgumentException("tenantId can not be null");
         }
-        TenantInfoMapper tenantInfoMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),
-                TableConstant.TENANT_INFO);
+        TenantInfoMapper tenantInfoMapper = mapperManager
+                .findMapper(dataSourceService.getDataSourceType(), TableConstant.TENANT_INFO);
         String sql = tenantInfoMapper.count(Arrays.asList("tenant_id"));
         Integer result = this.jt.queryForObject(sql, new String[] {tenantId}, Integer.class);
         if (result == null) {
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/CommonPersistService.java b/core/src/main/java/com/alibaba/nacos/core/namespace/repository/NamespacePersistService.java
similarity index 93%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/CommonPersistService.java
rename to core/src/main/java/com/alibaba/nacos/core/namespace/repository/NamespacePersistService.java
index 8538e9428a..ef2e475b5d 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/CommonPersistService.java
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/repository/NamespacePersistService.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2022 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository;
+package com.alibaba.nacos.core.namespace.repository;
 
-import com.alibaba.nacos.config.server.model.TenantInfo;
+import com.alibaba.nacos.core.namespace.model.TenantInfo;
 
 import java.util.List;
 
@@ -25,7 +25,7 @@ import java.util.List;
  *
  * @author lixiaoshuang
  */
-public interface CommonPersistService {
+public interface NamespacePersistService {
     
     String PATTERN_STR = "*";
     
diff --git a/core/src/main/java/com/alibaba/nacos/core/namespace/repository/NamespaceRowMapperInjector.java b/core/src/main/java/com/alibaba/nacos/core/namespace/repository/NamespaceRowMapperInjector.java
new file mode 100644
index 0000000000..affebab385
--- /dev/null
+++ b/core/src/main/java/com/alibaba/nacos/core/namespace/repository/NamespaceRowMapperInjector.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.core.namespace.repository;
+
+import com.alibaba.nacos.core.namespace.model.TenantInfo;
+import com.alibaba.nacos.persistence.repository.RowMapperManager;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Component;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+/**
+ * Namespace row mapper injector.
+ *
+ * @author xiweng.yy
+ */
+@Component
+public class NamespaceRowMapperInjector {
+    
+    public static final RowMapper<TenantInfo> TENANT_INFO_ROW_MAPPER = new TenantInfoRowMapper();
+    
+    public NamespaceRowMapperInjector() {
+        injectNamespaceRowMapper();
+    }
+    
+    private void injectNamespaceRowMapper() {
+        // TENANT_INFO_ROW_MAPPER
+        RowMapperManager
+                .registerRowMapper(NamespaceRowMapperInjector.TENANT_INFO_ROW_MAPPER.getClass().getCanonicalName(),
+                        NamespaceRowMapperInjector.TENANT_INFO_ROW_MAPPER);
+    }
+    
+    public static final class TenantInfoRowMapper implements RowMapper<TenantInfo> {
+        
+        @Override
+        public TenantInfo mapRow(ResultSet rs, int rowNum) throws SQLException {
+            TenantInfo info = new TenantInfo();
+            info.setTenantId(rs.getString("tenant_id"));
+            info.setTenantName(rs.getString("tenant_name"));
+            info.setTenantDesc(rs.getString("tenant_desc"));
+            return info;
+        }
+    }
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/DerbySnapshotOperation.java b/core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java
similarity index 80%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/DerbySnapshotOperation.java
rename to core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java
index 00231b9517..b1ca141f12 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/DerbySnapshotOperation.java
+++ b/core/src/main/java/com/alibaba/nacos/core/persistence/DerbySnapshotOperation.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,25 +14,27 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository.embedded;
+package com.alibaba.nacos.core.persistence;
 
 import com.alibaba.nacos.common.notify.NotifyCenter;
-import com.alibaba.nacos.config.server.constant.Constants;
-import com.alibaba.nacos.config.server.model.event.DerbyLoadEvent;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
-import com.alibaba.nacos.config.server.service.datasource.LocalDataSourceServiceImpl;
-import com.alibaba.nacos.config.server.utils.LogUtil;
 import com.alibaba.nacos.consistency.snapshot.LocalFileMeta;
 import com.alibaba.nacos.consistency.snapshot.Reader;
 import com.alibaba.nacos.consistency.snapshot.SnapshotOperation;
 import com.alibaba.nacos.consistency.snapshot.Writer;
-import com.alibaba.nacos.core.distributed.raft.utils.RaftExecutor;
+import com.alibaba.nacos.persistence.constants.PersistenceConstant;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.datasource.LocalDataSourceServiceImpl;
+import com.alibaba.nacos.persistence.model.event.DerbyLoadEvent;
+import com.alibaba.nacos.persistence.utils.PersistenceExecutor;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import com.alibaba.nacos.sys.utils.DiskUtils;
-import com.alibaba.nacos.core.utils.TimerContext;
+import com.alibaba.nacos.sys.utils.TimerContext;
 import com.alipay.sofa.jraft.util.CRC64;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
+import javax.sql.DataSource;
 import java.io.File;
 import java.nio.file.Paths;
 import java.sql.CallableStatement;
@@ -43,15 +45,17 @@ import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.function.BiConsumer;
 import java.util.zip.Checksum;
-import javax.sql.DataSource;
 
 /**
  * Derby Snapshot operation.
+ * TODO depend on jraft strongly, Waiting for addition split.
  *
  * @author <a href="mailto:liaochuntao@live.com">liaochuntao</a>
  */
 public class DerbySnapshotOperation implements SnapshotOperation {
     
+    private static final Logger LOGGER = LoggerFactory.getLogger(DerbySnapshotOperation.class);
+    
     private static final String DERBY_SNAPSHOT_SAVE = DerbySnapshotOperation.class.getSimpleName() + ".SAVE";
     
     private static final String DERBY_SNAPSHOT_LOAD = DerbySnapshotOperation.class.getSimpleName() + ".LOAD";
@@ -62,7 +66,8 @@ public class DerbySnapshotOperation implements SnapshotOperation {
     
     private final String snapshotArchive = "derby_data.zip";
     
-    private final String derbyBaseDir = Paths.get(EnvUtil.getNacosHome(), "data", Constants.DERBY_BASE_DIR).toString();
+    private final String derbyBaseDir = Paths.get(EnvUtil.getNacosHome(), "data", PersistenceConstant.DERBY_BASE_DIR)
+            .toString();
     
     private final String restoreDB = "jdbc:derby:" + derbyBaseDir;
     
@@ -76,7 +81,7 @@ public class DerbySnapshotOperation implements SnapshotOperation {
     
     @Override
     public void onSnapshotSave(Writer writer, BiConsumer<Boolean, Throwable> callFinally) {
-        RaftExecutor.doSnapshot(() -> {
+        PersistenceExecutor.executeSnapshot(() -> {
             TimerContext.start(DERBY_SNAPSHOT_SAVE);
             
             final Lock lock = writeLock;
@@ -99,12 +104,12 @@ public class DerbySnapshotOperation implements SnapshotOperation {
                 
                 callFinally.accept(writer.addFile(snapshotArchive, meta), null);
             } catch (Throwable t) {
-                LogUtil.FATAL_LOG.error("Fail to compress snapshot, path={}, file list={}, {}.", writer.getPath(),
+                LOGGER.error("Fail to compress snapshot, path={}, file list={}, {}.", writer.getPath(),
                         writer.listFiles(), t);
                 callFinally.accept(false, t);
             } finally {
                 lock.unlock();
-                TimerContext.end(DERBY_SNAPSHOT_SAVE, LogUtil.FATAL_LOG);
+                TimerContext.end(DERBY_SNAPSHOT_SAVE, LOGGER);
             }
         });
     }
@@ -128,27 +133,26 @@ public class DerbySnapshotOperation implements SnapshotOperation {
                 }
             }
             
-            final String loadPath = Paths.get(readerPath, snapshotDir, Constants.DERBY_BASE_DIR).toString();
-            LogUtil.FATAL_LOG.info("snapshot load from : {}, and copy to : {}", loadPath, derbyBaseDir);
+            final String loadPath = Paths.get(readerPath, snapshotDir, PersistenceConstant.DERBY_BASE_DIR).toString();
+            LOGGER.info("snapshot load from : {}, and copy to : {}", loadPath, derbyBaseDir);
             
             doDerbyRestoreFromBackup(() -> {
                 final File srcDir = new File(loadPath);
                 final File destDir = new File(derbyBaseDir);
                 
                 DiskUtils.copyDirectory(srcDir, destDir);
-                LogUtil.FATAL_LOG.info("Complete database recovery");
+                LOGGER.info("Complete database recovery");
                 return null;
             });
             DiskUtils.deleteDirectory(loadPath);
             NotifyCenter.publishEvent(DerbyLoadEvent.INSTANCE);
             return true;
         } catch (final Throwable t) {
-            LogUtil.FATAL_LOG
-                    .error("Fail to load snapshot, path={}, file list={}, {}.", readerPath, reader.listFiles(), t);
+            LOGGER.error("Fail to load snapshot, path={}, file list={}, {}.", readerPath, reader.listFiles(), t);
             return false;
         } finally {
             lock.unlock();
-            TimerContext.end(DERBY_SNAPSHOT_LOAD, LogUtil.FATAL_LOG);
+            TimerContext.end(DERBY_SNAPSHOT_LOAD, LOGGER);
         }
     }
     
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/DistributedDatabaseOperateImpl.java b/core/src/main/java/com/alibaba/nacos/core/persistence/DistributedDatabaseOperateImpl.java
similarity index 79%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/DistributedDatabaseOperateImpl.java
rename to core/src/main/java/com/alibaba/nacos/core/persistence/DistributedDatabaseOperateImpl.java
index b62dc4a623..ba01e081a7 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/DistributedDatabaseOperateImpl.java
+++ b/core/src/main/java/com/alibaba/nacos/core/persistence/DistributedDatabaseOperateImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository.embedded;
+package com.alibaba.nacos.core.persistence;
 
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.exception.runtime.NacosRuntimeException;
@@ -25,27 +25,10 @@ import com.alibaba.nacos.common.notify.Event;
 import com.alibaba.nacos.common.notify.NotifyCenter;
 import com.alibaba.nacos.common.notify.listener.Subscriber;
 import com.alibaba.nacos.common.utils.ExceptionUtil;
-import com.alibaba.nacos.common.utils.JacksonUtils;
 import com.alibaba.nacos.common.utils.LoggerUtils;
 import com.alibaba.nacos.common.utils.MD5Utils;
 import com.alibaba.nacos.common.utils.Preconditions;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionDistributedEmbedStorage;
-import com.alibaba.nacos.config.server.constant.Constants;
-import com.alibaba.nacos.config.server.exception.NJdbcException;
-import com.alibaba.nacos.config.server.model.event.ConfigDumpEvent;
-import com.alibaba.nacos.config.server.model.event.DerbyLoadEvent;
-import com.alibaba.nacos.config.server.model.event.RaftDbErrorEvent;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
-import com.alibaba.nacos.config.server.service.datasource.LocalDataSourceServiceImpl;
-import com.alibaba.nacos.config.server.service.dump.DumpConfigHandler;
-import com.alibaba.nacos.config.server.service.repository.RowMapperManager;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
-import com.alibaba.nacos.config.server.service.sql.ModifyRequest;
-import com.alibaba.nacos.config.server.service.sql.QueryType;
-import com.alibaba.nacos.config.server.service.sql.SelectRequest;
-import com.alibaba.nacos.config.server.utils.ConfigExecutor;
-import com.alibaba.nacos.config.server.utils.LogUtil;
 import com.alibaba.nacos.consistency.SerializeFactory;
 import com.alibaba.nacos.consistency.Serializer;
 import com.alibaba.nacos.consistency.cp.CPProtocol;
@@ -58,9 +41,26 @@ import com.alibaba.nacos.consistency.snapshot.SnapshotOperation;
 import com.alibaba.nacos.core.cluster.ServerMemberManager;
 import com.alibaba.nacos.core.distributed.ProtocolManager;
 import com.alibaba.nacos.core.utils.ClassUtils;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionDistributedEmbedStorage;
+import com.alibaba.nacos.persistence.constants.PersistenceConstant;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.datasource.LocalDataSourceServiceImpl;
+import com.alibaba.nacos.persistence.exception.NJdbcException;
+import com.alibaba.nacos.persistence.model.event.DerbyLoadEvent;
+import com.alibaba.nacos.persistence.model.event.RaftDbErrorEvent;
+import com.alibaba.nacos.persistence.repository.RowMapperManager;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
+import com.alibaba.nacos.persistence.repository.embedded.hook.EmbeddedApplyHook;
+import com.alibaba.nacos.persistence.repository.embedded.hook.EmbeddedApplyHookHolder;
+import com.alibaba.nacos.persistence.repository.embedded.operate.BaseDatabaseOperate;
+import com.alibaba.nacos.persistence.repository.embedded.sql.ModifyRequest;
+import com.alibaba.nacos.persistence.repository.embedded.sql.QueryType;
+import com.alibaba.nacos.persistence.repository.embedded.sql.SelectRequest;
+import com.alibaba.nacos.persistence.utils.PersistenceExecutor;
 import com.alibaba.nacos.sys.utils.DiskUtils;
-import com.alibaba.nacos.core.utils.GenericType;
 import com.google.protobuf.ByteString;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.dao.DataAccessException;
 import org.springframework.dao.DataIntegrityViolationException;
@@ -137,6 +137,8 @@ import java.util.stream.Collectors;
  *               └───────────────────────────────────────────┘
  * </pre>
  *
+ * <p>TODO depend on Member and Cp protocol strongly, Waiting for addition split.
+ *
  * @author <a href="mailto:liaochuntao@live.com">liaochuntao</a>
  */
 @Conditional(ConditionDistributedEmbedStorage.class)
@@ -144,12 +146,14 @@ import java.util.stream.Collectors;
 @SuppressWarnings({"unchecked"})
 public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implements BaseDatabaseOperate {
     
+    private static final Logger LOGGER = LoggerFactory.getLogger(DistributedDatabaseOperateImpl.class);
+    
     /**
      * The data import operation is dedicated key, which ACTS as an identifier.
      */
     private static final String DATA_IMPORT_KEY = "00--0-data_import-0--00";
     
-    private ServerMemberManager memberManager;
+    private final ServerMemberManager memberManager;
     
     private CPProtocol protocol;
     
@@ -159,13 +163,13 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
     
     private TransactionTemplate transactionTemplate;
     
-    private Serializer serializer = SerializeFactory.getDefault();
+    private final Serializer serializer = SerializeFactory.getDefault();
     
-    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
     
-    private ReentrantReadWriteLock.ReadLock readLock = lock.readLock();
+    private final ReentrantReadWriteLock.ReadLock readLock = lock.readLock();
     
-    private ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();
+    private final ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();
     
     public DistributedDatabaseOperateImpl(ServerMemberManager memberManager, ProtocolManager protocolManager)
             throws Exception {
@@ -202,11 +206,8 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             }
         });
         
-        NotifyCenter.registerToPublisher(ConfigDumpEvent.class, NotifyCenter.ringBufferSize);
-        NotifyCenter.registerSubscriber(new DumpConfigHandler());
-        
         this.protocol.addRequestProcessors(Collections.singletonList(this));
-        LogUtil.DEFAULT_LOG.info("use DistributedTransactionServicesImpl");
+        LOGGER.info("use DistributedTransactionServicesImpl");
     }
     
     @JustForTest
@@ -217,14 +218,14 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
     @Override
     public <R> R queryOne(String sql, Class<R> cls) {
         try {
-            LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "queryOne info : sql : {}", sql);
+            LoggerUtils.printIfDebugEnabled(LOGGER, "queryOne info : sql : {}", sql);
             
             byte[] data = serializer.serialize(
                     SelectRequest.builder().queryType(QueryType.QUERY_ONE_NO_MAPPER_NO_ARGS).sql(sql)
                             .className(cls.getCanonicalName()).build());
             
-            final boolean blockRead = EmbeddedStorageContextUtils
-                    .containsExtendInfo(Constants.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
+            final boolean blockRead = EmbeddedStorageContextHolder
+                    .containsExtendInfo(PersistenceConstant.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
             
             Response response = innerRead(
                     ReadRequest.newBuilder().setGroup(group()).setData(ByteString.copyFrom(data)).build(), blockRead);
@@ -233,7 +234,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             }
             throw new NJdbcException(response.getErrMsg(), response.getErrMsg());
         } catch (Exception e) {
-            LogUtil.FATAL_LOG.error("An exception occurred during the query operation : {}", e.toString());
+            LOGGER.error("An exception occurred during the query operation : {}", e.toString());
             throw new NacosRuntimeException(NacosException.SERVER_ERROR, e.toString());
         }
     }
@@ -241,14 +242,14 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
     @Override
     public <R> R queryOne(String sql, Object[] args, Class<R> cls) {
         try {
-            LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "queryOne info : sql : {}, args : {}", sql, args);
+            LoggerUtils.printIfDebugEnabled(LOGGER, "queryOne info : sql : {}, args : {}", sql, args);
             
             byte[] data = serializer.serialize(
                     SelectRequest.builder().queryType(QueryType.QUERY_ONE_NO_MAPPER_WITH_ARGS).sql(sql).args(args)
                             .className(cls.getCanonicalName()).build());
             
-            final boolean blockRead = EmbeddedStorageContextUtils
-                    .containsExtendInfo(Constants.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
+            final boolean blockRead = EmbeddedStorageContextHolder
+                    .containsExtendInfo(PersistenceConstant.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
             
             Response response = innerRead(
                     ReadRequest.newBuilder().setGroup(group()).setData(ByteString.copyFrom(data)).build(), blockRead);
@@ -257,7 +258,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             }
             throw new NJdbcException(response.getErrMsg(), response.getErrMsg());
         } catch (Exception e) {
-            LogUtil.FATAL_LOG.error("An exception occurred during the query operation : {}", e.toString());
+            LOGGER.error("An exception occurred during the query operation : {}", e.toString());
             throw new NacosRuntimeException(NacosException.SERVER_ERROR, e.toString());
         }
     }
@@ -265,14 +266,14 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
     @Override
     public <R> R queryOne(String sql, Object[] args, RowMapper<R> mapper) {
         try {
-            LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "queryOne info : sql : {}, args : {}", sql, args);
+            LoggerUtils.printIfDebugEnabled(LOGGER, "queryOne info : sql : {}, args : {}", sql, args);
             
             byte[] data = serializer.serialize(
                     SelectRequest.builder().queryType(QueryType.QUERY_ONE_WITH_MAPPER_WITH_ARGS).sql(sql).args(args)
                             .className(mapper.getClass().getCanonicalName()).build());
             
-            final boolean blockRead = EmbeddedStorageContextUtils
-                    .containsExtendInfo(Constants.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
+            final boolean blockRead = EmbeddedStorageContextHolder
+                    .containsExtendInfo(PersistenceConstant.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
             
             Response response = innerRead(
                     ReadRequest.newBuilder().setGroup(group()).setData(ByteString.copyFrom(data)).build(), blockRead);
@@ -282,7 +283,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             }
             throw new NJdbcException(response.getErrMsg(), response.getErrMsg());
         } catch (Exception e) {
-            LogUtil.FATAL_LOG.error("An exception occurred during the query operation : {}", e.toString());
+            LOGGER.error("An exception occurred during the query operation : {}", e.toString());
             throw new NacosRuntimeException(NacosException.SERVER_ERROR, e.toString());
         }
     }
@@ -290,14 +291,14 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
     @Override
     public <R> List<R> queryMany(String sql, Object[] args, RowMapper<R> mapper) {
         try {
-            LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "queryMany info : sql : {}, args : {}", sql, args);
+            LoggerUtils.printIfDebugEnabled(LOGGER, "queryMany info : sql : {}, args : {}", sql, args);
             
             byte[] data = serializer.serialize(
                     SelectRequest.builder().queryType(QueryType.QUERY_MANY_WITH_MAPPER_WITH_ARGS).sql(sql).args(args)
                             .className(mapper.getClass().getCanonicalName()).build());
             
-            final boolean blockRead = EmbeddedStorageContextUtils
-                    .containsExtendInfo(Constants.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
+            final boolean blockRead = EmbeddedStorageContextHolder
+                    .containsExtendInfo(PersistenceConstant.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
             
             Response response = innerRead(
                     ReadRequest.newBuilder().setGroup(group()).setData(ByteString.copyFrom(data)).build(), blockRead);
@@ -306,7 +307,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             }
             throw new NJdbcException(response.getErrMsg());
         } catch (Exception e) {
-            LogUtil.FATAL_LOG.error("An exception occurred during the query operation : {}", e.toString());
+            LOGGER.error("An exception occurred during the query operation : {}", e.toString());
             throw new NacosRuntimeException(NacosException.SERVER_ERROR, e.toString());
         }
     }
@@ -314,14 +315,14 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
     @Override
     public <R> List<R> queryMany(String sql, Object[] args, Class<R> rClass) {
         try {
-            LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "queryMany info : sql : {}, args : {}", sql, args);
+            LoggerUtils.printIfDebugEnabled(LOGGER, "queryMany info : sql : {}, args : {}", sql, args);
             
             byte[] data = serializer.serialize(
                     SelectRequest.builder().queryType(QueryType.QUERY_MANY_NO_MAPPER_WITH_ARGS).sql(sql).args(args)
                             .className(rClass.getCanonicalName()).build());
             
-            final boolean blockRead = EmbeddedStorageContextUtils
-                    .containsExtendInfo(Constants.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
+            final boolean blockRead = EmbeddedStorageContextHolder
+                    .containsExtendInfo(PersistenceConstant.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
             
             Response response = innerRead(
                     ReadRequest.newBuilder().setGroup(group()).setData(ByteString.copyFrom(data)).build(), blockRead);
@@ -330,7 +331,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             }
             throw new NJdbcException(response.getErrMsg());
         } catch (Exception e) {
-            LogUtil.FATAL_LOG.error("An exception occurred during the query operation : {}", e.toString());
+            LOGGER.error("An exception occurred during the query operation : {}", e.toString());
             throw new NacosRuntimeException(NacosException.SERVER_ERROR, e.toString());
         }
     }
@@ -338,14 +339,14 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
     @Override
     public List<Map<String, Object>> queryMany(String sql, Object[] args) {
         try {
-            LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "queryMany info : sql : {}, args : {}", sql, args);
+            LoggerUtils.printIfDebugEnabled(LOGGER, "queryMany info : sql : {}, args : {}", sql, args);
             
             byte[] data = serializer.serialize(
                     SelectRequest.builder().queryType(QueryType.QUERY_MANY_WITH_LIST_WITH_ARGS).sql(sql).args(args)
                             .build());
             
-            final boolean blockRead = EmbeddedStorageContextUtils
-                    .containsExtendInfo(Constants.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
+            final boolean blockRead = EmbeddedStorageContextHolder
+                    .containsExtendInfo(PersistenceConstant.EXTEND_NEED_READ_UNTIL_HAVE_DATA);
             
             Response response = innerRead(
                     ReadRequest.newBuilder().setGroup(group()).setData(ByteString.copyFrom(data)).build(), blockRead);
@@ -354,7 +355,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             }
             throw new NJdbcException(response.getErrMsg());
         } catch (Exception e) {
-            LogUtil.FATAL_LOG.error("An exception occurred during the query operation : {}", e.toString());
+            LOGGER.error("An exception occurred during the query operation : {}", e.toString());
             throw new NacosRuntimeException(NacosException.SERVER_ERROR, e.toString());
         }
     }
@@ -390,9 +391,10 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
                     if (submit) {
                         List<ModifyRequest> requests = batchUpdate.stream().map(ModifyRequest::new)
                                 .collect(Collectors.toList());
-                        CompletableFuture<Response> future = protocol.writeAsync(WriteRequest.newBuilder().setGroup(group())
-                                .setData(ByteString.copyFrom(serializer.serialize(requests)))
-                                .putExtendInfo(DATA_IMPORT_KEY, Boolean.TRUE.toString()).build());
+                        CompletableFuture<Response> future = protocol.writeAsync(
+                                WriteRequest.newBuilder().setGroup(group())
+                                        .setData(ByteString.copyFrom(serializer.serialize(requests)))
+                                        .putExtendInfo(DATA_IMPORT_KEY, Boolean.TRUE.toString()).build());
                         futures.add(future);
                         batchUpdate.clear();
                     }
@@ -406,7 +408,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
                 }
                 return RestResultUtils.success();
             } catch (Throwable ex) {
-                LogUtil.DEFAULT_LOG.error("data import has error :", ex);
+                LOGGER.error("data import has error :", ex);
                 return RestResultUtils.failed(ex.getMessage());
             }
         });
@@ -420,23 +422,23 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             // array elements are not lost, the serialization here is done using the java-specific
             // serialization framework, rather than continuing with the protobuff
             
-            LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "modifyRequests info : {}", sqlContext);
+            LoggerUtils.printIfDebugEnabled(LOGGER, "modifyRequests info : {}", sqlContext);
             
             // {timestamp}-{group}-{ip:port}-{signature}
             
             final String key =
                     System.currentTimeMillis() + "-" + group() + "-" + memberManager.getSelf().getAddress() + "-"
-                            + MD5Utils.md5Hex(sqlContext.toString(), Constants.ENCODE);
+                            + MD5Utils.md5Hex(sqlContext.toString(), PersistenceConstant.DEFAULT_ENCODE);
             WriteRequest request = WriteRequest.newBuilder().setGroup(group()).setKey(key)
                     .setData(ByteString.copyFrom(serializer.serialize(sqlContext)))
-                    .putAllExtendInfo(EmbeddedStorageContextUtils.getCurrentExtendInfo())
+                    .putAllExtendInfo(EmbeddedStorageContextHolder.getCurrentExtendInfo())
                     .setType(sqlContext.getClass().getCanonicalName()).build();
             if (Objects.isNull(consumer)) {
                 Response response = this.protocol.write(request);
                 if (response.getSuccess()) {
                     return true;
                 }
-                LogUtil.DEFAULT_LOG.error("execute sql modify operation failed : {}", response.getErrMsg());
+                LOGGER.error("execute sql modify operation failed : {}", response.getErrMsg());
                 return false;
             } else {
                 this.protocol.writeAsync(request).whenComplete((BiConsumer<Response, Throwable>) (response, ex) -> {
@@ -447,10 +449,10 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             }
             return true;
         } catch (TimeoutException e) {
-            LogUtil.FATAL_LOG.error("An timeout exception occurred during the update operation");
+            LOGGER.error("An timeout exception occurred during the update operation");
             throw new NacosRuntimeException(NacosException.SERVER_ERROR, e.toString());
         } catch (Throwable e) {
-            LogUtil.FATAL_LOG.error("An exception occurred during the update operation : {}", e);
+            LOGGER.error("An exception occurred during the update operation : {}", e);
             throw new NacosRuntimeException(NacosException.SERVER_ERROR, e.toString());
         }
     }
@@ -466,7 +468,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
         final SelectRequest selectRequest = serializer
                 .deserialize(request.getData().toByteArray(), SelectRequest.class);
         
-        LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "getData info : selectRequest : {}", selectRequest);
+        LoggerUtils.printIfDebugEnabled(LOGGER, "getData info : selectRequest : {}", selectRequest);
         
         final RowMapper<Object> mapper = RowMapperManager.getRowMapper(selectRequest.getClassName());
         final byte type = selectRequest.getQueryType();
@@ -501,8 +503,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
             ByteString bytes = data == null ? ByteString.EMPTY : ByteString.copyFrom(serializer.serialize(data));
             return Response.newBuilder().setSuccess(true).setData(bytes).build();
         } catch (Exception e) {
-            LogUtil.FATAL_LOG.error("There was an error querying the data, request : {}, error : {}", selectRequest,
-                    e.toString());
+            LOGGER.error("There was an error querying the data, request : {}, error : {}", selectRequest, e.toString());
             return Response.newBuilder().setSuccess(false)
                     .setErrMsg(ClassUtils.getSimplaName(e) + ":" + ExceptionUtil.getCause(e).getMessage()).build();
         } finally {
@@ -512,7 +513,7 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
     
     @Override
     public Response onApply(WriteRequest log) {
-        LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "onApply info : log : {}", log);
+        LoggerUtils.printIfDebugEnabled(LOGGER, "onApply info : log : {}", log);
         final ByteString byteString = log.getData();
         Preconditions.checkArgument(byteString != null, "Log.getData() must not null");
         List<ModifyRequest> sqlContext = serializer.deserialize(byteString.toByteArray(), List.class);
@@ -528,7 +529,11 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
                 // If there is additional information, post processing
                 // Put into the asynchronous thread pool for processing to avoid blocking the
                 // normal execution of the state machine
-                ConfigExecutor.executeEmbeddedDump(() -> handleExtendInfo(log.getExtendInfoMap()));
+                PersistenceExecutor.executeEmbeddedDump(() -> {
+                    for (EmbeddedApplyHook each : EmbeddedApplyHookHolder.getInstance().getAllHooks()) {
+                        each.afterApply(log);
+                    }
+                });
             }
             
             return Response.newBuilder().setSuccess(isOk).build();
@@ -552,24 +557,6 @@ public class DistributedDatabaseOperateImpl extends RequestProcessor4CP implemen
     
     @Override
     public String group() {
-        return Constants.CONFIG_MODEL_RAFT_GROUP;
-    }
-    
-    private void handleExtendInfo(Map<String, String> extendInfo) {
-        if (extendInfo.containsKey(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT)) {
-            String jsonVal = extendInfo.get(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT);
-            if (StringUtils.isNotBlank(jsonVal)) {
-                NotifyCenter.publishEvent(JacksonUtils.toObj(jsonVal, ConfigDumpEvent.class));
-            }
-            return;
-        }
-        if (extendInfo.containsKey(Constants.EXTEND_INFOS_CONFIG_DUMP_EVENT)) {
-            String jsonVal = extendInfo.get(Constants.EXTEND_INFO_CONFIG_DUMP_EVENT);
-            if (StringUtils.isNotBlank(jsonVal)) {
-                List<ConfigDumpEvent> list = JacksonUtils.toObj(jsonVal, new GenericType<List<ConfigDumpEvent>>() {
-                }.getType());
-                list.stream().filter(Objects::nonNull).forEach(NotifyCenter::publishEvent);
-            }
-        }
+        return PersistenceConstant.CONFIG_MODEL_RAFT_GROUP;
     }
 }
diff --git a/console/src/main/java/com/alibaba/nacos/console/service/NamespaceOperationService.java b/core/src/main/java/com/alibaba/nacos/core/service/NamespaceOperationService.java
similarity index 59%
rename from console/src/main/java/com/alibaba/nacos/console/service/NamespaceOperationService.java
rename to core/src/main/java/com/alibaba/nacos/core/service/NamespaceOperationService.java
index 199261eff1..47ec6e4436 100644
--- a/console/src/main/java/com/alibaba/nacos/console/service/NamespaceOperationService.java
+++ b/core/src/main/java/com/alibaba/nacos/core/service/NamespaceOperationService.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2022 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,19 +14,18 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.console.service;
+package com.alibaba.nacos.core.service;
 
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.exception.api.NacosApiException;
 import com.alibaba.nacos.api.model.v2.ErrorCode;
 import com.alibaba.nacos.common.utils.NamespaceUtil;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.model.TenantInfo;
-import com.alibaba.nacos.config.server.service.repository.CommonPersistService;
-import com.alibaba.nacos.config.server.service.repository.ConfigInfoPersistService;
-import com.alibaba.nacos.console.enums.NamespaceTypeEnum;
-import com.alibaba.nacos.console.model.Namespace;
-import com.alibaba.nacos.console.model.NamespaceAllInfo;
+import com.alibaba.nacos.core.namespace.injector.NamespaceDetailInjectorHolder;
+import com.alibaba.nacos.core.namespace.model.Namespace;
+import com.alibaba.nacos.core.namespace.model.NamespaceTypeEnum;
+import com.alibaba.nacos.core.namespace.model.TenantInfo;
+import com.alibaba.nacos.core.namespace.repository.NamespacePersistService;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Service;
 
@@ -43,9 +42,7 @@ import java.util.List;
 @Service
 public class NamespaceOperationService {
     
-    private final ConfigInfoPersistService configInfoPersistService;
-    
-    private final CommonPersistService commonPersistService;
+    private final NamespacePersistService namespacePersistService;
     
     private static final String DEFAULT_NAMESPACE = "public";
     
@@ -57,29 +54,26 @@ public class NamespaceOperationService {
     
     private static final String DEFAULT_CREATE_SOURCE = "nacos";
     
-    private static final String DEFAULT_TENANT = "";
-    
     private static final String DEFAULT_KP = "1";
     
-    public NamespaceOperationService(ConfigInfoPersistService configInfoPersistService,
-            CommonPersistService commonPersistService) {
-        this.configInfoPersistService = configInfoPersistService;
-        this.commonPersistService = commonPersistService;
+    public NamespaceOperationService(NamespacePersistService namespacePersistService) {
+        this.namespacePersistService = namespacePersistService;
     }
     
     public List<Namespace> getNamespaceList() {
         // TODO 获取用kp
-        List<TenantInfo> tenantInfos = commonPersistService.findTenantByKp(DEFAULT_KP);
+        List<TenantInfo> tenantInfos = namespacePersistService.findTenantByKp(DEFAULT_KP);
         
-        Namespace namespace0 = new Namespace(NamespaceUtil.getNamespaceDefaultId(), DEFAULT_NAMESPACE, DEFAULT_QUOTA,
-                configInfoPersistService.configInfoCount(DEFAULT_TENANT), NamespaceTypeEnum.GLOBAL.getType());
+        Namespace namespace0 = new Namespace(NamespaceUtil.getNamespaceDefaultId(), DEFAULT_NAMESPACE, DEFAULT_QUOTA, 0,
+                NamespaceTypeEnum.GLOBAL.getType());
+        NamespaceDetailInjectorHolder.getInstance().injectDetail(namespace0);
         List<Namespace> namespaceList = new ArrayList<>();
         namespaceList.add(namespace0);
         
         for (TenantInfo tenantInfo : tenantInfos) {
-            int configCount = configInfoPersistService.configInfoCount(tenantInfo.getTenantId());
             Namespace namespaceTmp = new Namespace(tenantInfo.getTenantId(), tenantInfo.getTenantName(),
-                    tenantInfo.getTenantDesc(), DEFAULT_QUOTA, configCount, NamespaceTypeEnum.CUSTOM.getType());
+                    tenantInfo.getTenantDesc(), DEFAULT_QUOTA, 0, NamespaceTypeEnum.CUSTOM.getType());
+            NamespaceDetailInjectorHolder.getInstance().injectDetail(namespaceTmp);
             namespaceList.add(namespaceTmp);
         }
         return namespaceList;
@@ -89,24 +83,26 @@ public class NamespaceOperationService {
      * query namespace by namespace id.
      *
      * @param namespaceId namespace Id.
-     * @return NamespaceAllInfo.
+     * @return Namespace.
      */
-    public NamespaceAllInfo getNamespace(String namespaceId) throws NacosException {
+    public Namespace getNamespace(String namespaceId) throws NacosException {
         // TODO 获取用kp
+        Namespace result;
         if (StringUtils.isBlank(namespaceId) || namespaceId.equals(NamespaceUtil.getNamespaceDefaultId())) {
-            return new NamespaceAllInfo(namespaceId, DEFAULT_NAMESPACE_SHOW_NAME, DEFAULT_QUOTA,
-                    configInfoPersistService.configInfoCount(DEFAULT_TENANT), NamespaceTypeEnum.GLOBAL.getType(),
-                    DEFAULT_NAMESPACE_DESCRIPTION);
+            result = new Namespace(namespaceId, DEFAULT_NAMESPACE_SHOW_NAME, DEFAULT_NAMESPACE_DESCRIPTION,
+                    DEFAULT_QUOTA, 0, NamespaceTypeEnum.GLOBAL.getType());
+            
         } else {
-            TenantInfo tenantInfo = commonPersistService.findTenantByKp(DEFAULT_KP, namespaceId);
+            TenantInfo tenantInfo = namespacePersistService.findTenantByKp(DEFAULT_KP, namespaceId);
             if (null == tenantInfo) {
                 throw new NacosApiException(HttpStatus.NOT_FOUND.value(), ErrorCode.NAMESPACE_NOT_EXIST,
                         "namespaceId [ " + namespaceId + " ] not exist");
             }
-            int configCount = configInfoPersistService.configInfoCount(namespaceId);
-            return new NamespaceAllInfo(namespaceId, tenantInfo.getTenantName(), DEFAULT_QUOTA, configCount,
-                    NamespaceTypeEnum.CUSTOM.getType(), tenantInfo.getTenantDesc());
+            result = new Namespace(namespaceId, tenantInfo.getTenantName(), tenantInfo.getTenantDesc(), DEFAULT_QUOTA,
+                    0, NamespaceTypeEnum.CUSTOM.getType());
         }
+        NamespaceDetailInjectorHolder.getInstance().injectDetail(result);
+        return result;
     }
     
     /**
@@ -120,12 +116,12 @@ public class NamespaceOperationService {
     public Boolean createNamespace(String namespaceId, String namespaceName, String namespaceDesc)
             throws NacosException {
         // TODO 获取用kp
-        if (commonPersistService.tenantInfoCountByTenantId(namespaceId) > 0) {
+        if (namespacePersistService.tenantInfoCountByTenantId(namespaceId) > 0) {
             throw new NacosApiException(HttpStatus.INTERNAL_SERVER_ERROR.value(), ErrorCode.NAMESPACE_ALREADY_EXIST,
                     "namespaceId [" + namespaceId + "] already exist");
         }
-    
-        commonPersistService
+        
+        namespacePersistService
                 .insertTenantInfoAtomic(DEFAULT_KP, namespaceId, namespaceName, namespaceDesc, DEFAULT_CREATE_SOURCE,
                         System.currentTimeMillis());
         return true;
@@ -136,7 +132,7 @@ public class NamespaceOperationService {
      */
     public Boolean editNamespace(String namespaceId, String namespaceName, String namespaceDesc) {
         // TODO 获取用kp
-        commonPersistService.updateTenantNameAtomic(DEFAULT_KP, namespaceId, namespaceName, namespaceDesc);
+        namespacePersistService.updateTenantNameAtomic(DEFAULT_KP, namespaceId, namespaceName, namespaceDesc);
         return true;
     }
     
@@ -144,7 +140,7 @@ public class NamespaceOperationService {
      * remove namespace.
      */
     public Boolean removeNamespace(String namespaceId) {
-        commonPersistService.removeTenantInfoAtomic(DEFAULT_KP, namespaceId);
+        namespacePersistService.removeTenantInfoAtomic(DEFAULT_KP, namespaceId);
         return true;
     }
 }
diff --git a/istio/src/main/java/com/alibaba/nacos/istio/config/IstioEnabledFilter.java b/istio/src/main/java/com/alibaba/nacos/istio/config/IstioEnabledFilter.java
new file mode 100644
index 0000000000..0f2a4105a9
--- /dev/null
+++ b/istio/src/main/java/com/alibaba/nacos/istio/config/IstioEnabledFilter.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.istio.config;
+
+import com.alibaba.nacos.common.utils.StringUtils;
+import com.alibaba.nacos.istio.IstioApp;
+import com.alibaba.nacos.sys.env.EnvUtil;
+import com.alibaba.nacos.sys.filter.NacosPackageExcludeFilter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Set;
+
+import static com.alibaba.nacos.sys.env.EnvUtil.FUNCTION_MODE_NAMING;
+
+/**
+ * Istio module enabled filter by spring packages scan.
+ *
+ * @author xiweng.yy
+ */
+public class IstioEnabledFilter implements NacosPackageExcludeFilter {
+    
+    private static final Logger LOGGER = LoggerFactory.getLogger(IstioEnabledFilter.class);
+    
+    private static final String ISTIO_ENABLED_KEY = "nacos.extension.naming.istio.enabled";
+    
+    @Override
+    public String getResponsiblePackagePrefix() {
+        return IstioApp.class.getPackage().getName();
+    }
+    
+    @Override
+    public boolean isExcluded(String className, Set<String> annotationNames) {
+        String functionMode = EnvUtil.getFunctionMode();
+        // When not specified naming mode or specified all mode, the naming module not start and load.
+        if (isNamingDisabled(functionMode)) {
+            LOGGER.warn("Istio module disabled because function mode is {}, and Istio depend naming module",
+                    functionMode);
+            return true;
+        }
+        boolean istioDisabled = !EnvUtil.getProperty(ISTIO_ENABLED_KEY, Boolean.class, false);
+        if (istioDisabled) {
+            LOGGER.warn("Istio module disabled because set {} as false", ISTIO_ENABLED_KEY);
+        }
+        return istioDisabled;
+    }
+    
+    private boolean isNamingDisabled(String functionMode) {
+        if (StringUtils.isEmpty(functionMode)) {
+            return false;
+        }
+        return !FUNCTION_MODE_NAMING.equals(functionMode);
+    }
+}
diff --git a/naming/src/main/java/com/alibaba/nacos/naming/cluster/NamingReadinessCheckService.java b/naming/src/main/java/com/alibaba/nacos/naming/cluster/NamingReadinessCheckService.java
new file mode 100644
index 0000000000..d2478d95a6
--- /dev/null
+++ b/naming/src/main/java/com/alibaba/nacos/naming/cluster/NamingReadinessCheckService.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.naming.cluster;
+
+import com.alibaba.nacos.api.common.Constants;
+import com.alibaba.nacos.core.cluster.health.AbstractModuleHealthChecker;
+import com.alibaba.nacos.core.utils.Loggers;
+import org.springframework.stereotype.Service;
+
+/**
+ * Readiness check service for config module.
+ *
+ * @author xiweng.yy
+ */
+@Service
+public class NamingReadinessCheckService extends AbstractModuleHealthChecker {
+    
+    private final ServerStatusManager serverStatusManager;
+    
+    public NamingReadinessCheckService(ServerStatusManager serverStatusManager) {
+        this.serverStatusManager = serverStatusManager;
+    }
+    
+    @Override
+    public boolean readiness() {
+        try {
+            return ServerStatus.UP.equals(serverStatusManager.getServerStatus());
+        } catch (Exception e) {
+            Loggers.CLUSTER.error("Naming health check fail.", e);
+        }
+        return false;
+    }
+    
+    @Override
+    public String getModuleName() {
+        return Constants.Naming.NAMING_MODULE;
+    }
+}
diff --git a/naming/src/main/java/com/alibaba/nacos/naming/config/NamingEnabledFilter.java b/naming/src/main/java/com/alibaba/nacos/naming/config/NamingEnabledFilter.java
new file mode 100644
index 0000000000..690272166e
--- /dev/null
+++ b/naming/src/main/java/com/alibaba/nacos/naming/config/NamingEnabledFilter.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.naming.config;
+
+import com.alibaba.nacos.common.utils.StringUtils;
+import com.alibaba.nacos.naming.NamingApp;
+import com.alibaba.nacos.sys.env.EnvUtil;
+import com.alibaba.nacos.sys.filter.NacosPackageExcludeFilter;
+
+import java.util.Set;
+
+import static com.alibaba.nacos.sys.env.EnvUtil.FUNCTION_MODE_NAMING;
+
+/**
+ * Naming module enabled filter by spring packages scan.
+ *
+ * @author xiweng.yy
+ */
+public class NamingEnabledFilter implements NacosPackageExcludeFilter {
+    
+    @Override
+    public String getResponsiblePackagePrefix() {
+        return NamingApp.class.getPackage().getName();
+    }
+    
+    @Override
+    public boolean isExcluded(String className, Set<String> annotationNames) {
+        String functionMode = EnvUtil.getFunctionMode();
+        // When not specified naming mode or specified all mode, the naming module not start and load.
+        if (StringUtils.isEmpty(functionMode)) {
+            return false;
+        }
+        return !FUNCTION_MODE_NAMING.equals(functionMode);
+    }
+}
diff --git a/naming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/impl/AbstractSnapshotOperation.java b/naming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/impl/AbstractSnapshotOperation.java
index e455ecc2ff..ec5c7f46ec 100644
--- a/naming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/impl/AbstractSnapshotOperation.java
+++ b/naming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/impl/AbstractSnapshotOperation.java
@@ -20,7 +20,7 @@ import com.alibaba.nacos.consistency.snapshot.Reader;
 import com.alibaba.nacos.consistency.snapshot.SnapshotOperation;
 import com.alibaba.nacos.consistency.snapshot.Writer;
 import com.alibaba.nacos.core.distributed.raft.utils.RaftExecutor;
-import com.alibaba.nacos.core.utils.TimerContext;
+import com.alibaba.nacos.sys.utils.TimerContext;
 import com.alibaba.nacos.naming.misc.Loggers;
 
 import java.util.concurrent.locks.Lock;
diff --git a/naming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/impl/NamingKvStorage.java b/naming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/impl/NamingKvStorage.java
index ec82e20b4f..a3b0c0f769 100644
--- a/naming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/impl/NamingKvStorage.java
+++ b/naming/src/main/java/com/alibaba/nacos/naming/consistency/persistent/impl/NamingKvStorage.java
@@ -21,7 +21,7 @@ import com.alibaba.nacos.core.exception.KvStorageException;
 import com.alibaba.nacos.core.storage.StorageFactory;
 import com.alibaba.nacos.core.storage.kv.KvStorage;
 import com.alibaba.nacos.core.storage.kv.MemoryKvStorage;
-import com.alibaba.nacos.core.utils.TimerContext;
+import com.alibaba.nacos.sys.utils.TimerContext;
 import com.alibaba.nacos.naming.misc.Loggers;
 
 import java.util.HashMap;
diff --git a/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/DatasourceConfiguration.java b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/DatasourceConfiguration.java
new file mode 100644
index 0000000000..7ce6135e3b
--- /dev/null
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/DatasourceConfiguration.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.persistence.configuration;
+
+import com.alibaba.nacos.persistence.constants.PersistenceConstant;
+import com.alibaba.nacos.persistence.utils.DatasourcePlatformUtil;
+import com.alibaba.nacos.sys.env.EnvUtil;
+import org.springframework.context.ApplicationContextInitializer;
+import org.springframework.context.ConfigurableApplicationContext;
+
+/**
+ * Configuration about datasource.
+ *
+ * @author xiweng.yy
+ */
+public class DatasourceConfiguration implements ApplicationContextInitializer<ConfigurableApplicationContext> {
+    
+    /**
+     * Standalone mode uses DB.
+     */
+    public static boolean useExternalDB = false;
+    
+    /**
+     * Inline storage value = ${nacos.standalone}.
+     */
+    public static boolean embeddedStorage = EnvUtil.getStandaloneMode();
+    
+    public static boolean isUseExternalDB() {
+        return useExternalDB;
+    }
+    
+    public static void setUseExternalDB(boolean useExternalDB) {
+        DatasourceConfiguration.useExternalDB = useExternalDB;
+    }
+    
+    public static boolean isEmbeddedStorage() {
+        return embeddedStorage;
+    }
+    
+    public static void setEmbeddedStorage(boolean embeddedStorage) {
+        DatasourceConfiguration.embeddedStorage = embeddedStorage;
+    }
+    
+    private void loadDatasourceConfiguration() {
+        // External data sources are used by default in cluster mode
+        String platform = DatasourcePlatformUtil.getDatasourcePlatform("");
+        boolean useExternalStorage =
+                !PersistenceConstant.EMPTY_DATASOURCE_PLATFORM.equalsIgnoreCase(platform) && !PersistenceConstant.DERBY
+                        .equalsIgnoreCase(platform);
+        setUseExternalDB(useExternalStorage);
+        
+        // must initialize after setUseExternalDB
+        // This value is true in stand-alone mode and false in cluster mode
+        // If this value is set to true in cluster mode, nacos's distributed storage engine is turned on
+        // default value is depend on ${nacos.standalone}
+        
+        if (isUseExternalDB()) {
+            setEmbeddedStorage(false);
+        } else {
+            boolean embeddedStorage = isEmbeddedStorage() || Boolean.getBoolean(PersistenceConstant.EMBEDDED_STORAGE);
+            setEmbeddedStorage(embeddedStorage);
+            
+            // If the embedded data source storage is not turned on, it is automatically
+            // upgraded to the external data source storage, as before
+            if (!embeddedStorage) {
+                setUseExternalDB(true);
+            }
+        }
+    }
+    
+    @Override
+    public void initialize(final ConfigurableApplicationContext applicationContext) {
+        loadDatasourceConfiguration();
+    }
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionDistributedEmbedStorage.java b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionDistributedEmbedStorage.java
similarity index 79%
rename from config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionDistributedEmbedStorage.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionDistributedEmbedStorage.java
index cc545f7cc3..e1144ce590 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionDistributedEmbedStorage.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionDistributedEmbedStorage.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.configuration;
+package com.alibaba.nacos.persistence.configuration.condition;
 
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import org.springframework.context.annotation.Condition;
 import org.springframework.context.annotation.ConditionContext;
@@ -31,6 +31,6 @@ public class ConditionDistributedEmbedStorage implements Condition {
     
     @Override
     public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
-        return PropertyUtil.isEmbeddedStorage() && !EnvUtil.getStandaloneMode();
+        return DatasourceConfiguration.isEmbeddedStorage() && !EnvUtil.getStandaloneMode();
     }
 }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionOnEmbeddedStorage.java b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionOnEmbeddedStorage.java
similarity index 80%
rename from config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionOnEmbeddedStorage.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionOnEmbeddedStorage.java
index b244bb34a5..5cab65bcef 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionOnEmbeddedStorage.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionOnEmbeddedStorage.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.configuration;
+package com.alibaba.nacos.persistence.configuration.condition;
 
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
 import org.springframework.context.annotation.Condition;
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.core.type.AnnotatedTypeMetadata;
@@ -30,6 +30,6 @@ public class ConditionOnEmbeddedStorage implements Condition {
     
     @Override
     public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
-        return PropertyUtil.isEmbeddedStorage();
+        return DatasourceConfiguration.isEmbeddedStorage();
     }
 }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionOnExternalStorage.java b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionOnExternalStorage.java
similarity index 80%
rename from config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionOnExternalStorage.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionOnExternalStorage.java
index fbf0012894..a55e037e6f 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionOnExternalStorage.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionOnExternalStorage.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.configuration;
+package com.alibaba.nacos.persistence.configuration.condition;
 
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
 import org.springframework.context.annotation.Condition;
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.core.type.AnnotatedTypeMetadata;
@@ -30,7 +30,7 @@ public class ConditionOnExternalStorage implements Condition {
     
     @Override
     public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
-        return !PropertyUtil.isEmbeddedStorage();
+        return !DatasourceConfiguration.isEmbeddedStorage();
     }
     
 }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionStandaloneEmbedStorage.java b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionStandaloneEmbedStorage.java
similarity index 80%
rename from config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionStandaloneEmbedStorage.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionStandaloneEmbedStorage.java
index 7006cb07c4..095eac65e1 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConditionStandaloneEmbedStorage.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/configuration/condition/ConditionStandaloneEmbedStorage.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.configuration;
+package com.alibaba.nacos.persistence.configuration.condition;
 
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import org.springframework.context.annotation.Condition;
 import org.springframework.context.annotation.ConditionContext;
@@ -32,6 +32,6 @@ public class ConditionStandaloneEmbedStorage implements Condition {
     
     @Override
     public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
-        return PropertyUtil.isEmbeddedStorage() && EnvUtil.getStandaloneMode();
+        return DatasourceConfiguration.isEmbeddedStorage() && EnvUtil.getStandaloneMode();
     }
 }
diff --git a/persistence/src/main/java/com/alibaba/nacos/persistence/constants/PersistenceConstant.java b/persistence/src/main/java/com/alibaba/nacos/persistence/constants/PersistenceConstant.java
new file mode 100644
index 0000000000..60a23dcba8
--- /dev/null
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/constants/PersistenceConstant.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.persistence.constants;
+
+/**
+ * Persistence constant.
+ *
+ * @author xiweng.yy
+ */
+public class PersistenceConstant {
+    
+    public static final String DEFAULT_ENCODE = "UTF-8";
+    
+    /**
+     * May be removed with the upgrade of springboot version.
+     */
+    public static final String DATASOURCE_PLATFORM_PROPERTY_OLD = "spring.datasource.platform";
+    
+    public static final String DATASOURCE_PLATFORM_PROPERTY = "spring.sql.init.platform";
+    
+    public static final String MYSQL = "mysql";
+    
+    public static final String DERBY = "derby";
+    
+    public static final String EMPTY_DATASOURCE_PLATFORM = "";
+    
+    public static final String EMBEDDED_STORAGE = "embeddedStorage";
+    
+    /**
+     * The derby base dir.
+     */
+    public static final String DERBY_BASE_DIR = "derby-data";
+    
+    /**
+     * Specifies that reads wait without timeout.
+     */
+    public static final String EXTEND_NEED_READ_UNTIL_HAVE_DATA = "00--0-read-join-0--00";
+    
+    public static final String CONFIG_MODEL_RAFT_GROUP = "nacos_config";
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/DataSourcePoolProperties.java b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DataSourcePoolProperties.java
similarity index 96%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/datasource/DataSourcePoolProperties.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DataSourcePoolProperties.java
index 119ffdb688..b76afaa728 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/DataSourcePoolProperties.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DataSourcePoolProperties.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2020 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.datasource;
+package com.alibaba.nacos.persistence.datasource;
 
 import com.zaxxer.hikari.HikariDataSource;
 import org.springframework.boot.context.properties.bind.Bindable;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/DataSourceService.java b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DataSourceService.java
similarity index 94%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/datasource/DataSourceService.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DataSourceService.java
index 60b3d92851..2d1ec5d993 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/DataSourceService.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DataSourceService.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.datasource;
+package com.alibaba.nacos.persistence.datasource;
 
 import java.io.IOException;
 
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/DynamicDataSource.java b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java
similarity index 88%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/datasource/DynamicDataSource.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java
index 3a70277baa..b52335656a 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/DynamicDataSource.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/DynamicDataSource.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.datasource;
+package com.alibaba.nacos.persistence.datasource;
 
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
 
 /**
  * Datasource adapter.
@@ -43,7 +43,7 @@ public class DynamicDataSource {
             // Embedded storage is used by default in stand-alone mode
             // In cluster mode, external databases are used by default
             
-            if (PropertyUtil.isEmbeddedStorage()) {
+            if (DatasourceConfiguration.isEmbeddedStorage()) {
                 if (localDataSourceService == null) {
                     localDataSourceService = new LocalDataSourceServiceImpl();
                     localDataSourceService.init();
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceProperties.java b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceProperties.java
similarity index 85%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceProperties.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceProperties.java
index 8d3b493ecb..1da872cdbf 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceProperties.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceProperties.java
@@ -1,22 +1,25 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
- * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.datasource;
+package com.alibaba.nacos.persistence.datasource;
 
+import com.alibaba.nacos.common.utils.CollectionUtils;
 import com.alibaba.nacos.common.utils.Preconditions;
 import com.alibaba.nacos.common.utils.StringUtils;
 import com.zaxxer.hikari.HikariDataSource;
-import org.apache.commons.collections.CollectionUtils;
 import org.springframework.boot.context.properties.bind.Bindable;
 import org.springframework.boot.context.properties.bind.Binder;
 import org.springframework.core.env.Environment;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceServiceImpl.java b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java
similarity index 82%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceServiceImpl.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java
index 5649ef4f4b..962ed466c7 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceServiceImpl.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/ExternalDataSourceServiceImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,17 +14,19 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.datasource;
+package com.alibaba.nacos.persistence.datasource;
 
 import com.alibaba.nacos.common.utils.ConvertUtils;
 import com.alibaba.nacos.common.utils.InternetAddressUtil;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.monitor.MetricsMonitor;
-import com.alibaba.nacos.config.server.utils.ConfigExecutor;
-import com.alibaba.nacos.config.server.utils.DatasourcePlatformUtil;
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
+import com.alibaba.nacos.persistence.monitor.DatasourceMetrics;
+import com.alibaba.nacos.persistence.utils.DatasourcePlatformUtil;
+import com.alibaba.nacos.persistence.utils.PersistenceExecutor;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import com.zaxxer.hikari.HikariDataSource;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.dao.DataAccessException;
 import org.springframework.jdbc.CannotGetJdbcConnectionException;
 import org.springframework.jdbc.core.JdbcTemplate;
@@ -37,10 +39,6 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import static com.alibaba.nacos.config.server.service.repository.RowMapperManager.CONFIG_INFO4BETA_ROW_MAPPER;
-import static com.alibaba.nacos.config.server.utils.LogUtil.DEFAULT_LOG;
-import static com.alibaba.nacos.config.server.utils.LogUtil.FATAL_LOG;
-
 /**
  * Base data source.
  *
@@ -48,6 +46,8 @@ import static com.alibaba.nacos.config.server.utils.LogUtil.FATAL_LOG;
  */
 public class ExternalDataSourceServiceImpl implements DataSourceService {
     
+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDataSourceServiceImpl.class);
+    
     /**
      * JDBC execute timeout value, unit:second.
      */
@@ -79,7 +79,7 @@ public class ExternalDataSourceServiceImpl implements DataSourceService {
     
     private String dataSourceType = "";
     
-    private String defaultDataSourceType = "";
+    private final String defaultDataSourceType = "";
     
     @Override
     public void init() {
@@ -109,18 +109,18 @@ public class ExternalDataSourceServiceImpl implements DataSourceService {
         
         dataSourceType = DatasourcePlatformUtil.getDatasourcePlatform(defaultDataSourceType);
         
-        if (PropertyUtil.isUseExternalDB()) {
+        if (DatasourceConfiguration.isUseExternalDB()) {
             try {
                 reload();
             } catch (IOException e) {
-                FATAL_LOG.error("[ExternalDataSourceService] datasource reload error", e);
+                LOGGER.error("[ExternalDataSourceService] datasource reload error", e);
                 throw new RuntimeException(DB_LOAD_ERROR_MSG, e);
             }
             
             if (this.dataSourceList.size() > DB_MASTER_SELECT_THRESHOLD) {
-                ConfigExecutor.scheduleConfigTask(new SelectMasterTask(), 10, 10, TimeUnit.SECONDS);
+                PersistenceExecutor.scheduleTask(new SelectMasterTask(), 10, 10, TimeUnit.SECONDS);
             }
-            ConfigExecutor.scheduleConfigTask(new CheckDbHealthTask(), 10, 10, TimeUnit.SECONDS);
+            PersistenceExecutor.scheduleTask(new CheckDbHealthTask(), 10, 10, TimeUnit.SECONDS);
         }
     }
     
@@ -158,7 +158,7 @@ public class ExternalDataSourceServiceImpl implements DataSourceService {
                 }
             }
         } catch (RuntimeException e) {
-            FATAL_LOG.error(DB_LOAD_ERROR_MSG, e);
+            LOGGER.error(DB_LOAD_ERROR_MSG, e);
             throw new IOException(e);
         }
     }
@@ -179,7 +179,7 @@ public class ExternalDataSourceServiceImpl implements DataSourceService {
                 return result == 0;
             }
         } catch (CannotGetJdbcConnectionException e) {
-            FATAL_LOG.error("[db-error] " + e.toString(), e);
+            LOGGER.error("[db-error] " + e.toString(), e);
             return false;
         }
         
@@ -231,8 +231,8 @@ public class ExternalDataSourceServiceImpl implements DataSourceService {
         
         @Override
         public void run() {
-            if (DEFAULT_LOG.isDebugEnabled()) {
-                DEFAULT_LOG.debug("check master db.");
+            if (LOGGER.isDebugEnabled()) {
+                LOGGER.debug("check master db.");
             }
             boolean isFound = false;
             
@@ -244,7 +244,7 @@ public class ExternalDataSourceServiceImpl implements DataSourceService {
                 try {
                     testMasterJT.update("DELETE FROM config_info WHERE data_id='com.alibaba.nacos.testMasterDB'");
                     if (jt.getDataSource() != ds) {
-                        FATAL_LOG.warn("[master-db] {}", ds.getJdbcUrl());
+                        LOGGER.warn("[master-db] {}", ds.getJdbcUrl());
                     }
                     jt.setDataSource(ds);
                     tm.setDataSource(ds);
@@ -252,13 +252,13 @@ public class ExternalDataSourceServiceImpl implements DataSourceService {
                     masterIndex = index;
                     break;
                 } catch (DataAccessException e) { // read only
-                    FATAL_LOG.warn("[master-db] master db access error", e);
+                    LOGGER.warn("[master-db] master db access error", e);
                 }
             }
             
             if (!isFound) {
-                FATAL_LOG.error("[master-db] master db not found.");
-                MetricsMonitor.getDbException().increment();
+                LOGGER.error("[master-db] master db not found.");
+                DatasourceMetrics.getDbException().increment();
             }
         }
     }
@@ -268,27 +268,27 @@ public class ExternalDataSourceServiceImpl implements DataSourceService {
         
         @Override
         public void run() {
-            if (DEFAULT_LOG.isDebugEnabled()) {
-                DEFAULT_LOG.debug("check db health.");
+            if (LOGGER.isDebugEnabled()) {
+                LOGGER.debug("check db health.");
             }
             String sql = "SELECT * FROM config_info_beta WHERE id = 1";
             
             for (int i = 0; i < testJtList.size(); i++) {
                 JdbcTemplate jdbcTemplate = testJtList.get(i);
                 try {
-                    jdbcTemplate.query(sql, CONFIG_INFO4BETA_ROW_MAPPER);
+                    jdbcTemplate.queryForMap(sql);
                     isHealthList.set(i, Boolean.TRUE);
                 } catch (DataAccessException e) {
                     if (i == masterIndex) {
-                        FATAL_LOG.error("[db-error] master db {} down.",
+                        LOGGER.error("[db-error] master db {} down.",
                                 InternetAddressUtil.getIPFromString(dataSourceList.get(i).getJdbcUrl()));
                     } else {
-                        FATAL_LOG.error("[db-error] slave db {} down.",
+                        LOGGER.error("[db-error] slave db {} down.",
                                 InternetAddressUtil.getIPFromString(dataSourceList.get(i).getJdbcUrl()));
                     }
                     isHealthList.set(i, Boolean.FALSE);
                     
-                    MetricsMonitor.getDbException().increment();
+                    DatasourceMetrics.getDbException().increment();
                 }
             }
         }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/LocalDataSourceServiceImpl.java b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/LocalDataSourceServiceImpl.java
similarity index 90%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/datasource/LocalDataSourceServiceImpl.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/datasource/LocalDataSourceServiceImpl.java
index 779397777d..3e470c71fb 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/LocalDataSourceServiceImpl.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/datasource/LocalDataSourceServiceImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,18 +14,19 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.datasource;
+package com.alibaba.nacos.persistence.datasource;
 
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.exception.runtime.NacosRuntimeException;
 import com.alibaba.nacos.common.utils.IoUtils;
-import com.alibaba.nacos.config.server.constant.Constants;
-import com.alibaba.nacos.config.server.utils.LogUtil;
-import com.alibaba.nacos.config.server.utils.PropertyUtil;
+import com.alibaba.nacos.common.utils.StringUtils;
+import com.alibaba.nacos.persistence.configuration.DatasourceConfiguration;
+import com.alibaba.nacos.persistence.constants.PersistenceConstant;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import com.alibaba.nacos.sys.utils.DiskUtils;
 import com.zaxxer.hikari.HikariDataSource;
-import com.alibaba.nacos.common.utils.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.datasource.DataSourceTransactionManager;
 import org.springframework.transaction.support.TransactionTemplate;
@@ -50,13 +51,15 @@ import java.util.concurrent.Callable;
  */
 public class LocalDataSourceServiceImpl implements DataSourceService {
     
+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalDataSourceServiceImpl.class);
+    
     private final String jdbcDriverName = "org.apache.derby.jdbc.EmbeddedDriver";
     
     private final String userName = "nacos";
     
     private final String password = "nacos";
     
-    private final String derbyBaseDir = "data" + File.separator + Constants.DERBY_BASE_DIR;
+    private final String derbyBaseDir = "data" + File.separator + PersistenceConstant.DERBY_BASE_DIR;
     
     private final String derbyShutdownErrMsg = "Derby system shutdown.";
     
@@ -74,11 +77,11 @@ public class LocalDataSourceServiceImpl implements DataSourceService {
     
     @Override
     public synchronized void init() throws Exception {
-        if (PropertyUtil.isUseExternalDB()) {
+        if (DatasourceConfiguration.isUseExternalDB()) {
             return;
         }
         if (!initialize) {
-            LogUtil.DEFAULT_LOG.info("use local db service for init");
+            LOGGER.info("use local db service for init");
             final String jdbcUrl = "jdbc:derby:" + Paths.get(EnvUtil.getNacosHome(), derbyBaseDir) + ";create=true";
             initialize(jdbcUrl);
             initialize = true;
@@ -94,8 +97,8 @@ public class LocalDataSourceServiceImpl implements DataSourceService {
         try {
             execute(ds.getConnection(), "META-INF/derby-schema.sql");
         } catch (Exception e) {
-            if (LogUtil.DEFAULT_LOG.isErrorEnabled()) {
-                LogUtil.DEFAULT_LOG.error(e.getMessage(), e);
+            if (LOGGER.isErrorEnabled()) {
+                LOGGER.error(e.getMessage(), e);
             }
             throw new NacosRuntimeException(NacosException.SERVER_ERROR, "load derby-schema.sql error.", e);
         }
@@ -131,7 +134,7 @@ public class LocalDataSourceServiceImpl implements DataSourceService {
     }
     
     private void doDerbyClean() throws Exception {
-        LogUtil.DEFAULT_LOG.warn("use local db service for reopenDerby");
+        LOGGER.warn("use local db service for reopenDerby");
         try {
             DriverManager.getConnection("jdbc:derby:;shutdown=true");
         } catch (Exception e) {
@@ -226,7 +229,7 @@ public class LocalDataSourceServiceImpl implements DataSourceService {
             byte[] buff = new byte[1024];
             int byteRead = 0;
             while ((byteRead = sqlFileIn.read(buff)) != -1) {
-                sqlSb.append(new String(buff, 0, byteRead, Constants.ENCODE));
+                sqlSb.append(new String(buff, 0, byteRead, PersistenceConstant.DEFAULT_ENCODE));
             }
             
             String[] sqlArr = sqlSb.toString().split(";");
@@ -258,7 +261,7 @@ public class LocalDataSourceServiceImpl implements DataSourceService {
                 try {
                     stmt.execute(sql);
                 } catch (Exception e) {
-                    LogUtil.DEFAULT_LOG.warn(e.getMessage());
+                    LOGGER.warn(e.getMessage());
                 }
             }
         }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/exception/NJdbcException.java b/persistence/src/main/java/com/alibaba/nacos/persistence/exception/NJdbcException.java
similarity index 93%
rename from config/src/main/java/com/alibaba/nacos/config/server/exception/NJdbcException.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/exception/NJdbcException.java
index c3ab7505db..2d9581da78 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/exception/NJdbcException.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/exception/NJdbcException.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.exception;
+package com.alibaba.nacos.persistence.exception;
 
 import org.springframework.dao.DataAccessException;
 
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/model/Page.java b/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java
similarity index 94%
rename from config/src/main/java/com/alibaba/nacos/config/server/model/Page.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java
index a291b23c98..7ceaa2bf34 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/model/Page.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/model/Page.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.model;
+package com.alibaba.nacos.persistence.model;
 
 import java.io.Serializable;
 import java.util.ArrayList;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/model/event/DerbyImportEvent.java b/persistence/src/main/java/com/alibaba/nacos/persistence/model/event/DerbyImportEvent.java
similarity index 91%
rename from config/src/main/java/com/alibaba/nacos/config/server/model/event/DerbyImportEvent.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/model/event/DerbyImportEvent.java
index 4311fb5598..9142cbc579 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/model/event/DerbyImportEvent.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/model/event/DerbyImportEvent.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.model.event;
+package com.alibaba.nacos.persistence.model.event;
 
 import com.alibaba.nacos.common.notify.SlowEvent;
 
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/model/event/DerbyLoadEvent.java b/persistence/src/main/java/com/alibaba/nacos/persistence/model/event/DerbyLoadEvent.java
similarity index 89%
rename from config/src/main/java/com/alibaba/nacos/config/server/model/event/DerbyLoadEvent.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/model/event/DerbyLoadEvent.java
index 6a54625b20..5bd3587848 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/model/event/DerbyLoadEvent.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/model/event/DerbyLoadEvent.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.model.event;
+package com.alibaba.nacos.persistence.model.event;
 
 import com.alibaba.nacos.common.notify.SlowEvent;
 
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/model/event/RaftDbErrorEvent.java b/persistence/src/main/java/com/alibaba/nacos/persistence/model/event/RaftDbErrorEvent.java
similarity index 91%
rename from config/src/main/java/com/alibaba/nacos/config/server/model/event/RaftDbErrorEvent.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/model/event/RaftDbErrorEvent.java
index 3d2e9035d6..855a567d8a 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/model/event/RaftDbErrorEvent.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/model/event/RaftDbErrorEvent.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.model.event;
+package com.alibaba.nacos.persistence.model.event;
 
 import com.alibaba.nacos.common.notify.SlowEvent;
 
diff --git a/persistence/src/main/java/com/alibaba/nacos/persistence/monitor/DatasourceMetrics.java b/persistence/src/main/java/com/alibaba/nacos/persistence/monitor/DatasourceMetrics.java
new file mode 100644
index 0000000000..b0e5d1f019
--- /dev/null
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/monitor/DatasourceMetrics.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.persistence.monitor;
+
+import io.micrometer.core.instrument.Counter;
+import io.micrometer.core.instrument.Metrics;
+
+/**
+ * Metrics for datasource.
+ *
+ * @author xiweng.yy
+ */
+public class DatasourceMetrics {
+    
+    public static Counter getDbException() {
+        // TODO: After {@code NacosMeterRegistryCenter} move to more basic module, the usage can be changed.
+        // TODO: Current {@code NacosMeterRegistryCenter} is in core module, but core module maybe depend persistence to save namespace.
+        return Metrics.counter("nacos_exception", "module", "config", "name", "db");
+    }
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/PaginationHelper.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/PaginationHelper.java
similarity index 92%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/PaginationHelper.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/repository/PaginationHelper.java
index 503d749379..ee2d427c65 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/PaginationHelper.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/PaginationHelper.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository;
+package com.alibaba.nacos.persistence.repository;
 
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.plugin.datasource.model.MapperResult;
 import org.springframework.jdbc.core.RowMapper;
 
diff --git a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/RowMapperManager.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/RowMapperManager.java
new file mode 100644
index 0000000000..3ad19978ae
--- /dev/null
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/RowMapperManager.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.persistence.repository;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.jdbc.core.RowMapper;
+
+import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
+import java.sql.SQLException;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+/**
+ * Manager RowMapper {@link RowMapper} for database object mapping.
+ *
+ * @author <a href="mailto:liaochuntao@live.com">liaochuntao</a>
+ */
+public final class RowMapperManager {
+    
+    private static final Logger LOGGER = LoggerFactory.getLogger(RowMapperManager.class);
+    
+    public static final MapRowMapper MAP_ROW_MAPPER = new MapRowMapper();
+    
+    public static Map<String, RowMapper> mapperMap = new HashMap<>(16);
+    
+    static {
+        // MAP_ROW_MAPPER
+        mapperMap.put(MAP_ROW_MAPPER.getClass().getCanonicalName(), MAP_ROW_MAPPER);
+    }
+    
+    public static <D> RowMapper<D> getRowMapper(String classFullName) {
+        return (RowMapper<D>) mapperMap.get(classFullName);
+    }
+    
+    /**
+     * Register custom row mapper to manager.
+     *
+     * @param classFullName full class name of row mapper handled.
+     * @param rowMapper     row mapper
+     * @param <D>           class of row mapper handled
+     */
+    public static synchronized <D> void registerRowMapper(String classFullName, RowMapper<D> rowMapper) {
+        if (mapperMap.containsKey(classFullName)) {
+            LOGGER.warn("row mapper {} conflicts, {} will be replaced by {}", classFullName,
+                    mapperMap.get(classFullName).getClass().getCanonicalName(),
+                    rowMapper.getClass().getCanonicalName());
+        }
+        mapperMap.put(classFullName, rowMapper);
+    }
+    
+    public static final class MapRowMapper implements RowMapper<Map<String, Object>> {
+        
+        @Override
+        public Map<String, Object> mapRow(ResultSet resultSet, int rowNum) throws SQLException {
+            ResultSetMetaData metaData = resultSet.getMetaData();
+            int columnCount = metaData.getColumnCount();
+            Map<String, Object> map = new LinkedHashMap<>(columnCount);
+            for (int i = 1; i <= columnCount; i++) {
+                map.put(metaData.getColumnLabel(i), resultSet.getObject(i));
+            }
+            return map;
+        }
+    }
+    
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedPaginationHelperImpl.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java
similarity index 91%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedPaginationHelperImpl.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java
index ef59ed79c1..c3c73f200d 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedPaginationHelperImpl.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedPaginationHelperImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository.embedded;
+package com.alibaba.nacos.persistence.repository.embedded;
 
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
 import com.alibaba.nacos.plugin.datasource.model.MapperResult;
 import org.springframework.jdbc.core.RowMapper;
 
@@ -31,7 +31,7 @@ import java.util.List;
  * @author boyan
  * @date 2010-5-6
  */
-class EmbeddedPaginationHelperImpl<E> implements PaginationHelper {
+public class EmbeddedPaginationHelperImpl<E> implements PaginationHelper {
     
     private final DatabaseOperate databaseOperate;
     
@@ -187,11 +187,11 @@ class EmbeddedPaginationHelperImpl<E> implements PaginationHelper {
     
     @Override
     public void updateLimit(final String sql, final Object[] args) {
-        EmbeddedStorageContextUtils.addSqlContext(sql, args);
+        EmbeddedStorageContextHolder.addSqlContext(sql, args);
         try {
-            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
diff --git a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedStorageContextHolder.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedStorageContextHolder.java
new file mode 100644
index 0000000000..36c5d8c14b
--- /dev/null
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/EmbeddedStorageContextHolder.java
@@ -0,0 +1,119 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.persistence.repository.embedded;
+
+import com.alibaba.nacos.persistence.repository.embedded.sql.ModifyRequest;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Embedded storae context holder.
+ *
+ * @author xiweng.yy
+ */
+public class EmbeddedStorageContextHolder {
+    
+    private static final ThreadLocal<ArrayList<ModifyRequest>> SQL_CONTEXT = ThreadLocal.withInitial(ArrayList::new);
+    
+    private static final ThreadLocal<Map<String, String>> EXTEND_INFO_CONTEXT = ThreadLocal.withInitial(HashMap::new);
+    
+    /**
+     * Add sql context.
+     *
+     * @param sql  sql
+     * @param args argument list
+     */
+    public static void addSqlContext(String sql, Object... args) {
+        ArrayList<ModifyRequest> requests = SQL_CONTEXT.get();
+        ModifyRequest context = new ModifyRequest();
+        context.setExecuteNo(requests.size());
+        context.setSql(sql);
+        context.setArgs(args);
+        requests.add(context);
+        SQL_CONTEXT.set(requests);
+    }
+    
+    /**
+     * Add sql context.
+     *
+     * @param rollbackOnUpdateFail  roll back when update fail
+     * @param sql  sql
+     * @param args argument list
+     */
+    public static void addSqlContext(boolean rollbackOnUpdateFail, String sql, Object... args) {
+        ArrayList<ModifyRequest> requests = SQL_CONTEXT.get();
+        ModifyRequest context = new ModifyRequest();
+        context.setExecuteNo(requests.size());
+        context.setSql(sql);
+        context.setArgs(args);
+        context.setRollBackOnUpdateFail(rollbackOnUpdateFail);
+        requests.add(context);
+        SQL_CONTEXT.set(requests);
+    }
+    
+    /**
+     * Put extend info.
+     *
+     * @param key   key
+     * @param value value
+     */
+    public static void putExtendInfo(String key, String value) {
+        Map<String, String> old = EXTEND_INFO_CONTEXT.get();
+        old.put(key, value);
+        EXTEND_INFO_CONTEXT.set(old);
+    }
+    
+    /**
+     * Put all extend info.
+     *
+     * @param map all extend info
+     */
+    public static void putAllExtendInfo(Map<String, String> map) {
+        Map<String, String> old = EXTEND_INFO_CONTEXT.get();
+        old.putAll(map);
+        EXTEND_INFO_CONTEXT.set(old);
+    }
+    
+    /**
+     * Determine if key is included.
+     *
+     * @param key key
+     * @return {@code true} if contains key
+     */
+    public static boolean containsExtendInfo(String key) {
+        Map<String, String> extendInfo = EXTEND_INFO_CONTEXT.get();
+        boolean exist = extendInfo.containsKey(key);
+        EXTEND_INFO_CONTEXT.set(extendInfo);
+        return exist;
+    }
+    
+    public static List<ModifyRequest> getCurrentSqlContext() {
+        return SQL_CONTEXT.get();
+    }
+    
+    public static Map<String, String> getCurrentExtendInfo() {
+        return EXTEND_INFO_CONTEXT.get();
+    }
+    
+    public static void cleanAllContext() {
+        SQL_CONTEXT.remove();
+        EXTEND_INFO_CONTEXT.remove();
+    }
+}
diff --git a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/hook/EmbeddedApplyHook.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/hook/EmbeddedApplyHook.java
new file mode 100644
index 0000000000..7924a462dd
--- /dev/null
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/hook/EmbeddedApplyHook.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.persistence.repository.embedded.hook;
+
+import com.alibaba.nacos.consistency.entity.WriteRequest;
+
+/**
+ * Embedded storage apply hook.
+ *
+ * <p>Async Hook after embedded storage apply raft log.</p>
+ *
+ * @author xiweng.yy
+ */
+@SuppressWarnings("PMD.AbstractClassShouldStartWithAbstractNamingRule")
+public abstract class EmbeddedApplyHook {
+    
+    protected EmbeddedApplyHook() {
+        EmbeddedApplyHookHolder.getInstance().register(this);
+    }
+    
+    /**
+     * Called after apply finished.
+     *
+     * @param log raft log
+     */
+    public abstract void afterApply(WriteRequest log);
+}
diff --git a/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/hook/EmbeddedApplyHookHolder.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/hook/EmbeddedApplyHookHolder.java
new file mode 100644
index 0000000000..b1a3524db7
--- /dev/null
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/hook/EmbeddedApplyHookHolder.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.persistence.repository.embedded.hook;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Holder for Embedded apply hook.
+ *
+ * @author xiweng.yy
+ */
+public class EmbeddedApplyHookHolder {
+    
+    private static final EmbeddedApplyHookHolder INSTANCE = new EmbeddedApplyHookHolder();
+    
+    private final Set<EmbeddedApplyHook> hooks;
+    
+    private EmbeddedApplyHookHolder() {
+        hooks = new HashSet<>();
+    }
+    
+    public static EmbeddedApplyHookHolder getInstance() {
+        return INSTANCE;
+    }
+    
+    public void register(EmbeddedApplyHook hook) {
+        this.hooks.add(hook);
+    }
+    
+    public Set<EmbeddedApplyHook> getAllHooks() {
+        return this.hooks;
+    }
+}
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/BaseDatabaseOperate.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/BaseDatabaseOperate.java
similarity index 80%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/BaseDatabaseOperate.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/BaseDatabaseOperate.java
index 202653eab6..3e91d120fc 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/BaseDatabaseOperate.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/BaseDatabaseOperate.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,13 +14,14 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository.embedded;
+package com.alibaba.nacos.persistence.repository.embedded.operate;
 
 import com.alibaba.nacos.common.utils.ExceptionUtil;
 import com.alibaba.nacos.common.utils.LoggerUtils;
-import com.alibaba.nacos.config.server.service.sql.ModifyRequest;
-import com.alibaba.nacos.config.server.utils.DerbyUtils;
-import com.alibaba.nacos.config.server.utils.LogUtil;
+import com.alibaba.nacos.persistence.repository.embedded.sql.ModifyRequest;
+import com.alibaba.nacos.persistence.utils.DerbyUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.dao.DataAccessException;
 import org.springframework.dao.DataIntegrityViolationException;
 import org.springframework.dao.IncorrectResultSizeDataAccessException;
@@ -36,8 +37,6 @@ import java.util.Map;
 import java.util.function.BiConsumer;
 import java.util.stream.IntStream;
 
-import static com.alibaba.nacos.config.server.utils.LogUtil.FATAL_LOG;
-
 /**
  * The Derby database basic operation.
  *
@@ -46,6 +45,8 @@ import static com.alibaba.nacos.config.server.utils.LogUtil.FATAL_LOG;
 @SuppressWarnings("PMD.AbstractMethodOrInterfaceMethodMustUseJavadocRule")
 public interface BaseDatabaseOperate extends DatabaseOperate {
     
+    Logger LOGGER = LoggerFactory.getLogger(BaseDatabaseOperate.class);
+    
     /**
      * query one result by sql then convert result to target type.
      *
@@ -61,10 +62,10 @@ public interface BaseDatabaseOperate extends DatabaseOperate {
         } catch (IncorrectResultSizeDataAccessException e) {
             return null;
         } catch (CannotGetJdbcConnectionException e) {
-            FATAL_LOG.error("[db-error] can't get connection : {}", ExceptionUtil.getAllExceptionMsg(e));
+            LOGGER.error("[db-error] can't get connection : {}", ExceptionUtil.getAllExceptionMsg(e));
             throw e;
         } catch (DataAccessException e) {
-            FATAL_LOG.error("[db-error] DataAccessException : {}", ExceptionUtil.getAllExceptionMsg(e));
+            LOGGER.error("[db-error] DataAccessException : {}", ExceptionUtil.getAllExceptionMsg(e));
             throw e;
         }
     }
@@ -85,10 +86,10 @@ public interface BaseDatabaseOperate extends DatabaseOperate {
         } catch (IncorrectResultSizeDataAccessException e) {
             return null;
         } catch (CannotGetJdbcConnectionException e) {
-            FATAL_LOG.error("[db-error] {}", e.toString());
+            LOGGER.error("[db-error] {}", e.toString());
             throw e;
         } catch (DataAccessException e) {
-            FATAL_LOG.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
+            LOGGER.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
                     ExceptionUtil.getAllExceptionMsg(e));
             throw e;
         }
@@ -110,10 +111,10 @@ public interface BaseDatabaseOperate extends DatabaseOperate {
         } catch (IncorrectResultSizeDataAccessException e) {
             return null;
         } catch (CannotGetJdbcConnectionException e) {
-            FATAL_LOG.error("[db-error] {}", e.toString());
+            LOGGER.error("[db-error] {}", e.toString());
             throw e;
         } catch (DataAccessException e) {
-            FATAL_LOG.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
+            LOGGER.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
                     ExceptionUtil.getAllExceptionMsg(e));
             throw e;
         }
@@ -133,10 +134,10 @@ public interface BaseDatabaseOperate extends DatabaseOperate {
         try {
             return jdbcTemplate.query(sql, args, mapper);
         } catch (CannotGetJdbcConnectionException e) {
-            FATAL_LOG.error("[db-error] {}", e.toString());
+            LOGGER.error("[db-error] {}", e.toString());
             throw e;
         } catch (DataAccessException e) {
-            FATAL_LOG.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
+            LOGGER.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
                     ExceptionUtil.getAllExceptionMsg(e));
             throw e;
         }
@@ -158,10 +159,10 @@ public interface BaseDatabaseOperate extends DatabaseOperate {
         } catch (IncorrectResultSizeDataAccessException e) {
             return null;
         } catch (CannotGetJdbcConnectionException e) {
-            FATAL_LOG.error("[db-error] {}", e.toString());
+            LOGGER.error("[db-error] {}", e.toString());
             throw e;
         } catch (DataAccessException e) {
-            FATAL_LOG.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
+            LOGGER.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
                     ExceptionUtil.getAllExceptionMsg(e));
             throw e;
         }
@@ -179,10 +180,10 @@ public interface BaseDatabaseOperate extends DatabaseOperate {
         try {
             return jdbcTemplate.queryForList(sql, args);
         } catch (CannotGetJdbcConnectionException e) {
-            FATAL_LOG.error("[db-error] {}", e.toString());
+            LOGGER.error("[db-error] {}", e.toString());
             throw e;
         } catch (DataAccessException e) {
-            FATAL_LOG.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
+            LOGGER.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", sql, args,
                     ExceptionUtil.getAllExceptionMsg(e));
             throw e;
         }
@@ -221,11 +222,11 @@ public interface BaseDatabaseOperate extends DatabaseOperate {
                         errSql[0] = pair.getSql();
                         args[0] = pair.getArgs();
                         boolean rollBackOnUpdateFail = pair.isRollBackOnUpdateFail();
-                        LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "current sql : {}", errSql[0]);
-                        LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "current args : {}", args[0]);
+                        LoggerUtils.printIfDebugEnabled(LOGGER, "current sql : {}", errSql[0]);
+                        LoggerUtils.printIfDebugEnabled(LOGGER, "current args : {}", args[0]);
                         int row = jdbcTemplate.update(pair.getSql(), pair.getArgs());
                         if (rollBackOnUpdateFail && row < 1) {
-                            LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "SQL update affected {} rows ", row);
+                            LoggerUtils.printIfDebugEnabled(LOGGER, "SQL update affected {} rows ", row);
                             throw new IllegalTransactionStateException("Illegal transaction");
                         }
                     });
@@ -234,22 +235,22 @@ public interface BaseDatabaseOperate extends DatabaseOperate {
                     }
                     return Boolean.TRUE;
                 } catch (BadSqlGrammarException | DataIntegrityViolationException e) {
-                    FATAL_LOG.error("[db-error] sql : {}, args : {}, error : {}", errSql[0], args[0], e.toString());
+                    LOGGER.error("[db-error] sql : {}, args : {}, error : {}", errSql[0], args[0], e.toString());
                     if (consumer != null) {
                         consumer.accept(Boolean.FALSE, e);
                     }
                     return Boolean.FALSE;
                 } catch (CannotGetJdbcConnectionException e) {
-                    FATAL_LOG.error("[db-error] sql : {}, args : {}, error : {}", errSql[0], args[0], e.toString());
+                    LOGGER.error("[db-error] sql : {}, args : {}, error : {}", errSql[0], args[0], e.toString());
                     throw e;
                 } catch (DataAccessException e) {
-                    FATAL_LOG.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", errSql[0],
-                            args[0], ExceptionUtil.getAllExceptionMsg(e));
+                    LOGGER.error("[db-error] DataAccessException sql : {}, args : {}, error : {}", errSql[0], args[0],
+                            ExceptionUtil.getAllExceptionMsg(e));
                     throw e;
                 }
             });
         } catch (IllegalTransactionStateException e) {
-            LoggerUtils.printIfDebugEnabled(LogUtil.DEFAULT_LOG, "Roll back transaction for {} ", e.getMessage());
+            LoggerUtils.printIfDebugEnabled(LOGGER, "Roll back transaction for {} ", e.getMessage());
             if (consumer != null) {
                 consumer.accept(Boolean.FALSE, e);
             }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/DatabaseOperate.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java
similarity index 88%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/DatabaseOperate.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java
index 7f75deb2a7..568d73f9ee 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/DatabaseOperate.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/DatabaseOperate.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository.embedded;
+package com.alibaba.nacos.persistence.repository.embedded.operate;
 
 import com.alibaba.nacos.common.model.RestResult;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
-import com.alibaba.nacos.config.server.service.sql.ModifyRequest;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
+import com.alibaba.nacos.persistence.repository.embedded.sql.ModifyRequest;
 import org.springframework.jdbc.core.RowMapper;
 
 import java.io.File;
@@ -146,9 +146,9 @@ public interface DatabaseOperate {
      */
     default Boolean blockUpdate(BiConsumer<Boolean, Throwable> consumer) {
         try {
-            return update(EmbeddedStorageContextUtils.getCurrentSqlContext(), consumer);
+            return update(EmbeddedStorageContextHolder.getCurrentSqlContext(), consumer);
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -161,7 +161,7 @@ public interface DatabaseOperate {
     default CompletableFuture<Boolean> futureUpdate() {
         try {
             CompletableFuture<Boolean> future = new CompletableFuture<>();
-            update(EmbeddedStorageContextUtils.getCurrentSqlContext(), (o, throwable) -> {
+            update(EmbeddedStorageContextHolder.getCurrentSqlContext(), (o, throwable) -> {
                 if (Objects.nonNull(throwable)) {
                     future.completeExceptionally(throwable);
                     return;
@@ -170,7 +170,7 @@ public interface DatabaseOperate {
             });
             return future;
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/StandaloneDatabaseOperateImpl.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/StandaloneDatabaseOperateImpl.java
similarity index 87%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/StandaloneDatabaseOperateImpl.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/StandaloneDatabaseOperateImpl.java
index 54f5ea8d9b..200dc04cad 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/StandaloneDatabaseOperateImpl.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/operate/StandaloneDatabaseOperateImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,18 +14,19 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository.embedded;
+package com.alibaba.nacos.persistence.repository.embedded.operate;
 
 import com.alibaba.nacos.common.model.RestResult;
 import com.alibaba.nacos.common.model.RestResultUtils;
 import com.alibaba.nacos.common.utils.CollectionUtils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionStandaloneEmbedStorage;
-import com.alibaba.nacos.config.server.service.datasource.DataSourceService;
-import com.alibaba.nacos.config.server.service.datasource.DynamicDataSource;
-import com.alibaba.nacos.config.server.service.sql.ModifyRequest;
-import com.alibaba.nacos.config.server.utils.LogUtil;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionStandaloneEmbedStorage;
+import com.alibaba.nacos.persistence.datasource.DataSourceService;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.repository.embedded.sql.ModifyRequest;
 import com.alibaba.nacos.sys.utils.DiskUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.core.RowMapper;
@@ -51,6 +52,8 @@ import java.util.stream.Collectors;
 @Component
 public class StandaloneDatabaseOperateImpl implements BaseDatabaseOperate {
     
+    private static final Logger LOGGER = LoggerFactory.getLogger(StandaloneDatabaseOperateImpl.class);
+    
     private JdbcTemplate jdbcTemplate;
     
     private TransactionTemplate transactionTemplate;
@@ -60,7 +63,7 @@ public class StandaloneDatabaseOperateImpl implements BaseDatabaseOperate {
         DataSourceService dataSourceService = DynamicDataSource.getInstance().getDataSource();
         jdbcTemplate = dataSourceService.getJdbcTemplate();
         transactionTemplate = dataSourceService.getTransactionTemplate();
-        LogUtil.DEFAULT_LOG.info("use StandaloneDatabaseOperateImpl");
+        LOGGER.info("use StandaloneDatabaseOperateImpl");
     }
     
     @Override
@@ -123,7 +126,7 @@ public class StandaloneDatabaseOperateImpl implements BaseDatabaseOperate {
                 }
                 return RestResult.<String>builder().withCode(code).withData("").build();
             } catch (Throwable ex) {
-                LogUtil.DEFAULT_LOG.error("An exception occurred when external data was imported into Derby : ", ex);
+                LOGGER.error("An exception occurred when external data was imported into Derby : ", ex);
                 return RestResultUtils.failed(ex.getMessage());
             }
         });
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/sql/ModifyRequest.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/sql/ModifyRequest.java
similarity index 94%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/sql/ModifyRequest.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/sql/ModifyRequest.java
index 8e98348508..b0f900edbb 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/sql/ModifyRequest.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/sql/ModifyRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.sql;
+package com.alibaba.nacos.persistence.repository.embedded.sql;
 
 import java.io.Serializable;
 import java.util.Arrays;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/sql/QueryType.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/sql/QueryType.java
similarity index 94%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/sql/QueryType.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/sql/QueryType.java
index a7f47212a0..17a41cd33c 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/sql/QueryType.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/sql/QueryType.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.sql;
+package com.alibaba.nacos.persistence.repository.embedded.sql;
 
 import org.springframework.jdbc.core.RowMapper;
 
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/sql/SelectRequest.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/sql/SelectRequest.java
similarity index 96%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/sql/SelectRequest.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/sql/SelectRequest.java
index ebfff4f984..4439342280 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/sql/SelectRequest.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/embedded/sql/SelectRequest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.sql;
+package com.alibaba.nacos.persistence.repository.embedded.sql;
 
 import java.io.Serializable;
 import java.util.Arrays;
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePaginationHelperImpl.java b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java
similarity index 91%
rename from config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePaginationHelperImpl.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java
index 2d00eb59f8..4bf8443577 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/service/repository/extrnal/ExternalStoragePaginationHelperImpl.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/repository/extrnal/ExternalStoragePaginationHelperImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.service.repository.extrnal;
+package com.alibaba.nacos.persistence.repository.extrnal;
 
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
 import com.alibaba.nacos.plugin.datasource.model.MapperResult;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.core.RowMapper;
@@ -31,7 +31,7 @@ import java.util.List;
  * @author <a href="mailto:liaochuntao@live.com">liaochuntao</a>
  */
 
-class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {
+public class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {
     
     private final JdbcTemplate jdbcTemplate;
     
@@ -55,7 +55,7 @@ class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {
             final int pageNo, final int pageSize, final RowMapper rowMapper) {
         return fetchPage(sqlCountRows, sqlFetchRows, args, pageNo, pageSize, null, rowMapper);
     }
-
+    
     @Override
     public Page<E> fetchPage(final String sqlCountRows, final String sqlFetchRows, final Object[] args,
             final int pageNo, final int pageSize, final Long lastMaxId, final RowMapper rowMapper) {
@@ -91,7 +91,7 @@ class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {
         }
         return page;
     }
-
+    
     @Override
     public Page<E> fetchPageLimit(final String sqlCountRows, final String sqlFetchRows, final Object[] args,
             final int pageNo, final int pageSize, final RowMapper rowMapper) {
@@ -119,7 +119,7 @@ class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {
         if (pageNo > pageCount) {
             return page;
         }
-    
+        
         List<E> result = jdbcTemplate.query(sqlFetchRows, args, rowMapper);
         for (E item : result) {
             page.getPageItems().add(item);
@@ -133,7 +133,7 @@ class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {
         return fetchPageLimit(countMapperResult.getSql(), countMapperResult.getParamList().toArray(),
                 mapperResult.getSql(), mapperResult.getParamList().toArray(), pageNo, pageSize, rowMapper);
     }
-
+    
     @Override
     public Page<E> fetchPageLimit(final String sqlCountRows, final Object[] args1, final String sqlFetchRows,
             final Object[] args2, final int pageNo, final int pageSize, final RowMapper rowMapper) {
@@ -167,7 +167,7 @@ class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {
         }
         return page;
     }
-
+    
     @Override
     public Page<E> fetchPageLimit(final String sqlFetchRows, final Object[] args, final int pageNo, final int pageSize,
             final RowMapper rowMapper) {
@@ -182,23 +182,30 @@ class ExternalStoragePaginationHelperImpl<E> implements PaginationHelper {
         }
         return page;
     }
-
+    
     @Override
     public void updateLimit(final String sql, final Object[] args) {
         try {
             jdbcTemplate.update(sql, args);
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
+    /**
+     * Update limit with response.
+     *
+     * @param sql  sql
+     * @param args args
+     * @return update row count
+     */
     public int updateLimitWithResponse(final String sql, final Object[] args) {
         String sqlUpdate = sql;
         
         try {
             return jdbcTemplate.update(sqlUpdate, args);
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/utils/DatasourcePlatformUtil.java b/persistence/src/main/java/com/alibaba/nacos/persistence/utils/DatasourcePlatformUtil.java
similarity index 73%
rename from config/src/main/java/com/alibaba/nacos/config/server/utils/DatasourcePlatformUtil.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/utils/DatasourcePlatformUtil.java
index fe8e4fc3e6..a49b8b2b4f 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/utils/DatasourcePlatformUtil.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/utils/DatasourcePlatformUtil.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2022 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.utils;
+package com.alibaba.nacos.persistence.utils;
 
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.constant.PropertiesConstant;
+import com.alibaba.nacos.persistence.constants.PersistenceConstant;
 import com.alibaba.nacos.sys.env.EnvUtil;
 
 /**
@@ -34,9 +34,9 @@ public class DatasourcePlatformUtil {
      * @return
      */
     public static String getDatasourcePlatform(String defaultPlatform) {
-        String platform = EnvUtil.getProperty(PropertiesConstant.DATASOURCE_PLATFORM_PROPERTY, defaultPlatform);
+        String platform = EnvUtil.getProperty(PersistenceConstant.DATASOURCE_PLATFORM_PROPERTY, defaultPlatform);
         if (StringUtils.isBlank(platform)) {
-            platform = EnvUtil.getProperty(PropertiesConstant.DATASOURCE_PLATFORM_PROPERTY_OLD, defaultPlatform);
+            platform = EnvUtil.getProperty(PersistenceConstant.DATASOURCE_PLATFORM_PROPERTY_OLD, defaultPlatform);
         }
         return platform;
     }
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/utils/DerbyUtils.java b/persistence/src/main/java/com/alibaba/nacos/persistence/utils/DerbyUtils.java
similarity index 94%
rename from config/src/main/java/com/alibaba/nacos/config/server/utils/DerbyUtils.java
rename to persistence/src/main/java/com/alibaba/nacos/persistence/utils/DerbyUtils.java
index 7e4ef74471..a36fba9d70 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/utils/DerbyUtils.java
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/utils/DerbyUtils.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.config.server.utils;
+package com.alibaba.nacos.persistence.utils;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
diff --git a/persistence/src/main/java/com/alibaba/nacos/persistence/utils/PersistenceExecutor.java b/persistence/src/main/java/com/alibaba/nacos/persistence/utils/PersistenceExecutor.java
new file mode 100644
index 0000000000..5d28ff373c
--- /dev/null
+++ b/persistence/src/main/java/com/alibaba/nacos/persistence/utils/PersistenceExecutor.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.persistence.utils;
+
+import com.alibaba.nacos.common.executor.ExecutorFactory;
+import com.alibaba.nacos.common.executor.NameThreadFactory;
+
+import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Persistence async task executors.
+ *
+ * @author xiweng.yy
+ */
+public class PersistenceExecutor {
+    
+    private static final ScheduledExecutorService TIMER_EXECUTOR = ExecutorFactory.Managed
+            .newScheduledExecutorService(PersistenceExecutor.class.getCanonicalName(), 2,
+                    new NameThreadFactory("com.alibaba.nacos.persistence.timer"));
+    
+    private static final Executor DUMP_EXECUTOR = ExecutorFactory.Managed
+            .newSingleExecutorService(PersistenceExecutor.class.getCanonicalName(),
+                    new NameThreadFactory("com.alibaba.nacos.persistence.embedded.dump"));
+    
+    private static final ExecutorService EMBEDDED_SNAPSHOT_EXECUTOR = ExecutorFactory.Managed
+            .newSingleExecutorService(PersistenceExecutor.class.getCanonicalName(),
+                    new NameThreadFactory("com.alibaba.nacos.persistence.embedded.snapshot"));
+    
+    public static void scheduleTask(Runnable command, long initialDelay, long delay, TimeUnit unit) {
+        TIMER_EXECUTOR.scheduleWithFixedDelay(command, initialDelay, delay, unit);
+    }
+    
+    public static void executeEmbeddedDump(Runnable runnable) {
+        DUMP_EXECUTOR.execute(runnable);
+    }
+    
+    public static void executeSnapshot(Runnable runnable) {
+        EMBEDDED_SNAPSHOT_EXECUTOR.execute(runnable);
+    }
+}
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/PermissionController.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/PermissionController.java
index 5e3ad990f5..1392f7d212 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/PermissionController.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/PermissionController.java
@@ -19,7 +19,7 @@ package com.alibaba.nacos.plugin.auth.impl.controller;
 import com.alibaba.nacos.auth.annotation.Secured;
 import com.alibaba.nacos.common.model.RestResultUtils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.plugin.auth.constant.ActionTypes;
 import com.alibaba.nacos.plugin.auth.impl.constant.AuthConstants;
 import com.alibaba.nacos.plugin.auth.impl.persistence.PermissionInfo;
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/RoleController.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/RoleController.java
index efcf5dfcda..edc1564b3e 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/RoleController.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/RoleController.java
@@ -19,7 +19,7 @@ package com.alibaba.nacos.plugin.auth.impl.controller;
 import com.alibaba.nacos.auth.annotation.Secured;
 import com.alibaba.nacos.common.model.RestResultUtils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.plugin.auth.constant.ActionTypes;
 import com.alibaba.nacos.plugin.auth.impl.constant.AuthConstants;
 import com.alibaba.nacos.plugin.auth.impl.persistence.RoleInfo;
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/UserController.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/UserController.java
index cc8f1a07d4..0378e6da8c 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/UserController.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/controller/UserController.java
@@ -22,7 +22,7 @@ import com.alibaba.nacos.auth.config.AuthConfigs;
 import com.alibaba.nacos.common.model.RestResult;
 import com.alibaba.nacos.common.model.RestResultUtils;
 import com.alibaba.nacos.common.utils.JacksonUtils;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.plugin.auth.api.IdentityContext;
 import com.alibaba.nacos.plugin.auth.constant.ActionTypes;
 import com.alibaba.nacos.plugin.auth.exception.AccessException;
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/AuthRowMapperManager.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/AuthRowMapperManager.java
index ecc9295514..4c8c4771eb 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/AuthRowMapperManager.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/AuthRowMapperManager.java
@@ -16,7 +16,7 @@
 
 package com.alibaba.nacos.plugin.auth.impl.persistence;
 
-import com.alibaba.nacos.config.server.service.repository.RowMapperManager;
+import com.alibaba.nacos.persistence.repository.RowMapperManager;
 import org.springframework.jdbc.core.RowMapper;
 
 import java.sql.ResultSet;
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedPermissionPersistServiceImpl.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedPermissionPersistServiceImpl.java
index 54152ad81d..a06f3a6bd2 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedPermissionPersistServiceImpl.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedPermissionPersistServiceImpl.java
@@ -17,12 +17,12 @@
 package com.alibaba.nacos.plugin.auth.impl.persistence;
 
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.repository.embedded.DatabaseOperate;
-import com.alibaba.nacos.config.server.service.repository.embedded.EmbeddedStoragePersistServiceImpl;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.stereotype.Component;
@@ -45,16 +45,13 @@ public class EmbeddedPermissionPersistServiceImpl implements PermissionPersistSe
     @Autowired
     private DatabaseOperate databaseOperate;
     
-    @Autowired
-    private EmbeddedStoragePersistServiceImpl persistService;
-
     private static final String PATTERN_STR = "*";
-
+    
     private static final String SQL_DERBY_ESCAPE_BACK_SLASH_FOR_LIKE = " ESCAPE '\\' ";
     
     @Override
     public Page<PermissionInfo> getPermissions(String role, int pageNo, int pageSize) {
-        PaginationHelper<PermissionInfo> helper = persistService.createPaginationHelper();
+        PaginationHelper<PermissionInfo> helper = createPaginationHelper();
         
         String sqlCountRows = "SELECT count(*) FROM permissions WHERE ";
         
@@ -90,7 +87,7 @@ public class EmbeddedPermissionPersistServiceImpl implements PermissionPersistSe
     @Override
     public void addPermission(String role, String resource, String action) {
         String sql = "INSERT INTO permissions (role, resource, action) VALUES (?, ?, ?)";
-        EmbeddedStorageContextUtils.addSqlContext(sql, role, resource, action);
+        EmbeddedStorageContextHolder.addSqlContext(sql, role, resource, action);
         databaseOperate.blockUpdate();
     }
     
@@ -104,18 +101,18 @@ public class EmbeddedPermissionPersistServiceImpl implements PermissionPersistSe
     @Override
     public void deletePermission(String role, String resource, String action) {
         String sql = "DELETE FROM permissions WHERE role=? AND resource=? AND action=?";
-        EmbeddedStorageContextUtils.addSqlContext(sql, role, resource, action);
+        EmbeddedStorageContextHolder.addSqlContext(sql, role, resource, action);
         databaseOperate.blockUpdate();
     }
-
+    
     @Override
     public Page<PermissionInfo> findPermissionsLike4Page(String role, int pageNo, int pageSize) {
-        PaginationHelper<PermissionInfo> helper = persistService.createPaginationHelper();
-
+        PaginationHelper<PermissionInfo> helper = createPaginationHelper();
+        
         String sqlCountRows = "SELECT count(*) FROM permissions ";
-
+        
         String sqlFetchRows = "SELECT role,resource,action FROM permissions ";
-
+        
         StringBuilder where = new StringBuilder(" WHERE 1=1");
         List<String> params = new ArrayList<>();
         if (StringUtils.isNotBlank(role)) {
@@ -123,11 +120,11 @@ public class EmbeddedPermissionPersistServiceImpl implements PermissionPersistSe
             where.append(SQL_DERBY_ESCAPE_BACK_SLASH_FOR_LIKE);
             params.add(generateLikeArgument(role));
         }
-
+        
         Page<PermissionInfo> pageInfo = helper
                 .fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,
                         PERMISSION_ROW_MAPPER);
-
+        
         if (pageInfo == null) {
             pageInfo = new Page<>();
             pageInfo.setTotalCount(0);
@@ -135,7 +132,7 @@ public class EmbeddedPermissionPersistServiceImpl implements PermissionPersistSe
         }
         return pageInfo;
     }
-
+    
     @Override
     public String generateLikeArgument(String s) {
         String underscore = "_";
@@ -150,5 +147,9 @@ public class EmbeddedPermissionPersistServiceImpl implements PermissionPersistSe
             return s;
         }
     }
-
+    
+    @Override
+    public <E> PaginationHelper<E> createPaginationHelper() {
+        return new EmbeddedPaginationHelperImpl<>(databaseOperate);
+    }
 }
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedRolePersistServiceImpl.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedRolePersistServiceImpl.java
index 71cf7d96e8..6cbfb852cd 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedRolePersistServiceImpl.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedRolePersistServiceImpl.java
@@ -16,22 +16,21 @@
 
 package com.alibaba.nacos.plugin.auth.impl.persistence;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.alibaba.nacos.common.utils.CollectionUtils;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.repository.embedded.DatabaseOperate;
-import com.alibaba.nacos.config.server.service.repository.embedded.EmbeddedStoragePersistServiceImpl;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
-
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.stereotype.Component;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import static com.alibaba.nacos.plugin.auth.impl.persistence.AuthRowMapperManager.ROLE_INFO_ROW_MAPPER;
 
 /**
@@ -46,17 +45,14 @@ public class EmbeddedRolePersistServiceImpl implements RolePersistService {
     @Autowired
     private DatabaseOperate databaseOperate;
     
-    @Autowired
-    private EmbeddedStoragePersistServiceImpl persistService;
-
     private static final String PATTERN_STR = "*";
-
+    
     private static final String SQL_DERBY_ESCAPE_BACK_SLASH_FOR_LIKE = " ESCAPE '\\' ";
     
     @Override
     public Page<RoleInfo> getRoles(int pageNo, int pageSize) {
         
-        PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
+        PaginationHelper<RoleInfo> helper = createPaginationHelper();
         
         String sqlCountRows = "SELECT count(*) FROM (SELECT DISTINCT role FROM roles) roles WHERE ";
         
@@ -79,12 +75,12 @@ public class EmbeddedRolePersistServiceImpl implements RolePersistService {
     @Override
     public Page<RoleInfo> getRolesByUserNameAndRoleName(String username, String role, int pageNo, int pageSize) {
         
-        PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
+        PaginationHelper<RoleInfo> helper = createPaginationHelper();
         
         String sqlCountRows = "SELECT count(*) FROM roles ";
         
         String sqlFetchRows = "SELECT role,username FROM roles ";
-
+        
         StringBuilder where = new StringBuilder(" WHERE 1 = 1 ");
         List<String> params = new ArrayList<>();
         if (StringUtils.isNotBlank(username)) {
@@ -113,10 +109,10 @@ public class EmbeddedRolePersistServiceImpl implements RolePersistService {
         String sql = "INSERT INTO roles (role, username) VALUES (?, ?)";
         
         try {
-            EmbeddedStorageContextUtils.addSqlContext(sql, role, userName);
-            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            EmbeddedStorageContextHolder.addSqlContext(sql, role, userName);
+            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -129,10 +125,10 @@ public class EmbeddedRolePersistServiceImpl implements RolePersistService {
     public void deleteRole(String role) {
         String sql = "DELETE FROM roles WHERE role=?";
         try {
-            EmbeddedStorageContextUtils.addSqlContext(sql, role);
-            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            EmbeddedStorageContextHolder.addSqlContext(sql, role);
+            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -146,10 +142,10 @@ public class EmbeddedRolePersistServiceImpl implements RolePersistService {
     public void deleteRole(String role, String username) {
         String sql = "DELETE FROM roles WHERE role=? AND username=?";
         try {
-            EmbeddedStorageContextUtils.addSqlContext(sql, role, username);
-            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());
+            EmbeddedStorageContextHolder.addSqlContext(sql, role, username);
+            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -158,7 +154,7 @@ public class EmbeddedRolePersistServiceImpl implements RolePersistService {
         String sql = "SELECT role FROM roles WHERE role LIKE ? " + SQL_DERBY_ESCAPE_BACK_SLASH_FOR_LIKE;
         return databaseOperate.queryMany(sql, new String[] {"%" + role + "%"}, String.class);
     }
-
+    
     @Override
     public String generateLikeArgument(String s) {
         String underscore = "_";
@@ -173,12 +169,12 @@ public class EmbeddedRolePersistServiceImpl implements RolePersistService {
             return s;
         }
     }
-
+    
     @Override
     public Page<RoleInfo> findRolesLike4Page(String username, String role, int pageNo, int pageSize) {
         StringBuilder where = new StringBuilder(" WHERE 1 = 1 ");
         List<String> params = new ArrayList<>();
-
+        
         if (StringUtils.isNotBlank(username)) {
             where.append(" AND username LIKE ? ");
             params.add(generateLikeArgument(username));
@@ -192,10 +188,14 @@ public class EmbeddedRolePersistServiceImpl implements RolePersistService {
         }
         String sqlCountRows = "SELECT count(*) FROM roles";
         String sqlFetchRows = "SELECT role, username FROM roles";
-
-        PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
+        
+        PaginationHelper<RoleInfo> helper = createPaginationHelper();
         return helper.fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,
                 ROLE_INFO_ROW_MAPPER);
     }
-
+    
+    @Override
+    public <E> PaginationHelper<E> createPaginationHelper() {
+        return new EmbeddedPaginationHelperImpl<>(databaseOperate);
+    }
 }
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedUserPersistServiceImpl.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedUserPersistServiceImpl.java
index 08764b8ce8..435e05feb7 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedUserPersistServiceImpl.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedUserPersistServiceImpl.java
@@ -17,13 +17,12 @@
 package com.alibaba.nacos.plugin.auth.impl.persistence;
 
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnEmbeddedStorage;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.repository.embedded.DatabaseOperate;
-import com.alibaba.nacos.config.server.service.repository.embedded.EmbeddedStoragePersistServiceImpl;
-import com.alibaba.nacos.config.server.service.sql.EmbeddedStorageContextUtils;
-
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnEmbeddedStorage;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedPaginationHelperImpl;
+import com.alibaba.nacos.persistence.repository.embedded.EmbeddedStorageContextHolder;
+import com.alibaba.nacos.persistence.repository.embedded.operate.DatabaseOperate;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.stereotype.Component;
@@ -45,11 +44,8 @@ public class EmbeddedUserPersistServiceImpl implements UserPersistService {
     @Autowired
     private DatabaseOperate databaseOperate;
     
-    @Autowired
-    private EmbeddedStoragePersistServiceImpl persistService;
-
     private static final String PATTERN_STR = "*";
-
+    
     private static final String SQL_DERBY_ESCAPE_BACK_SLASH_FOR_LIKE = " ESCAPE '\\' ";
     
     /**
@@ -63,10 +59,10 @@ public class EmbeddedUserPersistServiceImpl implements UserPersistService {
         String sql = "INSERT INTO users (username, password, enabled) VALUES (?, ?, ?)";
         
         try {
-            EmbeddedStorageContextUtils.addSqlContext(sql, username, password, true);
+            EmbeddedStorageContextHolder.addSqlContext(sql, username, password, true);
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -79,10 +75,10 @@ public class EmbeddedUserPersistServiceImpl implements UserPersistService {
     public void deleteUser(String username) {
         String sql = "DELETE FROM users WHERE username=?";
         try {
-            EmbeddedStorageContextUtils.addSqlContext(sql, username);
+            EmbeddedStorageContextHolder.addSqlContext(sql, username);
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -95,11 +91,11 @@ public class EmbeddedUserPersistServiceImpl implements UserPersistService {
     @Override
     public void updateUserPassword(String username, String password) {
         try {
-            EmbeddedStorageContextUtils
+            EmbeddedStorageContextHolder
                     .addSqlContext("UPDATE users SET password = ? WHERE username=?", password, username);
             databaseOperate.blockUpdate();
         } finally {
-            EmbeddedStorageContextUtils.cleanAllContext();
+            EmbeddedStorageContextHolder.cleanAllContext();
         }
     }
     
@@ -112,12 +108,12 @@ public class EmbeddedUserPersistServiceImpl implements UserPersistService {
     @Override
     public Page<User> getUsers(int pageNo, int pageSize, String username) {
         
-        PaginationHelper<User> helper = persistService.createPaginationHelper();
+        PaginationHelper<User> helper = createPaginationHelper();
         
         String sqlCountRows = "SELECT count(*) FROM users ";
         
         String sqlFetchRows = "SELECT username,password FROM users ";
-
+        
         StringBuilder where = new StringBuilder(" WHERE 1 = 1 ");
         List<String> params = new ArrayList<>();
         if (StringUtils.isNotBlank(username)) {
@@ -125,8 +121,8 @@ public class EmbeddedUserPersistServiceImpl implements UserPersistService {
             params.add(username);
         }
         Page<User> pageInfo = helper
-                .fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo,
-                        pageSize, USER_ROW_MAPPER);
+                .fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,
+                        USER_ROW_MAPPER);
         if (pageInfo == null) {
             pageInfo = new Page<>();
             pageInfo.setTotalCount(0);
@@ -140,12 +136,12 @@ public class EmbeddedUserPersistServiceImpl implements UserPersistService {
         String sql = "SELECT username FROM users WHERE username LIKE ? " + SQL_DERBY_ESCAPE_BACK_SLASH_FOR_LIKE;
         return databaseOperate.queryMany(sql, new String[] {"%" + username + "%"}, String.class);
     }
-
+    
     @Override
     public Page<User> findUsersLike4Page(String username, int pageNo, int pageSize) {
         String sqlCountRows = "SELECT count(*) FROM users ";
         String sqlFetchRows = "SELECT username,password FROM users ";
-
+        
         StringBuilder where = new StringBuilder(" WHERE 1 = 1 ");
         List<String> params = new ArrayList<>();
         if (StringUtils.isNotBlank(username)) {
@@ -153,12 +149,12 @@ public class EmbeddedUserPersistServiceImpl implements UserPersistService {
             where.append(SQL_DERBY_ESCAPE_BACK_SLASH_FOR_LIKE);
             params.add(generateLikeArgument(username));
         }
-
-        PaginationHelper<User> helper = persistService.createPaginationHelper();
-        return helper.fetchPage(sqlCountRows + where, sqlFetchRows + where,
-                params.toArray(), pageNo, pageSize, USER_ROW_MAPPER);
+        
+        PaginationHelper<User> helper = createPaginationHelper();
+        return helper.fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,
+                USER_ROW_MAPPER);
     }
-
+    
     @Override
     public String generateLikeArgument(String s) {
         String underscore = "_";
@@ -173,4 +169,9 @@ public class EmbeddedUserPersistServiceImpl implements UserPersistService {
             return s;
         }
     }
+    
+    @Override
+    public <E> PaginationHelper<E> createPaginationHelper() {
+        return new EmbeddedPaginationHelperImpl<>(databaseOperate);
+    }
 }
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalPermissionPersistServiceImpl.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalPermissionPersistServiceImpl.java
index 2064722c50..f92f95bedc 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalPermissionPersistServiceImpl.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalPermissionPersistServiceImpl.java
@@ -17,12 +17,12 @@
 package com.alibaba.nacos.plugin.auth.impl.persistence;
 
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;
 import com.alibaba.nacos.config.server.utils.LogUtil;
-import org.springframework.beans.factory.annotation.Autowired;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.jdbc.CannotGetJdbcConnectionException;
 import org.springframework.jdbc.core.JdbcTemplate;
@@ -44,21 +44,18 @@ import static com.alibaba.nacos.plugin.auth.impl.persistence.AuthRowMapperManage
 @Component
 public class ExternalPermissionPersistServiceImpl implements PermissionPersistService {
     
-    @Autowired
-    private ExternalStoragePersistServiceImpl persistService;
-    
     private JdbcTemplate jt;
-
+    
     private static final String PATTERN_STR = "*";
     
     @PostConstruct
     protected void init() {
-        jt = persistService.getJdbcTemplate();
+        jt = DynamicDataSource.getInstance().getDataSource().getJdbcTemplate();
     }
     
     @Override
     public Page<PermissionInfo> getPermissions(String role, int pageNo, int pageSize) {
-        PaginationHelper<PermissionInfo> helper = persistService.createPaginationHelper();
+        PaginationHelper<PermissionInfo> helper = createPaginationHelper();
         
         String sqlCountRows = "SELECT count(*) FROM permissions WHERE ";
         String sqlFetchRows = "SELECT role,resource,action FROM permissions WHERE ";
@@ -128,40 +125,40 @@ public class ExternalPermissionPersistServiceImpl implements PermissionPersistSe
             throw e;
         }
     }
-
+    
     @Override
     public Page<PermissionInfo> findPermissionsLike4Page(String role, int pageNo, int pageSize) {
-        PaginationHelper<PermissionInfo> helper = persistService.createPaginationHelper();
-
+        PaginationHelper<PermissionInfo> helper = createPaginationHelper();
+        
         String sqlCountRows = "SELECT count(*) FROM permissions ";
         String sqlFetchRows = "SELECT role,resource,action FROM permissions ";
-
+        
         StringBuilder where = new StringBuilder(" WHERE 1=1");
         List<String> params = new ArrayList<>();
         if (StringUtils.isNotBlank(role)) {
             where.append(" AND role LIKE ?");
             params.add(generateLikeArgument(role));
         }
-
+        
         try {
             Page<PermissionInfo> pageInfo = helper
                     .fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,
                             PERMISSION_ROW_MAPPER);
-
+            
             if (pageInfo == null) {
                 pageInfo = new Page<>();
                 pageInfo.setTotalCount(0);
                 pageInfo.setPageItems(new ArrayList<>());
             }
-
+            
             return pageInfo;
-
+            
         } catch (CannotGetJdbcConnectionException e) {
             LogUtil.FATAL_LOG.error("[db-error] " + e.toString(), e);
             throw e;
         }
     }
-
+    
     @Override
     public String generateLikeArgument(String s) {
         String underscore = "_";
@@ -176,5 +173,9 @@ public class ExternalPermissionPersistServiceImpl implements PermissionPersistSe
             return s;
         }
     }
-
+    
+    @Override
+    public <E> PaginationHelper<E> createPaginationHelper() {
+        return new ExternalStoragePaginationHelperImpl<>(jt);
+    }
 }
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalRolePersistServiceImpl.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalRolePersistServiceImpl.java
index 2ebbe1b033..78b5ac588d 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalRolePersistServiceImpl.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalRolePersistServiceImpl.java
@@ -17,12 +17,12 @@
 package com.alibaba.nacos.plugin.auth.impl.persistence;
 
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;
 import com.alibaba.nacos.config.server.utils.LogUtil;
-import org.springframework.beans.factory.annotation.Autowired;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.jdbc.CannotGetJdbcConnectionException;
 import org.springframework.jdbc.core.JdbcTemplate;
@@ -46,22 +46,19 @@ import static com.alibaba.nacos.plugin.auth.impl.persistence.AuthRowMapperManage
 @Component
 public class ExternalRolePersistServiceImpl implements RolePersistService {
     
-    @Autowired
-    private ExternalStoragePersistServiceImpl persistService;
-    
     private JdbcTemplate jt;
-
+    
     private static final String PATTERN_STR = "*";
     
     @PostConstruct
     protected void init() {
-        jt = persistService.getJdbcTemplate();
+        jt = DynamicDataSource.getInstance().getDataSource().getJdbcTemplate();
     }
     
     @Override
     public Page<RoleInfo> getRoles(int pageNo, int pageSize) {
         
-        PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
+        PaginationHelper<RoleInfo> helper = createPaginationHelper();
         
         String sqlCountRows = "SELECT count(*) FROM (SELECT DISTINCT role FROM roles) roles WHERE ";
         
@@ -88,12 +85,12 @@ public class ExternalRolePersistServiceImpl implements RolePersistService {
     @Override
     public Page<RoleInfo> getRolesByUserNameAndRoleName(String username, String role, int pageNo, int pageSize) {
         
-        PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
+        PaginationHelper<RoleInfo> helper = createPaginationHelper();
         
         String sqlCountRows = "SELECT count(*) FROM roles ";
         
         String sqlFetchRows = "SELECT role,username FROM roles ";
-
+        
         StringBuilder where = new StringBuilder(" WHERE 1 = 1 ");
         List<String> params = new ArrayList<>();
         if (StringUtils.isNotBlank(username)) {
@@ -172,7 +169,7 @@ public class ExternalRolePersistServiceImpl implements RolePersistService {
         List<String> users = this.jt.queryForList(sql, new String[] {String.format("%%%s%%", role)}, String.class);
         return users;
     }
-
+    
     @Override
     public String generateLikeArgument(String s) {
         String underscore = "_";
@@ -187,14 +184,14 @@ public class ExternalRolePersistServiceImpl implements RolePersistService {
             return s;
         }
     }
-
+    
     @Override
     public Page<RoleInfo> findRolesLike4Page(String username, String role, int pageNo, int pageSize) {
         String sqlCountRows = "SELECT count(*) FROM roles";
         String sqlFetchRows = "SELECT role, username FROM roles";
         StringBuilder where = new StringBuilder(" WHERE 1 = 1 ");
         List<String> params = new ArrayList<>();
-
+        
         if (StringUtils.isNotBlank(username)) {
             where.append(" AND username LIKE ? ");
             params.add(generateLikeArgument(username));
@@ -203,8 +200,8 @@ public class ExternalRolePersistServiceImpl implements RolePersistService {
             where.append(" AND role LIKE ? ");
             params.add(generateLikeArgument(role));
         }
-
-        PaginationHelper<RoleInfo> helper = persistService.createPaginationHelper();
+        
+        PaginationHelper<RoleInfo> helper = createPaginationHelper();
         try {
             return helper.fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,
                     ROLE_INFO_ROW_MAPPER);
@@ -213,7 +210,12 @@ public class ExternalRolePersistServiceImpl implements RolePersistService {
             throw e;
         }
     }
-
+    
+    @Override
+    public <E> PaginationHelper<E> createPaginationHelper() {
+        return new ExternalStoragePaginationHelperImpl<>(jt);
+    }
+    
     private static final class RoleInfoRowMapper implements RowMapper<RoleInfo> {
         
         @Override
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalUserPersistServiceImpl.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalUserPersistServiceImpl.java
index 53d5428dc5..1cc42576a3 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalUserPersistServiceImpl.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/ExternalUserPersistServiceImpl.java
@@ -17,12 +17,12 @@
 package com.alibaba.nacos.plugin.auth.impl.persistence;
 
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.configuration.ConditionOnExternalStorage;
-import com.alibaba.nacos.config.server.model.Page;
-import com.alibaba.nacos.config.server.service.repository.PaginationHelper;
-import com.alibaba.nacos.config.server.service.repository.extrnal.ExternalStoragePersistServiceImpl;
 import com.alibaba.nacos.config.server.utils.LogUtil;
-import org.springframework.beans.factory.annotation.Autowired;
+import com.alibaba.nacos.persistence.configuration.condition.ConditionOnExternalStorage;
+import com.alibaba.nacos.persistence.datasource.DynamicDataSource;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
+import com.alibaba.nacos.persistence.repository.extrnal.ExternalStoragePaginationHelperImpl;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.dao.EmptyResultDataAccessException;
 import org.springframework.jdbc.CannotGetJdbcConnectionException;
@@ -44,16 +44,13 @@ import static com.alibaba.nacos.plugin.auth.impl.persistence.AuthRowMapperManage
 @Component
 public class ExternalUserPersistServiceImpl implements UserPersistService {
     
-    @Autowired
-    private ExternalStoragePersistServiceImpl persistService;
-    
     private JdbcTemplate jt;
-
+    
     private static final String PATTERN_STR = "*";
     
     @PostConstruct
     protected void init() {
-        jt = persistService.getJdbcTemplate();
+        jt = DynamicDataSource.getInstance().getDataSource().getJdbcTemplate();
     }
     
     /**
@@ -131,23 +128,23 @@ public class ExternalUserPersistServiceImpl implements UserPersistService {
     @Override
     public Page<User> getUsers(int pageNo, int pageSize, String username) {
         
-        PaginationHelper<User> helper = persistService.createPaginationHelper();
+        PaginationHelper<User> helper = createPaginationHelper();
         
         String sqlCountRows = "SELECT count(*) FROM users ";
         
         String sqlFetchRows = "SELECT username,password FROM users ";
-
+        
         StringBuilder where = new StringBuilder(" WHERE 1 = 1 ");
         List<String> params = new ArrayList<>();
         if (StringUtils.isNotBlank(username)) {
             where.append(" AND username = ? ");
             params.add(username);
         }
-
+        
         try {
             Page<User> pageInfo = helper
-                    .fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo,
-                            pageSize, USER_ROW_MAPPER);
+                    .fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,
+                            USER_ROW_MAPPER);
             if (pageInfo == null) {
                 pageInfo = new Page<>();
                 pageInfo.setTotalCount(0);
@@ -163,32 +160,32 @@ public class ExternalUserPersistServiceImpl implements UserPersistService {
     @Override
     public List<String> findUserLikeUsername(String username) {
         String sql = "SELECT username FROM users WHERE username LIKE ?";
-        List<String> users = this.jt.queryForList(sql, new String[]{String.format("%%%s%%", username)}, String.class);
+        List<String> users = this.jt.queryForList(sql, new String[] {String.format("%%%s%%", username)}, String.class);
         return users;
     }
-
+    
     @Override
     public Page<User> findUsersLike4Page(String username, int pageNo, int pageSize) {
         String sqlCountRows = "SELECT count(*) FROM users ";
         String sqlFetchRows = "SELECT username,password FROM users ";
-
+        
         StringBuilder where = new StringBuilder(" WHERE 1 = 1 ");
         List<String> params = new ArrayList<>();
         if (StringUtils.isNotBlank(username)) {
             where.append(" AND username LIKE ? ");
             params.add(generateLikeArgument(username));
         }
-
-        PaginationHelper<User> helper = persistService.createPaginationHelper();
+        
+        PaginationHelper<User> helper = createPaginationHelper();
         try {
-            return helper.fetchPage(sqlCountRows + where, sqlFetchRows + where,
-                    params.toArray(), pageNo, pageSize, USER_ROW_MAPPER);
+            return helper.fetchPage(sqlCountRows + where, sqlFetchRows + where, params.toArray(), pageNo, pageSize,
+                    USER_ROW_MAPPER);
         } catch (CannotGetJdbcConnectionException e) {
             LogUtil.FATAL_LOG.error("[db-error] " + e.toString(), e);
             throw e;
         }
     }
-
+    
     @Override
     public String generateLikeArgument(String s) {
         String underscore = "_";
@@ -203,4 +200,9 @@ public class ExternalUserPersistServiceImpl implements UserPersistService {
             return s;
         }
     }
+    
+    @Override
+    public <E> PaginationHelper<E> createPaginationHelper() {
+        return new ExternalStoragePaginationHelperImpl<>(jt);
+    }
 }
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/PermissionPersistService.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/PermissionPersistService.java
index 614ff8f7b4..ca169d657c 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/PermissionPersistService.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/PermissionPersistService.java
@@ -16,7 +16,8 @@
 
 package com.alibaba.nacos.plugin.auth.impl.persistence;
 
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 
 /**
  * Permission CRUD service.
@@ -58,4 +59,12 @@ public interface PermissionPersistService {
     Page<PermissionInfo> findPermissionsLike4Page(String role, int pageNo, int pageSize);
 
     String generateLikeArgument(String s);
+    
+    /**
+     * create Pagination utils.
+     *
+     * @param <E> Generic object
+     * @return {@link PaginationHelper}
+     */
+    <E> PaginationHelper<E> createPaginationHelper();
 }
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/RolePersistService.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/RolePersistService.java
index ac754e93c4..5676cd1f48 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/RolePersistService.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/RolePersistService.java
@@ -18,7 +18,8 @@ package com.alibaba.nacos.plugin.auth.impl.persistence;
 
 import java.util.List;
 
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 
 /**
  * Role CRUD service.
@@ -96,4 +97,12 @@ public interface RolePersistService {
      * @return {@link Page} with {@link RoleInfo} generation
      */
     Page<RoleInfo> findRolesLike4Page(String username, String role, int pageNo, int pageSize);
+    
+    /**
+     * create Pagination utils.
+     *
+     * @param <E> Generic object
+     * @return {@link PaginationHelper}
+     */
+    <E> PaginationHelper<E> createPaginationHelper();
 }
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/UserPersistService.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/UserPersistService.java
index a85a4b9cd9..d27a20ce44 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/UserPersistService.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/UserPersistService.java
@@ -16,7 +16,8 @@
 
 package com.alibaba.nacos.plugin.auth.impl.persistence;
 
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
+import com.alibaba.nacos.persistence.repository.PaginationHelper;
 
 import java.util.List;
 
@@ -80,4 +81,12 @@ public interface UserPersistService {
     Page<User> findUsersLike4Page(String username, int pageNo, int pageSize);
 
     String generateLikeArgument(String s);
+    
+    /**
+     * create Pagination utils.
+     *
+     * @param <E> Generic object
+     * @return {@link PaginationHelper}
+     */
+    <E> PaginationHelper<E> createPaginationHelper();
 }
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/roles/NacosRoleServiceImpl.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/roles/NacosRoleServiceImpl.java
index 1bab2e6ece..5207427a87 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/roles/NacosRoleServiceImpl.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/roles/NacosRoleServiceImpl.java
@@ -20,7 +20,7 @@ import com.alibaba.nacos.auth.config.AuthConfigs;
 import com.alibaba.nacos.common.utils.CollectionUtils;
 import com.alibaba.nacos.common.utils.ConcurrentHashSet;
 import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.core.utils.Loggers;
 import com.alibaba.nacos.plugin.auth.api.Permission;
 import com.alibaba.nacos.plugin.auth.api.Resource;
diff --git a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/users/NacosUserDetailsServiceImpl.java b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/users/NacosUserDetailsServiceImpl.java
index 3d74ad3c37..fa9cb796c4 100644
--- a/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/users/NacosUserDetailsServiceImpl.java
+++ b/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/users/NacosUserDetailsServiceImpl.java
@@ -19,7 +19,7 @@ package com.alibaba.nacos.plugin.auth.impl.users;
 import com.alibaba.nacos.auth.config.AuthConfigs;
 import com.alibaba.nacos.common.utils.StringUtils;
 import com.alibaba.nacos.plugin.auth.impl.persistence.UserPersistService;
-import com.alibaba.nacos.config.server.model.Page;
+import com.alibaba.nacos.persistence.model.Page;
 import com.alibaba.nacos.plugin.auth.impl.persistence.User;
 import com.alibaba.nacos.core.utils.Loggers;
 import org.springframework.beans.factory.annotation.Autowired;
diff --git a/console/src/main/java/com/alibaba/nacos/console/model/NamespaceAllInfo.java b/plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/constants/CommonConstant.java
similarity index 58%
rename from console/src/main/java/com/alibaba/nacos/console/model/NamespaceAllInfo.java
rename to plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/constants/CommonConstant.java
index 92d9c8fd53..db698b5db0 100644
--- a/console/src/main/java/com/alibaba/nacos/console/model/NamespaceAllInfo.java
+++ b/plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/constants/CommonConstant.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,18 +14,14 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.console.model;
+package com.alibaba.nacos.plugin.datasource.constants;
 
 /**
- * all namespace info.
+ * Datasource plugin common constant.
  *
- * @author Nacos
+ * @author xiweng.yy
  */
-public class NamespaceAllInfo extends Namespace {
-    
-    public NamespaceAllInfo(String namespace, String namespaceShowName, int quota, int configCount, int type,
-            String namespaceDesc) {
-        super(namespace, namespaceShowName, namespaceDesc, quota, configCount, type);
-    }
+public class CommonConstant {
     
+    public static final String NACOS_PLUGIN_DATASOURCE_LOG = "nacos.plugin.datasource.log.enabled";
 }
diff --git a/sys/src/main/java/com/alibaba/nacos/sys/filter/NacosPackageExcludeFilter.java b/sys/src/main/java/com/alibaba/nacos/sys/filter/NacosPackageExcludeFilter.java
new file mode 100644
index 0000000000..1889c6e81b
--- /dev/null
+++ b/sys/src/main/java/com/alibaba/nacos/sys/filter/NacosPackageExcludeFilter.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.sys.filter;
+
+import java.util.Set;
+
+/**
+ * Nacos server module execute filter.
+ *
+ * @author xiweng.yy
+ */
+public interface NacosPackageExcludeFilter {
+    
+    /**
+     * Get the responsible module package prefix of filter.
+     *
+     * @return package prefix
+     */
+    String getResponsiblePackagePrefix();
+    
+    /**
+     * According the class name and annotations to judge whether the class should be excluded by spring bean.
+     *
+     * @param className       name of this class
+     * @param annotationNames annotations of this class
+     * @return {@code true} if should be excluded, otherwise {@code false}
+     */
+    boolean isExcluded(String className, Set<String> annotationNames);
+}
diff --git a/sys/src/main/java/com/alibaba/nacos/sys/filter/NacosTypeExcludeFilter.java b/sys/src/main/java/com/alibaba/nacos/sys/filter/NacosTypeExcludeFilter.java
new file mode 100644
index 0000000000..a2be2c4fbf
--- /dev/null
+++ b/sys/src/main/java/com/alibaba/nacos/sys/filter/NacosTypeExcludeFilter.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.nacos.sys.filter;
+
+import com.alibaba.nacos.common.spi.NacosServiceLoader;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.core.type.classreading.MetadataReader;
+import org.springframework.core.type.classreading.MetadataReaderFactory;
+import org.springframework.core.type.filter.TypeFilter;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Nacos server execute filter. To exclude some beans or features by config
+ *
+ * @author xiweng.yy
+ */
+public class NacosTypeExcludeFilter implements TypeFilter {
+    
+    private static final Logger LOGGER = LoggerFactory.getLogger(NacosTypeExcludeFilter.class);
+    
+    private final Map<String, NacosPackageExcludeFilter> packageExcludeFilters;
+    
+    public NacosTypeExcludeFilter() {
+        this.packageExcludeFilters = new HashMap<>(2);
+        for (NacosPackageExcludeFilter each : NacosServiceLoader.load(NacosPackageExcludeFilter.class)) {
+            packageExcludeFilters.put(each.getResponsiblePackagePrefix(), each);
+            LOGGER.info("Load Nacos package exclude filter success, package prefix {}, filter {}",
+                    each.getResponsiblePackagePrefix(), each.getClass().getCanonicalName());
+        }
+    }
+    
+    @Override
+    public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)
+            throws IOException {
+        // If no exclude filters, all classes should be load.
+        if (packageExcludeFilters.isEmpty()) {
+            return false;
+        }
+        boolean isSpringBootApplication = metadataReader.getAnnotationMetadata()
+                .hasAnnotation(SpringBootApplication.class.getCanonicalName());
+        String className = metadataReader.getClassMetadata().getClassName();
+        if (isSpringBootApplication) {
+            LOGGER.info("Skip @SpringBootApplication annotation for class {} to avoid duplicate scan", className);
+            return true;
+        }
+        for (Map.Entry<String, NacosPackageExcludeFilter> entry : packageExcludeFilters.entrySet()) {
+            // If match the package exclude filter, judged by filter.
+            if (className.startsWith(entry.getKey())) {
+                Set<String> annotations = metadataReader.getAnnotationMetadata().getAnnotationTypes();
+                return entry.getValue().isExcluded(className, annotations);
+            }
+        }
+        // No match filter, load class
+        return false;
+    }
+}
diff --git a/core/src/main/java/com/alibaba/nacos/core/utils/TimerContext.java b/sys/src/main/java/com/alibaba/nacos/sys/utils/TimerContext.java
similarity index 98%
rename from core/src/main/java/com/alibaba/nacos/core/utils/TimerContext.java
rename to sys/src/main/java/com/alibaba/nacos/sys/utils/TimerContext.java
index 4d9b53b63b..893a97e30f 100644
--- a/core/src/main/java/com/alibaba/nacos/core/utils/TimerContext.java
+++ b/sys/src/main/java/com/alibaba/nacos/sys/utils/TimerContext.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2018 Alibaba Group Holding Ltd.
+ * Copyright 1999-2023 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.nacos.core.utils;
+package com.alibaba.nacos.sys.utils;
 
 import com.alibaba.nacos.common.utils.LoggerUtils;
 import org.slf4j.Logger;
