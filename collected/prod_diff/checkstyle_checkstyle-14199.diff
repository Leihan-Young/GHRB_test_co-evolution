diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 35645d3eb..5570a996c 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -19,7 +19,9 @@
 
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
+import java.util.HashSet;
 import java.util.Optional;
+import java.util.Set;
 import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
@@ -150,8 +152,8 @@ public class FallThroughCheck extends AbstractCheck {
         if (!isLastGroup || checkLastCaseGroup) {
             final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
 
-            if (slist != null && !isTerminated(slist, true, true)
-                && !hasFallThroughComment(ast)) {
+            if (slist != null && !isTerminated(slist, true, true, new HashSet<>())
+                    && !hasFallThroughComment(ast)) {
                 if (isLastGroup) {
                     log(ast, MSG_FALL_THROUGH_LAST);
                 }
@@ -165,14 +167,17 @@ public class FallThroughCheck extends AbstractCheck {
     /**
      * Checks if a given subtree terminated by return, throw or,
      * if allowed break, continue.
+     * When analyzing fall-through cases in switch statements, a Set of String labels
+     * is used to keep track of the labels encountered in the enclosing switch statements.
      *
      * @param ast root of given subtree
      * @param useBreak should we consider break as terminator
      * @param useContinue should we consider continue as terminator
+     * @param labelsForCurrentSwitchScope the Set labels for the current scope of the switch
      * @return true if the subtree is terminated.
      */
     private boolean isTerminated(final DetailAST ast, boolean useBreak,
-                                 boolean useContinue) {
+                                 boolean useContinue, Set<String> labelsForCurrentSwitchScope) {
         final boolean terminated;
 
         switch (ast.getType()) {
@@ -182,30 +187,43 @@ public class FallThroughCheck extends AbstractCheck {
                 terminated = true;
                 break;
             case TokenTypes.LITERAL_BREAK:
-                terminated = useBreak;
+                terminated =
+                        useBreak || hasLabel(ast, labelsForCurrentSwitchScope);
                 break;
             case TokenTypes.LITERAL_CONTINUE:
-                terminated = useContinue;
+                terminated =
+                        useContinue || hasLabel(ast, labelsForCurrentSwitchScope);
                 break;
             case TokenTypes.SLIST:
-                terminated = checkSlist(ast, useBreak, useContinue);
+                terminated =
+                        checkSlist(ast, useBreak, useContinue, labelsForCurrentSwitchScope);
                 break;
             case TokenTypes.LITERAL_IF:
-                terminated = checkIf(ast, useBreak, useContinue);
+                terminated =
+                        checkIf(ast, useBreak, useContinue, labelsForCurrentSwitchScope);
                 break;
             case TokenTypes.LITERAL_FOR:
             case TokenTypes.LITERAL_WHILE:
             case TokenTypes.LITERAL_DO:
-                terminated = checkLoop(ast);
+                terminated = checkLoop(ast, labelsForCurrentSwitchScope);
                 break;
             case TokenTypes.LITERAL_TRY:
-                terminated = checkTry(ast, useBreak, useContinue);
+                terminated =
+                        checkTry(ast, useBreak, useContinue, labelsForCurrentSwitchScope);
                 break;
             case TokenTypes.LITERAL_SWITCH:
-                terminated = checkSwitch(ast, useContinue);
+                terminated =
+                        checkSwitch(ast, useContinue, labelsForCurrentSwitchScope);
                 break;
             case TokenTypes.LITERAL_SYNCHRONIZED:
-                terminated = checkSynchronized(ast, useBreak, useContinue);
+                terminated =
+                        checkSynchronized(ast, useBreak, useContinue, labelsForCurrentSwitchScope);
+                break;
+            case TokenTypes.LABELED_STAT:
+                labelsForCurrentSwitchScope.add(ast.getFirstChild().getText());
+                terminated =
+                        isTerminated(ast.getLastChild(), useBreak, useContinue,
+                                labelsForCurrentSwitchScope);
                 break;
             default:
                 terminated = false;
@@ -213,6 +231,22 @@ public class FallThroughCheck extends AbstractCheck {
         return terminated;
     }
 
+    /**
+     * Checks if given break or continue ast has outer label.
+     *
+     * @param statement break or continue node
+     * @param labelsForCurrentSwitchScope the Set labels for the current scope of the switch
+     * @return true if local label used
+     */
+    private static boolean hasLabel(DetailAST statement, Set<String> labelsForCurrentSwitchScope) {
+        return Optional.ofNullable(statement)
+                .map(DetailAST::getFirstChild)
+                .filter(child -> child.getType() == TokenTypes.IDENT)
+                .map(DetailAST::getText)
+                .filter(label -> !labelsForCurrentSwitchScope.contains(label))
+                .isPresent();
+    }
+
     /**
      * Checks if a given SLIST terminated by return, throw or,
      * if allowed break, continue.
@@ -220,10 +254,11 @@ public class FallThroughCheck extends AbstractCheck {
      * @param slistAst SLIST to check
      * @param useBreak should we consider break as terminator
      * @param useContinue should we consider continue as terminator
+     * @param labels label names
      * @return true if SLIST is terminated.
      */
     private boolean checkSlist(final DetailAST slistAst, boolean useBreak,
-                               boolean useContinue) {
+                               boolean useContinue, Set<String> labels) {
         DetailAST lastStmt = slistAst.getLastChild();
 
         if (lastStmt.getType() == TokenTypes.RCURLY) {
@@ -236,7 +271,7 @@ public class FallThroughCheck extends AbstractCheck {
         }
 
         return lastStmt != null
-            && isTerminated(lastStmt, useBreak, useContinue);
+            && isTerminated(lastStmt, useBreak, useContinue, labels);
     }
 
     /**
@@ -246,17 +281,18 @@ public class FallThroughCheck extends AbstractCheck {
      * @param ast IF to check
      * @param useBreak should we consider break as terminator
      * @param useContinue should we consider continue as terminator
+     * @param labels label names
      * @return true if IF is terminated.
      */
     private boolean checkIf(final DetailAST ast, boolean useBreak,
-                            boolean useContinue) {
+                            boolean useContinue, Set<String> labels) {
         final DetailAST thenStmt = getNextNonCommentAst(ast.findFirstToken(TokenTypes.RPAREN));
 
         final DetailAST elseStmt = getNextNonCommentAst(thenStmt);
 
         return elseStmt != null
-                && isTerminated(thenStmt, useBreak, useContinue)
-                && isTerminated(elseStmt.getLastChild(), useBreak, useContinue);
+                && isTerminated(thenStmt, useBreak, useContinue, labels)
+                && isTerminated(elseStmt.getLastChild(), useBreak, useContinue, labels);
     }
 
     /**
@@ -279,9 +315,10 @@ public class FallThroughCheck extends AbstractCheck {
      * if allowed break, continue.
      *
      * @param ast loop to check
+     * @param labels label names
      * @return true if loop is terminated.
      */
-    private boolean checkLoop(final DetailAST ast) {
+    private boolean checkLoop(final DetailAST ast, Set<String> labels) {
         final DetailAST loopBody;
         if (ast.getType() == TokenTypes.LITERAL_DO) {
             final DetailAST lparen = ast.findFirstToken(TokenTypes.DO_WHILE);
@@ -291,7 +328,7 @@ public class FallThroughCheck extends AbstractCheck {
             final DetailAST rparen = ast.findFirstToken(TokenTypes.RPAREN);
             loopBody = rparen.getNextSibling();
         }
-        return isTerminated(loopBody, false, false);
+        return isTerminated(loopBody, false, false, labels);
     }
 
     /**
@@ -301,13 +338,15 @@ public class FallThroughCheck extends AbstractCheck {
      * @param ast loop to check
      * @param useBreak should we consider break as terminator
      * @param useContinue should we consider continue as terminator
+     * @param labels label names
      * @return true if try/catch/finally block is terminated
      */
     private boolean checkTry(final DetailAST ast, boolean useBreak,
-                             boolean useContinue) {
+                             boolean useContinue, Set<String> labels) {
         final DetailAST finalStmt = ast.getLastChild();
         boolean isTerminated = finalStmt.getType() == TokenTypes.LITERAL_FINALLY
-                && isTerminated(finalStmt.findFirstToken(TokenTypes.SLIST), useBreak, useContinue);
+                && isTerminated(finalStmt.findFirstToken(TokenTypes.SLIST),
+                useBreak, useContinue, labels);
 
         if (!isTerminated) {
             DetailAST firstChild = ast.getFirstChild();
@@ -317,7 +356,7 @@ public class FallThroughCheck extends AbstractCheck {
             }
 
             isTerminated = isTerminated(firstChild,
-                    useBreak, useContinue);
+                    useBreak, useContinue, labels);
 
             DetailAST catchStmt = ast.findFirstToken(TokenTypes.LITERAL_CATCH);
             while (catchStmt != null
@@ -325,7 +364,7 @@ public class FallThroughCheck extends AbstractCheck {
                     && catchStmt.getType() == TokenTypes.LITERAL_CATCH) {
                 final DetailAST catchBody =
                         catchStmt.findFirstToken(TokenTypes.SLIST);
-                isTerminated = isTerminated(catchBody, useBreak, useContinue);
+                isTerminated = isTerminated(catchBody, useBreak, useContinue, labels);
                 catchStmt = catchStmt.getNextSibling();
             }
         }
@@ -338,15 +377,18 @@ public class FallThroughCheck extends AbstractCheck {
      *
      * @param literalSwitchAst loop to check
      * @param useContinue should we consider continue as terminator
+     * @param labels label names
      * @return true if switch is terminated
      */
-    private boolean checkSwitch(final DetailAST literalSwitchAst, boolean useContinue) {
+    private boolean checkSwitch(DetailAST literalSwitchAst,
+                                boolean useContinue, Set<String> labels) {
         DetailAST caseGroup = literalSwitchAst.findFirstToken(TokenTypes.CASE_GROUP);
         boolean isTerminated = caseGroup != null;
         while (isTerminated && caseGroup.getType() != TokenTypes.RCURLY) {
             final DetailAST caseBody =
                 caseGroup.findFirstToken(TokenTypes.SLIST);
-            isTerminated = caseBody != null && isTerminated(caseBody, false, useContinue);
+            isTerminated = caseBody != null
+                    && isTerminated(caseBody, false, useContinue, labels);
             caseGroup = caseGroup.getNextSibling();
         }
         return isTerminated;
@@ -359,12 +401,13 @@ public class FallThroughCheck extends AbstractCheck {
      * @param synchronizedAst synchronized block to check.
      * @param useBreak should we consider break as terminator
      * @param useContinue should we consider continue as terminator
+     * @param labels label names
      * @return true if synchronized block is terminated
      */
     private boolean checkSynchronized(final DetailAST synchronizedAst, boolean useBreak,
-                                      boolean useContinue) {
+                                      boolean useContinue, Set<String> labels) {
         return isTerminated(
-            synchronizedAst.findFirstToken(TokenTypes.SLIST), useBreak, useContinue);
+            synchronizedAst.findFirstToken(TokenTypes.SLIST), useBreak, useContinue, labels);
     }
 
     /**
