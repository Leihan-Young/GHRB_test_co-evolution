diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java
index ed66a3d..d8a4a83 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java
@@ -55,6 +55,7 @@ import javax.net.ssl.X509TrustManager;
 import java.io.InputStream;
 import java.net.URI;
 import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.security.Key;
 import java.security.KeyStore;
 import java.security.Provider;
@@ -65,13 +66,16 @@ import java.security.cert.X509Certificate;
 import java.util.AbstractMap;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 import static java.util.Objects.isNull;
 import static java.util.Objects.nonNull;
@@ -180,6 +184,8 @@ public final class SSLFactory {
         private final List<X509ExtendedTrustManager> trustManagers = new ArrayList<>();
         private final SSLParameters sslParameters = new SSLParameters();
         private final Map<String, List<URI>> preferredAliasToHost = new HashMap<>();
+        private final List<String> protocols = new ArrayList<>();
+        private final List<String> ciphers = new ArrayList<>();
 
         private boolean swappableKeyManagerEnabled = false;
         private boolean swappableTrustManagerEnabled = false;
@@ -203,6 +209,16 @@ public final class SSLFactory {
             return this;
         }
 
+        public Builder withSystemPropertyDerivedTrustMaterial() {
+            return withSystemPropertyDerivedMaterial(
+                    "javax.net.ssl.trustStore",
+                    "javax.net.ssl.trustStorePassword",
+                    "javax.net.ssl.trustStoreType",
+                    "javax.net.ssl.trustStoreProvider",
+                    this::withTrustMaterial
+            );
+        }
+
         /**
          * A shorter method for using the unsafe trust material
          *
@@ -305,6 +321,22 @@ public final class SSLFactory {
             return this;
         }
 
+        private Builder withTrustMaterial(Path trustStorePath, char[] trustStorePassword, String trustStoreType, String securityProviderName) {
+            if (isNull(trustStorePath)) {
+                throw new GenericKeyStoreException(TRUST_STORE_VALIDATION_EXCEPTION_MESSAGE);
+            }
+
+            KeyStore trustStore = KeyStoreUtils.loadKeyStore(trustStorePath, trustStorePassword, trustStoreType);
+
+            X509ExtendedTrustManager trustManager = securityProviderName == null
+                    ? TrustManagerUtils.createTrustManager(trustStore, TrustManagerFactory.getDefaultAlgorithm())
+                    : TrustManagerUtils.createTrustManager(trustStore, TrustManagerFactory.getDefaultAlgorithm(), securityProviderName);
+
+            trustManagers.add(trustManager);
+
+            return this;
+        }
+
         public Builder withTrustMaterial(Path trustStorePath,
                                          char[] trustStorePassword,
                                          String trustStoreType,
@@ -396,6 +428,16 @@ public final class SSLFactory {
             return withTrustMaterial(trustStore, trustOptions);
         }
 
+        public Builder withSystemPropertyDerivedIdentityMaterial() {
+            return withSystemPropertyDerivedMaterial(
+                    "javax.net.ssl.keyStore",
+                    "javax.net.ssl.keyStorePassword",
+                    "javax.net.ssl.keyStoreType",
+                    "javax.net.ssl.keyStoreProvider",
+                    this::withIdentityMaterial
+            );
+        }
+
         public Builder withIdentityMaterial(String identityStorePath, char[] identityStorePassword) {
             return withIdentityMaterial(identityStorePath, identityStorePassword, identityStorePassword, KeyStore.getDefaultType());
         }
@@ -442,6 +484,21 @@ public final class SSLFactory {
             return this;
         }
 
+        private Builder withIdentityMaterial(Path identityStorePath, char[] identityStorePassword, String identityStoreType, String securityProviderName) {
+            if (isNull(identityStorePath)) {
+                throw new GenericKeyStoreException(IDENTITY_VALIDATION_EXCEPTION_MESSAGE);
+            }
+
+            KeyStore identity = KeyStoreUtils.loadKeyStore(identityStorePath, identityStorePassword, identityStoreType);
+
+            X509ExtendedKeyManager keyManager = securityProviderName == null
+                    ? KeyManagerUtils.createKeyManager(identity, identityStorePassword, KeyManagerFactory.getDefaultAlgorithm())
+                    : KeyManagerUtils.createKeyManager(identity, identityStorePassword, KeyManagerFactory.getDefaultAlgorithm(), securityProviderName);
+
+            identityManagers.add(keyManager);
+            return this;
+        }
+
         public Builder withIdentityMaterial(InputStream identityStream, char[] identityStorePassword) {
             return withIdentityMaterial(identityStream, identityStorePassword, identityStorePassword);
         }
@@ -563,15 +620,40 @@ public final class SSLFactory {
         }
 
         public Builder withCiphers(String... ciphers) {
-            sslParameters.setCipherSuites(ciphers);
+            this.ciphers.addAll(Arrays.asList(ciphers));
+            return this;
+        }
+
+        public Builder withSystemPropertyDerivedCiphers() {
+            extractPropertyValues("https.cipherSuites", "jdk.tls.client.cipherSuites", "jdk.tls.server.cipherSuites")
+                    .forEach(ciphers::add);
             return this;
         }
 
         public Builder withProtocols(String... protocols) {
-            sslParameters.setProtocols(protocols);
+            this.protocols.addAll(Arrays.asList(protocols));
             return this;
         }
 
+        public Builder withSystemPropertyDerivedProtocols() {
+            extractPropertyValues("https.protocols", "jdk.tls.client.protocols", "jdk.tls.server.protocols")
+                    .forEach(protocols::add);
+            return this;
+        }
+
+        private Stream<String> extractPropertyValues(String... systemProperties) {
+            return Stream.of(systemProperties)
+                    .map(System::getProperty)
+                    .filter(Objects::nonNull)
+                    .filter(StringUtils::isNotBlack)
+                    .map(protocolGroup -> protocolGroup.split(","))
+                    .map(Arrays::asList)
+                    .flatMap(Collection::stream)
+                    .map(String::trim)
+                    .filter(StringUtils::isNotBlack)
+                    .distinct();
+        }
+
         public Builder withNeedClientAuthentication() {
             return withNeedClientAuthentication(true);
         }
@@ -641,6 +723,42 @@ public final class SSLFactory {
             return this;
         }
 
+        private Builder withSystemPropertyDerivedMaterial(String keyStorePathProperty,
+                                                          String keyStorePasswordProperty,
+                                                          String keyStoreTypeProperty,
+                                                          String securityProviderNameProperty,
+                                                          QuadConsumer<Path, char[], String, String> keyStorePropertyConsumer) {
+
+            Path keystore = Optional.ofNullable(System.getProperty(keyStorePathProperty))
+                    .map(String::trim)
+                    .filter(StringUtils::isNotBlack)
+                    .map(Paths::get)
+                    .orElse(null);
+
+            char[] keystorePassword = Optional.ofNullable(System.getProperty(keyStorePasswordProperty))
+                    .map(String::trim)
+                    .filter(StringUtils::isNotBlack)
+                    .map(String::toCharArray)
+                    .orElse(null);
+
+            String keystoreType = Optional.ofNullable(System.getProperty(keyStoreTypeProperty))
+                    .map(String::trim)
+                    .filter(StringUtils::isNotBlack)
+                    .orElseGet(KeyStore::getDefaultType);
+
+            String securityProvideName = Optional.ofNullable(System.getProperty(securityProviderNameProperty))
+                    .map(String::trim)
+                    .filter(StringUtils::isNotBlack)
+                    .orElse(null);
+
+            keyStorePropertyConsumer.accept(keystore, keystorePassword, keystoreType, securityProvideName);
+            return this;
+        }
+
+        interface QuadConsumer<T, U, V, W> {
+            void accept(T t, U u, V v, W w);
+        }
+
         public SSLFactory build() {
             if (!isIdentityMaterialPresent() && !isTrustMaterialPresent()) {
                 throw new GenericSecurityException(IDENTITY_AND_TRUST_MATERIAL_VALIDATION_EXCEPTION_MESSAGE);
@@ -665,6 +783,8 @@ public final class SSLFactory {
                 SSLSessionUtils.updateSessionCacheSize(sslContext, sessionCacheSizeInBytes);
             }
 
+            sslParameters.setCipherSuites(ciphers.isEmpty() ? null : ciphers.stream().distinct().toArray(String[]::new));
+            sslParameters.setProtocols(protocols.isEmpty() ? null : protocols.stream().distinct().toArray(String[]::new));
             SSLParameters baseSslParameters = SSLParametersUtils.merge(sslParameters, sslContext.getDefaultSSLParameters());
 
             SSLMaterial sslMaterial = new SSLMaterial.Builder()
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/StringUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/StringUtils.java
index de3b2c4..cb86fe9 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/StringUtils.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/StringUtils.java
@@ -37,4 +37,8 @@ public final class StringUtils {
         return true;
     }
 
+    public static boolean isNotBlack(CharSequence charSequence) {
+        return !isBlank(charSequence);
+    }
+
 }
