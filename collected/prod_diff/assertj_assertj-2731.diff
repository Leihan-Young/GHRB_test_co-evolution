diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java
index 9e3e6ad61..589283c24 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java
@@ -13,6 +13,12 @@
 package org.assertj.core.api;
 
 import static org.assertj.core.api.Assertions.contentOf;
+import static org.assertj.core.error.ShouldBeASCII.shouldBeASCII;
+import static org.assertj.core.error.ShouldBeAlphabetic.shouldBeAlphabetic;
+import static org.assertj.core.error.ShouldBeAlphanumeric.shouldBeAlphanumeric;
+import static org.assertj.core.error.ShouldBeHexadecimal.shouldBeHexadecimal;
+import static org.assertj.core.error.ShouldBePrintable.shouldBePrintable;
+import static org.assertj.core.error.ShouldBeVisible.shouldBeVisible;
 import static org.assertj.core.util.IterableUtil.toArray;
 
 import java.io.File;
@@ -618,6 +624,7 @@ public abstract class AbstractCharSequenceAssert<SELF extends AbstractCharSequen
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual {@code CharSequence} contains non-digit characters or is {@code null}.
    */
+  @Deprecated
   public SELF containsOnlyDigits() {
     strings.assertContainsOnlyDigits(info, actual);
     return myself;
@@ -1929,4 +1936,162 @@ public abstract class AbstractCharSequenceAssert<SELF extends AbstractCharSequen
     strings.assertEqualsToNormalizingUnicode(info, actual, expected);
     return myself;
   }
+
+  /**
+   * Verifies that the actual {@code CharSequence} is alphabetic by checking it against the {@code \p{Alpha}+} regex pattern
+   * POSIX character classes (US-ASCII only).
+   * <p>
+   * Example:
+   * <pre><code class='java'> // assertions will pass
+   * assertThat(&quot;lego&quot;).isAlphabetic();
+   * assertThat(&quot;a&quot;).isAlphabetic();
+   * assertThat(&quot;Lego&quot;).isAlphabetic();
+   *
+   * // assertions will fail
+   * assertThat(&quot;1&quot;).isAlphabetic();
+   * assertThat(&quot; &quot;).isAlphabetic();
+   * assertThat(&quot;&quot;).isAlphabetic();
+   * assertThat(&quot;L3go&quot;).isAlphabetic();</code></pre>
+   *
+   * @return {@code this} assertion object.
+   * @throws AssertionError if the actual {@code CharSequence} is not alphabetic.
+   * @see <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.regex.Pattern</a>
+   */
+  public SELF isAlphabetic(){
+    isNotNull();
+    if (!Pattern.matches("\\p{Alpha}+", actual)) throwAssertionError(shouldBeAlphabetic(actual));
+    return myself;
+  }
+
+  /**
+   * Verifies that the actual {@code CharSequence} is alphanumeric by checking it against the {@code \p{Alnum}+} regex pattern
+   * POSIX character classes (US-ASCII only).
+   * <p>
+   * Example:
+   * <pre><code class='java'> // assertions will pass
+   * assertThat(&quot;lego&quot;).isAlphanumeric();
+   * assertThat(&quot;a1&quot;).isAlphanumeric();
+   * assertThat(&quot;L3go&quot;).isAlphanumeric();
+   *
+   * // assertions will fail
+   * assertThat(&quot;!&quot;).isAlphanumeric();
+   * assertThat(&quot;&quot;).isAlphanumeric();
+   * assertThat(&quot; &quot;).isAlphanumeric();
+   * assertThat(&quot;L3go!&quot;).isAlphanumeric();</code></pre>
+   *
+   * @return {@code this} assertion object.
+   * @throws AssertionError if the actual {@code CharSequence} is not alphanumeric.
+   * @see <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.regex.Pattern</a>
+   */
+  public SELF isAlphanumeric(){
+    isNotNull();
+    if (!Pattern.matches("\\p{Alnum}+", actual)) throwAssertionError(shouldBeAlphanumeric(actual));
+    return myself;
+  }
+
+  /**
+   * Verifies that the actual {@code CharSequence} is ASCII by checking it against the {@code \p{ASCII}+} regex pattern
+   * POSIX character classes (US-ASCII only).
+   * <p>
+   * Example:
+   * <pre><code class='java'> // assertions will pass
+   * assertThat(&quot;lego&quot;).isASCII();
+   * assertThat(&quot;a1&quot;).isASCII();
+   * assertThat(&quot;L3go&quot;).isASCII();
+   *
+   * // assertions will fail
+   * assertThat(&quot;&quot;).isASCII();
+   * assertThat(&quot;♪&quot;).isASCII();
+   * assertThat(&quot;\u2303&quot;).isASCII();
+   * assertThat(&quot;L3go123\u230300abc&quot;).isASCII();</code></pre>
+   *
+   * @return {@code this} assertion object.
+   * @throws AssertionError if the actual {@code CharSequence} is not ASCII.
+   * @see <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.regex.Pattern</a>
+   */
+  public SELF isASCII(){
+    isNotNull();
+    if (!Pattern.matches("\\p{ASCII}+", actual)) throwAssertionError(shouldBeASCII(actual));
+    return myself;
+  }
+
+  /**
+   * Verifies that the actual {@code CharSequence} is hexadecimal by checking it against the {@code \p{XDigit}+} regex pattern
+   * POSIX character classes (US-ASCII only).
+   * <p>
+   * Example:
+   * <pre><code class='java'> // assertions will pass
+   * assertThat(&quot;A&quot;).isHexadecimal();
+   * assertThat(&quot;2&quot;).isHexadecimal();
+   *
+   * // assertions will fail
+   * assertThat(&quot;!&quot;).isHexadecimal();
+   * assertThat(&quot;&quot;).isHexadecimal();
+   * assertThat(&quot; &quot;).isHexadecimal();
+   * assertThat(&quot;Z&quot;).isHexadecimal();
+   * assertThat(&quot;L3go!&quot;).isHexadecimal();</code></pre>
+   *
+   * @return {@code this} assertion object.
+   * @throws AssertionError if the actual {@code CharSequence} is not hexadecimal.
+   * @see <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.regex.Pattern</a>
+   */
+  public SELF isHexadecimal(){
+    isNotNull();
+    if (!Pattern.matches("\\p{XDigit}+", actual)) throwAssertionError(shouldBeHexadecimal(actual));
+    return myself;
+  }
+
+  /**
+   * Verifies that the actual {@code CharSequence} is printable by checking it against the {@code \p{Print}+} regex pattern
+   * POSIX character classes (US-ASCII only).
+   * <p>
+   * Example:
+   * <pre><code class='java'> // assertions will pass
+   * assertThat(&quot;2&quot;).isPrintable();
+   * assertThat(&quot;a&quot;).isPrintable();
+   * assertThat(&quot;~&quot;).isPrintable();
+   * assertThat(&quot;&quot;).isPrintable();
+   *
+   * // assertions will fail
+   * assertThat(&quot;\t&quot;).isPrintable();
+   * assertThat(&quot;§&quot;).isPrintable();
+   * assertThat(&quot;©&quot;).isPrintable();
+   * assertThat(&quot;\n&quot;).isPrintable();</code></pre>
+   *
+   * @return {@code this} assertion object.
+   * @throws AssertionError if the actual {@code CharSequence} is not printable.
+   * @see <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.regex.Pattern</a>
+   */
+  public SELF isPrintable(){
+    isNotNull();
+    if (!Pattern.matches("\\p{Print}+", actual)) throwAssertionError(shouldBePrintable(actual));
+    return myself;
+  }
+
+  /**
+   * Verifies that the actual {@code CharSequence} is visible by checking it against the {@code \p{Graph}+} regex pattern
+   * POSIX character classes (US-ASCII only).
+   * <p>
+   * Example:
+   * <pre><code class='java'> // assertions will pass
+   * assertThat(&quot;2&quot;).isVisible();
+   * assertThat(&quot;a&quot;).isVisible();
+   * assertThat(&quot;.&quot;).isVisible();
+   *
+   * // assertions will fail
+   * assertThat(&quot;\t&quot;).isVisible();
+   * assertThat(&quot;\n&quot;).isVisible();
+   * assertThat(&quot;&quot;).isVisible();
+   * assertThat(&quot; &quot;).isVisible();</code></pre>
+   *
+   * @return {@code this} assertion object.
+   * @throws AssertionError if the actual {@code CharSequence} is not visible.
+   * @see <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.regex.Pattern</a>
+   */
+  public SELF isVisible(){
+    isNotNull();
+    if (!Pattern.matches("\\p{Graph}+", actual)) throwAssertionError(shouldBeVisible(actual));
+    return myself;
+  }
+
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeASCII.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeASCII.java
new file mode 100644
index 000000000..3fdc3f839
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeASCII.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+public class ShouldBeASCII extends BasicErrorMessageFactory {
+  public static ErrorMessageFactory shouldBeASCII(Object actual) {
+    return new ShouldBeASCII(actual);
+  }
+
+  private ShouldBeASCII(Object actual) {
+    super("%nExpecting %s to be ASCII", actual);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphabetic.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphabetic.java
new file mode 100644
index 000000000..dc1e2e6c5
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphabetic.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+public class ShouldBeAlphabetic extends BasicErrorMessageFactory {
+  public static ErrorMessageFactory shouldBeAlphabetic(Object actual) {
+    return new ShouldBeAlphabetic(actual);
+  }
+
+  private ShouldBeAlphabetic(Object actual) {
+    super("%nExpecting %s to be alphabetic", actual);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphanumeric.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphanumeric.java
new file mode 100644
index 000000000..a602aa73d
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphanumeric.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+public class ShouldBeAlphanumeric extends BasicErrorMessageFactory {
+  public static ErrorMessageFactory shouldBeAlphanumeric(Object actual) {
+    return new ShouldBeAlphanumeric(actual);
+  }
+
+  private ShouldBeAlphanumeric(Object actual) {
+    super("%nExpecting %s to be alphanumeric", actual);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeHexadecimal.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeHexadecimal.java
new file mode 100644
index 000000000..a89db878b
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeHexadecimal.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+public class ShouldBeHexadecimal extends BasicErrorMessageFactory {
+  public static ErrorMessageFactory shouldBeHexadecimal(Object actual) {
+    return new ShouldBeHexadecimal(actual);
+  }
+
+  private ShouldBeHexadecimal(Object actual) {
+    super("%nExpecting %s to be hexadecimal", actual);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrintable.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrintable.java
new file mode 100644
index 000000000..31ff3901b
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrintable.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+public class ShouldBePrintable extends BasicErrorMessageFactory {
+  public static ErrorMessageFactory shouldBePrintable(Object actual) {
+    return new ShouldBePrintable(actual);
+  }
+
+  private ShouldBePrintable(Object actual) {
+    super("%nExpecting %s to be printable", actual);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeVisible.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeVisible.java
new file mode 100644
index 000000000..c1177ba90
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeVisible.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+public class ShouldBeVisible extends BasicErrorMessageFactory {
+  public static ErrorMessageFactory shouldBeVisible(Object actual) {
+    return new ShouldBeVisible(actual);
+  }
+
+  private ShouldBeVisible(Object actual) {
+    super("%nExpecting %s to be visible", actual);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Strings.java b/assertj-core/src/main/java/org/assertj/core/internal/Strings.java
index 5ad55798c..098e3c5d9 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Strings.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Strings.java
@@ -34,6 +34,7 @@ import static org.assertj.core.error.ShouldBeMixedCase.shouldBeMixedCase;
 import static org.assertj.core.error.ShouldBeNullOrEmpty.shouldBeNullOrEmpty;
 import static org.assertj.core.error.ShouldBeSubstring.shouldBeSubstring;
 import static org.assertj.core.error.ShouldBeUpperCase.shouldBeUpperCase;
+import static org.assertj.core.error.ShouldBeVisible.shouldBeVisible;
 import static org.assertj.core.error.ShouldContainAnyOf.shouldContainAnyOf;
 import static org.assertj.core.error.ShouldContainCharSequence.containsIgnoringNewLines;
 import static org.assertj.core.error.ShouldContainCharSequence.shouldContain;
@@ -1392,4 +1393,9 @@ public class Strings {
     checkIsNotEmpty(sequence);
     checkCharSequenceArrayDoesNotHaveNullElements(sequence);
   }
+
+  public void assertVisible(AssertionInfo info, CharSequence actual) {
+    assertNotNull(info, actual);
+    if (!Pattern.matches("\\p{Graph}*", actual)) throw failures.failure(info, shouldBeVisible(actual));
+  }
 }
