diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java
index 7fe28d0..efee4b1 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/SSLFactory.java
@@ -188,6 +188,8 @@ public final class SSLFactory {
         private final Map<String, List<URI>> preferredAliasToHost = new HashMap<>();
         private final List<String> protocols = new ArrayList<>();
         private final List<String> ciphers = new ArrayList<>();
+        private final List<String> excludedProtocols = new ArrayList<>();
+        private final List<String> excludedCiphers = new ArrayList<>();
 
         private boolean swappableKeyManagerEnabled = false;
         private boolean swappableTrustManagerEnabled = false;
@@ -685,6 +687,11 @@ public final class SSLFactory {
             return this;
         }
 
+        public Builder withExcludedCiphers(String... ciphers) {
+            this.excludedCiphers.addAll(Arrays.asList(ciphers));
+            return this;
+        }
+
         public Builder withSystemPropertyDerivedCiphers() {
             ciphers.addAll(extractPropertyValues("https.cipherSuites"));
             return this;
@@ -695,6 +702,11 @@ public final class SSLFactory {
             return this;
         }
 
+        public Builder withExcludedProtocols(String... protocols) {
+            this.excludedProtocols.addAll(Arrays.asList(protocols));
+            return this;
+        }
+
         public Builder withSystemPropertyDerivedProtocols() {
             protocols.addAll(extractPropertyValues("https.protocols"));
             return this;
@@ -927,7 +939,7 @@ public final class SSLFactory {
             sslParameters.setCipherSuites(preferredCiphers);
             sslParameters.setProtocols(preferredProtocols);
 
-            return SSLParametersUtils.merge(sslParameters, defaultSSLParameters);
+            return SSLParametersUtils.merge(sslParameters, defaultSSLParameters, excludedCiphers, excludedProtocols);
         }
 
     }
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/SSLParametersUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/SSLParametersUtils.java
index 2563a4c..fe2b1e3 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/SSLParametersUtils.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/SSLParametersUtils.java
@@ -16,6 +16,9 @@
 package nl.altindag.ssl.util;
 
 import javax.net.ssl.SSLParameters;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 import java.util.Optional;
 
 /**
@@ -41,6 +44,10 @@ public final class SSLParametersUtils {
     }
 
     public static SSLParameters merge(SSLParameters baseSslParameters, SSLParameters alternativeSslParameters) {
+        return merge(baseSslParameters, alternativeSslParameters, Collections.emptyList(), Collections.emptyList());
+    }
+
+    public static SSLParameters merge(SSLParameters baseSslParameters, SSLParameters alternativeSslParameters, List<String> excludedCiphers, List<String> excludedProtocols) {
         SSLParameters target = new SSLParameters();
 
         String[] ciphers = Optional.ofNullable(baseSslParameters.getCipherSuites())
@@ -50,6 +57,26 @@ public final class SSLParametersUtils {
                 .filter(array -> array.length != 0)
                 .orElseGet(alternativeSslParameters::getProtocols);
 
+        if (!excludedCiphers.isEmpty()) {
+            ciphers = Arrays.stream(ciphers)
+                    .filter(cipher -> !excludedCiphers.contains(cipher))
+                    .toArray(String[]::new);
+
+            if (ciphers.length == 0) {
+                ciphers = alternativeSslParameters.getCipherSuites();
+            }
+        }
+
+        if (!excludedProtocols.isEmpty()) {
+            protocols = Arrays.stream(protocols)
+                    .filter(cipher -> !excludedProtocols.contains(cipher))
+                    .toArray(String[]::new);
+
+            if (protocols.length == 0) {
+                protocols = alternativeSslParameters.getProtocols();
+            }
+        }
+
         target.setCipherSuites(ciphers);
         target.setProtocols(protocols);
 
