diff --git a/rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java b/rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java
index ffd809dcf..3b2e1f746 100644
--- a/rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java
+++ b/rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java
@@ -22,7 +22,9 @@ import java.sql.Statement;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.StringJoiner;
+import java.util.TreeSet;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
@@ -193,18 +195,6 @@ public abstract class BaseTransactionalExecutor<T, S extends Statement> implemen
         return limitCondition;
     }
 
-    /**
-     * Gets column name in sql.
-     *
-     * @param columnName the column name
-     * @return the column name in sql
-     */
-    protected String getColumnNameInSQL(String columnName) {
-        String tableAlias = sqlRecognizer.getTableAlias();
-        return tableAlias == null ? columnName : tableAlias + "." + columnName;
-    }
-
-
     /**
      * Gets column name with table prefix
      *
@@ -236,10 +226,12 @@ public abstract class BaseTransactionalExecutor<T, S extends Statement> implemen
     /**
      * Gets several column name in sql.
      *
+     * @param table          the table
+     * @param tableAlias     the table alias
      * @param columnNameList the column name
      * @return the column name in sql
      */
-    protected String getColumnNamesInSQL(List<String> columnNameList) {
+    protected String getColumnNamesWithTablePrefix(String table,String tableAlias, List<String> columnNameList) {
         if (CollectionUtils.isEmpty(columnNameList)) {
             return null;
         }
@@ -248,20 +240,43 @@ public abstract class BaseTransactionalExecutor<T, S extends Statement> implemen
             if (i > 0) {
                 columnNamesStr.append(" , ");
             }
-            columnNamesStr.append(getColumnNameInSQL(columnNameList.get(i)));
+            columnNamesStr.append(getColumnNameWithTablePrefix(table, tableAlias, columnNameList.get(i)));
         }
         return columnNamesStr.toString();
     }
 
+    /**
+     * Gets column name in sql.
+     *
+     * @param columnName the column name
+     * @return the column name in sql
+     */
+    protected String getColumnNameInSQL(String columnName) {
+        String tableAlias = sqlRecognizer.getTableAlias();
+        return tableAlias == null ? columnName : tableAlias + "." + columnName;
+    }
+
+    /**
+     * Gets column names in sql.
+     *
+     * @param columnNames the column names
+     * @return
+     */
+    protected List<String> getColumnNamesInSQLList(List<String> columnNames) {
+        List<String> columnNameWithTableAlias = new ArrayList<>();
+        for (String columnName : columnNames) {
+            columnNameWithTableAlias.add(this.getColumnNameInSQL(columnName));
+        }
+        return columnNameWithTableAlias;
+    }
+
     /**
      * Gets several column name in sql.
      *
-     * @param table          the table
-     * @param tableAlias     the table alias
      * @param columnNameList the column name
      * @return the column name in sql
      */
-    protected String getColumnNamesWithTablePrefix(String table,String tableAlias, List<String> columnNameList) {
+    protected String getColumnNamesInSQL(List<String> columnNameList) {
         if (CollectionUtils.isEmpty(columnNameList)) {
             return null;
         }
@@ -270,7 +285,7 @@ public abstract class BaseTransactionalExecutor<T, S extends Statement> implemen
             if (i > 0) {
                 columnNamesStr.append(" , ");
             }
-            columnNamesStr.append(getColumnNameWithTablePrefix(table,tableAlias, columnNameList.get(i)));
+            columnNamesStr.append(getColumnNameInSQL(columnNameList.get(i)));
         }
         return columnNamesStr.toString();
     }
@@ -517,22 +532,24 @@ public abstract class BaseTransactionalExecutor<T, S extends Statement> implemen
     }
 
     protected List<String> getNeedColumns(String table, String tableAlias, List<String> unescapeColumns) {
-        List<String> needUpdateColumns = new ArrayList<>();
+        Set<String> needUpdateColumns = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
         TableMeta tableMeta = getTableMeta(table);
         if (ONLY_CARE_UPDATE_COLUMNS && CollectionUtils.isNotEmpty(unescapeColumns)) {
             if (!containsPK(table, unescapeColumns)) {
                 List<String> pkNameList = tableMeta.getEscapePkNameList(getDbType());
                 if (CollectionUtils.isNotEmpty(pkNameList)) {
                     if (StringUtils.isNotBlank(tableAlias)) {
-                        needUpdateColumns.add(getColumnNamesWithTablePrefix(table, tableAlias, pkNameList));
+                        needUpdateColumns.addAll(
+                                ColumnUtils.delEscape(getColumnNamesWithTablePrefixList(table, tableAlias, pkNameList), getDbType())
+                        );
                     } else {
-                        needUpdateColumns.add(getColumnNamesInSQL(pkNameList));
+                        needUpdateColumns.addAll(
+                                ColumnUtils.delEscape(getColumnNamesInSQLList(pkNameList), getDbType())
+                        );
                     }
                 }
             }
-            needUpdateColumns.addAll(unescapeColumns.stream()
-                .map(unescapeUpdateColumn -> ColumnUtils.addEscape(unescapeUpdateColumn, getDbType(), tableMeta)).collect(
-                    Collectors.toList()));
+            needUpdateColumns.addAll(unescapeColumns);
 
             // The on update xxx columns will be auto update by db, so it's also the actually updated columns
             List<String> onUpdateColumns = tableMeta.getOnUpdateColumnsOnlyName();
@@ -541,19 +558,15 @@ public abstract class BaseTransactionalExecutor<T, S extends Statement> implemen
                         .map(onUpdateColumn -> getColumnNameWithTablePrefix(table, tableAlias, onUpdateColumn))
                         .collect(Collectors.toList());
             }
-            onUpdateColumns.removeAll(unescapeColumns);
-            needUpdateColumns.addAll(onUpdateColumns.stream()
-                .map(onUpdateColumn -> ColumnUtils.addEscape(onUpdateColumn, getDbType(), tableMeta))
-                .collect(Collectors.toList()));
+            needUpdateColumns.addAll(onUpdateColumns);
         } else {
             Stream<String> allColumns = tableMeta.getAllColumns().keySet().stream();
             if (StringUtils.isNotBlank(tableAlias)) {
                 allColumns = allColumns.map(columnName -> getColumnNameWithTablePrefix(table, tableAlias, columnName));
             }
-            allColumns = allColumns.map(columnName -> ColumnUtils.addEscape(columnName, getDbType(), tableMeta));
             allColumns.forEach(needUpdateColumns::add);
         }
-        return needUpdateColumns;
+        return needUpdateColumns.stream().map(column -> ColumnUtils.addEscape(column, getDbType(), tableMeta)).collect(Collectors.toList());
     }
 
     /**
