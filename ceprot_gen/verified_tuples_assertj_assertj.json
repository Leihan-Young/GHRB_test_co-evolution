{
  "1": {
    "commit_src": "5fc69d002aac2a97dbfedfdd6085638ff1fca3f5",
    "commit_tgt": "cf63f1d8cf511dc76cd5a80fa06837265b74872e",
    "changed_tests": [
      "src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_containsAnyOf_Test.java",
      "src/test/java/org/assertj/core/error/ShouldContainAnyOf_create_Test.java",
      "src/test/java/org/assertj/core/internal/Arrays_containsAnyOf_Test.java",
      "src/test/java/org/assertj/core/internal/iterables/Iterables_assertContainsAnyOf_Test.java",
      "src/test/java/org/assertj/core/internal/strings/Strings_assertContainsAnyOf_Test.java",
      "src/test/java/org/assertj/core/internal/strings/Strings_assertContains_Test.java"
    ],
    "refer_PR": "assertj_assertj-2309",
    "test_src": ".org.assertj.core.error.ShouldContainAnyOf_create_Test#should_create_error_message",
    "test_tgt": [
      ".org.assertj.core.error.ShouldContainAnyOf_create_Test#should_create_error_message"
    ],
    "test_src_code": "  @Test\n  void should_create_error_message() {\n    // GIVEN\n    ErrorMessageFactory factory = shouldContainAnyOf(list(\"Yoda\", \"Han\", \"Han\"), list(\"Vador\", \"Leia\"));\n    // WHEN\n    String message = factory.create(new TextDescription(\"Test\"), CONFIGURATION_PROVIDER.representation());\n    // THEN\n    then(message).isEqualTo(format(\"[Test] %n\" +\n                                   \"Expecting actual:%n\" +\n                                   \"  [\\\"Yoda\\\", \\\"Han\\\", \\\"Han\\\"]%n\" +\n                                   \"to contain at least one of the following elements:%n\" +\n                                   \"  [\\\"Vador\\\", \\\"Leia\\\"]%n\" +\n                                   \"but none were found \"));\n  }\n",
    "focal_path": "src/main/java/org/assertj/core/error/ShouldContainAnyOf.java#shouldContainAnyOf",
    "focal_src": "  public static ErrorMessageFactory shouldContainAnyOf(Object actual, Object expected) {\n    return shouldContainAnyOf(actual, expected, StandardComparisonStrategy.instance());\n  }\n",
    "focal_tgt": "  public static ErrorMessageFactory shouldContainAnyOf(Object actual, Object expected) {\n    return new ShouldContainAnyOf(actual, expected);\n  }\n",
    "test_id": 1,
    "edit_seq": [
      [
        "public",
        "public",
        "equal"
      ],
      [
        "static",
        "static",
        "equal"
      ],
      [
        "Error",
        "Error",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Message",
        "Message",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Factory",
        "Factory",
        "equal"
      ],
      [
        "should",
        "should",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Contain",
        "Contain",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Any",
        "Any",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Of",
        "Of",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "Object",
        "Object",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        ",",
        ",",
        "equal"
      ],
      [
        "Object",
        "Object",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        "{",
        "{",
        "equal"
      ],
      [
        "return",
        "return",
        "equal"
      ],
      [
        "",
        "new",
        "insert"
      ],
      [
        "should",
        "Should",
        "replace"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Contain",
        "Contain",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Any",
        "Any",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Of",
        "Of",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        ",",
        ",",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        ",",
        "",
        "delete"
      ],
      [
        "Standard",
        "",
        "delete"
      ],
      [
        "<con>",
        "",
        "delete"
      ],
      [
        "Comparison",
        "",
        "delete"
      ],
      [
        "<con>",
        "",
        "delete"
      ],
      [
        "Strategy",
        "",
        "delete"
      ],
      [
        ".",
        "",
        "delete"
      ],
      [
        "instance",
        "",
        "delete"
      ],
      [
        "(",
        "",
        "delete"
      ],
      [
        ")",
        "",
        "delete"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        ";",
        ";",
        "equal"
      ],
      [
        "}",
        "}",
        "equal"
      ]
    ],
    "CEPROT_gen_test_tgt": "@Test\n  void should_create_error_message() {\n    // GIVEN\n    ErrorMessageFactory factory = shouldContainAnyOf(list(\"Yoda\", \"Han\", \"Han\"), list(\"Vador\", \"Leia\"));\n    // WHEN\n    String message = factory.create(new TextDescription(\"Test\"), CONFIGURATION_PROVIDER.representation());\n    // THEN\n    then(message).isEqualTo(format(\"[Test] %n\" +\n                                   \"Expecting actual:%n\" +\n                                   \"  \\\\\"Yoda\\\\\", \\\\\"Han\\\\\", \\\\\"Han\\\\\"]%n\"),"
  },
  "2": {
    "commit_src": "8a7843e2d8621cae892c938996be6c294c3152ce",
    "commit_tgt": "ceff95a59349ad3d6c3b85844df32d8f93c41c69",
    "changed_tests": [
      "assertj-core/src/test/java/org/assertj/core/api/Assertions_catchThrowableOfType_Test.java",
      "assertj-core/src/test/java/org/assertj/core/api/EntryPointAssertions_catchThrowableOfType_Test.java"
    ],
    "refer_PR": "assertj_assertj-2823",
    "test_src": ".org.assertj.core.api.Assertions_catchThrowableOfType_Test#catchThrowableOfType_should_fail_with_good_message_if_wrong_type",
    "test_tgt": [
      ".org.assertj.core.api.Assertions_catchThrowableOfType_Test#catchThrowableOfType_should_fail_with_good_message_if_wrong_type"
    ],
    "test_src_code": "  @Test\n  void catchThrowableOfType_should_fail_with_good_message_if_wrong_type() {\n    // GIVEN\n    ThrowingCallable code = () -> catchThrowableOfType(raisingException(\"boom!!\"), RuntimeException.class);\n    // WHEN\n    AssertionError assertionError = expectAssertionError(code);\n    // THEN\n    assertThat(assertionError).hasMessageContainingAll(RuntimeException.class.getName(), Exception.class.getName());\n  }\n",
    "focal_path": "assertj-core/src/main/java/org/assertj/core/api/Assertions.java#catchThrowableOfType",
    "focal_src": "  public static <THROWABLE extends Throwable> THROWABLE catchThrowableOfType(ThrowingCallable shouldRaiseThrowable,\n                                                                             Class<THROWABLE> type) {\n    return AssertionsForClassTypes.catchThrowableOfType(shouldRaiseThrowable, type);\n  }\n",
    "focal_tgt": "  @Deprecated\n  public static <THROWABLE extends Throwable> THROWABLE catchThrowableOfType(ThrowingCallable shouldRaiseThrowable,\n                                                                             Class<THROWABLE> type) {\n    return AssertionsForClassTypes.catchThrowableOfType(type, shouldRaiseThrowable);\n  }\n",
    "test_id": 2,
    "edit_seq": [
      [
        "",
        "@",
        "insert"
      ],
      [
        "",
        "Deprecated",
        "insert"
      ],
      [
        "public",
        "public",
        "equal"
      ],
      [
        "static",
        "static",
        "equal"
      ],
      [
        "<",
        "<",
        "equal"
      ],
      [
        "THROWABLE",
        "THROWABLE",
        "equal"
      ],
      [
        "extends",
        "extends",
        "equal"
      ],
      [
        "Throwable",
        "Throwable",
        "equal"
      ],
      [
        ">",
        ">",
        "equal"
      ],
      [
        "THROWABLE",
        "THROWABLE",
        "equal"
      ],
      [
        "catch",
        "catch",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Throwable",
        "Throwable",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Of",
        "Of",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Type",
        "Type",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "Throwing",
        "Throwing",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Callable",
        "Callable",
        "equal"
      ],
      [
        "should",
        "should",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Raise",
        "Raise",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Throwable",
        "Throwable",
        "equal"
      ],
      [
        ",",
        ",",
        "equal"
      ],
      [
        "Class",
        "Class",
        "equal"
      ],
      [
        "<",
        "<",
        "equal"
      ],
      [
        "THROWABLE",
        "THROWABLE",
        "equal"
      ],
      [
        ">",
        ">",
        "equal"
      ],
      [
        "type",
        "type",
        "equal"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        "{",
        "{",
        "equal"
      ],
      [
        "return",
        "return",
        "equal"
      ],
      [
        "Assertions",
        "Assertions",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "For",
        "For",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Class",
        "Class",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Types",
        "Types",
        "equal"
      ],
      [
        ".",
        ".",
        "equal"
      ],
      [
        "catch",
        "catch",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Throwable",
        "Throwable",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Of",
        "Of",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Type",
        "Type",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "",
        "type",
        "insert"
      ],
      [
        "",
        ",",
        "insert"
      ],
      [
        "should",
        "should",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Raise",
        "Raise",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Throwable",
        "Throwable",
        "equal"
      ],
      [
        ",",
        "",
        "delete"
      ],
      [
        "type",
        "",
        "delete"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        ";",
        ";",
        "equal"
      ],
      [
        "}",
        "}",
        "equal"
      ]
    ],
    "CEPROT_gen_test_tgt": "@Test\n  void catchThrowableOfType_should_fail_with_good_message_if_wrong_type() {\n    // GIVEN\n    ThrowingCallable code = () -> catchThrowableOfType(raisingException(\"boom!!\"), RuntimeException.class, Exception.class);\n    // WHEN\n    AssertionError assertionError = expectAssertionError(code);\n    // THEN\n    assertThat(assertionError).hasMessageContainingAll(RuntimeException.class.getName(), Exception.class.getName());\n  }\n    // GIVEN\n    ThrowingCallable code = () -> catchThrowableOfType(raisingException(\"boom!!\"), RuntimeException.class"
  },
  "3": {
    "commit_src": "8a7843e2d8621cae892c938996be6c294c3152ce",
    "commit_tgt": "19dc003d9e836563fff6b29d99707656370339a6",
    "changed_tests": [
      "assertj-core/src/test/java/org/assertj/core/internal/UnambiguousRepresentation_Test.java",
      "assertj-core/src/test/java/org/assertj/core/presentation/CompositeRepresentation_Test.java",
      "assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_unambiguousToStringOf_Test.java",
      "assertj-core/src/test/java/org/assertj/core/util/introspection/ClassUtils_areSameClassInDifferentPackages_Test.java"
    ],
    "refer_PR": "assertj_assertj-3223",
    "test_src": ".org.assertj.core.internal.UnambiguousRepresentation_Test#should_use_unambiguousToStringOf_whe_toStringOf_are_equal",
    "test_tgt": [
      ".org.assertj.core.internal.UnambiguousRepresentation_Test#should_use_unambiguousToStringOf_whe_toStringOf_are_equal"
    ],
    "test_src_code": "  @Test\n  void should_use_unambiguousToStringOf_whe_toStringOf_are_equal() {\n    // GIVEN\n    Object actual = new Object();\n    Object expected = new Object();\n    given(representation.toStringOf(actual)).willReturn(\"representation\");\n    given(representation.toStringOf(expected)).willReturn(\"representation\");\n    given(representation.unambiguousToStringOf(actual)).willReturn(\"actual\");\n    given(representation.unambiguousToStringOf(expected)).willReturn(\"expected\");\n    // WHEN\n    UnambiguousRepresentation actualRepresentation = new UnambiguousRepresentation(representation, actual, expected);\n    // THEN\n    then(actualRepresentation.getActual()).isEqualTo(\"actual\");\n    then(actualRepresentation.getExpected()).isEqualTo(\"expected\");\n  }\n",
    "focal_path": "assertj-core/src/main/java/org/assertj/core/internal/UnambiguousRepresentation.java#UnambiguousRepresentation",
    "focal_src": "  public UnambiguousRepresentation(Representation representation, Object actual, Object expected) {\n    String actualRepresentation = representation.toStringOf(actual);\n    String expectedRepresentation = representation.toStringOf(expected);\n\n    boolean sameRepresentation = Objects.equals(actualRepresentation, expectedRepresentation);\n    this.actual = sameRepresentation\n        ? representation.unambiguousToStringOf(actual)\n        : actualRepresentation;\n    this.expected = sameRepresentation\n        ? representation.unambiguousToStringOf(expected)\n        : expectedRepresentation;\n  }\n",
    "focal_tgt": "  public UnambiguousRepresentation(Representation representation, Object actual, Object expected) {\n    String actualRepresentation = representation.toStringOf(actual);\n    String expectedRepresentation = representation.toStringOf(expected);\n\n    boolean sameRepresentation = Objects.equals(actualRepresentation, expectedRepresentation);\n    this.actual = sameRepresentation\n        ? representation.unambiguousToStringOf(actual, false)\n        : actualRepresentation;\n    this.expected = sameRepresentation\n        ? representation.unambiguousToStringOf(expected, false)\n        : expectedRepresentation;\n  }\n",
    "test_id": 3,
    "edit_seq": [
      [
        "public",
        "public",
        "equal"
      ],
      [
        "Unambiguous",
        "Unambiguous",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        "representation",
        "representation",
        "equal"
      ],
      [
        ",",
        ",",
        "equal"
      ],
      [
        "Object",
        "Object",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        ",",
        ",",
        "equal"
      ],
      [
        "Object",
        "Object",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        "{",
        "{",
        "equal"
      ],
      [
        "String",
        "String",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        "=",
        "=",
        "equal"
      ],
      [
        "representation",
        "representation",
        "equal"
      ],
      [
        ".",
        ".",
        "equal"
      ],
      [
        "to",
        "to",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "String",
        "String",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Of",
        "Of",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        ";",
        ";",
        "equal"
      ],
      [
        "String",
        "String",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        "=",
        "=",
        "equal"
      ],
      [
        "representation",
        "representation",
        "equal"
      ],
      [
        ".",
        ".",
        "equal"
      ],
      [
        "to",
        "to",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "String",
        "String",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Of",
        "Of",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        ";",
        ";",
        "equal"
      ],
      [
        "boolean",
        "boolean",
        "equal"
      ],
      [
        "same",
        "same",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        "=",
        "=",
        "equal"
      ],
      [
        "Objects",
        "Objects",
        "equal"
      ],
      [
        ".",
        ".",
        "equal"
      ],
      [
        "equals",
        "equals",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        ",",
        ",",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        ";",
        ";",
        "equal"
      ],
      [
        "this",
        "this",
        "equal"
      ],
      [
        ".",
        ".",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        "=",
        "=",
        "equal"
      ],
      [
        "same",
        "same",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        "?",
        "?",
        "equal"
      ],
      [
        "representation",
        "representation",
        "equal"
      ],
      [
        ".",
        ".",
        "equal"
      ],
      [
        "unambiguous",
        "unambiguous",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "To",
        "To",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "String",
        "String",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Of",
        "Of",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        "",
        ",",
        "insert"
      ],
      [
        "",
        "false",
        "insert"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        ":",
        ":",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        ";",
        ";",
        "equal"
      ],
      [
        "this",
        "this",
        "equal"
      ],
      [
        ".",
        ".",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        "=",
        "=",
        "equal"
      ],
      [
        "same",
        "same",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        "?",
        "?",
        "equal"
      ],
      [
        "representation",
        "representation",
        "equal"
      ],
      [
        ".",
        ".",
        "equal"
      ],
      [
        "unambiguous",
        "unambiguous",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "To",
        "To",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "String",
        "String",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Of",
        "Of",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        "",
        ",",
        "insert"
      ],
      [
        "",
        "false",
        "insert"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        ":",
        ":",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Representation",
        "Representation",
        "equal"
      ],
      [
        ";",
        ";",
        "equal"
      ],
      [
        "}",
        "}",
        "equal"
      ]
    ],
    "CEPROT_gen_test_tgt": "@Test\n  void should_use_unambiguousToStringOf_whe_toStringOf_are_equal() {\n    // GIVEN\n    Object actual = new Object();\n    Object expected = new Object();\n    given(representation.toStringOf(actual)).willReturn(\"representation\");\n    given(representation.toStringOf(expected)).willReturn(\"representation\");\n    given(representation.unambiguousToStringOf(actual)).willReturn(\"actual\");\n    given(representation.unambiguousToStringOf(expected)).willReturn(\"expected\");\n    // WHEN\n    UnambiguousRepresentation actualRepresentation = new Unamb"
  },
  "4": {
    "commit_src": "8a7843e2d8621cae892c938996be6c294c3152ce",
    "commit_tgt": "c6686ddde06d8404517793514ddd67e0781512ee",
    "changed_tests": [
      "assertj-core/src/test/java/org/assertj/core/error/ShouldHaveCauseInstance_create_Test.java",
      "assertj-core/src/test/java/org/assertj/core/internal/throwables/Throwables_assertHasCauseInstanceOf_Test.java"
    ],
    "refer_PR": "assertj_assertj-3392",
    "test_src": ".org.assertj.core.error.ShouldHaveCauseInstance_create_Test#should_create_error_message_for_no_cause",
    "test_tgt": [
      ".org.assertj.core.error.ShouldHaveCauseInstance_create_Test#should_create_error_message_for_no_cause"
    ],
    "test_src_code": "  @Test\n  void should_create_error_message_for_no_cause() {\n    // GIVEN\n    Throwable actual = new RuntimeException();\n    Throwable expected = new IllegalStateException();\n    // WHEN\n    String message = shouldHaveCauseInstance(actual, expected.getClass()).create();\n    // THEN\n    then(message).isEqualTo(\"%nExpecting a throwable with cause being an instance of:%n\" +\n                            \"  %s%n\" +\n                            \"but current throwable has no cause.\", expected);\n  }\n",
    "focal_path": "assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseInstance.java#shouldHaveCauseInstance",
    "focal_src": "  /**\n   * Creates a new <code>{@link org.assertj.core.error.BasicErrorMessageFactory}</code>.\n   * \n   * @param actual the actual value in the failed assertion.\n   * @param expectedCauseType the expected cause type.\n   * @return the created {@code ErrorMessageFactory}.\n   */\n  public static ErrorMessageFactory shouldHaveCauseInstance(Throwable actual,\n                                                            Class<? extends Throwable> expectedCauseType) {\n    return actual.getCause() == null\n        ? new ShouldHaveCauseInstance(expectedCauseType)\n        : new ShouldHaveCauseInstance(actual, expectedCauseType);\n  }\n",
    "focal_tgt": "  /**\n   * Creates a new <code>{@link org.assertj.core.error.BasicErrorMessageFactory}</code>.\n   * \n   * @param actual the actual value in the failed assertion.\n   * @param expectedCauseType the expected cause type.\n   * @return the created {@code ErrorMessageFactory}.\n   */\n  public static ErrorMessageFactory shouldHaveCauseInstance(Throwable actual,\n                                                            Class<? extends Throwable> expectedCauseType) {\n    return actual.getCause() == null\n        ? new ShouldHaveCauseInstance(expectedCauseType, actual)\n        : new ShouldHaveCauseInstance(actual, expectedCauseType);\n  }\n",
    "test_id": 4,
    "edit_seq": [
      [
        "public",
        "public",
        "equal"
      ],
      [
        "static",
        "static",
        "equal"
      ],
      [
        "Error",
        "Error",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Message",
        "Message",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Factory",
        "Factory",
        "equal"
      ],
      [
        "should",
        "should",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Have",
        "Have",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Cause",
        "Cause",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Instance",
        "Instance",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "Throwable",
        "Throwable",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        ",",
        ",",
        "equal"
      ],
      [
        "Class",
        "Class",
        "equal"
      ],
      [
        "<",
        "<",
        "equal"
      ],
      [
        "?",
        "?",
        "equal"
      ],
      [
        "extends",
        "extends",
        "equal"
      ],
      [
        "Throwable",
        "Throwable",
        "equal"
      ],
      [
        ">",
        ">",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Cause",
        "Cause",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Type",
        "Type",
        "equal"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        "{",
        "{",
        "equal"
      ],
      [
        "return",
        "return",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        ".",
        ".",
        "equal"
      ],
      [
        "get",
        "get",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Cause",
        "Cause",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        "==",
        "==",
        "equal"
      ],
      [
        "null",
        "null",
        "equal"
      ],
      [
        "?",
        "?",
        "equal"
      ],
      [
        "new",
        "new",
        "equal"
      ],
      [
        "Should",
        "Should",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Have",
        "Have",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Cause",
        "Cause",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Instance",
        "Instance",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Cause",
        "Cause",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Type",
        "Type",
        "equal"
      ],
      [
        "",
        ",",
        "insert"
      ],
      [
        "",
        "actual",
        "insert"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        ":",
        ":",
        "equal"
      ],
      [
        "new",
        "new",
        "equal"
      ],
      [
        "Should",
        "Should",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Have",
        "Have",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Cause",
        "Cause",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Instance",
        "Instance",
        "equal"
      ],
      [
        "(",
        "(",
        "equal"
      ],
      [
        "actual",
        "actual",
        "equal"
      ],
      [
        ",",
        ",",
        "equal"
      ],
      [
        "expected",
        "expected",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Cause",
        "Cause",
        "equal"
      ],
      [
        "<con>",
        "<con>",
        "equal"
      ],
      [
        "Type",
        "Type",
        "equal"
      ],
      [
        ")",
        ")",
        "equal"
      ],
      [
        ";",
        ";",
        "equal"
      ],
      [
        "}",
        "}",
        "equal"
      ]
    ],
    "CEPROT_gen_test_tgt": "@Test\n  void should_create_error_message_for_no_cause() {\n    // GIVEN\n    Throwable actual = new RuntimeException();\n    Throwable expected = new IllegalStateException();\n    // WHEN\n    String message = shouldHaveCauseInstance(actual, expected.getClass()).create();\n    // THEN\n    then(message).isEqualTo(\"%nExpecting a throwable with cause being an instance of:%n\" +\n                            \"  but current throwable has no cause.\", expected);\n  }\n    // GIVEN\n    Throwable actual = new RuntimeException();\n    Throwable expected = new IllegalStateException();\n   "
  }
}